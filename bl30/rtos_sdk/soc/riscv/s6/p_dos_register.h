/*
 * Copyright (c) 2021-2022 Amlogic, Inc. All rights reserved.
 *
 * SPDX-License-Identifier: MIT
 */

// ----------------------------------------------------------------------
// This file is automatically generated from the script:
//
// ./create_headers_from_dos_params_h.pl
//
// and was applied to the file
//
// ./dos_param.h
//
// DO NOT EDIT!!!!!
// ----------------------------------------------------------------------
//
#ifdef P_DOS_REGISTER_H
#else
#define P_DOS_REGISTER_H

//
// Reading file:  ./dos_param.h
//
//------------------------------------------------------------------------------
// Define all modules' base address under DOS
// APB allocation from 32'hd0050000
//------------------------------------------------------------------------------
// Define base address for VDEC module under DOS:
//  DOS_VDEC_ASSIST_BASE_ADDR       14'h0000
//  DOS_VDEC_MDEC_BASE_ADDR         14'h0900
//  DOS_VDEC_VLD_BASE_ADDR          14'h0c00
//  DOS_VDEC_IQIDCT_BASE_ADDR       14'h0e00
//  DOS_VDEC_VCPU_BASE_ADDR         14'h0300
//  DOS_VDEC_RESERVED_BASE_ADDR     14'h0f00 // Do not use this offset
// Define base address for DOS top-level register module:
//  DOS_TOP_BASE_ADDR               14'h3f00
//------------------------------------------------------------------------------
// VDEC_ASSIST module level register offset
//------------------------------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_VDEC_ASSIST_CBUS_BASE = 0x00
// -----------------------------------------------
#define P_VDEC_ASSIST_MMC_CTRL0                    (volatile uint32_t *)0xfe320004
#define P_VDEC_ASSIST_MMC_CTRL1                    (volatile uint32_t *)0xfe320008
#define P_VDEC_ASSIST_MMC_CTRL2                    (volatile uint32_t *)0xfe32000c
#define P_VDEC_ASSIST_MMC_CTRL3                    (volatile uint32_t *)0xfe320010
// bit[11]  canvas_blk32_wr
// bit[10]  canvas_blk32
// bit[9]   Reserved
// bit[8]   canvas_index_wr
// bit[7:0] canvas_index
#define P_VDEC_ASSIST_CANVAS_BLK32                 (volatile uint32_t *)0xfe320014
#define P_VDEC_ASSIST_AMR1_INT0                    (volatile uint32_t *)0xfe320094
#define P_VDEC_ASSIST_AMR1_INT1                    (volatile uint32_t *)0xfe320098
#define P_VDEC_ASSIST_AMR1_INT2                    (volatile uint32_t *)0xfe32009c
#define P_VDEC_ASSIST_AMR1_INT3                    (volatile uint32_t *)0xfe3200a0
#define P_VDEC_ASSIST_AMR1_INT4                    (volatile uint32_t *)0xfe3200a4
#define P_VDEC_ASSIST_AMR1_INT5                    (volatile uint32_t *)0xfe3200a8
#define P_VDEC_ASSIST_AMR1_INT6                    (volatile uint32_t *)0xfe3200ac
#define P_VDEC_ASSIST_AMR1_INT7                    (volatile uint32_t *)0xfe3200b0
#define P_VDEC_ASSIST_AMR1_INT8                    (volatile uint32_t *)0xfe3200b4
#define P_VDEC_ASSIST_AMR1_INT9                    (volatile uint32_t *)0xfe3200b8
#define P_VDEC_ASSIST_AMR1_INTA                    (volatile uint32_t *)0xfe3200bc
#define P_VDEC_ASSIST_AMR1_INTB                    (volatile uint32_t *)0xfe3200c0
#define P_VDEC_ASSIST_AMR1_INTC                    (volatile uint32_t *)0xfe3200c4
#define P_VDEC_ASSIST_AMR1_INTD                    (volatile uint32_t *)0xfe3200c8
#define P_VDEC_ASSIST_AMR1_INTE                    (volatile uint32_t *)0xfe3200cc
#define P_VDEC_ASSIST_AMR1_INTF                    (volatile uint32_t *)0xfe3200d0
#define P_VDEC_ASSIST_AMR2_INT0                    (volatile uint32_t *)0xfe3200d4
#define P_VDEC_ASSIST_AMR2_INT1                    (volatile uint32_t *)0xfe3200d8
#define P_VDEC_ASSIST_AMR2_INT2                    (volatile uint32_t *)0xfe3200dc
#define P_VDEC_ASSIST_AMR2_INT3                    (volatile uint32_t *)0xfe3200e0
#define P_VDEC_ASSIST_AMR2_INT4                    (volatile uint32_t *)0xfe3200e4
#define P_VDEC_ASSIST_AMR2_INT5                    (volatile uint32_t *)0xfe3200e8
#define P_VDEC_ASSIST_AMR2_INT6                    (volatile uint32_t *)0xfe3200ec
#define P_VDEC_ASSIST_AMR2_INT7                    (volatile uint32_t *)0xfe3200f0
#define P_VDEC_ASSIST_AMR2_INT8                    (volatile uint32_t *)0xfe3200f4
#define P_VDEC_ASSIST_AMR2_INT9                    (volatile uint32_t *)0xfe3200f8
#define P_VDEC_ASSIST_AMR2_INTA                    (volatile uint32_t *)0xfe3200fc
#define P_VDEC_ASSIST_AMR2_INTB                    (volatile uint32_t *)0xfe320100
#define P_VDEC_ASSIST_AMR2_INTC                    (volatile uint32_t *)0xfe320104
#define P_VDEC_ASSIST_AMR2_INTD                    (volatile uint32_t *)0xfe320108
#define P_VDEC_ASSIST_AMR2_INTE                    (volatile uint32_t *)0xfe32010c
#define P_VDEC_ASSIST_AMR2_INTF                    (volatile uint32_t *)0xfe320110
#define P_VDEC_ASSIST_MBX_SSEL                     (volatile uint32_t *)0xfe320114
// write - request disable to each of 16 channels
// read  - disable status of each of 16 channels ( 1 - disabled)
#define P_VDEC_ASSIST_DBUS_DISABLE                 (volatile uint32_t *)0xfe320118
// support up to 15 configurable high 2-bits according to id
// 8 bits for one set - {high-bits[1:0], id[5:0]}
// bit[7:0] of VDEC_AXI34_CONFIG_0 is special for default and rw control
// bit[7:6] default wr high 2bits ( For no match found id)
// bit[5:4] default rd high 2bits ( For no match found id)
// bit[3:2] config[3:2] if write only
// bit[1:0] config[1:0] if read only
#define P_VDEC_AXI34_CONFIG_0                      (volatile uint32_t *)0xfe320140
#define P_VDEC_AXI34_CONFIG_1                      (volatile uint32_t *)0xfe320144
#define P_VDEC_AXI34_CONFIG_2                      (volatile uint32_t *)0xfe320148
#define P_VDEC_AXI34_CONFIG_3                      (volatile uint32_t *)0xfe32014c
#define P_VDEC_AXI34_CONFIG_4                      (volatile uint32_t *)0xfe320150
#define P_VDEC_AXI34_CONFIG_5                      (volatile uint32_t *)0xfe320154
#define P_VDEC_AXI34_CONFIG_6                      (volatile uint32_t *)0xfe320158
#define P_VDEC_AXI34_CONFIG_7                      (volatile uint32_t *)0xfe32015c
#define P_VDEC_ASSIST_TIMER0_LO                    (volatile uint32_t *)0xfe320180
#define P_VDEC_ASSIST_TIMER0_HI                    (volatile uint32_t *)0xfe320184
#define P_VDEC_ASSIST_TIMER1_LO                    (volatile uint32_t *)0xfe320188
#define P_VDEC_ASSIST_TIMER1_HI                    (volatile uint32_t *)0xfe32018c
#define P_VDEC_ASSIST_DMA_INT                      (volatile uint32_t *)0xfe320190
#define P_VDEC_ASSIST_DMA_INT_MSK                  (volatile uint32_t *)0xfe320194
#define P_VDEC_ASSIST_DMA_INT2                     (volatile uint32_t *)0xfe320198
#define P_VDEC_ASSIST_DMA_INT_MSK2                 (volatile uint32_t *)0xfe32019c
#define P_VDEC_ASSIST_MBOX0_IRQ_REG                (volatile uint32_t *)0xfe3201c0
#define P_VDEC_ASSIST_MBOX0_CLR_REG                (volatile uint32_t *)0xfe3201c4
#define P_VDEC_ASSIST_MBOX0_MASK                   (volatile uint32_t *)0xfe3201c8
#define P_VDEC_ASSIST_MBOX0_FIQ_SEL                (volatile uint32_t *)0xfe3201cc
#define P_VDEC_ASSIST_MBOX1_IRQ_REG                (volatile uint32_t *)0xfe3201d0
#define P_VDEC_ASSIST_MBOX1_CLR_REG                (volatile uint32_t *)0xfe3201d4
#define P_VDEC_ASSIST_MBOX1_MASK                   (volatile uint32_t *)0xfe3201d8
#define P_VDEC_ASSIST_MBOX1_FIQ_SEL                (volatile uint32_t *)0xfe3201dc
#define P_VDEC_ASSIST_MBOX2_IRQ_REG                (volatile uint32_t *)0xfe3201e0
#define P_VDEC_ASSIST_MBOX2_CLR_REG                (volatile uint32_t *)0xfe3201e4
#define P_VDEC_ASSIST_MBOX2_MASK                   (volatile uint32_t *)0xfe3201e8
#define P_VDEC_ASSIST_MBOX2_FIQ_SEL                (volatile uint32_t *)0xfe3201ec
//------------------------------------------------------------------------------
// VDEC2_ASSIST module level register offset
//------------------------------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_VDEC2_ASSIST_CBUS_BASE = 0x00
// -----------------------------------------------
#define P_VDEC2_ASSIST_MMC_CTRL0                   (volatile uint32_t *)0xfe328004
#define P_VDEC2_ASSIST_MMC_CTRL1                   (volatile uint32_t *)0xfe328008
#define P_VDEC2_ASSIST_AMR1_INT0                   (volatile uint32_t *)0xfe328094
#define P_VDEC2_ASSIST_AMR1_INT1                   (volatile uint32_t *)0xfe328098
#define P_VDEC2_ASSIST_AMR1_INT2                   (volatile uint32_t *)0xfe32809c
#define P_VDEC2_ASSIST_AMR1_INT3                   (volatile uint32_t *)0xfe3280a0
#define P_VDEC2_ASSIST_AMR1_INT4                   (volatile uint32_t *)0xfe3280a4
#define P_VDEC2_ASSIST_AMR1_INT5                   (volatile uint32_t *)0xfe3280a8
#define P_VDEC2_ASSIST_AMR1_INT6                   (volatile uint32_t *)0xfe3280ac
#define P_VDEC2_ASSIST_AMR1_INT7                   (volatile uint32_t *)0xfe3280b0
#define P_VDEC2_ASSIST_AMR1_INT8                   (volatile uint32_t *)0xfe3280b4
#define P_VDEC2_ASSIST_AMR1_INT9                   (volatile uint32_t *)0xfe3280b8
#define P_VDEC2_ASSIST_AMR1_INTA                   (volatile uint32_t *)0xfe3280bc
#define P_VDEC2_ASSIST_AMR1_INTB                   (volatile uint32_t *)0xfe3280c0
#define P_VDEC2_ASSIST_AMR1_INTC                   (volatile uint32_t *)0xfe3280c4
#define P_VDEC2_ASSIST_AMR1_INTD                   (volatile uint32_t *)0xfe3280c8
#define P_VDEC2_ASSIST_AMR1_INTE                   (volatile uint32_t *)0xfe3280cc
#define P_VDEC2_ASSIST_AMR1_INTF                   (volatile uint32_t *)0xfe3280d0
#define P_VDEC2_ASSIST_AMR2_INT0                   (volatile uint32_t *)0xfe3280d4
#define P_VDEC2_ASSIST_AMR2_INT1                   (volatile uint32_t *)0xfe3280d8
#define P_VDEC2_ASSIST_AMR2_INT2                   (volatile uint32_t *)0xfe3280dc
#define P_VDEC2_ASSIST_AMR2_INT3                   (volatile uint32_t *)0xfe3280e0
#define P_VDEC2_ASSIST_AMR2_INT4                   (volatile uint32_t *)0xfe3280e4
#define P_VDEC2_ASSIST_AMR2_INT5                   (volatile uint32_t *)0xfe3280e8
#define P_VDEC2_ASSIST_AMR2_INT6                   (volatile uint32_t *)0xfe3280ec
#define P_VDEC2_ASSIST_AMR2_INT7                   (volatile uint32_t *)0xfe3280f0
#define P_VDEC2_ASSIST_AMR2_INT8                   (volatile uint32_t *)0xfe3280f4
#define P_VDEC2_ASSIST_AMR2_INT9                   (volatile uint32_t *)0xfe3280f8
#define P_VDEC2_ASSIST_AMR2_INTA                   (volatile uint32_t *)0xfe3280fc
#define P_VDEC2_ASSIST_AMR2_INTB                   (volatile uint32_t *)0xfe328100
#define P_VDEC2_ASSIST_AMR2_INTC                   (volatile uint32_t *)0xfe328104
#define P_VDEC2_ASSIST_AMR2_INTD                   (volatile uint32_t *)0xfe328108
#define P_VDEC2_ASSIST_AMR2_INTE                   (volatile uint32_t *)0xfe32810c
#define P_VDEC2_ASSIST_AMR2_INTF                   (volatile uint32_t *)0xfe328110
#define P_VDEC2_ASSIST_MBX_SSEL                    (volatile uint32_t *)0xfe328114
#define P_VDEC2_ASSIST_TIMER0_LO                   (volatile uint32_t *)0xfe328180
#define P_VDEC2_ASSIST_TIMER0_HI                   (volatile uint32_t *)0xfe328184
#define P_VDEC2_ASSIST_TIMER1_LO                   (volatile uint32_t *)0xfe328188
#define P_VDEC2_ASSIST_TIMER1_HI                   (volatile uint32_t *)0xfe32818c
#define P_VDEC2_ASSIST_DMA_INT                     (volatile uint32_t *)0xfe328190
#define P_VDEC2_ASSIST_DMA_INT_MSK                 (volatile uint32_t *)0xfe328194
#define P_VDEC2_ASSIST_DMA_INT2                    (volatile uint32_t *)0xfe328198
#define P_VDEC2_ASSIST_DMA_INT_MSK2                (volatile uint32_t *)0xfe32819c
#define P_VDEC2_ASSIST_MBOX0_IRQ_REG               (volatile uint32_t *)0xfe3281c0
#define P_VDEC2_ASSIST_MBOX0_CLR_REG               (volatile uint32_t *)0xfe3281c4
#define P_VDEC2_ASSIST_MBOX0_MASK                  (volatile uint32_t *)0xfe3281c8
#define P_VDEC2_ASSIST_MBOX0_FIQ_SEL               (volatile uint32_t *)0xfe3281cc
#define P_VDEC2_ASSIST_MBOX1_IRQ_REG               (volatile uint32_t *)0xfe3281d0
#define P_VDEC2_ASSIST_MBOX1_CLR_REG               (volatile uint32_t *)0xfe3281d4
#define P_VDEC2_ASSIST_MBOX1_MASK                  (volatile uint32_t *)0xfe3281d8
#define P_VDEC2_ASSIST_MBOX1_FIQ_SEL               (volatile uint32_t *)0xfe3281dc
#define P_VDEC2_ASSIST_MBOX2_IRQ_REG               (volatile uint32_t *)0xfe3281e0
#define P_VDEC2_ASSIST_MBOX2_CLR_REG               (volatile uint32_t *)0xfe3281e4
#define P_VDEC2_ASSIST_MBOX2_MASK                  (volatile uint32_t *)0xfe3281e8
#define P_VDEC2_ASSIST_MBOX2_FIQ_SEL               (volatile uint32_t *)0xfe3281ec
//------------------------------------------------------------------------------
// HCODEC_ASSIST module level register offset
//------------------------------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_HCODEC_ASSIST_CBUS_BASE = 0x00
// -----------------------------------------------
#define P_HCODEC_ASSIST_MMC_CTRL0                  (volatile uint32_t *)0xfe324004
#define P_HCODEC_HCODEC_ASSIST_MMC_CTRL0           (volatile uint32_t *)0xfe324004
#define P_HCODEC_ASSIST_MMC_CTRL1                  (volatile uint32_t *)0xfe324008
#define P_HCODEC_HCODEC_ASSIST_MMC_CTRL1           (volatile uint32_t *)0xfe324008
#define P_HCODEC_ASSIST_MMC_CTRL2                  (volatile uint32_t *)0xfe32400c
#define P_HCODEC_HCODEC_ASSIST_MMC_CTRL2           (volatile uint32_t *)0xfe32400c
#define P_HCODEC_ASSIST_MMC_CTRL3                  (volatile uint32_t *)0xfe324010
#define P_HCODEC_HCODEC_ASSIST_MMC_CTRL3           (volatile uint32_t *)0xfe324010
// bit[11]  canvas_blk32_wr
// bit[10]  canvas_blk32
// bit[9]   Reserved
// bit[8]   canvas_index_wr
// bit[7:0] canvas_index
#define P_HCODEC_ASSIST_CANVAS_BLK32               (volatile uint32_t *)0xfe324014
#define P_HCODEC_HCODEC_ASSIST_CANVAS_BLK32        (volatile uint32_t *)0xfe324014
//cfg_soft_rst = mfdin_reg0_crst[0]; // Soft Reset
//cfg_cg_cfe   = mfdin_reg0_crst[1]; // Clock Gating Forcing Enable
//cfg_dbuf_rst = mfdin_reg0_crst[2]; // Reset DBUF information
#define P_HCODEC_MFDIN_REG0_CRST                   (volatile uint32_t *)0xfe324020
#define P_HCODEC_HCODEC_MFDIN_REG0_CRST            (volatile uint32_t *)0xfe324020
//cfg_iformat       = mfdin_reg1_ctrl[3:0]; // Data In Format: 0 :CANVAS 422 YCbCr<-one canvas,
                                                     //        1 :CANVAS 444 YCbCr(or RGB)<-one canvas,
                                                     //        2 :CANVAS 420 Y<-one CrCb<-one (NV21)
                                                     //        3 :CANVAS 420 Y<-one CbCr<-one (NV12)
                                                     //        4 :CANVAS 420 Y<-one Cb<-one Cr<-one
                                                     //        5 :CANVAS 444 Y<-one Cb<-one Cr<-one
                                                     //        6 : Reserved for other canvas mode
                                                     //        7 : should combine with cfg_ifmt_extra, for 10-12bits
                                                     //        8 :LINEAR RGB888 (24bit)
                                                     //        9 :LINEAR RGB565 (16bit)
                                                     //        10:LINEAR YUV422
                                                     //        11:LINEAR YUV420 (Note:Legacy mode not supported)
                                                     //        12~15: Reserved for other linear mode
//cfg_oformat       = mfdin_reg1_ctrl[5:4];  // Data Out Format: 0:420 1:422 2:444 3:reserved
//cfg_dsample_enable= mfdin_reg1_ctrl[6];    // Downsample Enable
//cfg_dsample_trunc = mfdin_reg1_ctrl[7];    // Downsample Addition Option: 0:Round 1:Truncated
//cfg_block_ysize   = mfdin_reg1_ctrl[8];    // 0:block-y-size=16, 1:block-y-size=8(for JPEG's efficiency)
//cfg_interp_enable = mfdin_reg1_ctrl[9];    // Chroma Interpolation Enable
//cfg_interp_mode   = mfdin_reg1_ctrl[11:10];// 0:average round 1:average truncated 2:repeat left 3:repeat right
//cfg_r2y_enable    = mfdin_reg1_ctrl[12];   // RGb->YUV Enable
//cfg_r2y_mode      = mfdin_reg1_ctrl[14:13];// RGb->YUV Mode
//cfg_rgb565_mode   = mfdin_reg1_ctrl[15];   // RGB565 mode: 0:fill zero in tail 1:fill zero in head
//cfg_ifmt_extra    = mfdin_reg1_ctrl[17:16];// when cfg_iformat==7,
                                             //        0: CANVAS 12bit 422, YCbCr<-one canvas{...Y1[11:0],C1[11:0],Y0[11:0],C0[11:0]}
                                             //        1: CANVAS 10bit 444, YCbCr<-one canvas{...2'b0,Y0[9:0],U0[9:0],V0[9:0]}
                                             //        2: CANVAS 10bit 422, YCbCr<-one canvas{...Y1[9:0],C1[9:0],Y0[9:0],C0[9:0]}
//cfg_reserved1     = mfdin_reg1_ctrl[18];   // Reserved
//cfg_nr_enable     = mfdin_reg1_ctrl[19];   // Noise Reduction Enable
//cfg_outofpic      = mfdin_reg1_ctrl[28:20];// Out Of Picture Control: [8]mode:0:extend 1:fixed, [7:0]fixed value
//cfg_rd_blktype    = mfdin_reg1_ctrl[30:29];// Block Type: 0:H264_I_PIC_ALL_4x4, 1:H264_P_PIC_Y_16x16_C_8x8, 2:JPEG_ALL_8x8, 3:Reserved
//cfg_rd_nonycintl  = mfdin_reg1_ctrl[31];   // 0:YC interleaved 1:YC non-interleaved(for JPEG)
#define P_HCODEC_MFDIN_REG1_CTRL                   (volatile uint32_t *)0xfe324024
#define P_HCODEC_HCODEC_MFDIN_REG1_CTRL            (volatile uint32_t *)0xfe324024
//mfdin_reg2: DEBUG Only Status
#define P_HCODEC_MFDIN_REG2_STAT                   (volatile uint32_t *)0xfe324028
#define P_HCODEC_HCODEC_MFDIN_REG2_STAT            (volatile uint32_t *)0xfe324028
//cfg_canvas_index0  = mfdin_reg3_canv[7:0];  //canvas index 0
//cfg_canvas_index1  = mfdin_reg3_canv[15:8]; //canvas index 1
//cfg_canvas_index2  = mfdin_reg3_canv[23:16];//canvas index 2
//cfg_canv_idx0_bppx = mfdin_reg3_canv[25:24];//canvas bytes per pixel in x direction for index0, 0:half 1:1 2:2 3:3
//cfg_canv_idx1_bppx = mfdin_reg3_canv[27:26];//canvas bytes per pixel in x direction for index1, 0:half 1:1 2:2 3:3
//cfg_canv_idx0_bppy = mfdin_reg3_canv[29:28];//canvas bytes per pixel in y direction for index0, 0:half 1:1 2:2 3:3
//cfg_canv_idx1_bppy = mfdin_reg3_canv[31:30];//canvas bytes per pixel in y direction for index1, 0:half 1:1 2:2 3:3
#define P_HCODEC_MFDIN_REG3_CANV                   (volatile uint32_t *)0xfe32402c
#define P_HCODEC_HCODEC_MFDIN_REG3_CANV            (volatile uint32_t *)0xfe32402c
//cfg_bytes_per_line  = mfdin_reg4_lnr0[15:0];  //linear Bytes per line
//cfg_linear_bytes4p  = mfdin_reg4_lnr0[17:16]; //linear (Bytes per pixel) - 1
//cfg_linear_dbl2line = mfdin_reg4_lnr0[18];    //linear double size for odd line
#define P_HCODEC_MFDIN_REG4_LNR0                   (volatile uint32_t *)0xfe324030
#define P_HCODEC_HCODEC_MFDIN_REG4_LNR0            (volatile uint32_t *)0xfe324030
//cfg_base_address    = mfdin_reg5_lnr1[31:0];  //linear base address
#define P_HCODEC_MFDIN_REG5_LNR1                   (volatile uint32_t *)0xfe324034
#define P_HCODEC_HCODEC_MFDIN_REG5_LNR1            (volatile uint32_t *)0xfe324034
//assign cfg_r2y_trunc     = mfdin_reg6_dcfg[9];   //RGb->YUV Addition Option: 0:Round 1:Truncated
//assign cfg_dma_ugt       = mfdin_reg6_dcfg[8];   //DMA Urgent
//assign cfg_dma_thread_id = mfdin_reg6_dcfg[7:6]; //DMA Thread ID
//assign cfg_dma_burst_num = mfdin_reg6_dcfg[5:0]; //DMA Burst Number
#define P_HCODEC_MFDIN_REG6_DCFG                   (volatile uint32_t *)0xfe324038
#define P_HCODEC_HCODEC_MFDIN_REG6_DCFG            (volatile uint32_t *)0xfe324038
//cfg_soft_cmd = mfdin_reg7_scmd; // Soft Command [28]selfcleared start,[27:14]dmb_x,[13:0]dmb_y
#define P_HCODEC_MFDIN_REG7_SCMD                   (volatile uint32_t *)0xfe32403c
#define P_HCODEC_HCODEC_MFDIN_REG7_SCMD            (volatile uint32_t *)0xfe32403c
//cfg_pic_xsize = mfdin_reg8_dmbl[23:12]; //pixel (x,y) at the beginning of last dmb in the picture, picture x size
//cfg_pic_ysize = mfdin_reg8_dmbl[11:0];  //picture y size
#define P_HCODEC_MFDIN_REG8_DMBL                   (volatile uint32_t *)0xfe324040
#define P_HCODEC_HCODEC_MFDIN_REG8_DMBL            (volatile uint32_t *)0xfe324040
//cfg_endian = mfdin_reg9_endn; //Endian Control
#define P_HCODEC_MFDIN_REG9_ENDN                   (volatile uint32_t *)0xfe324044
#define P_HCODEC_HCODEC_MFDIN_REG9_ENDN            (volatile uint32_t *)0xfe324044
//cfg_canv_biasx = mfdin_rega_cav1[23:12]; //canvas bias address x
//cfg_canv_biasy = mfdin_rega_cav1[11:0];  //canvas bias address y
#define P_HCODEC_MFDIN_REGA_CAV1                   (volatile uint32_t *)0xfe324048
#define P_HCODEC_HCODEC_MFDIN_REGA_CAV1            (volatile uint32_t *)0xfe324048
//cfg_amp_en = mfdin_regb_ampc[24];      //Amplitude Enable
//cfg_amp_cy = mfdin_regb_ampc[23:16];   //Amplitude Coeff Y
//cfg_amp_cu = mfdin_regb_ampc[15:8];    //Amplitude Coeff U
//cfg_amp_cv = mfdin_regb_ampc[7:0];     //Amplitude Coeff V
#define P_HCODEC_MFDIN_REGB_AMPC                   (volatile uint32_t *)0xfe32404c
#define P_HCODEC_HCODEC_MFDIN_REGB_AMPC            (volatile uint32_t *)0xfe32404c
//cfg_mb_end = mfdin_regc_mblp; // Soft Command [28]mb end enable,[27:14]dmb_x,[13:0]dmb_y
#define P_HCODEC_MFDIN_REGC_MBLP                   (volatile uint32_t *)0xfe324050
#define P_HCODEC_HCODEC_MFDIN_REGC_MBLP            (volatile uint32_t *)0xfe324050
//       cfg_y_snr_en               = mfdin_reg0d[0];
//       cfg_y_snr_err_norm         = mfdin_reg0d[1];
// [3:0] cfg_y_snr_gau_bld_core     = mfdin_reg0d[5:2];
// [7:0] cfg_y_snr_gau_bld_ofst     = mfdin_reg0d[13:6];
// [5:0] cfg_y_snr_gau_bld_rate     = mfdin_reg0d[19:14];
// [5:0] cfg_y_snr_gau_alp0_min     = mfdin_reg0d[25:20];
// [5:0] cfg_y_snr_gau_alp0_max     = mfdin_reg0d[31:26];
#define P_HCODEC_MFDIN_REG0D                       (volatile uint32_t *)0xfe324054
#define P_HCODEC_HCODEC_MFDIN_REG0D                (volatile uint32_t *)0xfe324054
//       cfg_y_tnr_en               = mfdin_reg0e[0];
//       cfg_y_tnr_mc_en            = mfdin_reg0e[1];
//       cfg_y_tnr_txt_mode         = mfdin_reg0e[2];
// [3:0] cfg_y_tnr_mot_sad_margin   = mfdin_reg0e[6:3];
// [5:0] cfg_y_tnr_alpha_min        = mfdin_reg0e[12:7];
// [5:0] cfg_y_tnr_alpha_max        = mfdin_reg0e[18:13];
// [5:0] cfg_y_tnr_deghost_os       = mfdin_reg0e[24:19];
#define P_HCODEC_MFDIN_REG0E                       (volatile uint32_t *)0xfe324058
#define P_HCODEC_HCODEC_MFDIN_REG0E                (volatile uint32_t *)0xfe324058
// [3:0] cfg_y_tnr_mot_cortxt_rate  = mfdin_reg0f[3:0];
// [7:0] cfg_y_tnr_mot_distxt_ofst  = mfdin_reg0f[15:8];
// [3:0] cfg_y_tnr_mot_distxt_rate  = mfdin_reg0f[7:4];
// [7:0] cfg_y_tnr_mot_dismot_ofst  = mfdin_reg0f[23:16];
// [7:0] cfg_y_tnr_mot_frcsad_lock  = mfdin_reg0f[31:24];
#define P_HCODEC_MFDIN_REG0F                       (volatile uint32_t *)0xfe32405c
#define P_HCODEC_HCODEC_MFDIN_REG0F                (volatile uint32_t *)0xfe32405c
// [7:0] cfg_y_tnr_mot2alp_frc_gain = mfdin_reg10[7:0];
// [7:0] cfg_y_tnr_mot2alp_nrm_gain = mfdin_reg10[15:8];
// [7:0] cfg_y_tnr_mot2alp_dis_gain = mfdin_reg10[23:16];
// [5:0] cfg_y_tnr_mot2alp_dis_ofst = mfdin_reg10[29:24];
#define P_HCODEC_MFDIN_REG10                       (volatile uint32_t *)0xfe324060
#define P_HCODEC_HCODEC_MFDIN_REG10                (volatile uint32_t *)0xfe324060
// [7:0] cfg_y_bld_beta2alp_rate    = mfdin_reg11[7:0];
// [5:0] cfg_y_bld_beta_min         = mfdin_reg11[13:8];
// [5:0] cfg_y_bld_beta_max         = mfdin_reg11[19:14];
#define P_HCODEC_MFDIN_REG11                       (volatile uint32_t *)0xfe324064
#define P_HCODEC_HCODEC_MFDIN_REG11                (volatile uint32_t *)0xfe324064
// REG12~16 for Chroma, same as Luma
#define P_HCODEC_MFDIN_REG12                       (volatile uint32_t *)0xfe324068
#define P_HCODEC_HCODEC_MFDIN_REG12                (volatile uint32_t *)0xfe324068
#define P_HCODEC_MFDIN_REG13                       (volatile uint32_t *)0xfe32406c
#define P_HCODEC_HCODEC_MFDIN_REG13                (volatile uint32_t *)0xfe32406c
#define P_HCODEC_MFDIN_REG14                       (volatile uint32_t *)0xfe324070
#define P_HCODEC_HCODEC_MFDIN_REG14                (volatile uint32_t *)0xfe324070
#define P_HCODEC_MFDIN_REG15                       (volatile uint32_t *)0xfe324074
#define P_HCODEC_HCODEC_MFDIN_REG15                (volatile uint32_t *)0xfe324074
#define P_HCODEC_MFDIN_REG16                       (volatile uint32_t *)0xfe324078
#define P_HCODEC_HCODEC_MFDIN_REG16                (volatile uint32_t *)0xfe324078
#define P_HCODEC_MFDIN_REG17                       (volatile uint32_t *)0xfe32407c
#define P_HCODEC_HCODEC_MFDIN_REG17                (volatile uint32_t *)0xfe32407c
#define P_HCODEC_MFDIN_REG18                       (volatile uint32_t *)0xfe324080
#define P_HCODEC_HCODEC_MFDIN_REG18                (volatile uint32_t *)0xfe324080
#define P_HCODEC_MFDIN_REG19                       (volatile uint32_t *)0xfe324084
#define P_HCODEC_HCODEC_MFDIN_REG19                (volatile uint32_t *)0xfe324084
#define P_HCODEC_ASSIST_AMR1_INT0                  (volatile uint32_t *)0xfe324094
#define P_HCODEC_HCODEC_ASSIST_AMR1_INT0           (volatile uint32_t *)0xfe324094
#define P_HCODEC_ASSIST_AMR1_INT1                  (volatile uint32_t *)0xfe324098
#define P_HCODEC_HCODEC_ASSIST_AMR1_INT1           (volatile uint32_t *)0xfe324098
#define P_HCODEC_ASSIST_AMR1_INT2                  (volatile uint32_t *)0xfe32409c
#define P_HCODEC_HCODEC_ASSIST_AMR1_INT2           (volatile uint32_t *)0xfe32409c
#define P_HCODEC_ASSIST_AMR1_INT3                  (volatile uint32_t *)0xfe3240a0
#define P_HCODEC_HCODEC_ASSIST_AMR1_INT3           (volatile uint32_t *)0xfe3240a0
#define P_HCODEC_ASSIST_AMR1_INT4                  (volatile uint32_t *)0xfe3240a4
#define P_HCODEC_HCODEC_ASSIST_AMR1_INT4           (volatile uint32_t *)0xfe3240a4
#define P_HCODEC_ASSIST_AMR1_INT5                  (volatile uint32_t *)0xfe3240a8
#define P_HCODEC_HCODEC_ASSIST_AMR1_INT5           (volatile uint32_t *)0xfe3240a8
#define P_HCODEC_ASSIST_AMR1_INT6                  (volatile uint32_t *)0xfe3240ac
#define P_HCODEC_HCODEC_ASSIST_AMR1_INT6           (volatile uint32_t *)0xfe3240ac
#define P_HCODEC_ASSIST_AMR1_INT7                  (volatile uint32_t *)0xfe3240b0
#define P_HCODEC_HCODEC_ASSIST_AMR1_INT7           (volatile uint32_t *)0xfe3240b0
#define P_HCODEC_ASSIST_AMR1_INT8                  (volatile uint32_t *)0xfe3240b4
#define P_HCODEC_HCODEC_ASSIST_AMR1_INT8           (volatile uint32_t *)0xfe3240b4
#define P_HCODEC_ASSIST_AMR1_INT9                  (volatile uint32_t *)0xfe3240b8
#define P_HCODEC_HCODEC_ASSIST_AMR1_INT9           (volatile uint32_t *)0xfe3240b8
#define P_HCODEC_ASSIST_AMR1_INTA                  (volatile uint32_t *)0xfe3240bc
#define P_HCODEC_HCODEC_ASSIST_AMR1_INTA           (volatile uint32_t *)0xfe3240bc
#define P_HCODEC_ASSIST_AMR1_INTB                  (volatile uint32_t *)0xfe3240c0
#define P_HCODEC_HCODEC_ASSIST_AMR1_INTB           (volatile uint32_t *)0xfe3240c0
#define P_HCODEC_ASSIST_AMR1_INTC                  (volatile uint32_t *)0xfe3240c4
#define P_HCODEC_HCODEC_ASSIST_AMR1_INTC           (volatile uint32_t *)0xfe3240c4
#define P_HCODEC_ASSIST_AMR1_INTD                  (volatile uint32_t *)0xfe3240c8
#define P_HCODEC_HCODEC_ASSIST_AMR1_INTD           (volatile uint32_t *)0xfe3240c8
#define P_HCODEC_ASSIST_AMR1_INTE                  (volatile uint32_t *)0xfe3240cc
#define P_HCODEC_HCODEC_ASSIST_AMR1_INTE           (volatile uint32_t *)0xfe3240cc
#define P_HCODEC_ASSIST_AMR1_INTF                  (volatile uint32_t *)0xfe3240d0
#define P_HCODEC_HCODEC_ASSIST_AMR1_INTF           (volatile uint32_t *)0xfe3240d0
#define P_HCODEC_ASSIST_AMR2_INT0                  (volatile uint32_t *)0xfe3240d4
#define P_HCODEC_HCODEC_ASSIST_AMR2_INT0           (volatile uint32_t *)0xfe3240d4
#define P_HCODEC_ASSIST_AMR2_INT1                  (volatile uint32_t *)0xfe3240d8
#define P_HCODEC_HCODEC_ASSIST_AMR2_INT1           (volatile uint32_t *)0xfe3240d8
#define P_HCODEC_ASSIST_AMR2_INT2                  (volatile uint32_t *)0xfe3240dc
#define P_HCODEC_HCODEC_ASSIST_AMR2_INT2           (volatile uint32_t *)0xfe3240dc
#define P_HCODEC_ASSIST_AMR2_INT3                  (volatile uint32_t *)0xfe3240e0
#define P_HCODEC_HCODEC_ASSIST_AMR2_INT3           (volatile uint32_t *)0xfe3240e0
#define P_HCODEC_ASSIST_AMR2_INT4                  (volatile uint32_t *)0xfe3240e4
#define P_HCODEC_HCODEC_ASSIST_AMR2_INT4           (volatile uint32_t *)0xfe3240e4
#define P_HCODEC_ASSIST_AMR2_INT5                  (volatile uint32_t *)0xfe3240e8
#define P_HCODEC_HCODEC_ASSIST_AMR2_INT5           (volatile uint32_t *)0xfe3240e8
#define P_HCODEC_ASSIST_AMR2_INT6                  (volatile uint32_t *)0xfe3240ec
#define P_HCODEC_HCODEC_ASSIST_AMR2_INT6           (volatile uint32_t *)0xfe3240ec
#define P_HCODEC_ASSIST_AMR2_INT7                  (volatile uint32_t *)0xfe3240f0
#define P_HCODEC_HCODEC_ASSIST_AMR2_INT7           (volatile uint32_t *)0xfe3240f0
#define P_HCODEC_ASSIST_AMR2_INT8                  (volatile uint32_t *)0xfe3240f4
#define P_HCODEC_HCODEC_ASSIST_AMR2_INT8           (volatile uint32_t *)0xfe3240f4
#define P_HCODEC_ASSIST_AMR2_INT9                  (volatile uint32_t *)0xfe3240f8
#define P_HCODEC_HCODEC_ASSIST_AMR2_INT9           (volatile uint32_t *)0xfe3240f8
#define P_HCODEC_ASSIST_AMR2_INTA                  (volatile uint32_t *)0xfe3240fc
#define P_HCODEC_HCODEC_ASSIST_AMR2_INTA           (volatile uint32_t *)0xfe3240fc
#define P_HCODEC_ASSIST_AMR2_INTB                  (volatile uint32_t *)0xfe324100
#define P_HCODEC_HCODEC_ASSIST_AMR2_INTB           (volatile uint32_t *)0xfe324100
#define P_HCODEC_ASSIST_AMR2_INTC                  (volatile uint32_t *)0xfe324104
#define P_HCODEC_HCODEC_ASSIST_AMR2_INTC           (volatile uint32_t *)0xfe324104
#define P_HCODEC_ASSIST_AMR2_INTD                  (volatile uint32_t *)0xfe324108
#define P_HCODEC_HCODEC_ASSIST_AMR2_INTD           (volatile uint32_t *)0xfe324108
#define P_HCODEC_ASSIST_AMR2_INTE                  (volatile uint32_t *)0xfe32410c
#define P_HCODEC_HCODEC_ASSIST_AMR2_INTE           (volatile uint32_t *)0xfe32410c
#define P_HCODEC_ASSIST_AMR2_INTF                  (volatile uint32_t *)0xfe324110
#define P_HCODEC_HCODEC_ASSIST_AMR2_INTF           (volatile uint32_t *)0xfe324110
#define P_HCODEC_ASSIST_MBX_SSEL                   (volatile uint32_t *)0xfe324114
#define P_HCODEC_HCODEC_ASSIST_MBX_SSEL            (volatile uint32_t *)0xfe324114
#define P_HCODEC_ASSIST_TIMER0_LO                  (volatile uint32_t *)0xfe324180
#define P_HCODEC_HCODEC_ASSIST_TIMER0_LO           (volatile uint32_t *)0xfe324180
#define P_HCODEC_ASSIST_TIMER0_HI                  (volatile uint32_t *)0xfe324184
#define P_HCODEC_HCODEC_ASSIST_TIMER0_HI           (volatile uint32_t *)0xfe324184
#define P_HCODEC_ASSIST_TIMER1_LO                  (volatile uint32_t *)0xfe324188
#define P_HCODEC_HCODEC_ASSIST_TIMER1_LO           (volatile uint32_t *)0xfe324188
#define P_HCODEC_ASSIST_TIMER1_HI                  (volatile uint32_t *)0xfe32418c
#define P_HCODEC_HCODEC_ASSIST_TIMER1_HI           (volatile uint32_t *)0xfe32418c
#define P_HCODEC_ASSIST_DMA_INT                    (volatile uint32_t *)0xfe324190
#define P_HCODEC_HCODEC_ASSIST_DMA_INT             (volatile uint32_t *)0xfe324190
#define P_HCODEC_ASSIST_DMA_INT_MSK                (volatile uint32_t *)0xfe324194
#define P_HCODEC_HCODEC_ASSIST_DMA_INT_MSK         (volatile uint32_t *)0xfe324194
#define P_HCODEC_ASSIST_DMA_INT2                   (volatile uint32_t *)0xfe324198
#define P_HCODEC_HCODEC_ASSIST_DMA_INT2            (volatile uint32_t *)0xfe324198
#define P_HCODEC_ASSIST_DMA_INT_MSK2               (volatile uint32_t *)0xfe32419c
#define P_HCODEC_HCODEC_ASSIST_DMA_INT_MSK2        (volatile uint32_t *)0xfe32419c
// bit[7:6]   awaddr_axi_vlc_prefix
// bit[5:4]   araddr_axi_mfdin_prefix
// bit[3:2]   vcpu_lmem_dma_prefix
// bit[1:0]   vcpu_imem_dma_prefix
#define P_HCODEC_AXI34_CONFIG_0                    (volatile uint32_t *)0xfe3241a0
#define P_HCODEC_HCODEC_AXI34_CONFIG_0             (volatile uint32_t *)0xfe3241a0
#define P_HCODEC_AXI34_CONFIG_1                    (volatile uint32_t *)0xfe3241a4
#define P_HCODEC_HCODEC_AXI34_CONFIG_1             (volatile uint32_t *)0xfe3241a4
#define P_HCODEC_AXI34_CONFIG_2                    (volatile uint32_t *)0xfe3241a8
#define P_HCODEC_HCODEC_AXI34_CONFIG_2             (volatile uint32_t *)0xfe3241a8
#define P_HCODEC_AXI34_CONFIG_3                    (volatile uint32_t *)0xfe3241ac
#define P_HCODEC_HCODEC_AXI34_CONFIG_3             (volatile uint32_t *)0xfe3241ac
#define P_HCODEC_AXI34_CONFIG_4                    (volatile uint32_t *)0xfe3241b0
#define P_HCODEC_HCODEC_AXI34_CONFIG_4             (volatile uint32_t *)0xfe3241b0
#define P_HCODEC_AXI34_CONFIG_5                    (volatile uint32_t *)0xfe3241b4
#define P_HCODEC_HCODEC_AXI34_CONFIG_5             (volatile uint32_t *)0xfe3241b4
#define P_HCODEC_ASSIST_AXIADDR_PREFIX             (volatile uint32_t *)0xfe3241b8
#define P_HCODEC_HCODEC_ASSIST_AXIADDR_PREFIX      (volatile uint32_t *)0xfe3241b8
#define P_HCODEC_ASSIST_MBOX0_IRQ_REG              (volatile uint32_t *)0xfe3241c0
#define P_HCODEC_HCODEC_ASSIST_MBOX0_IRQ_REG       (volatile uint32_t *)0xfe3241c0
#define P_HCODEC_ASSIST_MBOX0_CLR_REG              (volatile uint32_t *)0xfe3241c4
#define P_HCODEC_HCODEC_ASSIST_MBOX0_CLR_REG       (volatile uint32_t *)0xfe3241c4
#define P_HCODEC_ASSIST_MBOX0_MASK                 (volatile uint32_t *)0xfe3241c8
#define P_HCODEC_HCODEC_ASSIST_MBOX0_MASK          (volatile uint32_t *)0xfe3241c8
#define P_HCODEC_ASSIST_MBOX0_FIQ_SEL              (volatile uint32_t *)0xfe3241cc
#define P_HCODEC_HCODEC_ASSIST_MBOX0_FIQ_SEL       (volatile uint32_t *)0xfe3241cc
#define P_HCODEC_ASSIST_MBOX1_IRQ_REG              (volatile uint32_t *)0xfe3241d0
#define P_HCODEC_HCODEC_ASSIST_MBOX1_IRQ_REG       (volatile uint32_t *)0xfe3241d0
#define P_HCODEC_ASSIST_MBOX1_CLR_REG              (volatile uint32_t *)0xfe3241d4
#define P_HCODEC_HCODEC_ASSIST_MBOX1_CLR_REG       (volatile uint32_t *)0xfe3241d4
#define P_HCODEC_ASSIST_MBOX1_MASK                 (volatile uint32_t *)0xfe3241d8
#define P_HCODEC_HCODEC_ASSIST_MBOX1_MASK          (volatile uint32_t *)0xfe3241d8
#define P_HCODEC_ASSIST_MBOX1_FIQ_SEL              (volatile uint32_t *)0xfe3241dc
#define P_HCODEC_HCODEC_ASSIST_MBOX1_FIQ_SEL       (volatile uint32_t *)0xfe3241dc
#define P_HCODEC_ASSIST_MBOX2_IRQ_REG              (volatile uint32_t *)0xfe3241e0
#define P_HCODEC_HCODEC_ASSIST_MBOX2_IRQ_REG       (volatile uint32_t *)0xfe3241e0
#define P_HCODEC_ASSIST_MBOX2_CLR_REG              (volatile uint32_t *)0xfe3241e4
#define P_HCODEC_HCODEC_ASSIST_MBOX2_CLR_REG       (volatile uint32_t *)0xfe3241e4
#define P_HCODEC_ASSIST_MBOX2_MASK                 (volatile uint32_t *)0xfe3241e8
#define P_HCODEC_HCODEC_ASSIST_MBOX2_MASK          (volatile uint32_t *)0xfe3241e8
#define P_HCODEC_ASSIST_MBOX2_FIQ_SEL              (volatile uint32_t *)0xfe3241ec
#define P_HCODEC_HCODEC_ASSIST_MBOX2_FIQ_SEL       (volatile uint32_t *)0xfe3241ec
#define P_HCODEC_ASSIST_AXI_CTRL                   (volatile uint32_t *)0xfe3241f0
#define P_HCODEC_HCODEC_ASSIST_AXI_CTRL            (volatile uint32_t *)0xfe3241f0
#define P_HCODEC_ASSIST_AXI_STATUS                 (volatile uint32_t *)0xfe3241f4
#define P_HCODEC_HCODEC_ASSIST_AXI_STATUS          (volatile uint32_t *)0xfe3241f4
#define P_HCODEC_ASSIST_AXI_SETTING_VLC            (volatile uint32_t *)0xfe3241f8
#define P_HCODEC_HCODEC_ASSIST_AXI_SETTING_VLC     (volatile uint32_t *)0xfe3241f8
//------------------------------------------------------------------------------
// MDEC module level register offset
//------------------------------------------------------------------------------
//
// Reading file:  mdec_regs.h
//
//========================================================================
//  MDEC module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_VDEC_MDEC_CBUS_BASE = 0x09
// -----------------------------------------------
#define P_MC_CTRL_REG                              (volatile uint32_t *)0xfe322400
#define P_MC_MB_INFO                               (volatile uint32_t *)0xfe322404
#define P_MC_PIC_INFO                              (volatile uint32_t *)0xfe322408
#define P_MC_HALF_PEL_ONE                          (volatile uint32_t *)0xfe32240c
#define P_MC_HALF_PEL_TWO                          (volatile uint32_t *)0xfe322410
#define P_POWER_CTL_MC                             (volatile uint32_t *)0xfe322414
#define P_MC_CMD                                   (volatile uint32_t *)0xfe322418
#define P_MC_CTRL0                                 (volatile uint32_t *)0xfe32241c
#define P_MC_PIC_W_H                               (volatile uint32_t *)0xfe322420
#define P_MC_STATUS0                               (volatile uint32_t *)0xfe322424
#define P_MC_STATUS1                               (volatile uint32_t *)0xfe322428
#define P_MC_CTRL1                                 (volatile uint32_t *)0xfe32242c
#define P_MC_MIX_RATIO0                            (volatile uint32_t *)0xfe322430
#define P_MC_MIX_RATIO1                            (volatile uint32_t *)0xfe322434
#define P_MC_DP_MB_XY                              (volatile uint32_t *)0xfe322438
#define P_MC_OM_MB_XY                              (volatile uint32_t *)0xfe32243c
#define P_PSCALE_RST                               (volatile uint32_t *)0xfe322440
#define P_PSCALE_CTRL                              (volatile uint32_t *)0xfe322444
#define P_PSCALE_PICI_W                            (volatile uint32_t *)0xfe322448
#define P_PSCALE_PICI_H                            (volatile uint32_t *)0xfe32244c
#define P_PSCALE_PICO_W                            (volatile uint32_t *)0xfe322450
#define P_PSCALE_PICO_H                            (volatile uint32_t *)0xfe322454
#define P_PSCALE_PICO_START_X                      (volatile uint32_t *)0xfe322458
#define P_PSCALE_PICO_START_Y                      (volatile uint32_t *)0xfe32245c
#define P_PSCALE_DUMMY                             (volatile uint32_t *)0xfe322460
#define P_PSCALE_FILT0_COEF0                       (volatile uint32_t *)0xfe322464
#define P_PSCALE_FILT0_COEF1                       (volatile uint32_t *)0xfe322468
#define P_PSCALE_CMD_CTRL                          (volatile uint32_t *)0xfe32246c
#define P_PSCALE_CMD_BLK_X                         (volatile uint32_t *)0xfe322470
#define P_PSCALE_CMD_BLK_Y                         (volatile uint32_t *)0xfe322474
#define P_PSCALE_STATUS                            (volatile uint32_t *)0xfe322478
#define P_PSCALE_BMEM_ADDR                         (volatile uint32_t *)0xfe32247c
#define P_PSCALE_BMEM_DAT                          (volatile uint32_t *)0xfe322480
#define P_PSCALE_DRAM_BUF_CTRL                     (volatile uint32_t *)0xfe322484
#define P_PSCALE_MCMD_CTRL                         (volatile uint32_t *)0xfe322488
#define P_PSCALE_MCMD_XSIZE                        (volatile uint32_t *)0xfe32248c
#define P_PSCALE_MCMD_YSIZE                        (volatile uint32_t *)0xfe322490
#define P_PSCALE_RBUF_START_BLKX                   (volatile uint32_t *)0xfe322494
#define P_PSCALE_RBUF_START_BLKY                   (volatile uint32_t *)0xfe322498
//`define PSCALE_RBUF_MB_WIDTH   8'h27
#define P_PSCALE_PICO_SHIFT_XY                     (volatile uint32_t *)0xfe3224a0
#define P_PSCALE_CTRL1                             (volatile uint32_t *)0xfe3224a4
//Bit 15, wmask enable
//Bit 14:13, filt0 srckey_less,
//Bit 12:11, filt1 srckey_less, in the case of the interpolated data is equal distance to
//key data and normal data, 00: select normal data, 01: select right data, 10: select key data
//Bit 10:9, srckey mode, 00: equal, 01: less than or equal, 10: great than or equal
//Bit 8, src key enable
//Bit 7:0, y src key
#define P_PSCALE_SRCKEY_CTRL0                      (volatile uint32_t *)0xfe3224a8
//Bit 15:8, cb src key
//Bit 7:0, cr src key
#define P_PSCALE_SRCKEY_CTRL1                      (volatile uint32_t *)0xfe3224ac
//Bit 22:16 canvas_rd_addr2
//Bit 14:8 canvas_rd_addr1
//Bit 6:0 canvas_rd_addr1
#define P_PSCALE_CANVAS_RD_ADDR                    (volatile uint32_t *)0xfe3224b0
//Bit 22:16 canvas_wr_addr2
//Bit 14:8 canvas_wr_addr1
//Bit 6:0 canvas_wr_addr1
#define P_PSCALE_CANVAS_WR_ADDR                    (volatile uint32_t *)0xfe3224b4
//bit 13:8 pscale thread ID and token
//bit 7 disable write response count adding to busy bit
//bit 5:0  pscale prearbiter burst num
#define P_PSCALE_CTRL2                             (volatile uint32_t *)0xfe3224b8
//   31 - use_omem_mb_xy_auto
//23:16 - omem_max_mb_x
//15:8  - omem_mb_y_auto
// 7:0  - omem_mb_x_auto
#define P_HDEC_MC_OMEM_AUTO                        (volatile uint32_t *)0xfe3224c0
#define P_HDEC_MC_MBRIGHT_IDX                      (volatile uint32_t *)0xfe3224c4
#define P_HDEC_MC_MBRIGHT_RD                       (volatile uint32_t *)0xfe3224c8
#define P_MC_MPORT_CTRL                            (volatile uint32_t *)0xfe322500
#define P_MC_MPORT_DAT                             (volatile uint32_t *)0xfe322504
#define P_MC_WT_PRED_CTRL                          (volatile uint32_t *)0xfe322508
#define P_MC_MBBOT_ST_EVEN_ADDR                    (volatile uint32_t *)0xfe322510
#define P_MC_MBBOT_ST_ODD_ADDR                     (volatile uint32_t *)0xfe322514
#define P_MC_DPDN_MB_XY                            (volatile uint32_t *)0xfe322518
#define P_MC_OMDN_MB_XY                            (volatile uint32_t *)0xfe32251c
#define P_MC_HCMDBUF_H                             (volatile uint32_t *)0xfe322520
#define P_MC_HCMDBUF_L                             (volatile uint32_t *)0xfe322524
#define P_MC_HCMD_H                                (volatile uint32_t *)0xfe322528
#define P_MC_HCMD_L                                (volatile uint32_t *)0xfe32252c
#define P_MC_IDCT_DAT                              (volatile uint32_t *)0xfe322530
#define P_MC_CTRL_GCLK_CTRL                        (volatile uint32_t *)0xfe322534
#define P_MC_OTHER_GCLK_CTRL                       (volatile uint32_t *)0xfe322538
//Bit 29:24, mbbot thread ID and token
//Bit 21:16, mc read/write thread ID and token
//Bit 13:8,  mbbot pre-arbiter burst number
//Bit 5:0,   mc pre-arbiter burst number
#define P_MC_CTRL2                                 (volatile uint32_t *)0xfe32253c
// `define DBLK_QUANT            8'h76 // ONLY for $ucode/real/amrisc/rv.s, reg value from apollo
//`define ANC1_CANVAS_ADDR      8'h80
//`define ANC2_CANVAS_ADDR      8'h81
//`define REC_CANVAS_ADDR       8'h89
//`define MDEC_PIC_W          8'h8c
//`define MDEC_PIC_H          8'h8d
// mdec_pic_dc_mux_ctrl[31]  -- mcr_hevc_mode
#define P_MDEC_PIC_DC_MUX_CTRL                     (volatile uint32_t *)0xfe322634
#define P_MDEC_PIC_DC_CTRL                         (volatile uint32_t *)0xfe322638
#define P_MDEC_PIC_DC_STATUS                       (volatile uint32_t *)0xfe32263c
#define P_ANC0_CANVAS_ADDR                         (volatile uint32_t *)0xfe322640
#define P_ANC1_CANVAS_ADDR                         (volatile uint32_t *)0xfe322644
#define P_ANC2_CANVAS_ADDR                         (volatile uint32_t *)0xfe322648
#define P_ANC3_CANVAS_ADDR                         (volatile uint32_t *)0xfe32264c
#define P_ANC4_CANVAS_ADDR                         (volatile uint32_t *)0xfe322650
#define P_ANC5_CANVAS_ADDR                         (volatile uint32_t *)0xfe322654
#define P_ANC6_CANVAS_ADDR                         (volatile uint32_t *)0xfe322658
#define P_ANC7_CANVAS_ADDR                         (volatile uint32_t *)0xfe32265c
#define P_ANC8_CANVAS_ADDR                         (volatile uint32_t *)0xfe322660
#define P_ANC9_CANVAS_ADDR                         (volatile uint32_t *)0xfe322664
#define P_ANC10_CANVAS_ADDR                        (volatile uint32_t *)0xfe322668
#define P_ANC11_CANVAS_ADDR                        (volatile uint32_t *)0xfe32266c
#define P_ANC12_CANVAS_ADDR                        (volatile uint32_t *)0xfe322670
#define P_ANC13_CANVAS_ADDR                        (volatile uint32_t *)0xfe322674
#define P_ANC14_CANVAS_ADDR                        (volatile uint32_t *)0xfe322678
#define P_ANC15_CANVAS_ADDR                        (volatile uint32_t *)0xfe32267c
#define P_ANC16_CANVAS_ADDR                        (volatile uint32_t *)0xfe322680
#define P_ANC17_CANVAS_ADDR                        (volatile uint32_t *)0xfe322684
#define P_ANC18_CANVAS_ADDR                        (volatile uint32_t *)0xfe322688
#define P_ANC19_CANVAS_ADDR                        (volatile uint32_t *)0xfe32268c
#define P_ANC20_CANVAS_ADDR                        (volatile uint32_t *)0xfe322690
#define P_ANC21_CANVAS_ADDR                        (volatile uint32_t *)0xfe322694
#define P_ANC22_CANVAS_ADDR                        (volatile uint32_t *)0xfe322698
#define P_ANC23_CANVAS_ADDR                        (volatile uint32_t *)0xfe32269c
#define P_ANC24_CANVAS_ADDR                        (volatile uint32_t *)0xfe3226a0
#define P_ANC25_CANVAS_ADDR                        (volatile uint32_t *)0xfe3226a4
#define P_ANC26_CANVAS_ADDR                        (volatile uint32_t *)0xfe3226a8
#define P_ANC27_CANVAS_ADDR                        (volatile uint32_t *)0xfe3226ac
#define P_ANC28_CANVAS_ADDR                        (volatile uint32_t *)0xfe3226b0
#define P_ANC29_CANVAS_ADDR                        (volatile uint32_t *)0xfe3226b4
#define P_ANC30_CANVAS_ADDR                        (volatile uint32_t *)0xfe3226b8
#define P_ANC31_CANVAS_ADDR                        (volatile uint32_t *)0xfe3226bc
#define P_DBKR_CANVAS_ADDR                         (volatile uint32_t *)0xfe3226c0
#define P_DBKW_CANVAS_ADDR                         (volatile uint32_t *)0xfe3226c4
#define P_REC_CANVAS_ADDR                          (volatile uint32_t *)0xfe3226c8
//28:24, read/write, current canvas idx, used in h264 only now
//23:0, read only, current canvas address, 23:16, Cr canvas addr, 15:8, Cb canvas addr, 7:0, Y  canvas addr
#define P_CURR_CANVAS_CTRL                         (volatile uint32_t *)0xfe3226cc
#define P_MDEC_PIC_DC_THRESH                       (volatile uint32_t *)0xfe3226e0
#define P_MDEC_PICR_BUF_STATUS                     (volatile uint32_t *)0xfe3226e4
#define P_MDEC_PICW_BUF_STATUS                     (volatile uint32_t *)0xfe3226e8
#define P_MCW_DBLK_WRRSP_CNT                       (volatile uint32_t *)0xfe3226ec
#define P_MC_MBBOT_WRRSP_CNT                       (volatile uint32_t *)0xfe3226f0
#define P_MDEC_PICW_BUF2_STATUS                    (volatile uint32_t *)0xfe3226f4
#define P_WRRSP_FIFO_PICW_DBK                      (volatile uint32_t *)0xfe3226f8
#define P_WRRSP_FIFO_PICW_MC                       (volatile uint32_t *)0xfe3226fc
#define P_AV_SCRATCH_0                             (volatile uint32_t *)0xfe322700
#define P_AV_SCRATCH_1                             (volatile uint32_t *)0xfe322704
#define P_AV_SCRATCH_2                             (volatile uint32_t *)0xfe322708
#define P_AV_SCRATCH_3                             (volatile uint32_t *)0xfe32270c
#define P_AV_SCRATCH_4                             (volatile uint32_t *)0xfe322710
#define P_AV_SCRATCH_5                             (volatile uint32_t *)0xfe322714
#define P_AV_SCRATCH_6                             (volatile uint32_t *)0xfe322718
#define P_AV_SCRATCH_7                             (volatile uint32_t *)0xfe32271c
#define P_AV_SCRATCH_8                             (volatile uint32_t *)0xfe322720
#define P_AV_SCRATCH_9                             (volatile uint32_t *)0xfe322724
#define P_AV_SCRATCH_A                             (volatile uint32_t *)0xfe322728
#define P_AV_SCRATCH_B                             (volatile uint32_t *)0xfe32272c
#define P_AV_SCRATCH_C                             (volatile uint32_t *)0xfe322730
#define P_AV_SCRATCH_D                             (volatile uint32_t *)0xfe322734
#define P_AV_SCRATCH_E                             (volatile uint32_t *)0xfe322738
#define P_AV_SCRATCH_F                             (volatile uint32_t *)0xfe32273c
#define P_AV_SCRATCH_G                             (volatile uint32_t *)0xfe322740
#define P_AV_SCRATCH_H                             (volatile uint32_t *)0xfe322744
#define P_AV_SCRATCH_I                             (volatile uint32_t *)0xfe322748
#define P_AV_SCRATCH_J                             (volatile uint32_t *)0xfe32274c
#define P_AV_SCRATCH_K                             (volatile uint32_t *)0xfe322750
#define P_AV_SCRATCH_L                             (volatile uint32_t *)0xfe322754
#define P_AV_SCRATCH_M                             (volatile uint32_t *)0xfe322758
#define P_AV_SCRATCH_N                             (volatile uint32_t *)0xfe32275c
// bit[29:24] A_brst_num_co_mb
// bit[21:16] A_id_co_mb
// bit[11:0] wrrsp_count_co_mb
#define P_WRRSP_CO_MB                              (volatile uint32_t *)0xfe322760
// bit[29:24] A_brst_num_dcac
// bit[21:16] A_id_dcac
// bit[11:0] wrrsp_count_dcac
#define P_WRRSP_DCAC                               (volatile uint32_t *)0xfe322764
// bit[11:0] wrrsp_count_vld
#define P_WRRSP_VLD                                (volatile uint32_t *)0xfe322768
// doublew_cfg0[0];     //       Second Channel Enable, 1:Enable 0:Disable
// doublew_cfg0[3:1];   // [2:0] Endian Control for Luma
// doublew_cfg0[5:4];   // [1:0] Pixel sel by horizontal, 0x:1/2 10:left 11:right
// doublew_cfg0[7:6];   // [1:0] Pixel sel by vertical,   0x:1/2 10:up 11:down
// doublew_cfg0[8];     //       Size by horizontal, 0:original size 1: 1/2 shrunken size
// doublew_cfg0[9];     //       Size by vertical,   0:original size 1: 1/2 shrunken size
// doublew_cfg0[10];    //       1:Round 0:Truncation
// doublew_cfg0[11];    //       DMA Urgent
// doublew_cfg0[17:12]; // [5:0] DMA Burst Number
// doublew_cfg0[23:18]; // [5:0] DMA ID
// doublew_cfg0[26:24]; // [2:0] Endian Control for Chroma
// doublew_cfg0[27];    //       Source from, 1:MCW 0:DBLK
// doublew_cfg0[29:28]; // [1:0] 0x:select both top and bottom 10:select top 11:select bottom
// doublew_cfg0[30];    //       0:no merge 1:automatic merge
// doublew_cfg0[31];    //       0:Y addr no change 1:Y addr divided to half
#define P_MDEC_DOUBLEW_CFG0                        (volatile uint32_t *)0xfe32276c
// doublew_cfg1[7:0];   // [7:0] DMA Canvas Address for Luma
// doublew_cfg1[15:8];  // [7:0] DMA Canvas Address for Chroma
// doublew_cfg1[16];    //       Disable 1st Write -
// doublew_cfg1[17];    //       Reverse to original version -
// doublew_cfg1[18];    //       DMA Address Mode - 0:Canvas Mode 1:Non-Canvas Mode
#define P_MDEC_DOUBLEW_CFG1                        (volatile uint32_t *)0xfe322770
// doublew_cfg2[11:0];  //[11:0] vertical flip initial value
// doublew_cfg2[15];    //       vertical flip enable
// doublew_cfg2[24:16]; // [8:0] horizontal flip initial value
// doublew_cfg2[31];    //       horizontal flip enable
#define P_MDEC_DOUBLEW_CFG2                        (volatile uint32_t *)0xfe322774
// doublew_cfg3[31:0];  //[31:0] non-canvas start address for Luma -
#define P_MDEC_DOUBLEW_CFG3                        (volatile uint32_t *)0xfe322778
// doublew_cfg4[31:0];  //[31:0] non-canvas start address for Chroma -
#define P_MDEC_DOUBLEW_CFG4                        (volatile uint32_t *)0xfe32277c
// doublew_cfg5[12:0];  //[12:0] non-canvas picture width for Luma -
// doublew_cfg5[28:16]; //[12:0] non-canvas picture width for Chroma -
#define P_MDEC_DOUBLEW_CFG5                        (volatile uint32_t *)0xfe322780
// doublew_cfg6: reserved
#define P_MDEC_DOUBLEW_CFG6                        (volatile uint32_t *)0xfe322784
// doublew_cfg7: reserved
#define P_MDEC_DOUBLEW_CFG7                        (volatile uint32_t *)0xfe322788
// doublew_status[11:0];//[11:0] wrrsp_count_doublew
// doublew_status[12];  //       doublew_status_busy
// doublew_status[13];  //       doublew_status_error
#define P_MDEC_DOUBLEW_STATUS                      (volatile uint32_t *)0xfe32278c
#define P_MDEC_EXTIF_CFG0                          (volatile uint32_t *)0xfe322790
#define P_MDEC_EXTIF_CFG1                          (volatile uint32_t *)0xfe322794
#define P_MDEC_EXTIF_CFG2                          (volatile uint32_t *)0xfe322798
#define P_MDEC_EXTIF_STS0                          (volatile uint32_t *)0xfe32279c
#define P_MDEC_PICW_BUFDW_CFG0                     (volatile uint32_t *)0xfe3227a0
#define P_MDEC_PICW_BUFDW_CFG1                     (volatile uint32_t *)0xfe3227a4
#define P_MDEC_CAV_LUT_DATAL                       (volatile uint32_t *)0xfe3227a8
#define P_MDEC_CAV_LUT_DATAH                       (volatile uint32_t *)0xfe3227ac
#define P_MDEC_CAV_LUT_ADDR                        (volatile uint32_t *)0xfe3227b0
#define P_MDEC_CAV_CFG0                            (volatile uint32_t *)0xfe3227b4
#define P_MDEC_CRCW                                (volatile uint32_t *)0xfe3227b8
#define P_MDEC_PIC_DC_CTRL2                        (volatile uint32_t *)0xfe3227bc
//======================================
//  MC Control Register Bits
//
//======================================
// For bits, just copy the defines...don't translate to addresses
    #define MC_ENABLE	    0x0001
    //`define MC_RESET	    16'h0002
    #define SKIP_MB		    0x0004

//======================================
//  MB Info Register Bits
//
//======================================
    #define INTRA_MB	    0x0001

    #define BWD_PRED	    0x0004
    #define FWD_PRED	    0x0008

    #define FLD_MOT		    0x0100
    #define FRM_16x8_MOT	0x0200
    #define DUAL_PRM_MOT	0x0300

    #define FRM_DCT		    0x0000	    // Bit 10
    #define FLD_DCT		    0x0400

//======================================
//  MB Info Register Bits
//
//======================================
    #define I_PIC		    0x0001
    #define P_PIC		    0x0002
    #define B_PIC		    0x0003

    #define FLD_PIC		    0x0000	    // Bit 8
    #define FRM_PIC		    0x0100	
//========================================================================
// DBLK Register:  12'h950 - 12'h97f
//========================================================================
#define P_DBLK_RST                                 (volatile uint32_t *)0xfe322540
#define P_DBLK_CTRL                                (volatile uint32_t *)0xfe322544
#define P_DBLK_MB_WID_HEIGHT                       (volatile uint32_t *)0xfe322548
#define P_DBLK_STATUS                              (volatile uint32_t *)0xfe32254c
#define P_DBLK_CMD_CTRL                            (volatile uint32_t *)0xfe322550
#define P_DBLK_MB_XY                               (volatile uint32_t *)0xfe322554
#define P_DBLK_QP                                  (volatile uint32_t *)0xfe322558
#define P_DBLK_Y_BHFILT                            (volatile uint32_t *)0xfe32255c
#define P_DBLK_Y_BHFILT_HIGH                       (volatile uint32_t *)0xfe322560
#define P_DBLK_Y_BVFILT                            (volatile uint32_t *)0xfe322564
#define P_DBLK_CB_BFILT                            (volatile uint32_t *)0xfe322568
#define P_DBLK_CR_BFILT                            (volatile uint32_t *)0xfe32256c
#define P_DBLK_Y_HFILT                             (volatile uint32_t *)0xfe322570
#define P_DBLK_Y_HFILT_HIGH                        (volatile uint32_t *)0xfe322574
#define P_DBLK_Y_VFILT                             (volatile uint32_t *)0xfe322578
#define P_DBLK_CB_FILT                             (volatile uint32_t *)0xfe32257c
#define P_DBLK_CR_FILT                             (volatile uint32_t *)0xfe322580
#define P_DBLK_BETAX_QP_SEL                        (volatile uint32_t *)0xfe322584
#define P_DBLK_CLIP_CTRL0                          (volatile uint32_t *)0xfe322588
#define P_DBLK_CLIP_CTRL1                          (volatile uint32_t *)0xfe32258c
#define P_DBLK_CLIP_CTRL2                          (volatile uint32_t *)0xfe322590
#define P_DBLK_CLIP_CTRL3                          (volatile uint32_t *)0xfe322594
#define P_DBLK_CLIP_CTRL4                          (volatile uint32_t *)0xfe322598
#define P_DBLK_CLIP_CTRL5                          (volatile uint32_t *)0xfe32259c
#define P_DBLK_CLIP_CTRL6                          (volatile uint32_t *)0xfe3225a0
#define P_DBLK_CLIP_CTRL7                          (volatile uint32_t *)0xfe3225a4
#define P_DBLK_CLIP_CTRL8                          (volatile uint32_t *)0xfe3225a8
#define P_DBLK_STATUS1                             (volatile uint32_t *)0xfe3225ac
#define P_DBLK_GCLK_FREE                           (volatile uint32_t *)0xfe3225b0
#define P_DBLK_GCLK_OFF                            (volatile uint32_t *)0xfe3225b4
#define P_DBLK_AVSFLAGS                            (volatile uint32_t *)0xfe3225b8
// bit 15:0
#define P_DBLK_CBPY                                (volatile uint32_t *)0xfe3225c0
// bit 11:8 -- deblk_cbpy_bottom
// bit 7:4 -- deblk_cbpy_left
// bit 3:0 -- deblk_cbpy_top
#define P_DBLK_CBPY_ADJ                            (volatile uint32_t *)0xfe3225c4
// bit 7:0 -- deblk_cbpc
#define P_DBLK_CBPC                                (volatile uint32_t *)0xfe3225c8
// bit 15 -- bottom_mb
// bit 14 -- left_mb
// bit 13 -- top_mb
// bit 12 -- reserved
// bit 11:8 -- deblk_cbpc_bottom
// bit 7:4 -- deblk_cbpc_left
// bit 3:0 -- deblk_cbpc_top
#define P_DBLK_CBPC_ADJ                            (volatile uint32_t *)0xfe3225cc
// bit 15:8 -- deblk_hmvd   -- {left_1, left_0, below_1, below_0, block3-0}
// bit 7:0 -- deblk_vmvd    -- {top_1, top_0, below_1, below_0, block3-0}
#define P_DBLK_VHMVD                               (volatile uint32_t *)0xfe3225d0
// bit 13:12 -- right_vmvd
// bit 11 -- right_above_vmvd
// bit 10 -- left_below_hmvd
// bit 9 -- disable_dblk_luma
// bit 8 -- disable_dblk_chroma
// bit 7 -- bBelowRefDiff
// bit 6 -- bLeftRefDiff
// bit 5 -- bAboveRefDiff
// bit 4 -- reserved
// bit 3 -- s_below
// bit 2 -- s_left
// bit 1 -- s_above
// bit 0 -- s
#define P_DBLK_STRONG                              (volatile uint32_t *)0xfe3225d4
// bit 14:10 -- PQUANT
// bit 9:5 -- left_PQUANT
// bit 4:0 -- top_PQUANT
#define P_DBLK_RV8_QUANT                           (volatile uint32_t *)0xfe3225d8
#define P_DBLK_CBUS_HCMD2                          (volatile uint32_t *)0xfe3225dc
#define P_DBLK_CBUS_HCMD1                          (volatile uint32_t *)0xfe3225e0
#define P_DBLK_CBUS_HCMD0                          (volatile uint32_t *)0xfe3225e4
#define P_DBLK_VLD_HCMD2                           (volatile uint32_t *)0xfe3225e8
#define P_DBLK_VLD_HCMD1                           (volatile uint32_t *)0xfe3225ec
#define P_DBLK_VLD_HCMD0                           (volatile uint32_t *)0xfe3225f0
#define P_DBLK_OST_YBASE                           (volatile uint32_t *)0xfe3225f4
#define P_DBLK_OST_CBCRDIFF                        (volatile uint32_t *)0xfe3225f8
//13:8 dblk thread ID and token
//5:0  dblk prearbiter burst num
#define P_DBLK_CTRL1                               (volatile uint32_t *)0xfe3225fc
// MCRCC_CTL1
// 31:3  <reserved[23:0]>
// 2     <cfg_field_pic>
// 1     <sw_rst>
// 0     <bypass_en>
#define P_MCRCC_CTL1                               (volatile uint32_t *)0xfe322600
// MCRCC_CTL2
// 31:24    <cfg_cache_anc01_c[7:0]>
// 23:16    <cfg_cache_anc01_y[7:0]>
// 15:8     <cfg_cache_anc00_c[7:0]>
// 7:0      <cfg_cache_anc00_y[7:0]>
#define P_MCRCC_CTL2                               (volatile uint32_t *)0xfe322604
// MCRCC_CTL3
// 31:24    <cfg_cache_anc11_c[7:0]>
// 23:16    <cfg_cache_anc11_y[7:0]>
// 15:8     <cfg_cache_anc10_c[7:0]>
// 7:0      <cfg_cache_anc10_y[7:0]>
#define P_MCRCC_CTL3                               (volatile uint32_t *)0xfe322608
// bit[31:10] reserved
// bit[9:0] sw_clock_gating control
// [9] vdec clk_en for assist and cbus.
// [8] vdec clk_en for ddr
// [7] vdec clk_en for vcpu
// [6] vdec clk_en for assist
// [5] vdec clk_en for dblk
// [4] vdec clk_en for iqidct
// [3] vdec clk_en for mc
// [2] vdec clk_en for pic_dc
// [1] vdec clk_en for psc
// [0] vdec clk_en for vld
#define P_GCLK_EN                                  (volatile uint32_t *)0xfe32260c
// [0]  Reserved
// [1]  Reserved
// [2]  Reset assist, mdec's CBUS
// [3]  Reset mdec's VLD
// [4]  Reset mdec's VLD
// [5]  Reset mdec's VLD
// [6]  Reset mdec's IQIDCT
// [7]  Reset mdec's MC
// [8]  Reset mdec's DBLK
// [9]  Reset mdec's PIC_DC
// [10] Reset mdec's Pscale
// [11] Reset vcpu's MCPU
// [12] Reset vcpu's CCPU
// [13] Reset mmc_pre_arb
#define P_MDEC_SW_RESET                            (volatile uint32_t *)0xfe322610
// [0]      dblkmerge_bypass
// [2:1]    picture_structure
// [3]      is_mbaff_frame
// [5:4]    canvas_write_mode
// [6]      Reserved
// [7]      write_mask_redge
// [31:6]   Reserved
#define P_MDEC_DBLKWMERGE_CTRL0                    (volatile uint32_t *)0xfe322614
// [12:0]   dblkwmerge_pic_w
// [15:13]  Reserved
// [28:16]  dblkwmerge_pic_h
// [31:29]  Reserved
#define P_MDEC_DBLKWMERGE_CTRL1                    (volatile uint32_t *)0xfe322618
//DBLK last address 12'h97f
//
// Closing file:  mdec_regs.h
//
//------------------------------------------------------------------------------
// VLD module level register offset
//------------------------------------------------------------------------------
//
// Reading file:  vld_regs.h
//
//========================================================================
//  VLD module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_VDEC_VLD_CBUS_BASE = 0x0c
// -----------------------------------------------
#define P_VLD_STATUS_CTRL                          (volatile uint32_t *)0xfe323000
//
// bit 15 -- use_separate_c_path
// bit 14 -- reserved
// bit 13 -- h264_co_mb_wr_busy
// bit 12 -- vld_error_protect
// bit 11 -- m4_mv_qpixel
// bit 10 -- use_old_shift_en
// bit 9 -- output_mv_not_pmv
// bit 8:5 -- force_zigzag
// bit 4 -- force_zigzag_en
// bit 3 -- disable_viff_anempty_int
// bit 2 -- disable_m2_ac_coeff_one_cycle
// bit 1 -- forced_reset  force reset pmv
// bit 0 -- mpeg_type  0:mpeg1 1: mpeg2
#define P_MPEG1_2_REG                              (volatile uint32_t *)0xfe323004
#define P_F_CODE_REG                               (volatile uint32_t *)0xfe323008
#define P_PIC_HEAD_INFO                            (volatile uint32_t *)0xfe32300c
#define P_SLICE_VER_POS_PIC_TYPE                   (volatile uint32_t *)0xfe323010
#define P_QP_VALUE_REG                             (volatile uint32_t *)0xfe323014
#define P_MBA_INC                                  (volatile uint32_t *)0xfe323018
#define P_MB_MOTION_MODE                           (volatile uint32_t *)0xfe32301c
//`define PACKET_BYTE_COUNT   8'h08
// bit 15 -- force_search_startcode_en
// bit 14 -- int_cpu_when_error (before do anything)
// bit 13 -- vld_error_reset
// bit 12 -- return_on_slice_header
// bit 6 -- jpeg_ff00_en
// bit 5:0 -- vld_power_ctl
#define P_POWER_CTL_VLD                            (volatile uint32_t *)0xfe323020
#define P_MB_WIDTH                                 (volatile uint32_t *)0xfe323024
#define P_SLICE_QP                                 (volatile uint32_t *)0xfe323028
// `define MB_X_MB_Y           8'h0b   /* current MBX and MBY                  */
#define P_PRE_START_CODE                           (volatile uint32_t *)0xfe32302c
#define P_SLICE_START_BYTE_01                      (volatile uint32_t *)0xfe323030
#define P_SLICE_START_BYTE_23                      (volatile uint32_t *)0xfe323034
#define P_RESYNC_MARKER_LENGTH                     (volatile uint32_t *)0xfe323038
// bit[6:5] - frame/field info, 01 - top, 10 - bottom, 11 - frame
// bit[4:0] - buffer ID
// L0_BUFF_ID_0, L0_BUFF_ID_1, L1_BUFF_ID_0, L1_BUFF_ID_1
#define P_DECODER_BUFFER_INFO                      (volatile uint32_t *)0xfe32303c
#define P_FST_FOR_MV_X                             (volatile uint32_t *)0xfe323040
#define P_FST_FOR_MV_Y                             (volatile uint32_t *)0xfe323044
#define P_SCD_FOR_MV_X                             (volatile uint32_t *)0xfe323048
#define P_SCD_FOR_MV_Y                             (volatile uint32_t *)0xfe32304c
#define P_FST_BAK_MV_X                             (volatile uint32_t *)0xfe323050
#define P_FST_BAK_MV_Y                             (volatile uint32_t *)0xfe323054
#define P_SCD_BAK_MV_X                             (volatile uint32_t *)0xfe323058
#define P_SCD_BAK_MV_Y                             (volatile uint32_t *)0xfe32305c
// Bit 31 -- h264_non_intra_set_IntraType_need (READ Only)
// Bit[30:27] -- Reserved
// Bit 27 -- disable_one_cycle_vld_data_finished_fix
// Bit 26 -- int_wait_non_intra_set_finish
// Bit 25 -- IntraTypeLeft_use_vcw2f
// Bit 24 -- spatial_scale_no_update_when_f_invalid
// Bit 23 -- spatial_scale_no_update_when_f_zero
// Bit 22 -- pure_jpeg_hw_en
// Bit 21 -- auto_read_AC_COEFF
// Bit 20 -- fast_jpeg_hw_en
// Bit 19 -- vld_swap_reset
// Bit 18 -- set_vld_state
// Bit 17:12 -- set_vld_state_data
// Bit 11 -- set_stcode_state
// Bit 10:9 -- set_stcode_state_data
// Bit 8 -- decoder_parameter_reset
// Bit 7:4 -- read_buffer_interlace  0-progressive, 1-interlace, used in VC1
// bit 3 -- disable_new_stcode_search_fix // From GXM
// bit 2 -- weighting_prediction
// bit 1 -- mb_weighting_flag
// bit 0 -- slice_weighting_flag
#define P_VLD_DECODE_CONTROL                       (volatile uint32_t *)0xfe323060
// bit[15:0] - vld_jpeg_tab_addr
#define P_VLD_JPEG_TAB_ADDR                        (volatile uint32_t *)0xfe323064
#define P_VIFF_BIT_CNT                             (volatile uint32_t *)0xfe323068
#define P_BYTE_ALIGN_PEAK_HI                       (volatile uint32_t *)0xfe32306c
#define P_BYTE_ALIGN_PEAK_LO                       (volatile uint32_t *)0xfe323070
#define P_NEXT_ALIGN_PEAK                          (volatile uint32_t *)0xfe323074
// bit 31    : byte_aligned_zero_23_from_org // From GXM
// bit 30    : force_shift_out_drop_flag_zero // From GXM
// bit 29    : en_st_protect_from_org // From GXM
// bit 28    : enable_halt_decode_start_voff
// bit 27    : disable_C_pred_check
// bit 26    : disable_I4_pred_check
// bit 25    : disable_I16_pred_check
// bit 24    : check_avs_1st_drop
// bit 23    : enable_cabac_protect // From GXM
// bit 22    : enable_avs_drop_more
// bit 21    : reset_avs_drop_ptr
// bit 20    : reset_cabac_use_next_at_end_req
// bit 19    : vc1_inv_intra_co_mb_ref_rd
// bit 18    : vc1_inv_co_mb_ref_rd
// bit 17    : vc1_inv_intra_co_mb_ref_wr
// bit 16    : vc1_inv_co_mb_ref_wr
// bit 15    : disable_mv_cal_begin_only
// bit 14    : avs_drop_enable
// bit 13:12 : avs_drop_ptr
// bit 11:8  : avs_demu_ctl_reg
// bit 7 : avs_enable
// bit 6 : disable_dblk_hcmd
// bit 5 : disable_mc_hcmd
// bit 4 : first_mode3_set enable
// bit 3 : first_mode3
// bit 2:1 : vc1_profile  0-SP, 1-MP, 2-reserved, 3-AP
// bit 0   : vc1_enable
#define P_VC1_CONTROL_REG                          (volatile uint32_t *)0xfe323078
#define P_PMV1_X                                   (volatile uint32_t *)0xfe323080
#define P_PMV1_Y                                   (volatile uint32_t *)0xfe323084
#define P_PMV2_X                                   (volatile uint32_t *)0xfe323088
#define P_PMV2_Y                                   (volatile uint32_t *)0xfe32308c
#define P_PMV3_X                                   (volatile uint32_t *)0xfe323090
#define P_PMV3_Y                                   (volatile uint32_t *)0xfe323094
#define P_PMV4_X                                   (volatile uint32_t *)0xfe323098
#define P_PMV4_Y                                   (volatile uint32_t *)0xfe32309c
// Can't use the same address for different defines
// Therefore, create a single define that covers both
// Only appears to be used in micro-code since the VLD hardware is
// hard coded.
// `define M4_TABLE_SELECT     8'h28  // Does this exist in HW ? Added from register_mp2.h
// `define M4_TABLE_OUTPUT     8'h28  // Does this exist in HW ? Added from register_mp2.h
#define P_M4_TABLE_SELECT                          (volatile uint32_t *)0xfe3230a0
#define P_M4_CONTROL_REG                           (volatile uint32_t *)0xfe3230a4
#define P_BLOCK_NUM                                (volatile uint32_t *)0xfe3230a8
#define P_PATTERN_CODE                             (volatile uint32_t *)0xfe3230ac
#define P_MB_INFO                                  (volatile uint32_t *)0xfe3230b0
#define P_VLD_DC_PRED                              (volatile uint32_t *)0xfe3230b4
#define P_VLD_ERROR_MASK                           (volatile uint32_t *)0xfe3230b8
#define P_VLD_DC_PRED_C                            (volatile uint32_t *)0xfe3230bc
#define P_LAST_SLICE_MV_ADDR                       (volatile uint32_t *)0xfe3230c0
#define P_LAST_MVX                                 (volatile uint32_t *)0xfe3230c4
#define P_LAST_MVY                                 (volatile uint32_t *)0xfe3230c8
#define P_VLD_C38                                  (volatile uint32_t *)0xfe3230e0
#define P_VLD_C39                                  (volatile uint32_t *)0xfe3230e4
#define P_VLD_STATUS                               (volatile uint32_t *)0xfe3230e8
#define P_VLD_SHIFT_STATUS                         (volatile uint32_t *)0xfe3230ec
// `define VLD_SHIFT_INFO      8'h3b  // Does this exist in HW ? used in $ucode/mpeg4
#define P_VOFF_STATUS                              (volatile uint32_t *)0xfe3230f0
#define P_VLD_C3D                                  (volatile uint32_t *)0xfe3230f4
#define P_VLD_DBG_INDEX                            (volatile uint32_t *)0xfe3230f8
// vld_buff_info -- (index == 0)
// Bit11]    halt_decode_start_voff
// Bit10]    C_pred_error
// Bit[9]    I4_pred_error
// Bit[8]    I16_pred_error
// Bit[7:6]  mv_UR_ready_cnt;
// Bit[5]  vld_wr_idx
// Bit[4]  iq_rd_idx
// Bit[3]  vld_vi_block_rdy_1
// Bit[2]  vld_vi_block_rdy_2
// Bit[1]  voff_empty_1
// Bit[0]  voff_empty_2
// cabac_buff_info_0 -- (index == 1)
// Bit[31] shift_data_ready
// Bit[30:29] Reserved
// Bit[28:24] cabac_buffer_ptr
// Bit[23:0] cabac_buffer
// cabac_buff_info_1 -- (index == 2)
// Bit[31:29] Reserved
// Bit[28:20] Drange
// Bit[19:16] bin_count_4
// Bit[15:13] Reserved
// Bit[12:6] context_mem_do
// Bit[5:3] coeff_state
// Bit[2:0] mvd_state
// h264_mv_present -- (index == 3)
// Bit[31:16] mv_present_l0
// Bit[15:0] mv_present_l1
// h264_mv_cal_info_0 -- (index == 4)
// [31:28] mv_cal_state
// [27:24] direct_spatial_cnt
// Bit[23:21] Reserved
// Bit[20] mv_UR_ready_for_mv_cal
// Bit[19] co_mb_mem_ready_for_mv_cal
// Bit[18] mc_dblk_cmd_if_busy
// Bit[17] h264_co_mb_wr_busy
// Bit[16] H264_cbp_blk_ready
// Bit[15] mc_hcmd_rrdy
// Bit[14] mc_hcmd_srdy
// Bit[13] mc_cmd_if_ready
// Bit[12] mc_hcmd_mv_available
// Bit[11:8] mc_cmd_if_state
// Bit[7] dblk_hcmd_rrdy
// Bit[6] dblk_hcmd_srdy
// Bit[5] dblk_cmd_if_ready
// Bit[4] dblk_hcmd_mv_available
// Bit[3:0] dblk_cmd_if_state
// h264_mv_cal_info_1 -- (index == 5)
//  Bit[31:29] Reserved
//  Bit[28:24] total_mvd_num_l0
//  Bit[23:21] Reserved
//  Bit[20:16] mv_cal_ptr_l0
//  Bit[15:13] Reserved
//  Bit[12:8] mc_hcmd_ptr_l0
//  Bit[7:5] Reserved
//  Bit[4:0] dblk_hcmd_ptr_l0
// h264_mv_cal_info_2 -- (index == 6)
//  Bit[31:29] Reserved
//  Bit[28:24] total_mvd_num_l1
//  Bit[23:21] Reserved
//  Bit[20:16] mv_cal_ptr_l1
//  Bit[15:13] Reserved
//  Bit[12:8] mc_hcmd_ptr_l1
//  Bit[7:5] Reserved
//  Bit[4:0] dblk_hcmd_ptr_l1
// h264_co_mb_info -- (index == 7)
// Bit[31:26] Reserved
// Bit[25] mv_scale_cal_busy
// Bit[24:20] co_mv_count
// Bit[19:16] co_mv_process_state
// Bit[15] h264_co_mb_rd_busy
// Bit[15] h264_co_mb_rd_ready
// Bit[13:12] co_mv_transfer_block_cnt
// Bit[11:8] co_mv_transfer_ptr
// Bit[7] co_mv_POC_l1_busy
// Bit[6] h264_weight_scale_cal_en
// Bit[5] weight_cal_busy
// Bit[4] weight_cal_not_finished
// Bit[3:0] weight_process_state
#define P_VLD_DBG_DATA                             (volatile uint32_t *)0xfe3230fc
// --------------------------------------------
// VIFIFO DDR Interface
// --------------------------------------------
// The VIFIFO start pointer into DDR memory is a 32-bit number
// The Start pointer will automatically be truncated to land on
// an 8-byte boundary.  That is, bits [2:0] = 0;
#define P_VLD_MEM_VIFIFO_START_PTR                 (volatile uint32_t *)0xfe323100
// The current pointer points so some location between the START and END
// pointers.  The current pointer is a BYTE pointer.  That is, you can
// point to any BYTE address within the START/END range
#define P_VLD_MEM_VIFIFO_CURR_PTR                  (volatile uint32_t *)0xfe323104
#define P_VLD_MEM_VIFIFO_END_PTR                   (volatile uint32_t *)0xfe323108
// bit[31]    viff_halt_int_en
// bit[30]    viff_halt_read_enable
// bit[29:26] reserved
// bit[25:16] viff_halt_int_bytes
// bit[15:10] reserved
// bit[9:0]   bytes_available
#define P_VLD_MEM_VIFIFO_BYTES_AVAIL               (volatile uint32_t *)0xfe32310c
// VIFIFO FIFO Control
// bit  [31:24] viff_empty_int_enable_cpu[7:0]
// bit  [23:16] viff_empty_int_enable_amrisc[7:0]
//   -bit 23 Video BUFFER < 0x400 Bytes
//   -bit 22 Video BUFFER < 0x200 Bytes
//   -bit 21 Video BUFFER < 0x100 Bytes
//   -bit 20 Video BUFFER < 0x80 Bytes
//   -bit 19 Video BUFFER < 0x40 Bytes
//   -bit 18 Video BUFFER < 0x20 Bytes
//   -bit 17 vififo  < 16 double words
//   -bit 16 vififo  < 8 double words
// bit  [15:13] unused
// bit  [12]    A_urgent
// bit  [11]    transfer_length 0 - 32x64 Bits per request, 1 - 16x64 Bits per request
// bit  [10]    use_level       Set this bit to 1 to enable filling of the FIFO controlled by the buffer
//                              level control.  If this bit is 0, then use bit[1] to control the enabling of filling
// bit  [9]     Data Ready.     This bit is set when data can be popped
// bit  [8]     fill busy       This bit will be high when we're fetching data from the DDR memory
//                              To reset this module, set cntl_enable = 0, and then wait for busy = 0.
//                              After that you can pulse cntl_init to start over
// bit  [7]     init_with_cntl_init
// bit  [6]     reserved
// bits [5:3]   endian:         see $lib/rtl/ddr_endian.v
// bit  [2]     cntl_empty_en   Set to 1 to enable reading the DDR memory FIFO
//                              Set cntl_empty_en = cntl_fill_en = 0 when pulsing cntl_init
// bit  [1]     cntl_fill_en    Set to 1 to enable reading data from DDR memory
// bit  [0]     cntl_init:      After setting the read pointers, sizes, channel masks
//                              and read masks, set this bit to 1 and then to 0
//                              NOTE:  You don't need to pulse cntl_init if only the start address is
//                              being changed
#define P_VLD_MEM_VIFIFO_CONTROL                   (volatile uint32_t *)0xfe323110
// --------------------------------------------
// VIFIFO Buffer Level Manager
// --------------------------------------------
#define P_VLD_MEM_VIFIFO_WP                        (volatile uint32_t *)0xfe323114
#define P_VLD_MEM_VIFIFO_RP                        (volatile uint32_t *)0xfe323118
#define P_VLD_MEM_VIFIFO_LEVEL                     (volatile uint32_t *)0xfe32311c
//
// bit  [8]     use_parser_video2_wp
// bit  [7]     vbuf2_out_manual
// bit  [6]     vbuf_out_manual
// bit  [5]     empty (ReadOnly)
// bit  [4]     full (ReadOnly)
// bit  [3:2]   reserved
// bit  [1]     manual mode     Set to 1 for manual write pointer mode
// bit  [0]     Init            Set high then low after everything has been initialized
#define P_VLD_MEM_VIFIFO_BUF_CNTL                  (volatile uint32_t *)0xfe323120
// bit 31:16 -- drop_bytes
// bit 15:14 -- drop_status (Read-Only)
// bit 13:12 -- sync_match_position (Read-Only)
// bit 11:6 -- reserved
// bit 5:4 -- TIME_STAMP_NUMBER, 0-32bits, 1-64bits, 2-96bits, 3-128bits
// bit 3 -- stamp_soft_reset
// bit 2 -- TIME_STAMP_length_enable
// bit 1 -- TIME_STAMP_sync64_enable
// bit 0 -- TIME_STAMP_enable
#define P_VLD_TIME_STAMP_CNTL                      (volatile uint32_t *)0xfe323124
// bit 31:0 -- TIME_STAMP_SYNC_CODE_0
#define P_VLD_TIME_STAMP_SYNC_0                    (volatile uint32_t *)0xfe323128
// bit 31:0 -- TIME_STAMP_SYNC_CODE_1
#define P_VLD_TIME_STAMP_SYNC_1                    (volatile uint32_t *)0xfe32312c
// bit 31:0 TIME_STAMP_0
#define P_VLD_TIME_STAMP_0                         (volatile uint32_t *)0xfe323130
// bit 31:0 TIME_STAMP_1
#define P_VLD_TIME_STAMP_1                         (volatile uint32_t *)0xfe323134
// bit 31:0 TIME_STAMP_2
#define P_VLD_TIME_STAMP_2                         (volatile uint32_t *)0xfe323138
// bit 31:0 TIME_STAMP_3
#define P_VLD_TIME_STAMP_3                         (volatile uint32_t *)0xfe32313c
// bit 31:0 TIME_STAMP_LENGTH
#define P_VLD_TIME_STAMP_LENGTH                    (volatile uint32_t *)0xfe323140
// bit 15:0 vififo_rd_count
#define P_VLD_MEM_VIFIFO_WRAP_COUNT                (volatile uint32_t *)0xfe323144
// bit 29:24 A_brst_num
// bit 21:16 A_id
// bit 15:0 level_hold
#define P_VLD_MEM_VIFIFO_MEM_CTL                   (volatile uint32_t *)0xfe323148
#define P_VLD_MEM_VBUF_RD_PTR                      (volatile uint32_t *)0xfe32314c
#define P_VLD_MEM_VBUF2_RD_PTR                     (volatile uint32_t *)0xfe323150
#define P_VLD_MEM_SWAP_ADDR                        (volatile uint32_t *)0xfe323154
// bit[23:16] - swap_d_count (Read Only)
// bit[15:8]  - swap_a_count (Read Only)
// bit [7] - swap busy (Read Only)
// bit [6:2] - reserved
// bit [1] - 1 - STORE to Memory, 0 - LOAD from Memory
// bit [0] - swap active
#define P_VLD_MEM_SWAP_CTL                         (volatile uint32_t *)0xfe323158
// bit[12]  -- zero_use_cbp_blk
// bit[11]  -- mv_use_abs (only calculate abs)
// bit[10]  -- mv_use_simple_mode (every size count has same weight)
// bit[9]   -- use_simple_mode (every size count has same weight)
// bit[8]   -- reset_all_count // write only
// bit[7:5] Reserved
// bit[4:0] pic_quality_rd_idx
#define P_VDEC_PIC_QUALITY_CTRL                    (volatile uint32_t *)0xfe32315c
// idx  -- read out
//   0  -- blk88_y_count // 4k will use 20 bits
//   1  -- qp_y_sum // 4k use 27 bits
//   2  -- intra_y_count // 4k use 20 bits
//   3  -- skipped_y_count // 4k use 20 bits
//   4  -- coeff_non_zero_y_count // 4k use 20 bits
//   5  -- blk66_c_count // 4k will use 20 bits
//   6  -- qp_c_sum // 4k use 26 bits
//   7  -- intra_c_count // 4k use 20 bits
//   8  -- skipped_cu_c_count // 4k use 20 bits
//   9  -- coeff_non_zero_c_count // 4k use 20 bits
//  10  -- { 1'h0, qp_c_max[6:0], 1'h0, qp_c_min[6:0], 1'h0, qp_y_max[6:0], 1'h0, qp_y_min[6:0]}
//  11  -- blk22_mv_count
//  12  -- {mvy_L1_count[39:32], mvx_L1_count[39:32], mvy_L0_count[39:32], mvx_L0_count[39:32]}
//  13  -- mvx_L0_count[31:0]
//  14  -- mvy_L0_count[31:0]
//  15  -- mvx_L1_count[31:0]
//  16  -- mvy_L1_count[31:0]
//  17  -- {mvx_L0_max, mvx_L0_min} // format : {sign, abs[14:0]}
//  18  -- {mvy_L0_max, mvy_L0_min}
//  19  -- {mvx_L1_max, mvx_L1_min}
//  20  -- {mvy_L1_max, mvy_L1_min}
#define P_VDEC_PIC_QUALITY_DATA                    (volatile uint32_t *)0xfe323160
// 31:0 vdec_stream_crc
#define P_VDEC_STREAM_CRC                          (volatile uint32_t *)0xfe323164
// 31:0  h264_buff_start_addr
#define P_VDEC_H264_TOP_BUFF_START                 (volatile uint32_t *)0xfe323168
// 31:24 top_read_hole ( *16 bytes)
// 23    h264_top_urgent
// 22    read_has_priority
// 21    read_wait_wrrsp (For tiny frame size)
// 20:18 reserved
// 17    h264_top_mode    // 0:16bytes, 1:32bytes
// 16    h264_hw_top_enable
// 15:0  h264_buff_size
#define P_VDEC_H264_TOP_CFG                        (volatile uint32_t *)0xfe32316c
// 31:16 h264_top_rd_offset
// 15:0  h264_top_wr_offset
#define P_VDEC_H264_TOP_OFFSET                     (volatile uint32_t *)0xfe323170
// 31:24 h264_top_wrrsp
// 23:16 top_pop_mb_count
// 15:7  reserved
// 6     h264_top_load_pending_2   (ReadOnly)
// 5     h264_top_load_pending_1   (ReadOnly)
// 4     h264_top_store_pending   (ReadOnly)
// 3     need_write   (ReadOnly)
// 2     need_read    (ReadOnly)
// 1     A_write      (ReadOnly)
// 0     A_req (busy) (ReadOnly)
#define P_VDEC_H264_TOP_CTRL                       (volatile uint32_t *)0xfe323174
//
// Closing file:  vld_regs.h
//
//------------------------------------------------------------------------------
// IQ/IDCT module level register offset
//------------------------------------------------------------------------------
//
// Reading file:  iqidct_regs.h
//
//========================================================================
//  IQ/IDCT module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_VDEC_IQIDCT_CBUS_BASE = 0x0e
// -----------------------------------------------
#define P_VCOP_CTRL_REG                            (volatile uint32_t *)0xfe323800
#define P_QP_CTRL_REG                              (volatile uint32_t *)0xfe323804
#define P_INTRA_QUANT_MATRIX                       (volatile uint32_t *)0xfe323808
#define P_NON_I_QUANT_MATRIX                       (volatile uint32_t *)0xfe32380c
#define P_DC_SCALER                                (volatile uint32_t *)0xfe323810
#define P_DC_AC_CTRL                               (volatile uint32_t *)0xfe323814
// `define RV_AI_CTRL          8'h05  // ONLY for $ucode/real/amrisc/rv.s reg value from apollo
#define P_DC_AC_SCALE_MUL                          (volatile uint32_t *)0xfe323818
#define P_DC_AC_SCALE_DIV                          (volatile uint32_t *)0xfe32381c
// `define DC_AC_SCALE_RESULT  8'h06
// `define RESERVED_E07        8'h07
#define P_POWER_CTL_IQIDCT                         (volatile uint32_t *)0xfe323820
#define P_RV_AI_Y_X                                (volatile uint32_t *)0xfe323824
#define P_RV_AI_U_X                                (volatile uint32_t *)0xfe323828
#define P_RV_AI_V_X                                (volatile uint32_t *)0xfe32382c
// bit 15:0 will count up when rv_ai_mb finished when non zero
// and rv_ai_mb_finished_int will be generate when this is not zero
#define P_RV_AI_MB_COUNT                           (volatile uint32_t *)0xfe323830
// For H264 I in PB picture Use -- dma type : h264_next_intra_dma
#define P_NEXT_INTRA_DMA_ADDRESS                   (volatile uint32_t *)0xfe323834
// Bit 18 -- neighbor_intra_dcac_do_not_use_reg
// Bit 17 -- neighbor_intra_idct_use_reg
// Bit 16 -- dcac_dma_read_cache_disable
// Bit 15 -- dcac_dma_urgent
// Bit 14 -- nv21_swap
// Bit 13 -- nv21_top_dma
// Bit 12 -- reset_rv_ai_wait_rd_data
// Bit 11 -- set_rv_ai_wait_rd_data [12:11] = 3 means only dec 1 (For Skipped MB of MBAFF)
// Bit 10 -- rv_ai_wait_rd_data (Read Only)
// Bit 9 -- enable_rv_ai_wait_rd_data
// Bit 8 -- disable_vc1_mv_update
// Bit 7 -- pred_dc_signed
// Bit 6 -- inc_vld_ready_count
// Bit 5 -- dec_vld_ready_count
// Bit 4 -- disable_ref_bidir_fix
// Bit 3 -- disable_MV_UL_l1_bot_fix
// Bit 2 -- disable_mb_aff_fix
// Bit 1 -- canvas_addr_7
// Bit 0 -- constrained_intra_pred_flag for H264
#define P_IQIDCT_CONTROL                           (volatile uint32_t *)0xfe323838
// Bit[31:19] Reserved
// Bit[18] iq_waiting
// Bit[17] iq_om_wr_idx
// Bit[16] iq_om_rd_idx
// Bit[15] iq_om_busy
// Bit[14] iq_om_2_busy
// Bit[13] idx_fifo_0
// Bit[12] idx_fifo_1
// Bit[11] idx_fifo_2
// Bit[10] idx_fifo_3
// Bit[9] idx_fifo_4
// Bit[8] idx_fifo_5
// Bit[7] idx_fifo_6
// Bit[6] idx_fifo_7
// Bit[5:3] idx_fifo_wp
// Bit[2:0] idx_fifo_rp
#define P_IQIDCT_DEBUG_INFO_0                      (volatile uint32_t *)0xfe32383c
// For RTL Simulation Only
#define P_DEBLK_CMD                                (volatile uint32_t *)0xfe323840
// Bit[15+16] ds_mc_valid_2
// Bit[14+16] new_idct1_rd_idx_2
// Bit[13+16] new_idct1_wr_idx_2
// Bit[12+16] idct1_buff0_busy_2
// Bit[11+16] idct1_buff1_busy_2
// Bit[10+16] new_idct1_busy_2
// Bit[9+16] iq_om_8val_2
// Bit[8+16] idct1_pipe_busy_2
// Bit[7+16] wait_mb_left_finish_hold_2
// Bit[6+16] new_idct2_rd_idx_2
// Bit[5+16] new_idct2_wr_idx_2
// Bit[4+16] idct2_buff0_busy_2
// Bit[3+16] idct2_buff1_busy_2
// Bit[2+16] idct2_en_2
// Bit[1+16] new_idct2_busy_2
// Bit[0+16] new_idct1_ready_2
// Bit[15] ds_mc_valid_1
// Bit[14] new_idct1_rd_idx_1
// Bit[13] new_idct1_wr_idx_1
// Bit[12] idct1_buff0_busy_1
// Bit[11] idct1_buff1_busy_1
// Bit[10] new_idct1_busy_1
// Bit[9] iq_om_8val_1
// Bit[8] idct1_pipe_busy_1
// Bit[7] wait_mb_left_finish_hold_1
// Bit[6] new_idct2_rd_idx_1
// Bit[5] new_idct2_wr_idx_1
// Bit[4] idct2_buff0_busy_1
// Bit[3] idct2_buff1_busy_1
// Bit[2] idct2_en_1
// Bit[1] new_idct2_busy_1
// Bit[0] new_idct1_ready_1
#define P_IQIDCT_DEBUG_IDCT                        (volatile uint32_t *)0xfe323844
// bit 31 -- convas_enable
// bit 30:24 -- convas_x_count ( 8 pixels / 64 bits )
// bit 23:16 -- convas_y_count
// bit 17 -- I_in_P_prefetch_active
// bit 16 -- force_byte64_bypass
// bit 15   -- dcac_dma_busy
// bit 14   -- dcac_dma_read_cache_active
// bit 13:8 -- dcac_dma_count
// bit 7    -- dcac_dma_rw
// bit 6    -- dcac_skip_read_mode
// bit 5:0  -- dcac_dma_offset
#define P_DCAC_DMA_CTRL                            (volatile uint32_t *)0xfe323848
// when (convas_enable == 0 )
//   bit 31:0 dcac_dma_addr
// when (convas_enable == 1 )
//   bit 31:25 canvas_addr (7 bits)
//   bit 24:12 convas_y_start ( 13 btis )
//   bit 11:0  convas_x_start ( 12 btis )
#define P_DCAC_DMA_ADDRESS                         (volatile uint32_t *)0xfe32384c
// bit 7:0 -- dcac_cpu_addr
#define P_DCAC_CPU_ADDRESS                         (volatile uint32_t *)0xfe323850
// bit 31:0 -- dcac_cpu_data
#define P_DCAC_CPU_DATA                            (volatile uint32_t *)0xfe323854
// bit 31:19 -- reserved
// bit 18:16 -- block_num_reg -- Read-Only
// bit 15:0 -- dcac_mb_count
#define P_DCAC_MB_COUNT                            (volatile uint32_t *)0xfe323858
// bit 31:19 -- reserved
//   bit 18 -- iq 3fifo bypass en
// For H264 :
//   bit 17:2 -- h264_quant
//   bit 11:6 -- h264_quant_c
//   bit  5:0 -- h264_quant_c
// For VC1 :
//   bit    17 -- qindex_GT_8
//   bit    16 -- HalfQPStep
//   bit 15:12 -- eQuantMode
//   bit 11:6  -- AltPQuant
//   bit  5:0  -- PQuant
//
#define P_IQ_QUANT                                 (volatile uint32_t *)0xfe32385c
// bit 31:24  -- bitplane_width
// bit 23:16  -- bitplane_height
// bit 15:14  -- bitplane_start_x
// bit 13:12  -- bitplane_start_y
// bit 11:4   -- reserved
// bit 3:1    -- bitplane_type
// bit 0      -- bitplane_busy
#define P_VC1_BITPLANE_CTL                         (volatile uint32_t *)0xfe323860
// bit 24:16  -- wq_param1
// bit  8: 0  -- wq_param0
#define P_AVSP_IQ_WQ_PARAM_01                      (volatile uint32_t *)0xfe323864
// bit 24:16  -- wq_param3
// bit  8: 0  -- wq_param2
#define P_AVSP_IQ_WQ_PARAM_23                      (volatile uint32_t *)0xfe323868
// bit 24:16  -- wq_param5
// bit  8: 0  -- wq_param4
#define P_AVSP_IQ_WQ_PARAM_45                      (volatile uint32_t *)0xfe32386c
// bit    31  -- weight_quant_en
// bit 17:16  -- current_scene_model
// bit 12: 8  -- chroma_qp_delta_cr
// bit  4: 0  -- chroma_qp_delta_cb
#define P_AVSP_IQ_CTL                              (volatile uint32_t *)0xfe323870
// bit 30:28 - rd_buf_wr_addr // Read Only
// bit 27    - Reserved
// bit 26:24 - rd_buf_rd_addr // Read Only
// bit 23:20 - rd_data_pending // Read Only
// bit 19:16 - rd_cache_valid_cnt // Read Only
// bit 15    - Reserved
// bit 14:12 - ddr_byte64_rd_status // READ Only
// bit 11    - Reserved
// bit 10:8  - wr_buf_rd_ptr  // Read Only
// bit  7:4  - wr_buf_cnt     // Read Only
// bit  3:2  - rd_start_mode - 0:64Bytes, 1:32Bytes, 2:pass_through 3:invalid_cache
// bit  1:0  - wr_start_mode - 0:64Bytes, 1:32Bytes, 2:pass_through 3:flush
#define P_DCAC_DDR_BYTE64_CTL                      (volatile uint32_t *)0xfe323874
#define P_DCAC_DMA_MIN_ADDR                        (volatile uint32_t *)0xfe323878
#define P_DCAC_DMA_MAX_ADDR                        (volatile uint32_t *)0xfe32387c
// bit[31:28] - RV_AI_BUFF_INC  // 6 for normal 12 for MBAFF
// bit[27] - dcac_dma_hw_enable
// bit[26] - dcac_dma_int_use_state
// bit[18] - I_in_P_prefetch_active_disable
// bit[17] - force_top_intra_mv_bypass_disable
// bit[16] - dcac_dma_limit_enable
// bit[15:12] - max_wrrsp // 0 small size, otherwise use RV_AI_BUFF_INC
// bit[11:8] - max_wr_buf_rd_ptr // 0
// bit[7:4] - max_wr_buf_cnt // 7
// bit[3] dcac_dma_comp_busy_wrrsp_en
// bit[2] dcac_dma_comp_busy_wr_buf_rd_ptr_en
// bit[1] dcac_dma_comp_busy_wr_buf_cnt_en
// bit[0] dcac_dma_comp_busy_dma_busy_en
#define P_DCAC_DMA_HW_CTL_CFG                      (volatile uint32_t *)0xfe323880
// bit[31] - inc_pic_mb_count
// bit[30] - dec_pic_mb_count
// bit[15:0] i_pic_mb_count (when not inc_pic_mb_count)
#define P_I_PIC_MB_COUNT_HW                        (volatile uint32_t *)0xfe323884
// bit[9]   dec_mv_cal_ready  // work_with set_mv_cal_ready together
// bit[8]   mb_aff_added_dma
// bit[7]   set_mv_cal_ready  // need to send H264_SET_CLEAR_MV_CAL_READY
// bit[6]   DCAC_PREVIOUS_mb_type_eq_0
// bit[5:4] ai_dma_buffer
// bit[3:2] need_read_top_info
// bit[1:0] read_top_info_state
#define P_DCAC_DMA_HW_INFO                         (volatile uint32_t *)0xfe323888
// bit[31:16] ai_read_offset
// bit[15:0]  ai_write_offset
#define P_DCAC_DMA_HW_OFFSET                       (volatile uint32_t *)0xfe32388c
// bit[23:16] mb_width
// bit[15:0] RV_AI_BUFF_START
#define P_DCAC_DMA_HW_BUFF_START                   (volatile uint32_t *)0xfe323890
// bit[31:0] NEXT_INTRA_READ_ADDR
#define P_NEXT_INTRA_READ_ADDR_HW                  (volatile uint32_t *)0xfe323894
// bit[31] dcac_dma_comp_busy (Read Only)
// bit[30] ai_read_start_update_enable (Write Only) wr_buf_cnt_busy(Read)
// bit[29] ai_write_start_update_enable(Write Only) wr_buf_rd_ptr_busy(Read)
// bit[28] rv_ai_status_update_enable (Write Only) wrrsp_busy(Read)
// bit[27:16] ai_read_start
// bit[15:4]  ai_write_start
// bit[3:0]   rv_ai_status
#define P_DCAC_DMA_HW_CTL                          (volatile uint32_t *)0xfe323898
// bit[31:0] mbbot_addr
#define P_DCAC_DMA_HW_MBBOT_ADDR                   (volatile uint32_t *)0xfe32389c
// bit[31:16] total_mby
// bit[15:0] DCAC_MBX
#define P_DCAC_DMA_HW_MBXY                         (volatile uint32_t *)0xfe3238a0
// bit[27:16] - MBX
// bit[15:0]  - slice_mb_count
#define P_SET_HW_TLR                               (volatile uint32_t *)0xfe3238a4
    #define RAM_TEST_CMD        0x002
    #define RAM_TEST_ADDR       0x003
    #define RAM_TEST_DATAH      0x004
    #define RAM_TEST_DATAL      0x005

    #define RAM_TEST_RD_CMD	    0x0000
    #define RAM_TEST_WR_CMD	    0x8000
    #define IDCT_TM2_PT0	    0x0001
    #define IDCT_TM2_PT1	    0x0002
    #define IDCT_TM1_PT0	    0x0004
    #define IDCT_TM1_PT1	    0x0008
    #define IQ_OMEM_PT0	        0x0010
    #define IQ_OMEM_PT1	        0x0020
    #define MC_IMEM_PT0	        0x0040
    #define ALL_RAM_PTS	        0x007f
//======================================
//  VCOP Control Register Bits
//
//======================================
    //`define IQIDCT_RESET	    16'h0001	    // Bit 0
    #define QM_WEN		    0x0002	    // Bit 1
    #define IQIDCT_ENABLE	    0x0004	    // Bit 2
    #define INTRA_QM	    0x0008	    // Bit 3	0 = Use default; 1 = use loaded
    #define NINTRA_QM	    0x0010	    // Bit 4	0 = Use default; 1 = use loaded
//======================================
//  QP Control Register Bits
//
//======================================
    #define INTRA_MODE	    0x0080	    // Bit 7
// Duplicate Address:  When actually used
// please move to a different address
// `define FLD_DCT_TYPE	    16'h0100	    // Bit 8	0 = Frame DCT; 1 = field DCT
//
// Closing file:  iqidct_regs.h
//
//------------------------------------------------------------------------------
// VCPU module level register offset
//------------------------------------------------------------------------------
//
// Reading file:  vcpu_regs.h
//
//========================================================================
//  VCPU module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_VDEC_VCPU_CBUS_BASE = 0x03
// -----------------------------------------------
#define P_MSP                                      (volatile uint32_t *)0xfe320c00
#define P_MPSR                                     (volatile uint32_t *)0xfe320c04
#define P_MINT_VEC_BASE                            (volatile uint32_t *)0xfe320c08
#define P_MCPU_INTR_GRP                            (volatile uint32_t *)0xfe320c0c
#define P_MCPU_INTR_MSK                            (volatile uint32_t *)0xfe320c10
#define P_MCPU_INTR_REQ                            (volatile uint32_t *)0xfe320c14
#define P_MPC_P                                    (volatile uint32_t *)0xfe320c18
#define P_MPC_D                                    (volatile uint32_t *)0xfe320c1c
#define P_MPC_E                                    (volatile uint32_t *)0xfe320c20
#define P_MPC_W                                    (volatile uint32_t *)0xfe320c24
#define P_MINDEX0_REG                              (volatile uint32_t *)0xfe320c28
#define P_MINDEX1_REG                              (volatile uint32_t *)0xfe320c2c
#define P_MINDEX2_REG                              (volatile uint32_t *)0xfe320c30
#define P_MINDEX3_REG                              (volatile uint32_t *)0xfe320c34
#define P_MINDEX4_REG                              (volatile uint32_t *)0xfe320c38
#define P_MINDEX5_REG                              (volatile uint32_t *)0xfe320c3c
#define P_MINDEX6_REG                              (volatile uint32_t *)0xfe320c40
#define P_MINDEX7_REG                              (volatile uint32_t *)0xfe320c44
#define P_MMIN_REG                                 (volatile uint32_t *)0xfe320c48
#define P_MMAX_REG                                 (volatile uint32_t *)0xfe320c4c
#define P_MBREAK0_REG                              (volatile uint32_t *)0xfe320c50
#define P_MBREAK1_REG                              (volatile uint32_t *)0xfe320c54
#define P_MBREAK2_REG                              (volatile uint32_t *)0xfe320c58
#define P_MBREAK3_REG                              (volatile uint32_t *)0xfe320c5c
#define P_MBREAK_TYPE                              (volatile uint32_t *)0xfe320c60
#define P_MBREAK_CTRL                              (volatile uint32_t *)0xfe320c64
#define P_MBREAK_STAUTS                            (volatile uint32_t *)0xfe320c68
#define P_MDB_ADDR_REG                             (volatile uint32_t *)0xfe320c6c
#define P_MDB_DATA_REG                             (volatile uint32_t *)0xfe320c70
#define P_MDB_CTRL                                 (volatile uint32_t *)0xfe320c74
#define P_MSFTINT0                                 (volatile uint32_t *)0xfe320c78
#define P_MSFTINT1                                 (volatile uint32_t *)0xfe320c7c
#define P_CSP                                      (volatile uint32_t *)0xfe320c80
#define P_CPSR                                     (volatile uint32_t *)0xfe320c84
#define P_CINT_VEC_BASE                            (volatile uint32_t *)0xfe320c88
#define P_CCPU_INTR_GRP                            (volatile uint32_t *)0xfe320c8c
#define P_CCPU_INTR_MSK                            (volatile uint32_t *)0xfe320c90
#define P_CCPU_INTR_REQ                            (volatile uint32_t *)0xfe320c94
#define P_CPC_P                                    (volatile uint32_t *)0xfe320c98
#define P_CPC_D                                    (volatile uint32_t *)0xfe320c9c
#define P_CPC_E                                    (volatile uint32_t *)0xfe320ca0
#define P_CPC_W                                    (volatile uint32_t *)0xfe320ca4
#define P_CINDEX0_REG                              (volatile uint32_t *)0xfe320ca8
#define P_CINDEX1_REG                              (volatile uint32_t *)0xfe320cac
#define P_CINDEX2_REG                              (volatile uint32_t *)0xfe320cb0
#define P_CINDEX3_REG                              (volatile uint32_t *)0xfe320cb4
#define P_CINDEX4_REG                              (volatile uint32_t *)0xfe320cb8
#define P_CINDEX5_REG                              (volatile uint32_t *)0xfe320cbc
#define P_CINDEX6_REG                              (volatile uint32_t *)0xfe320cc0
#define P_CINDEX7_REG                              (volatile uint32_t *)0xfe320cc4
#define P_CMIN_REG                                 (volatile uint32_t *)0xfe320cc8
#define P_CMAX_REG                                 (volatile uint32_t *)0xfe320ccc
#define P_CBREAK0_REG                              (volatile uint32_t *)0xfe320cd0
#define P_CBREAK1_REG                              (volatile uint32_t *)0xfe320cd4
#define P_CBREAK2_REG                              (volatile uint32_t *)0xfe320cd8
#define P_CBREAK3_REG                              (volatile uint32_t *)0xfe320cdc
#define P_CBREAK_TYPE                              (volatile uint32_t *)0xfe320ce0
#define P_CBREAK_CTRL                              (volatile uint32_t *)0xfe320ce4
#define P_CBREAK_STAUTS                            (volatile uint32_t *)0xfe320ce8
#define P_CDB_ADDR_REG                             (volatile uint32_t *)0xfe320cec
#define P_CDB_DATA_REG                             (volatile uint32_t *)0xfe320cf0
#define P_CDB_CTRL                                 (volatile uint32_t *)0xfe320cf4
#define P_CSFTINT0                                 (volatile uint32_t *)0xfe320cf8
#define P_CSFTINT1                                 (volatile uint32_t *)0xfe320cfc
#define P_IMEM_DMA_CTRL                            (volatile uint32_t *)0xfe320d00
#define P_IMEM_DMA_ADR                             (volatile uint32_t *)0xfe320d04
#define P_IMEM_DMA_COUNT                           (volatile uint32_t *)0xfe320d08
// bit[29:24] A_brst_num_imem
// bit[21:16] A_id_imem
// bit[11:0] wrrsp_count_imem (reserved)
#define P_WRRSP_IMEM                               (volatile uint32_t *)0xfe320d0c
#define P_LMEM_DMA_CTRL                            (volatile uint32_t *)0xfe320d40
#define P_LMEM_DMA_ADR                             (volatile uint32_t *)0xfe320d44
#define P_LMEM_DMA_COUNT                           (volatile uint32_t *)0xfe320d48
// bit[29:24] A_brst_num_lmem
// bit[21:16] A_id_lmem
// bit[11:0] wrrsp_count_lmem
#define P_WRRSP_LMEM                               (volatile uint32_t *)0xfe320d4c
#define P_MAC_CTRL1                                (volatile uint32_t *)0xfe320d80
#define P_ACC0REG1                                 (volatile uint32_t *)0xfe320d84
#define P_ACC1REG1                                 (volatile uint32_t *)0xfe320d88
#define P_MAC_CTRL2                                (volatile uint32_t *)0xfe320dc0
#define P_ACC0REG2                                 (volatile uint32_t *)0xfe320dc4
#define P_ACC1REG2                                 (volatile uint32_t *)0xfe320dc8
#define P_CPU_TRACE                                (volatile uint32_t *)0xfe320e00
//
// Closing file:  vcpu_regs.h
//
//------------------------------------------------------------------------------
// HENC module level register offset
//------------------------------------------------------------------------------
//
// Reading file:  henc_regs.h
//
//========================================================================
//  MDEC module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_HCODEC_HENC_CBUS_BASE = 0x0a
// -----------------------------------------------
#define P_HENC_SCRATCH_0                           (volatile uint32_t *)0xfe326b00
#define P_HENC_SCRATCH_1                           (volatile uint32_t *)0xfe326b04
#define P_HENC_SCRATCH_2                           (volatile uint32_t *)0xfe326b08
#define P_HENC_SCRATCH_3                           (volatile uint32_t *)0xfe326b0c
#define P_HENC_SCRATCH_4                           (volatile uint32_t *)0xfe326b10
#define P_HENC_SCRATCH_5                           (volatile uint32_t *)0xfe326b14
#define P_HENC_SCRATCH_6                           (volatile uint32_t *)0xfe326b18
#define P_HENC_SCRATCH_7                           (volatile uint32_t *)0xfe326b1c
#define P_HENC_SCRATCH_8                           (volatile uint32_t *)0xfe326b20
#define P_HENC_SCRATCH_9                           (volatile uint32_t *)0xfe326b24
#define P_HENC_SCRATCH_A                           (volatile uint32_t *)0xfe326b28
#define P_HENC_SCRATCH_B                           (volatile uint32_t *)0xfe326b2c
#define P_HENC_SCRATCH_C                           (volatile uint32_t *)0xfe326b30
#define P_HENC_SCRATCH_D                           (volatile uint32_t *)0xfe326b34
#define P_HENC_SCRATCH_E                           (volatile uint32_t *)0xfe326b38
#define P_HENC_SCRATCH_F                           (volatile uint32_t *)0xfe326b3c
#define P_HENC_SCRATCH_G                           (volatile uint32_t *)0xfe326b40
#define P_HENC_SCRATCH_H                           (volatile uint32_t *)0xfe326b44
#define P_HENC_SCRATCH_I                           (volatile uint32_t *)0xfe326b48
#define P_HENC_SCRATCH_J                           (volatile uint32_t *)0xfe326b4c
#define P_HENC_SCRATCH_K                           (volatile uint32_t *)0xfe326b50
#define P_HENC_SCRATCH_L                           (volatile uint32_t *)0xfe326b54
#define P_HENC_SCRATCH_M                           (volatile uint32_t *)0xfe326b58
#define P_HENC_SCRATCH_N                           (volatile uint32_t *)0xfe326b5c
// bit [7:0] data_feed_buff_id
#define P_IE_DATA_FEED_BUFF_INFO                   (volatile uint32_t *)0xfe326b60
//
// Closing file:  henc_regs.h
//
//------------------------------------------------------------------------------
// VLC module level register offset
//------------------------------------------------------------------------------
//
// Reading file:  vlc_regs.h
//
//========================================================================
//  VLC module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_HCODEC_VLC_CBUS_BASE = 0x0d
// -----------------------------------------------
// Bit[31:28] - henc_status
// Bit[27:9] - reserved
// Bit[8]    disable_UVLC_SKIP_fix
// Bit[7]    mc_hcmd_buff_enable
// Bit[6]    mc_hcmd_use_mc_hcmd_buff
// Bit[5]    mc_hcmd_use_mc_hcmd_hw_start
// Bit[4]    no_mc_out_null_non_skipped_mb
// Bit[3]    mc_out_even_skipped_mb
// Bit[2] - hcmd_enable
// Bit[1] - vlc_control_enable (0 will treat as soft_reset)
// Bit[0] - vlc_input_enable (enable input interface)
#define P_VLC_STATUS_CTRL                          (volatile uint32_t *)0xfe327400
// Bit [31]  - small_luma_ignore_chroma
// Bit[30:16] - Reserved
// Bit [15]  - enable_free_clk_mc_hcmd_buff
// Bit [14]  - enable_free_clk_reg
// Bit [13]  - enable_free_clk_stream
// Bit [12]  - enable_free_clk_pre_buff
// Bit [11]  - enable_free_clk_vb_buff
// Bit [10]  - enable_free_clk_dc_input
// Bit [9]   - enable_free_clk_input
// Bit [8]   - enable_free_clk_mv_cal
// Bit [7]   - enable_free_clk_status
// Bit [6]   - enable_free_clk_mc_dblk_cmd_if
// Bit [5]   - disable_mvd_enc_finished
// Bit [4]   - I16MB_share_ipred_mode_with_I4MB
// Bit [3]   - fixed_picture_qp
// Bit [2]   - use_set_b8_mode ( not used now)
// Bit [1]   - use_set_mb_skip_run
// Bit [0]   - pop_coeff_even_all_zero
#define P_VLC_CONFIG                               (volatile uint32_t *)0xfe327404
// --------------------------------------------
// Bitstream DDR Interface
// --------------------------------------------
#define P_VLC_VB_START_PTR                         (volatile uint32_t *)0xfe327440
#define P_VLC_VB_END_PTR                           (volatile uint32_t *)0xfe327444
#define P_VLC_VB_WR_PTR                            (volatile uint32_t *)0xfe327448
// Read Only, VLC_VB_SW_RD_PTR or VLC_VB_HW_RD_PTR
#define P_VLC_VB_RD_PTR                            (volatile uint32_t *)0xfe32744c
#define P_VLC_VB_SW_RD_PTR                         (volatile uint32_t *)0xfe327450
// Read Only
#define P_VLC_VB_LEFT                              (volatile uint32_t *)0xfe327454
// VB FIFO Control
// bit  [31:24] vb_full_int_enable_cpu[7:0]
// bit  [23:16] vb_full_int_enable_amrisc[7:0]
//   -bit 23 Video BUFFER LEFT < 0x400 Bytes
//   -bit 22 Video BUFFER LEFT < 0x200 Bytes
//   -bit 21 Video BUFFER LEFT < 0x100 Bytes
//   -bit 20 Video BUFFER LEFT < 0x80 Bytes
//   -bit 19 Video BUFFER LEFT < 0x40 Bytes
//   -bit 18 Video BUFFER LEFT < 0x20 Bytes
//   -bit 17 vbfifo left  < 16 double words (8x64bits)
//   -bit 16 vbfifo left  < 8 double words (4x64bits)
// bit  [15]    wr_ptr_int_enable_cpu
// bit  [14]    wr_ptr_int_enable_amrisc
// bit  [13]    wr_ptr_int (Read Only, write 1 will clear)
// bit  [12]    vb_full_int_enable_cpu(Read Only)
// bit  [11]    vb_full_int_enable_amrisc(Read Only)
// bit  [10]    reserved
// bit  [9]     use_vb_hw_rd_ptr
// bit  [8]     vb_always_ready Set to 1 to ignore vb_level blocking DDR write
// bit  [7]     vb_ready_for_transfer (Read Only)
// bit  [6]     data_ready_for_transfer (Read Only)
// bits [5:3]   vb_endian       Set VB Endian inside DDR memory
// bit  [2]     vb_write_busy   Read Only - indicate DDR write busy
// bit  [1]     vb_write_en     Set to 1 to enable writing data to DDR memory
// bit  [0]     vb_soft_reset   Soft reset
#define P_VLC_VB_CONTROL                           (volatile uint32_t *)0xfe327458
// bit 31    transfer_length 0 - 32x64 Bits per request, 1 - 16x64 Bits per request  // default : 0
// bit 30    A_urgent  // default : 0
// bit 29:24 A_brst_num // default : 0x3f
// bit 23:22 reserved
// bit 21:16 A_id  // default : 0x20
// bit 15:0  vb_left_hold // default : 0
#define P_VLC_VB_MEM_CTL                           (volatile uint32_t *)0xfe32745c
// vb_wr_ptr address to generate interrupt
#define P_VLC_VB_INT_PTR                           (volatile uint32_t *)0xfe327460
// bit[31:12] reserved
// bit[11:0] vlc_wrrsp_count
#define P_VLC_WRRSP                                (volatile uint32_t *)0xfe327464
#define P_VLC_TOTAL_BYTES                          (volatile uint32_t *)0xfe327468
// bit  [31:26] reserved
// bit  [25]    vb_flush
// bit  [24]    vb_reg_ready
// bit  [23:16] vb_buff_left     -- Read only
// bit  [15:8]  vb_buff_wr_point -- RW
// bit  [7:0]   vb_buff_rd_point -- RW
#define P_VLC_VB_BUFF                              (volatile uint32_t *)0xfe32746c
// bit[31]    flush_vlc_pre_buff
// bit[30:27] reserved
// bit[26:24] vb_pre_buff_level
// bit[23:0]  vb_pre_buff_data[55:32]
#define P_VLC_VB_PRE_BUFF_HI                       (volatile uint32_t *)0xfe327470
// bit[31:0] vb_pre_buff_data[31:0]
#define P_VLC_VB_PRE_BUFF_LOW                      (volatile uint32_t *)0xfe327474
// bit[31]    stream_encap_enable  // 0x0000(00-03) will be changed to 0x000003(00-03) if enabled
// bit[30:29] stream_encap_delay   // delay bytes for encap used
// bit[28:24] stream_buff_point
// bit[23:0]  stream_buff_data
#define P_VLC_STREAM_BUFF                          (volatile uint32_t *)0xfe327478
// bit[31]    push_stream_block - Read Only (Will set if vb_buff full)
// bit[30]    push_stream_busy  - Read Only (busy when output one byte from stream_buf (max 2 clocks for 8 bits push)
// bit[29:28] stream_encap_status - Read Only
// bit[27:21] reserved
// Long Mode : (Amrisc need movilo and mvihi high to set stream_info)
//   bit[20:16] push_stream_long_length (0 or 31 : Mid or Short mode)
//   bit[15:0]  push_stream_data
// Mid Mode : (Amrisc need movi to set stream_info)
//   bit[15:12]] push_stream_mid_length (1-12 : mid mode active, 0-short mode, 15 - byte align)
//   bit[11:0]  push_stream_data
// Short Mode : (Amrisc can use mtspi to push stream directly)
//   bit[7:5] push_stream_short_length (0-5 : short length, else - invalid)
//   bit[4:0]  push_stream_data
#define P_VLC_PUSH_STREAM                          (volatile uint32_t *)0xfe32747c
// bit[15:8] ELEMENT_LENGTH
// bit[7:1]  reserved
// bit[0]  Write - push start, Read - Push Busy
#define P_VLC_PUSH_ELEMENT                         (volatile uint32_t *)0xfe327480
#define P_VLC_ELEMENT_DATA                         (volatile uint32_t *)0xfe327484
// bit[9] reset_last_dquant_ne_zero
// bit[8] set_last_dquant_ne_zero
// bit[7] hcmd_intra_use_sw_info
// bit[6] hcmd_use_sw_info
// bit[5] always_use_info_0_cbp_blk
// bit[4] always_update_info_0_cbp_blk
// bit[3] reset_left_mb_wr
// bit[2] reset_top_mb_wr
// bit[1] set_left_mb_wr
// bit[0] set_top_mb_wr
#define P_VLC_SPECIAL_CTL                          (volatile uint32_t *)0xfe327488
// bit[28]    left_intra
// bit[27:22] left_quant
// bit[21:16] left_quant_c
// bit[12]    top_intra
// bit[11:6]  top_quant
// bit[5:0]   top_quant_c
#define P_VLC_HCMD_T_L_INFO                        (volatile uint32_t *)0xfe32748c
// bit[12]    cur_intra
// bit[11:6]  cur_quant
// bit[5:0]   cur_quant_c
#define P_VLC_HCMD_CUR_INFO                        (volatile uint32_t *)0xfe327490
// bit[13]    top_left_info_in_data_mv_cal
// bit[12]    only_use_info_0_top_left_in_I
// bit[11]    top_left_info_in_data
// bit[10]    early_mix_mc_hcmd
// bit[9]     update_top_left_mix
// bit[8]     p_top_left_mix
// bit[7]     mv_cal_mixed_type
// bit[6]     mc_hcmd_mixed_type
// bit[5]     use_separate_int_control
// bit[4]     hcmd_intra_use_q_info
// bit[3]     hcmd_left_use_prev_info
// bit[2]     hcmd_use_q_info
// bit[1]     use_q_delta_quant
// bit[0]     detect_I16_from_I4
#define P_VLC_ADV_CONFIG                           (volatile uint32_t *)0xfe327494
//   31 - use_hcmd_mb_xy_auto
//23:16 - hcmd_max_mb_x
//15:8  - hcmd_mb_y_auto
// 7:0  - hcmd_mb_x_auto
#define P_VLC_HCMD_MBXY_AUTO                       (volatile uint32_t *)0xfe327498
// bit[31:0] vlc_int_control_inter -- will be used when use_separate_int_control is set
#define P_VLC_INT_CONTROL_INTER                    (volatile uint32_t *)0xfe3274bc
// --------------------------------------------
// Picture VLC
// --------------------------------------------
// (&(int|(~AND_enable))|(|(int&OR_enable)))
// bit[31]    OR interrupt Enable Reserved
// bit[30]    OR interrupt Enable for mv_busy
// bit[29]    OR interrupt Enable for b8_mode_busy
// bit[28]    OR interrupt Enable for mb_skip_run_busy
// bit[27]    OR interrupt Enable for cbp_busy
// bit[26]    OR interrupt Enable for Reserved
// bit[25]    OR interrupt Enable for Reserved
// bit[24]    OR interrupt Enable for mb_info_busy
// bit[23]    AND interrupt Enable Reserved
// bit[22]    AND interrupt Enable for mv_busy
// bit[21]    AND interrupt Enable for b8_mode_busy
// bit[20]    AND interrupt Enable for mb_skip_run_busy
// bit[19]    AND interrupt Enable for cbp_busy
// bit[18]    AND interrupt Enable for Reserved
// bit[17]    AND interrupt Enable for Reserved
// bit[16]    AND interrupt Enable for mb_info_busy
// bit[15]    OR interrupt Enable Reserved
// bit[14]    OR interrupt Enable for mvd
// bit[13]    OR interrupt Enable for b8_mode
// bit[12]    OR interrupt Enable for mb_skip_run
// bit[11]    OR interrupt Enable for cbp_ready
// bit[10]    OR interrupt Enable for c_ipred_mode_ready
// bit[9]     OR interrupt Enable for ipred_mode_ready
// bit[8]     OR interrupt Enable for mb_info_ready
// bit[7]     AND interrupt Enable Reserved
// bit[6]     AND interrupt Enable for mvd
// bit[5]     AND interrupt Enable for b8_mode
// bit[4]     AND interrupt Enable for mb_skip_run
// bit[3]     AND interrupt Enable for cbp_ready
// bit[2]     AND interrupt Enable for c_ipred_mode_ready
// bit[1]     AND interrupt Enable for ipred_mode_ready
// bit[0]     AND interrupt Enable for mb_info_ready
#define P_VLC_INT_CONTROL                          (volatile uint32_t *)0xfe3274c0
// Bit[31:16] picture_height
// Bit[15:0]  picture_width
#define P_VLC_PIC_SIZE                             (volatile uint32_t *)0xfe3274c4
// [31:16] Reserved
// [15:3] pic_width_in_mbs_minus1
// [2:0]  picture_type
#define P_VLC_PIC_INFO                             (volatile uint32_t *)0xfe3274c8
// Bit[31:16] MB_NR
// Bit[15:8] MBY
// Bit[7:0] MBX
#define P_VLC_PIC_POSITION                         (volatile uint32_t *)0xfe3274cc
// Bit[31] MV_busy
// Bit[30:6] Reserved
// Bit[15] Reserved
// Bit[14] vlc_input_MV_busy
// Bit[13] vlc_input_b8_mode_busy
// Bit[12] vlc_input_mb_skip_run_busy
// Bit[11] vlc_input_cbp_busy
// Bit[10] Reserved
// Bit[9]  Reserved
// Bit[8] vlc_input_mb_info_busy
// Bit[7] Reserved
// Bit[6] mvd
// Bit[5] b8_mode
// Bit[4] mb_skip_run
// Bit[3] cbp
// Bit[2] c_ipred_mode
// Bit[1] ipred_mode
// Bit[0] mb_info ( mb_type, mb_x, mb_y)
#define P_VLC_INPUT_STATUS                         (volatile uint32_t *)0xfe3274d0
// Bit[31:28] detected_mb_type
// Bit[27:16] mb_y
// Bit[15:4]  mb_x
// Bit[3:0]   mb_type
#define P_VLC_MB_INFO                              (volatile uint32_t *)0xfe3274d4
// command 0 -- no pending
// normal command + 1 is pending command
//
// bit 31:28 -- pending command 7
// bit 27:24 -- pending command 6
// bit 23:20 -- pending command 5
// bit 19:16 -- pending command 4
// bit 15:12 -- pending command 3
// bit 11:8  -- pending command 2
// bit  7:4  -- pending command 1
// bit  3:0  -- pending command 0
#define P_VLC_ENC_PEND_CMD                         (volatile uint32_t *)0xfe3274d8
// For I Slice
// Bit[31:16] Reserved
// Bit[15:0] IntraType
#define P_HENC_TOP_INFO_0                          (volatile uint32_t *)0xfe3274dc
#define P_HENC_LEFT_INFO_0                         (volatile uint32_t *)0xfe3274e0
// For I Slice
// Bit[31:24] V_nnz
// Bit[23:16] U_nnz
// Bit[15:0]  Y_nnz
#define P_HENC_TOP_INFO_1                          (volatile uint32_t *)0xfe3274e4
#define P_HENC_LEFT_INFO_1                         (volatile uint32_t *)0xfe3274e8
// bit[63:0] ipred_mode
#define P_VLC_IPRED_MODE_HI                        (volatile uint32_t *)0xfe3274ec
#define P_VLC_IPRED_MODE_LO                        (volatile uint32_t *)0xfe3274f0
// bit[15:8] SE delta quant
// bit[7:0]  UE delta quant
#define P_VLC_DELTA_QP                             (volatile uint32_t *)0xfe3274f4
// bit[31:16] Reserved
// bit[15:12] Reserved
// bit[11:8] c_ipred_mode
// bit[7:0] cbp
#define P_VLC_MB_HEADER_INFO                       (volatile uint32_t *)0xfe3274f8
// bit[31:16] mb_skip_run
// bit[15:0]  b8_mode
#define P_VLC_P_MB_HEADER_INFO                     (volatile uint32_t *)0xfe3274fc
// bit[31]    write_ptr_update
// bit[30]    read_ptr_update
// bit[29:20] coeff_buf_level
// bit[19:10] coeff_buf_write_ptr
// bit[9:0]   coeff_buf_read_ptr
#define P_VLC_COEFF_BUF_STATUS                     (volatile uint32_t *)0xfe327500
// bit[31:10] Reserved
// bit[9:0] read_req_addr
#define P_VLC_COEFF_RD_REQ                         (volatile uint32_t *)0xfe327504
// bit[20]   - coeff_buf_read_finished
// bit[19]   - coeff_first
// bit[18:4] - coeff_level
// bit[3:0]  - coeff_run
#define P_VLC_COEFF                                (volatile uint32_t *)0xfe327508
// bit[31]    - coeff_info_ready
// bit[30:25] - Reserved
// bit[24:15] - block_begin_addr
// bit[14:11] - trailing_one_sign
// bit[10:6]  - total_coeff
// bit[5:4]   - trailing_ones
// bit[3:0]   - total_zeros
#define P_VLC_COEFF_INFO                           (volatile uint32_t *)0xfe32750c
// bit[31]    write_ptr_update
// bit[30]    read_ptr_update
// bit[29:25] Reserved
// bit[24:20] dc_buf_level -- 0-16
// bit[19:15] Reserved
// bit[14:10] dc_buf_write_ptr
// bit[9:5]   Reserved
// bit[4:0]   dc_buf_read_ptr
#define P_VLC_DC_BUF_STATUS                        (volatile uint32_t *)0xfe327510
// bit[31:10] Reserved
// bit[9:4]   Reserved
// bit[3:0]   read_req_addr
#define P_VLC_DC_RD_REQ                            (volatile uint32_t *)0xfe327514
// bit[31:17] - Reserved
// bit[16]   - dc_first
// bit[15:1] - dc_level
// bit[0]    - dc_type  0 - CDC, 1 - LDC
#define P_VLC_DC                                   (volatile uint32_t *)0xfe327518
// bit[31]    - dc_info_ready
// bit[30:25] - Reserved
// bit[24:20] - Reserved
// bit[19:15] - dc_idx_begin_addr
// bit[14:11] - dc_trailing_one_sign
// bit[10:6]  - dc_total_coeff
// bit[5:4]   - dc_trailing_ones
// bit[3:0]   - dc_total_zeros
#define P_VLC_DC_INFO                              (volatile uint32_t *)0xfe32751c
// bit[31:4]  - Reserved
// bit[3:0]   - mv_rw_idx  (auto increment when read/write VLC_MV)
#define P_VLC_MV_INDEX                             (volatile uint32_t *)0xfe327520
// bit[31:16] - MVY
// bit[15:0]  - MVX
#define P_VLC_MV                                   (volatile uint32_t *)0xfe327524
// bit[31:16] - MVY
// bitp15:0]  - MVX
// Write to HENC_TOP_MV_0 will cause previous U->UL, UR->U, and UR write
// Read will read U MV only
#define P_HENC_TOP_MV_0                            (volatile uint32_t *)0xfe327528
#define P_HENC_TOP_MV_1                            (volatile uint32_t *)0xfe32752c
#define P_HENC_TOP_MV_2                            (volatile uint32_t *)0xfe327530
#define P_HENC_TOP_MV_3                            (volatile uint32_t *)0xfe327534
#define P_HENC_LEFT_MV_0                           (volatile uint32_t *)0xfe327538
#define P_HENC_LEFT_MV_1                           (volatile uint32_t *)0xfe32753c
#define P_HENC_LEFT_MV_2                           (volatile uint32_t *)0xfe327540
#define P_HENC_LEFT_MV_3                           (volatile uint32_t *)0xfe327544
// Bit[31:1] Reserved
// Bit[0] top_left_mv_ready
#define P_TOP_LEFT_READY                           (volatile uint32_t *)0xfe327548
// Bit[31:16] Reserved
// Bit[15:0] mb_skip_run
#define P_MB_SKIP_RUN                              (volatile uint32_t *)0xfe32754c
// Bit[31:16] Reserved
// Bit[15]    Reserved
// Bit[14:13] rd_struct // 00 - frame, 10 - top field, 11 - bottom field
// Bit[12:11] wr_struct // 00 - frame, 10 - top field, 11 - bottom field
// Bit[10:5]  mv_buff_id
// Bit[4:0]   mv_ref
#define P_VLC_HCMD_CONFIG                          (volatile uint32_t *)0xfe327550
// Bit[9:0] h264_dblk_info
#define P_VLC_HCMD_DBLK_INFO                       (volatile uint32_t *)0xfe327554
// Bit[3:0] vlc_dbg_idx
#define P_VLC_DBG_IDX                              (volatile uint32_t *)0xfe327558
// Read Only
#define P_VLC_DBG_READ                             (volatile uint32_t *)0xfe32755c
// [   29] RW jpeg_comp2_ac_table_sel.                                                      Default 0.
// [   28] RW jpeg_comp2_dc_table_sel.                                                      Default 0.
// [26:25] RW jpeg_comp2_cnt_max.                                                           Default 0.
// [   24] RW jpeg_comp2_en. Set 1 if the scan will include component 2 (Cr).               Default 0.
// [   21] RW jpeg_comp1_ac_table_sel.                                                      Default 0.
// [   20] RW jpeg_comp1_dc_table_sel.                                                      Default 0.
// [18:17] RW jpeg_comp1_cnt_max.                                                           Default 0.
// [   16] RW jpeg_comp1_en. Set 1 if the scan will include component 1 (Cb).               Default 0.
// [   13] RW jpeg_comp0_ac_table_sel.                                                      Default 0.
// [   12] RW jpeg_comp0_dc_table_sel.                                                      Default 0.
// [10: 9] RW jpeg_comp0_cnt_max.                                                           Default 0.
// [    8] RW jpeg_comp0_en. Set 1 if the scan will include component 0 (Y).                Default 0.
// [    1] W  jpeg_coeff_init. Write 1 to this bit to initialize JPEG run length encoder.
// [    0] RW jpeg_en. 0=Disable JPEG encoder; 1=Enable JPEG encoder.                       Default 0.
#define P_VLC_JPEG_CTRL                            (volatile uint32_t *)0xfe327560
// [   13] RW jpeg_coeff_buf_overfl. Write this bit to 1 to clear overfl.
// [   12] RW jpeg_coeff_buf_undrfl. Write this bit to 1 to clear undrfl.
// [   11] R  jpeg_coeff_buf_full.
// [   10] R  jpeg_coeff_buf_empty.
// [ 8: 0] R  jpeg_coeff_buf_level.
#define P_VLC_JPEG_COEFF_BUF_STAT                  (volatile uint32_t *)0xfe327564
// [   16] RW JPEG HUFFMAN table access mode. 0=Write; 1=Read.  Default 1.
// [ 8: 0] RW JPEG HUFFMAN table addr.                          Default 0.
#define P_VLC_HUFFMAN_ADDR                         (volatile uint32_t *)0xfe327568
// [19: 0] RW JPEG HUFFMAN table data.
#define P_VLC_HUFFMAN_DATA                         (volatile uint32_t *)0xfe32756c
// bit[31:0] enc_mv_bits - including b8_mode and mvd
#define P_VLC_ENC_MV_BITS                          (volatile uint32_t *)0xfe327570
// bit[31:0] enc_coeff_bits - including cbp, token, trailing_sign, coeff_enc, h264_totzeros, h264_run
#define P_VLC_ENC_COEFF_BITS                       (volatile uint32_t *)0xfe327574
#define P_VLC_RESERVED_5E                          (volatile uint32_t *)0xfe327578
#define P_VLC_RESERVED_5F                          (volatile uint32_t *)0xfe32757c
// ----------------------------------------------------------
// CABAC
// ----------------------------------------------------------
// [15]     h264_biari_init
// [14]     h264_cabac_init
// [13:12]  reserved
// [11:10]  picture_ty
// [9:8]    cabac_init_idc  // should be 0 for  I_SLICE
// [7]      reserved
// [6]      cabac_en
// [5:0]    slice_quant
#define P_VLC_SLICE_QP                             (volatile uint32_t *)0xfe327580
// For save mvd[12:0] {mvd_y[6:0], mvd_x[5:0]}
#define P_HENC_TOP_INFO_2                          (volatile uint32_t *)0xfe327584
#define P_HENC_LEFT_INFO_2                         (volatile uint32_t *)0xfe327588
#define P_HENC_TOP_INFO_3                          (volatile uint32_t *)0xfe32758c
#define P_HENC_LEFT_INFO_3                         (volatile uint32_t *)0xfe327590
//
// Closing file:  vlc_regs.h
//
//------------------------------------------------------------------------------
// QDCT module level register offset
//------------------------------------------------------------------------------
//
// Reading file:  qdct_regs.h
//
//========================================================================
//  QDCT module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_HCODEC_QDCT_CBUS_BASE = 0x0f
// -----------------------------------------------
// bit[31:28] - mb_info_state
#define P_QDCT_STATUS_CTRL                         (volatile uint32_t *)0xfe327c00
// bit[18]    - enable_free_clk_sad_top
// bit[17]    - enable_free_clk_ie_top
// bit[16]    - enable_free_clk_ie_sub
// bit[15]    - enable_free_clk_mc_out
// bit[14]    - enable_free_clk_i_pred_top
// bit[13]    - enable_free_clk_idct_top
// bit[12]    - enable_free_clk_iq_top
// bit[11]    - enable_free_clk_q_top
// bit[10]    - enable_free_clk_dc_buff_8
// bit[9]     - enable_free_clk_dct_top
// bit[8]     - enable_free_clk_mb_info
// bit[7]     - enable_free_clk_mb_buff
// bit[6]     - enable_free_clk_reg
// bit[5]     - ignore_1_include_2nd_half_c
// bit[4]     - ignore_1_include_2nd_half
// bit[3]     - ignore_t_p8x8
// bit[2]     - not_ignore_dc
// bit[1]     - ignore_small_lac_intra
// bit[0]     - disable_fast_zero_block
#define P_QDCT_CONFIG                              (volatile uint32_t *)0xfe327c04
// bit[31]    - ignore_lac_coeff_en
// bit[30:26] - ignore_lac_coeff_else
// bit[25:21] - ignore_lac_coeff_2
// bit[20:16] - ignore_lac_coeff_1
// bit[15]    - ignore_cac_coeff_en
// bit[14:10] - ignore_cac_coeff_else
// bit[9:5]   - ignore_cac_coeff_2
// bit[4:0]   - ignore_cac_coeff_1
#define P_IGNORE_CONFIG                            (volatile uint32_t *)0xfe327c08
// bit[31]    - ignore_t_lac_coeff_en
// bit[30:26] - ignore_t_lac_coeff_else
// bit[25:21] - ignore_t_lac_coeff_2
// bit[20:16] - ignore_t_lac_coeff_1
// bit[15]    - ignore_cdc_coeff_en
// bit[14]    - ignore_t_lac_coeff_else_le_3
// bit[13]    - ignore_t_lac_coeff_else_le_4
// bit[12]    - ignore_cdc_only_when_empty_cac_inter
// bit[11]    - ignore_cdc_only_when_one_empty_inter
// bit[10:9]  - ignore_cdc_range_max_inter // 0-0, 1-1, 2,-2, 3-3
// bit[8:7]   - ignore_cdc_abs_max_inter // 0-1, 1-2, 2,-3, 3-4
// bit[6]     - reserved
// bit[5]     - ignore_cdc_only_when_empty_cac_intra
// bit[4]     - ignore_cdc_only_when_one_empty_intra
// bit[3:2]   - ignore_cdc_range_max_intra // 0-0, 1-1, 2,-2, 3-3
// bit[1:0]   - ignore_cdc_abs_max_intra // 0-1, 1-2, 2,-3, 3-4
#define P_IGNORE_CONFIG_2                          (volatile uint32_t *)0xfe327c0c
// --------------------------------------------
// MB DATA DDR Interface
// --------------------------------------------
#define P_QDCT_MB_START_PTR                        (volatile uint32_t *)0xfe327c40
#define P_QDCT_MB_END_PTR                          (volatile uint32_t *)0xfe327c44
#define P_QDCT_MB_WR_PTR                           (volatile uint32_t *)0xfe327c48
#define P_QDCT_MB_RD_PTR                           (volatile uint32_t *)0xfe327c4c
#define P_QDCT_MB_LEVEL                            (volatile uint32_t *)0xfe327c50
// bit  [31]    disable_mbxy_ie_save
// bit  [30]    no_wait_after_q_cdc
// bit  [29]    ie_start_int_enable
// bit  [28]    ignore_t_p8x8
// bit  [27]    zero_mc_out_null_non_skipped_mb
// bit  [26]    no_mc_out_null_non_skipped_mb
// bit  [25]    mc_out_even_skipped_mb
// bit  [24]    mc_out_wait_cbp_ready
// bit  [23]    mc_out_wait_mb_type_ready
// bit  [22]    i_pred_int_enable
// bit  [21]    intra_sat8_enable
// bit  [20]    ie_sub_enable
// bit  [19]    i_pred_enable
// bit  [18]    iq_enable
// bit  [17]    idct_enable
// bit  [16]    no_zero_coeff_mb
// bit  [15]    add_zero_coeff_block
// bit  [14]    mb_pause_enable
// bit  [13]    q_enable
// bit  [12]    dct_enable
// bit  [11]    ignore_magic_word
// bit  [10]    mb_info_en
// bit  [9]     mb_info_soft_reset
// bit  [8]     mb_always_ready Set to 1 to ignore mb_level blocking DDR read
// bit  [7]     mb_ready_for_transfer (Read Only)
// bit  [6]     data_ready_for_transfer (Read Only)
// bits [5:3]   mb_endian       Set MB Endian inside DDR memory
// bit  [2]     mb_read_busy   Read Only - indicate DDR read busy
// bit  [1]     mb_read_en     Set to 1 to enable reading data from DDR memory
// bit  [0]     mb_soft_reset   Soft reset
#define P_QDCT_MB_CONTROL                          (volatile uint32_t *)0xfe327c54
// bit 31    transfer_length 0 - 32x64 Bits per request, 1 - 16x64 Bits per request  // default : 0
// bit 30    A_urgent  // default : 0
// bit 29:24 A_brst_num // default : 0x3f
// bit 23    reserved
// bit 22    read_till_zero
// bit 21:16 A_id  // default : 0x21
// bit 15:0  mb_level_hold // default : 0
#define P_QDCT_MB_MEM_CTL                          (volatile uint32_t *)0xfe327c58
// bit  [31:24] reserved
// bit  [23:16] vb_buff_level     -- Read only
// bit  [15:8]  vb_buff_wr_point -- RW
// bit  [7:0]   vb_buff_rd_point -- RW
#define P_QDCT_MB_BUFF                             (volatile uint32_t *)0xfe327c5c
// bit [31:0] mb infor data begin magic word - default : 0xa55aaa55
#define P_QDCT_MB_MAGIC_WORD                       (volatile uint32_t *)0xfe327c60
// Read Only Register
// bit[19]   dct_ready_1
// bit[18]   dct_ready_0
// bit[17]   dct_rd_idx
// bit[16]   dct_wr_idx
// bit[15]   dct_srdy
// bit[14]   dct_rrdy
// bit[13]   Reserved
// bit[12:8] dct_block_number
// bit[7:4]  dct_rw_addr
// bit[3:0]  dct_status
#define P_QDCT_DCT_STATUS                          (volatile uint32_t *)0xfe327c64
// bit[24:23]  vlc_quant_count
// bit[22:16]  vlc_delta_quant_data
// bit[15:10]  vlc_quant_data
// bit[9:4]    vlc_prev_quant_data
// bit[3:0]    q_status
#define P_QDCT_Q_STATUS                            (volatile uint32_t *)0xfe327c68
// bit[31:3] Reserved
// bit[2:0]  picture_type
#define P_QDCT_PIC_INFO                            (volatile uint32_t *)0xfe327c6c
// bit[31:28] Reserved
// bit[27:22] I_pic_quant_c
// bit[21:16] I_pic_quant
// bit[15]    reserved
// bit[14:12] quant_rem_c
// bit[11:8]  quant_per_c
// bit[7]     reserved
// bit[6:4]   quant_rem
// bit[3:0]   quant_per
#define P_QDCT_Q_QUANT_I                           (volatile uint32_t *)0xfe327c70
// bit[31:28] Reserved
// bit[27:22] P_pic_quant_c
// bit[21:16] P_pic_quant
// bit[15]    reserved
// bit[14:12] quant_rem_c
// bit[11:8]  quant_per_c
// bit[7]     reserved
// bit[6:4]   quant_rem
// bit[3:0]   quant_per
#define P_QDCT_Q_QUANT_P                           (volatile uint32_t *)0xfe327c74
// bit[31]    mb_info_pause
// bit[30:16] pause_mby
// bit[15:0]  pause_mbx
#define P_QDCT_MB_PAUSE_CTL                        (volatile uint32_t *)0xfe327c78
// bit[31]   top_control_ready_i_pred
// bit[30:28]top_dma_status
// bit[27]   top_control_ready_ie
// bit[26:24]Reserved
// bit[23]   ul_mb
// bit[22]   right_mb
// bit[21]   top_mb
// bit[20]   left_mb
// bit[19:8] mb_x
// bit[7:6]  i_pred_ref_idx_L
// bit[5:4]  i_pred_ref_idx_UL
// bit[3:2]  i_pred_ref_idx_U
// bit[1:0]  i_pred_ref_idx_UR
#define P_QDCT_TOP_CONTROL                         (volatile uint32_t *)0xfe327c7c
// bit[31:0] top_base_addr - DDR Memory start address for save top Pixel
#define P_QDCT_TOP_BASE_MEM                        (volatile uint32_t *)0xfe327c80
// bit 15:13 Reserved
// bit 12    A_urgent  // default : 0
// bit 11:6  A_brst_num // default : 0x3f
// bit 5:0   A_id  // default : 0x22
#define P_QDCT_TOP_MEM_CTL                         (volatile uint32_t *)0xfe327c84
// bit [11:0] top_wrrsp_count
#define P_QDCT_TOP_WRRSP                           (volatile uint32_t *)0xfe327c88
// Bit[3:0] qdct_dbg_idx
#define P_QDCT_DBG_IDX                             (volatile uint32_t *)0xfe327c8c
// Read Only
#define P_QDCT_DBG_READ                            (volatile uint32_t *)0xfe327c90
// [19:18] RW jdct_inflow_ctrl. JPEG DCT input flow control.                                Default 0.
//            0=No halt;
//            1=DCT halts request at end of each 8x8 block;
//            2=DCT halts request at end of each MCU.
// [17:16] RW jpeg_coeff_last_sel.                                                          Default 0.
//            Select at which point to finish processing, give update to AmRISC so it can control the next step.
//            0=Mark last coeff at the end of an 8x8 block;
//            1=Mark at the end of an MCU;
//            2=Mark at the end of a scan.
// [   15] RW jpeg_quant_sel_comp2. 0=Comp2 select Quantization table 0; 1=Select table 1.  Default 0.
// [   14] RW jpeg_v_factor_comp2. Component 2's vertical sampling factor.                  Default 0.
// [   13] RW jpeg_h_factor_comp2. Component 2's horizontal sampling factor.                Default 0.
// [   12] RW jpeg_comp2_en. Set 1 if the scan will include component 2 (Cr).               Default 0.
// [   11] RW jpeg_quant_sel_comp1. 0=Comp1 select Quantization table 0; 1=Select table 1.  Default 0.
// [   10] RW jpeg_v_factor_comp1. Component 1's vertical sampling factor.                  Default 0.
// [    9] RW jpeg_h_factor_comp1. Component 1's horizontal sampling factor.                Default 0.
// [    8] RW jpeg_comp1_en. Set 1 if the scan will include component 1 (Cb).               Default 0.
// [    7] RW jpeg_quant_sel_comp0. 0=Comp0 select Quantization table 0; 1=Select table 1.  Default 0.
// [    6] RW jpeg_v_factor_comp0. Component 0's vertical sampling factor.                  Default 0.
// [    5] RW jpeg_h_factor_comp0. Component 0's horizontal sampling factor.                Default 0.
// [    4] RW jpeg_comp0_en. Set 1 if the scan will include component 0 (Y).                Default 0.
// [ 3: 1] RW jdct_intr_sel. JPEG DCT interrupt select.                                     Default 0.
//            0=Disable intr;
//            1=Intr at end of each 8x8 block of DCT input;
//            2=Intr at end of each MCU of DCT input;
//            3=Intr at end of a scan of DCT input;
//            4=Intr at end of each 8x8 block of DCT output;
//            5=Intr at end of each MCU of DCT output;
//            6=Intr at end of a scan of DCT output.
// [    0] RW jpeg_en. 0=Disable JPEG QDCT; 1=Enable JPEG QDCT.                             Default 0.
#define P_QDCT_JPEG_CTRL                           (volatile uint32_t *)0xfe327c94
// [29:16] RW jpeg_x_end.   Picture X end.      Default 0.
// [13: 0] RW jpeg_x_start. Picture X start.    Default 0.
#define P_QDCT_JPEG_X_START_END                    (volatile uint32_t *)0xfe327c98
// [29:16] RW jpeg_y_end.   Picture Y end.      Default 0.
// [13: 0] RW jpeg_y_start. Picture Y start.    Default 0.
#define P_QDCT_JPEG_Y_START_END                    (volatile uint32_t *)0xfe327c9c
// [    8] RW JPEG QUANT table access mode. 0=Write; 1=Read.    Default 1.
// [ 5: 0] RW JPEG QUANT table addr.                            Default 0.
#define P_QDCT_JPEG_QUANT_ADDR                     (volatile uint32_t *)0xfe327ca0
// [31: 0] RW JPEG QUANT table data.
#define P_QDCT_JPEG_QUANT_DATA                     (volatile uint32_t *)0xfe327ca4
// [    1] W  resume_jdct.
//            Write 1 to this bit will resume JPEG input engine when previously
//            it is halted by QDCT_JPEG_CTRL.jdct_inflow_ctrl.
// [    0] W  jpeg_sof.
//            Write 1 to this bit will start JPEG input engine.
#define P_QDCT_JPEG_SOF_RESUME                     (volatile uint32_t *)0xfe327ca8
// [31:30] R  dct_st.       jdct_ctrl state. 0=IDLE; 1=WAIT; 2=DCT_REQ.
// [29:28] R  mfdin_comp.   Current component at pixel request to MFDIN.
// [27:14] R  mfdin_y.      Current Y at pixel request to MFDIN.
// [13: 0] R  mfdin_x.      Current X at pixel request to MFDIN.
#define P_QDCT_JPEG_DCT_STATUS0                    (volatile uint32_t *)0xfe327cac
// [15:12] R  JPEG Quant read MEM select.
// [11: 8] R  JPEG DCT2 write MEM select.
// [ 7: 4] R  JPEG DCT2 read MEM select.
// [ 3: 0] R  JPEG DCT1 write MEM select.
#define P_QDCT_JPEG_DCT_STATUS1                    (volatile uint32_t *)0xfe327cb0
// [28:16] RW jdct_coeff1.  Default 13'h1D90; // 7568 = 4096 * sqrt(2) * (cos(Pi/8) + sin(Pi/8)) // 7569
// [12: 0] RW jdct_coeff0.  Default 13'h16A1; // 5793 = 4096 * sqrt(2)
#define P_QDCT_JPEG_DCT_COEFF01                    (volatile uint32_t *)0xfe327cb4
// [28:16] RW jdct_coeff3.  Default 13'h0C3F; // 3135 = 4096 * sqrt(2) * (cos(Pi/8) - sin(Pi/8))
// [12: 0] RW jdct_coeff2.  Default 13'h08A9; // 2217 = 4096 * sqrt(2) * sin(Pi/8) // 2215
#define P_QDCT_JPEG_DCT_COEFF23                    (volatile uint32_t *)0xfe327cb8
// [28:16] RW jdct_coeff5.  Default 13'h046A; // 1130 = 4096 * (cos(3Pi/16) - sin(3Pi/16))
// [12: 0] RW jdct_coeff4.  Default 13'h1631; // 5681 = 4096 * (cos(3Pi/16) + sin(3Pi/16)) // 5682
#define P_QDCT_JPEG_DCT_COEFF45                    (volatile uint32_t *)0xfe327cbc
// [28:16] RW jdct_coeff7.  Default 13'h0C92; // 3218 = 4096 * (cos(Pi/16) - sin(Pi/16))
// [12: 0] RW jdct_coeff6.  Default 13'h12D0; // 4816 = 4096 * (cos(Pi/16) + sin(Pi/16))
#define P_QDCT_JPEG_DCT_COEFF67                    (volatile uint32_t *)0xfe327cc0
// [28:16] RW jdct_coeff9.  Default 13'h0FB1; // 4017 = 4096 * cos(Pi/16)
// [12: 0] RW jdct_coeff8.  Default 13'h0D4E; // 3406 = 4096 * cos(3Pi/16)
#define P_QDCT_JPEG_DCT_COEFF89                    (volatile uint32_t *)0xfe327cc4
#define P_QDCT_I_PRED_REF_WR_IDX                   (volatile uint32_t *)0xfe327cc8
#define P_QDCT_I_PRED_REF_WR_DATA                  (volatile uint32_t *)0xfe327ccc
// bit[29]  mb_info_latch_no_I16_pred_mode
// bit[28]  ie_dma_mbxy_use_i_pred
// bit[27]  ie_dma_read_write_use_ip_idx
// bit[26]  ie_start_use_top_dma_count
// bit[25]  i_pred_top_dma_rd_mbbot
// bit[24]  i_pred_top_dma_wr_disable
// bit[23]  i_pred_mix
// bit[22]  me_ab_rd_when_intra_in_p
// bit[21]  force_mb_skip_run_when_intra
// bit[20]  mc_out_mixed_type
// bit[19]  ie_start_when_quant_not_full
// bit[18]  mb_info_state_mix
// bit[17]  mb_type_use_mix_result
// bit[16]  me_cb_ie_read_enable
// bit[15]  ie_cur_data_from_me
// bit[14]  rem_per_use_table
// bit[13]  q_latch_int_enable
// bit[12]  q_use_table
// bit[11]  q_start_wait
// bit[10]  LUMA_16_LEFT_use_cur
// bit[9]   DC_16_LEFT_SUM_use_cur
// bit[8]   c_ref_ie_sel_cur
// bit[7]   c_ipred_perfect_mode
// bit[6]   ref_ie_ul_sel 0-old, 1-use next_set
// bit[5]   mb_type_use_ie_result
// bit[4]   detect_I16_from_I4
// bit[3]   ie_not_wait_ref_busy
// bit[2]   ie_I16_enable
// bit[1:0] ie_done_sel (0, 1, 2, -1)
#define P_QDCT_ADV_CONFIG                          (volatile uint32_t *)0xfe327cd0
// bit [31:16] I16x16_weight
// bit [15:0]  I4x4_weight
#define P_IE_WEIGHT                                (volatile uint32_t *)0xfe327cd4
// bit [31]  reserved
// bit [30] q_I16MB
// bit [29]  reserved
// bit [28]  reserved
// bit [27:23] quant_table_addr I4MB:[0,7], I16MB:[8:15], INTER:[16:23], Reserved:[24:31]
// bit [22]    quant_table_addr_update(when notupdate_rem_per) (read is arb_result : q_intra)
// bit [21:19] quant_rem_c
// bit [18:16] quant_rem_y
// bit [15:12] quant_per_c
// bit [11:8]  quant_per_y
// bit [7:2] quant
// bit [1] update_rem_per
// bit [0] clear_wait_status
#define P_Q_QUANT_CONTROL                          (volatile uint32_t *)0xfe327cd8
#define P_MBBOT_EVEN_ADDR                          (volatile uint32_t *)0xfe327cdc
#define P_MBBOT_ODD_ADDR                           (volatile uint32_t *)0xfe327ce0
// bit [29:24] quant_table_data_3
// bit [21:16] quant_table_data_2
// bit [13:8]  quant_table_data_1
// bit [5:0]   quant_table_data_0
#define P_QUANT_TABLE_DATA                         (volatile uint32_t *)0xfe327ce4
// bit [31:16] ie_sad_offset_I16
// bit [15:0] ie_sad_offset_I4
#define P_SAD_CONTROL_0                            (volatile uint32_t *)0xfe327ce8
// bit [31]     sad_soft_reset
// bit [30:27]  reserved
// bit [26:24]  ie_sad_shift_I16
// bit [22:20]  ie_sad_shift_I4
// bit [18:16]  me_sad_shift_INTER
// bit [15:0]   me_sad_offset_INTER
#define P_SAD_CONTROL_1                            (volatile uint32_t *)0xfe327cec
// bit [31]     vlc_quant_rd_ptr
// bit [30]     vlc_quant_rd_ptr_update
// bit [29]     vlc_quant_wr_ptr
// bit [28]     vlc_quant_wr_ptr_update
// bit [27:26]  reserved
// bit [25:19]  vlc_delta_quant_1
// bit [18:13]  vlc_quant_1
// bit [12:6]   vlc_delta_quant_0
// bit [5:0]    vlc_quant_0
#define P_QDCT_VLC_QUANT_CTL_0                     (volatile uint32_t *)0xfe327cf0
// bit [31:30]  me_sad_rd_idx
// bit [29]     me_sad_rd_idx_update
// bit [28:27]  me_sad_wr_idx
// bit [26]     me_sad_wr_idx_update
// bit [25:24]  ie_sad_rd_idx
// bit [23]     ie_sad_rd_idx_update
// bit [22:21]  ie_sad_wr_idx
// bit [20]     ie_sad_wr_idx_update
// bit [19:12]  Reserved
// bit [11:6]   vlc_max_delta_q_neg
// bit [5:0]    vlc_max_delta_q_pos
#define P_QDCT_VLC_QUANT_CTL_1                     (volatile uint32_t *)0xfe327cf4
// bit[4] jdct_int
// bit[3] quant_latch
// bit[2] me_done
// bit[1] ie_start
// bit[0] i_pred_start
#define P_QDCT_INT_STATUS                          (volatile uint32_t *)0xfe327cf8
// bit[3]   mix_i_pred_wait_left_en
// bit[2:0] mc_pending_mb_count
#define P_QDCT_MIX_I_PRED_STATUS                   (volatile uint32_t *)0xfe327cfc
// IE/ME share same cbus_base as QDCT
//
// bit[31]  active_ur_block
// bit[30]  active_ul_block
// bit[21]  disable_HENC_V_PRED_16
// bit[20]  disable_HENC_H_PRED_16
// bit[19]  disable_HENC_DC_PRED_16
// bit[18]  disable_HENC_HENC_HOR_UP_PRED
// bit[17]  disable_HENC_VERT_LEFT_PRED
// bit[16]  disable_HENC_HENC_HOR_DOWN_PRED
// bit[15]  disable_HENC_VERT_RIGHT_PRED
// bit[14]  disable_HENC_DIAG_DOWN_RIGHT_PRED
// bit[13]  disable_HENC_DIAG_DOWN_LEFT_PRED
// bit[12]  disable_HENC_DC_PRED
// bit[11]  disable_HENC_HOR_PRED
// bit[10]  disable_HENC_VERT_PRED
// bit[9]   ie_c_wait_ie_pause
// bit[8:4] max_ie_result_buff_count
// bit[3]   ie_wait_for_ie_result  // use for (max_ie_result_buff_count == 0) to wait every block
// bit[2]   reserved
// bit[1]   ie_enable
// bit[0]   ie_soft_reset
#define P_IE_CONTROL                               (volatile uint32_t *)0xfe327d00
// bit[31:12] Reserved
// bit[11:0]  mb_y
#define P_IE_MB_POSITION                           (volatile uint32_t *)0xfe327d04
// bit[31:16] me_skip_run
// bit[15:8]  reserved
// bit [7:4]  me_b8_mode
// bit [3:0]  ie_me_mb_type
#define P_IE_ME_MB_INFO                            (volatile uint32_t *)0xfe327d08
// bit[3]   ie_result_buff_enable
// bit[2]   ie_result_buff_soft_reset
// bit[1]   sad_enable
// bit[0]   ie_sad_soft_reset
#define P_SAD_CONTROL                              (volatile uint32_t *)0xfe327d0c
// bit[31:16] - ie_result_buff_count - read only
// bit[14:12] -current_ie_result (pred_mode) - read only
// bit[11]  top_control_data_buff_wr_ptr - rd/wr
// bit[10]  top_control_data_buff_rd_ptr - rd/wr
// bit[9:5] ie_result_buff_wr_ptr        - rd/wr
// bit[4:0] ie_result_buff_rd_ptr        - rd/wr
#define P_IE_RESULT_BUFFER                         (volatile uint32_t *)0xfe327d10
// bit[63:0] ie_i4_pred_mode
#define P_IE_I4_PRED_MODE_HI                       (volatile uint32_t *)0xfe327d14
#define P_IE_I4_PRED_MODE_LO                       (volatile uint32_t *)0xfe327d18
// bit [31:9] reserved
// bit [8:4] i_pred_block_number
// bit [3:0] ie_c_pred_mode
#define P_IE_C_PRED_MODE                           (volatile uint32_t *)0xfe327d1c
// 31:16 - Left, 0-select ie_pixel, 1-select mc_data_out
// 15:0  - Top,  0-select ie_pixel, 1-select mc_data_out
#define P_IE_CUR_REF_SEL                           (volatile uint32_t *)0xfe327d20
// bit[31]  enable_f_skip_1_step_3
// bit[30]  enable_f_skip_1_step_2
// bit[29]  enable_f_skip_1_step_1
// bit[28]  step_3_enable
// bit[27]  step_2_sub_pixel
// bit[26]  always_f_skip_step_3
// bit[25]  always_f_skip_step_2
// bit[24]  always_f_skip_step_1
// bit[23]  half_pixel_only
// bit[22:13] reserved
// bit[12]  adv_mv_enable
// bit[11]  sad_short_valid
// bit[10:9] mv_flexable_ctl 00:0x40, 01:0x80, 10:0xc0, 11 : 0x100
// bit[8]   no_md_ab_rd
// bit[7]   use_dct_state
// bit[6]   enable_free_clk_me_ctl
// bit[5]   enable_free_clk_me_ab
// bit[4]   enable_free_clk_me_cb
// bit[3]   reserved
// bit[2]   me_done_int_enable
// bit[1]   me_enable
// bit[0]   me_soft_reset
#define P_ME_CONTROL                               (volatile uint32_t *)0xfe327d24
// bit[31:28] Reserved
// bit[27:16] me_start_mby
// bit[15:12] Reserved
// bit[11:0]  me_start_mbx
#define P_ME_START_POSITION                        (volatile uint32_t *)0xfe327d28
// bit [31:28] me_status - Read only
// bit [27:24] me_cb_status  // current buffer
// bit [23:20] me_ab_status  // anc buffer
// bit [19]    Reserved
// bit [18:16] me_ab_wr_ptr  // read only
// bit [15:4]  me_last_mbx
// bit [3:1]   me_ab_rd_ptr  // read only
// bit [0]     me_action
#define P_ME_STATUS                                (volatile uint32_t *)0xfe327d2c
// all Read-only
// bit [31:28] Reserved
// bit [27:16] me_ab_mbx
// bit [15:14] me_cb_wr_ptr
// bit [13:12] me_cb_rd_ptr
// bit [11:0]  me_cb_mbx
#define P_ME_DEBUG                                 (volatile uint32_t *)0xfe327d30
// bit[29:24] step_3_skip_line
// bit[23:18] step_2_skip_line
// bit[17:12] step_1_skip_line
// bit[11:6]  step_0_skip_line
// bit[5:0]   read_skip_line
#define P_ME_SKIP_LINE                             (volatile uint32_t *)0xfe327d34
// bit 15:13 Reserved
// bit 12    A_urgent  // default : 0
// bit 11:6  A_brst_num // default : 0x3f
// bit 5:0   A_id  // default : 0x23
#define P_ME_AB_MEM_CTL                            (volatile uint32_t *)0xfe327d38
// bit[31:24] anc_pic_canvas
// bit[23:12] max_me_mby_num
// bit[11:0]  max_me_mbx_num
#define P_ME_PIC_INFO                              (volatile uint32_t *)0xfe327d3c
// bit [23:12] me_sad_enough_1
// bit [11:0]  me_sad_enough_0
#define P_ME_SAD_ENOUGH_01                         (volatile uint32_t *)0xfe327d40
// bit [25:12] adv_mv_8x8_enough
// bit [11:0]  me_sad_enough_2
#define P_ME_SAD_ENOUGH_23                         (volatile uint32_t *)0xfe327d44
// bit [21:10] me_step0_big_sad
// bit [9:5] me_step0_close_mv_y
// bit [4:0] me_step0_close_mv_x
#define P_ME_STEP0_CLOSE_MV                        (volatile uint32_t *)0xfe327d48
// bit[31:24] force_skip_sad_3
// bit[23:16] force_skip_sad_2
// bit[15:08] force_skip_sad_1
// bit[07:00] force_skip_sad_0
#define P_ME_F_SKIP_SAD                            (volatile uint32_t *)0xfe327d4c
// bit[31:24] force_skip_weight_3
// bit[23:16] force_skip_weight_2
// bit[15:08] force_skip_weight_1
// bit[07:00] force_skip_weight_0
#define P_ME_F_SKIP_WEIGHT                         (volatile uint32_t *)0xfe327d50
// Merge when (
//              (flex & me_merge_flex_en) |
//              (big_sad & me_merge_sad_en)|
//              ((~me_merge_flex_en)&(~me_merge_sad_en))
//            ) &
//            ( small_mv_diff |(~me_merge_small_mv_en))
//            & (me_merge_flex_en | me_merge_sad_en | me_merge_small_mv_en)
// bit[31]   me_merge_mv_en_16
// bit[30]   me_merge_small_mv_en_16
// bit[29]   me_merge_flex_en_16
// bit[28]   me_merge_sad_en_16
// bit[27]   me_merge_mv_en_8
// bit[26]   me_merge_small_mv_en_8
// bit[25]   me_merge_flex_en_8
// bit[24]   me_merge_sad_en_8
// bit[23:18] me_merge_mv_diff_16
// bit[17:12] me_merge_mv_diff_8
// bit[11:0] me_merge_min_sad
#define P_ME_MV_MERGE_CTL                          (volatile uint32_t *)0xfe327d54
// bit[31:24] mv_step_weight_1
// bit[23:16] mv_pre_weight_1
// bit [15:0] mv_step_weight_0
// bit[7:0]   mv_pre_weight_0
#define P_ME_MV_WEIGHT_01                          (volatile uint32_t *)0xfe327d58
// bit[31:24] mv_step_weight_3 (mv_step_weight_1_2nd)
// bit[23:16] mv_pre_weight_3 (mv_pre_weight_1_2nd)
// bit[15:8]  mv_step_weight_2
// bit[7:0]   mv_pre_weight_2
#define P_ME_MV_WEIGHT_23                          (volatile uint32_t *)0xfe327d5c
// bit[31:24] me_sad_range_inc_3
// bit[23:16] me_sad_range_inc_2
// bit[15:8] me_sad_range_inc_1
// bit[7:0] me_sad_range_inc_0
#define P_ME_SAD_RANGE_INC                         (volatile uint32_t *)0xfe327d60
// bit[31:19]  reserved
// bit[18]     sub_relative_any_1_en
// bit[17]     sub_relative_any_2_en
// bit[16]     sub_relative_any_3_en
// bit[15]     sub_relative_any_4_en
// bit[14]     sub_relative_any_h_en
// bit[13]     sub_make_non_flex_fix
// bit[12]     sub_make_big_non_flex_fix
// bit[11:8]   sub_normal_mv_diff_16
// bit[7:4]    sub_normal_mv_diff_8
// bit[3:2]    Reserved
// bit[1]      sub_merge_enable_16
// bit[0]      sub_merge_enable_8
#define P_ME_SUB_MERGE_CTL                         (volatile uint32_t *)0xfe327d64
// bit[31:28]  sub_ref_mv_diff_near
// bit[27:24]  sub_ref_mv_diff_near_flex
// bit[23:20]  sub_ref_mv_diff
// bit[19:16]  sub_ref_mv_diff_flex
// bit[15:8]   sub_ref_mv_near_weight
// bit[7:0]    sub_ref_mv_weight
#define P_ME_SUB_REF_MV_CTL                        (volatile uint32_t *)0xfe327d68
// bit[31:24]  sub_weight_max_sad
// bit[23:16]  sub_any_range_sad
// bit[15:8]   sub_any_min_sad
// bit[7:0]    sub_any_max_sad
#define P_ME_SUB_ANY_WEIGHT_SAD                    (volatile uint32_t *)0xfe327d6c
// bit[31:24]  sub_fix_sad
// bit[23:16]  sub_fix_diff_sad
// bit[15:8]   sub_sad_flex_adj
// bit[7:0]    sub_big_non_flex_fix_sad
#define P_ME_SUB_FIX_SAD                           (volatile uint32_t *)0xfe327d70
// bit[31:24]  sub_fix_min_sad
// bit[23:16]  sub_fix_min_diff_sad
// bit[15:8]   sub_fix_min_sad_2
// bit[7:0]    sub_fix_min_diff_sad_2
#define P_ME_SUB_FIX_MIN_SAD                       (volatile uint32_t *)0xfe327d74
// bit[31:24]  sub_snap_to_ref_max_sad
// bit[23]     sub_snap_to_ref_non_flex
// bit[22:16]  sub_snap_to_ref_mv_diff
// bit[15:4]   sub_glitch_mv_sad
// bit[3:0]    sub_glitch_mv_diff
#define P_ME_SUB_SNAP_GLITCH                       (volatile uint32_t *)0xfe327d78
// bit[31:20]  sad_act_limit
// bit[19:8]   s_a_any_sad
// bit[7]      Reserved
// bit[6:5]    sub_merge_method
// bit[4]      use_sub_act_result
// bit[3]      s_a_rnd
// bit[2]      Reserved
// bit[1]      sub_act_en_16
// bit[0]      sub_act_en
#define P_ME_SUB_ACT_CTL                           (volatile uint32_t *)0xfe327d7c
// bit[31:16]  reserved
// bit[15:0]   me_weight
#define P_ME_WEIGHT                                (volatile uint32_t *)0xfe327d80
// bit[31]  ready_update
// bit[30]  data_update
// bit[29:28] reserved
// bit[27:22] me_quant_0
// bit[21]  ie_sad_ready_0
// bit[20:18]  Reserved
// bit[17:16]  me_sad_mv_type_0
// bit[15:0] me_sad_0
#define P_ME_SAD_0                                 (volatile uint32_t *)0xfe327d84
// bit[31]  ready_update
// bit[30]  data_update
// bit[29:28] reserved
// bit[27:22] me_quant_1
// bit[21]  me_sad_ready_1
// bit[20:18]  Reserved
// bit[17:16]  me_sad_mv_type_1
// bit[15:0] me_sad_1
#define P_ME_SAD_1                                 (volatile uint32_t *)0xfe327d88
// bit[31]  ready_update
// bit[30]  data_update
// bit[29:28] reserved
// bit[27:22] me_quant_2
// bit[21]  me_sad_ready_2
// bit[20:18]  Reserved
// bit[17:16]  me_sad_mv_type_2
// bit[15:0] me_sad_2
#define P_ME_SAD_2                                 (volatile uint32_t *)0xfe327d8c
// bit[31]  ready_update
// bit[30]  data_update
// bit[29:28] reserved
// bit[27:22] me_quant_3
// bit[21]  me_sad_ready_3
// bit[20:18]  Reserved
// bit[17:16]  me_sad_mv_type_3
// bit[15:0] me_sad_3
#define P_ME_SAD_3                                 (volatile uint32_t *)0xfe327d90
// bit[31]  ready_update
// bit[30]  data_update
// bit[29:28] reserved
// bit[27:22] ie_quant_0
// bit[21]  ie_sad_ready_0
// bit[20]   I4/I16 (0-I4MB, 1-I16MB)
// bit[19:0] ie_sad_0
#define P_IE_SAD_0                                 (volatile uint32_t *)0xfe327d94
// bit[31]  ready_update
// bit[30]  data_update
// bit[29:28] reserved
// bit[27:22] ie_quant_1
// bit[21]  ie_sad_ready_1
// bit[20]   I4/I16 (0-I4MB, 1-I16MB)
// bit[19:0] ie_sad_1
#define P_IE_SAD_1                                 (volatile uint32_t *)0xfe327d98
// bit[31]  ready_update
// bit[30]  data_update
// bit[29:28] reserved
// bit[27:22] ie_quant_2
// bit[21]  ie_sad_ready_2
// bit[20]   I4/I16 (0-I4MB, 1-I16MB)
// bit[19:0] ie_sad_2
#define P_IE_SAD_2                                 (volatile uint32_t *)0xfe327d9c
// bit[31]  ready_update
// bit[30]  data_update
// bit[29:28] reserved
// bit[27:22] ie_quant_3
// bit[21]  ie_sad_ready_3
// bit[20]   I4/I16 (0-I4MB, 1-I16MB)
// bit[19:0] ie_sad_3
#define P_IE_SAD_3                                 (volatile uint32_t *)0xfe327da0
// bit[31]   enable_large_diff_16x8
// bit[30]   enable_large_diff_8x16
// bit[29:16] adv_mv_8x8_weight
// bit[15:14] reserved
// bit[13:0] adv_mv_4x4x4_weight
#define P_ADV_MV_CTL0                              (volatile uint32_t *)0xfe327da4
// bit[31:16] adv_mv_16x16_weight
// bit[15]   enable_large_diff_16x16
// bit[14:0] adv_mv_16_8_weight
#define P_ADV_MV_CTL1                              (volatile uint32_t *)0xfe327da8
#define P_ADV_MV_CTL2                              (volatile uint32_t *)0xfe327dac
// bit[31]    v3_skip_enable
// bit[30]    v3_step_1_weight_enable // for step1, will only use pre_weight for block0, only step_weight for block 1,2,3
// bit[29]    v3_l2_skip_only_use_l2_sad // set to 1 may allow l1 maybe not skip
// bit[28]    v3_mv_sad_weight_enable
// bit[27]    v3_ipred_type_enable
// bit[25:12] force_skip_sad_1
// bit[11:0]  force_skip_sad_0
#define P_V3_SKIP_CONTROL                          (volatile uint32_t *)0xfe327db0
// bit[18:16] top_ipred_type_count
// bit[15:14] Reserved
// bit[13:12] top_ipred_type_rd_idx
// bit[11:10] top_ipred_type_wr_idx
// bit[9]   left_ipred_type_ready
// bit[8]   top_ipred_type_ready
// bit[7:6] left_mv_idx
// bit[5:4] top_mv_idx
// bit[3] - left_mv_ready
// bit[2:0] top_mv_ready
#define P_V3_TOP_LEFT_CTL                          (volatile uint32_t *)0xfe327db4
#define P_V3_TOP_MV                                (volatile uint32_t *)0xfe327db8
#define P_V3_LEFT_MV                               (volatile uint32_t *)0xfe327dbc
// bit[31:30] reserved
// bit[29:16] v3_skip_weight_1
// bit[15:12] reserved
// bit[11:0]  v3_skip_weight_0
#define P_V3_SKIP_WEIGHT                           (volatile uint32_t *)0xfe327dc0
// bit[31:28] reserved
// bit[27:16] v3_l1_f_skip_max_sad
// bit[15:12] reserved
// bit[11:0]  v3_l1_skip_max_sad
#define P_V3_L1_SKIP_MAX_SAD                       (volatile uint32_t *)0xfe327dc4
// bit[31:16] force_skip_sad_2
// bit[15:0]  v3_skip_weight_2
#define P_V3_L2_SKIP_WEIGHT                        (volatile uint32_t *)0xfe327dc8
// bit[21:16] v3_mv_sad_table_addr 0-15 table_step_0
// bit[11:0]  v3_mv_sad
#define P_V3_MV_SAD_TABLE                          (volatile uint32_t *)0xfe327dcc
// [31:16] v3_ie_f_zero_sad_i16
// [15:0]  v3_ie_f_zero_sad_i4
#define P_V3_F_ZERO_CTL_0                          (volatile uint32_t *)0xfe327dd0
// [25]    v3_no_ver_when_top_zero_en
// [24]    v3_no_hor_when_left_zero_en
// [23:16] v3_max_I16_H_num    // 0 means no break
// [15:0]  v3_me_f_zero_sad
#define P_V3_F_ZERO_CTL_1                          (volatile uint32_t *)0xfe327dd4
#define P_V3_TOP_INTRA_INFO                        (volatile uint32_t *)0xfe327dd8
#define P_V3_LEFT_INTRA_INFO                       (volatile uint32_t *)0xfe327ddc
// [31:24]  C_ipred_weight_H
// [23:16]  C_ipred_weight_V
// [15:8]   I4_ipred_weight_else
// [7:0]    I4_ipred_weight_most
#define P_V3_IPRED_TYPE_WEIGHT_0                   (volatile uint32_t *)0xfe327de0
// [31:24]  I16_ipred_weight_DC
// [23:16]  I16_ipred_weight_H
// [15:8]   I16_ipred_weight_V
// [7:0]    C_ipred_weight_DC
#define P_V3_IPRED_TYPE_WEIGHT_1                   (volatile uint32_t *)0xfe327de4
// [31:16]  v3_left_small_max_me_sad
// [15:0]   v3_left_small_max_ie_sad
#define P_V3_LEFT_SMALL_MAX_SAD                    (volatile uint32_t *)0xfe327de8
// (qr==7) & (qp==15) means force zero block
// [31:26]  v4_force_q_r_intra
// [25:20]  v4_force_q_r_inter
// [19]     v4_force_q_y_enable
// [18:16]  v4_force_qr_y
// [15:12]  v4_force_qp_y
// [11:0]   v4_force_skip_sad
#define P_V4_FORCE_SKIP_CFG                        (volatile uint32_t *)0xfe327dec
// v5 Complexity // Y(256 pixel per MB) and C(128 pixel per MB)
// For every 4x4 block, calculate average and Add abs(pixel-average) together
// bit[31:16] v5_diff_sum_C
// bit[15:0]  v5_diff_sum_Y
#define P_V5_MB_DIFF_SUM                           (volatile uint32_t *)0xfe327df0
// bit[31:24] v5_small_diff_cnt_C
// bit[23:16] v5_small_diff_C
// bit[15:8]  v5_small_diff_cnt_Y
// bit[7:0]   v5_small_diff_Y
#define P_V5_SMALL_DIFF_CNT                        (volatile uint32_t *)0xfe327df4
// bit[31:29] Reserved
// bit[28:24] v5_simple_block_cnt // 0 -15 Y 16-23 C
// bit[23:20] v5_simple_pixel_cnt
// bit[19:18] v5_simple_dq_wr_ptr
// bit[17:16] v5_simple_dq_rd_ptr
// bit[15:12] v5_simple_dq (Read Only)
// bit[11:8]  v5_simple_me_weight(Read Only)
// bit[7] v5_use_small_diff_cnt
// bit[6] v5_simple_mb_inter_all_en
// bit[5] v5_simple_mb_inter_8x8_en
// bit[4] v5_simple_mb_inter_16_8_en
// bit[3] v5_simple_mb_inter_16x16_en
// bit[2] v5_simple_mb_intra_en
// bit[1] v5_simple_mb_C_en
// bit[0] v5_simple_mb_Y_en
#define P_V5_SIMPLE_MB_CTL                         (volatile uint32_t *)0xfe327df8
// bit[31:28] v5_simple_dq_shift
// bit[27:24] v5_simple_dq_6(-7 to +7)
// bit[23:20] v5_simple_dq_5(-7 to +7)
// bit[19:16] v5_simple_dq_4(-7 to +7)
// bit[15:12] v5_simple_dq_3(-7 to +7)
// bit[11:08] v5_simple_dq_2(-7 to +7)
// bit[07:04] v5_simple_dq_1(-7 to +7)
// bit[03:00] v5_simple_dq_0(-7 to +7)
#define P_V5_SIMPLE_MB_DQUANT                      (volatile uint32_t *)0xfe327dfc
// bit[31:28] v5_simple_me_weight_shift
// bit[27:24] v5_simple_me_weight_6(-7 to +7)
// bit[23:20] v5_simple_me_weight_5(-7 to +7)
// bit[19:16] v5_simple_me_weight_4(-7 to +7)
// bit[15:12] v5_simple_me_weight_3(-7 to +7)
// bit[11:08] v5_simple_me_weight_2(-7 to +7)
// bit[07:04] v5_simple_me_weight_1(-7 to +7)
// bit[03:00] v5_simple_me_weight_0(-7 to +7)
#define P_V5_SIMPLE_MB_ME_WEIGHT                   (volatile uint32_t *)0xfe327e00
//
// Closing file:  qdct_regs.h
//
//------------------------------------------------------------------------------
// HCODEC MDEC module level register offset
//------------------------------------------------------------------------------
//
// Reading file:  hcodec_mdec_regs.h
//
//========================================================================
//  MDEC module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_HCODEC_HDEC_CBUS_BASE = 0x09
// -----------------------------------------------
//`define HCODEC_MC_CTRL_REG         8'h00
//`define HCODEC_MC_MB_INFO          8'h01
//`define HCODEC_MC_PIC_INFO         8'h02
//`define HCODEC_MC_HALF_PEL_ONE     8'h03
//`define HCODEC_MC_HALF_PEL_TWO     8'h04
//`define HCODEC_POWER_CTL_MC        8'h05
//
//`define HCODEC_MC_CMD			    8'h06
//`define HCODEC_MC_CTRL0			8'h07
//`define HCODEC_MC_PIC_W_H  	    8'h08
//`define HCODEC_MC_STATUS0		    8'h09
//`define HCODEC_MC_STATUS1		    8'h0a
//`define HCODEC_MC_CTRL1			8'h0b
//`define HCODEC_MC_MIX_RATIO0	    8'h0c
//`define HCODEC_MC_MIX_RATIO1	    8'h0d
//`define HCODEC_MC_DP_MB_XY  	    8'h0e     //read only
//`define HCODEC_MC_OM_MB_XY  	    8'h0f     //read only
//
//`define HCODEC_MC_MPORT_CTRL  	    8'h40
//`define HCODEC_MC_MPORT_DAT  	    8'h41
//`define HCODEC_MC_WT_PRED_CTRL  	8'h42
//`define HCODEC_MC_MBBOT_ST_EVEN_ADDR 8'h44
//`define HCODEC_MC_MBBOT_ST_ODD_ADDR 8'h45
//`define HCODEC_MC_DPDN_MB_XY        8'h46    //read only
//`define HCODEC_MC_OMDN_MB_XY        8'h47    //read only
//`define HCODEC_MC_HCMDBUF_H        8'h48
//`define HCODEC_MC_HCMDBUF_L        8'h49
//`define HCODEC_MC_HCMD_H           8'h4a     //read only
//`define HCODEC_MC_HCMD_L           8'h4b     //read only
//`define HCODEC_MC_IDCT_DAT         8'h4c
//
//`define HCODEC_MC_CTRL_GCLK_CTRL   8'h4d
//`define HCODEC_MC_OTHER_GCLK_CTRL  8'h4e
//
////Bit 29:24, mbbot thread ID and token
////Bit 21:16, mc read/write thread ID and token
////Bit 13:8,  mbbot pre-arbiter burst number
////Bit 5:0,   mc pre-arbiter burst number
//`define HCODEC_MC_CTRL2            8'h4f
//
//// `define HCODEC_DBLK_QUANT            8'h76 // ONLY for $ucode/real/amrisc/rv.s, reg value from apollo
//
////`define HCODEC_ANC1_CANVAS_ADDR      8'h80
////`define HCODEC_ANC2_CANVAS_ADDR      8'h81
//
////`define HCODEC_REC_CANVAS_ADDR       8'h89
//
////`define HCODEC_MDEC_PIC_W          8'h8c
////`define HCODEC_MDEC_PIC_H          8'h8d
//`define HCODEC_MDEC_PIC_DC_CTRL    8'h8e
//`define HCODEC_MDEC_PIC_DC_STATUS  8'h8f
//
//`define HCODEC_ANC0_CANVAS_ADDR      8'h90
//`define HCODEC_ANC1_CANVAS_ADDR      8'h91
//`define HCODEC_ANC2_CANVAS_ADDR      8'h92
//`define HCODEC_ANC3_CANVAS_ADDR      8'h93
//`define HCODEC_ANC4_CANVAS_ADDR      8'h94
//`define HCODEC_ANC5_CANVAS_ADDR      8'h95
//`define HCODEC_ANC6_CANVAS_ADDR      8'h96
//`define HCODEC_ANC7_CANVAS_ADDR      8'h97
//`define HCODEC_ANC8_CANVAS_ADDR      8'h98
//`define HCODEC_ANC9_CANVAS_ADDR      8'h99
//`define HCODEC_ANC10_CANVAS_ADDR     8'h9a
//`define HCODEC_ANC11_CANVAS_ADDR     8'h9b
//`define HCODEC_ANC12_CANVAS_ADDR     8'h9c
//`define HCODEC_ANC13_CANVAS_ADDR     8'h9d
//`define HCODEC_ANC14_CANVAS_ADDR     8'h9e
//`define HCODEC_ANC15_CANVAS_ADDR     8'h9f
//`define HCODEC_ANC16_CANVAS_ADDR     8'ha0
//`define HCODEC_ANC17_CANVAS_ADDR     8'ha1
//`define HCODEC_ANC18_CANVAS_ADDR     8'ha2
//`define HCODEC_ANC19_CANVAS_ADDR     8'ha3
//`define HCODEC_ANC20_CANVAS_ADDR     8'ha4
//`define HCODEC_ANC21_CANVAS_ADDR     8'ha5
//`define HCODEC_ANC22_CANVAS_ADDR     8'ha6
//`define HCODEC_ANC23_CANVAS_ADDR     8'ha7
//`define HCODEC_ANC24_CANVAS_ADDR     8'ha8
//`define HCODEC_ANC25_CANVAS_ADDR     8'ha9
//`define HCODEC_ANC26_CANVAS_ADDR     8'haa
//`define HCODEC_ANC27_CANVAS_ADDR     8'hab
//`define HCODEC_ANC28_CANVAS_ADDR     8'hac
//`define HCODEC_ANC29_CANVAS_ADDR     8'had
//`define HCODEC_ANC30_CANVAS_ADDR     8'hae
//`define HCODEC_ANC31_CANVAS_ADDR     8'haf
//
//`define HCODEC_DBKR_CANVAS_ADDR      8'hb0
//`define HCODEC_DBKW_CANVAS_ADDR      8'hb1
//`define HCODEC_REC_CANVAS_ADDR       8'hb2
//
////28:24, read/write, current canvas idx, used in h264 only now
////23:0, read only, current canvas address, 23:16, Cr canvas addr, 15:8, Cb canvas addr, 7:0, Y  canvas addr
//`define HCODEC_CURR_CANVAS_CTRL      8'hb3
//
//`define HCODEC_MDEC_PIC_DC_THRESH    8'hb8
//`define HCODEC_MDEC_PICR_BUF_STATUS  8'hb9
//`define HCODEC_MDEC_PICW_BUF_STATUS  8'hba
//`define HCODEC_MCW_DBLK_WRRSP_CNT    8'hbb
//
//`define HCODEC_AV_SCRATCH_0          8'hc0
//`define HCODEC_AV_SCRATCH_1          8'hc1
//`define HCODEC_AV_SCRATCH_2          8'hc2
//`define HCODEC_AV_SCRATCH_3          8'hc3
//`define HCODEC_AV_SCRATCH_4          8'hc4
//`define HCODEC_AV_SCRATCH_5          8'hc5
//`define HCODEC_AV_SCRATCH_6          8'hc6
//`define HCODEC_AV_SCRATCH_7          8'hc7
//`define HCODEC_AV_SCRATCH_8          8'hc8
//`define HCODEC_AV_SCRATCH_9          8'hc9
//`define HCODEC_AV_SCRATCH_A          8'hca
//`define HCODEC_AV_SCRATCH_B          8'hcb
//`define HCODEC_AV_SCRATCH_C          8'hcc
//`define HCODEC_AV_SCRATCH_D          8'hcd
//`define HCODEC_AV_SCRATCH_E          8'hce
//`define HCODEC_AV_SCRATCH_F          8'hcf
//`define HCODEC_AV_SCRATCH_G          8'hd0
//`define HCODEC_AV_SCRATCH_H          8'hd1
//`define HCODEC_AV_SCRATCH_I          8'hd2
//`define HCODEC_AV_SCRATCH_J          8'hd3
//`define HCODEC_AV_SCRATCH_K          8'hd4
//`define HCODEC_AV_SCRATCH_L          8'hd5
//`define HCODEC_AV_SCRATCH_M          8'hd6
//`define HCODEC_AV_SCRATCH_N          8'hd7
//
//// bit[29:24] A_brst_num_co_mb
//// bit[21:16] A_id_co_mb
//// bit[11:0] wrrsp_count_co_mb
//`define HCODEC_WRRSP_CO_MB           8'hd8
//// bit[29:24] A_brst_num_dcac
//// bit[21:16] A_id_dcac
//// bit[11:0] wrrsp_count_dcac
//`define HCODEC_WRRSP_DCAC            8'hd9
//
////======================================
////  MC Control Register Bits
////
////======================================
//// For bits, just copy the defines...don't translate to addresses
//    `define HCODEC_MC_ENABLE	    16'h0001
//    //`define MC_RESET	    16'h0002
//    `define HCODEC_SKIP_MB		    16'h0004
//
////======================================
////  MB Info Register Bits
////
////======================================
//    `define HCODEC_INTRA_MB	    16'h0001
//
//    `define HCODEC_BWD_PRED	    16'h0004
//    `define HCODEC_FWD_PRED	    16'h0008
//
//    `define HCODEC_FLD_MOT		    16'h0100
//    `define HCODEC_FRM_16x8_MOT	16'h0200
//    `define HCODEC_DUAL_PRM_MOT	16'h0300
//
//    `define HCODEC_FRM_DCT		    16'h0000	    // Bit 10
//    `define HCODEC_FLD_DCT		    16'h0400
//
////======================================
////  MB Info Register Bits
////
////======================================
//    `define HCODEC_I_PIC		    16'h0001
//    `define HCODEC_P_PIC		    16'h0002
//    `define HCODEC_B_PIC		    16'h0003
//
//    `define HCODEC_FLD_PIC		    16'h0000	    // Bit 8
//    `define HCODEC_FRM_PIC		    16'h0100	
//
////========================================================================
//// DBLK Register:  12'h950 - 12'h97f
////========================================================================
//`define HCODEC_DBLK_RST                8'h50
//`define HCODEC_DBLK_CTRL               8'h51
//`define HCODEC_DBLK_MB_WID_HEIGHT      8'h52
//`define HCODEC_DBLK_STATUS             8'h53
//`define HCODEC_DBLK_CMD_CTRL           8'h54
//`define HCODEC_DBLK_MB_XY              8'h55
//`define HCODEC_DBLK_QP                 8'h56
//`define HCODEC_DBLK_Y_BHFILT           8'h57
//`define HCODEC_DBLK_Y_BHFILT_HIGH      8'h58
//`define HCODEC_DBLK_Y_BVFILT           8'h59
//`define HCODEC_DBLK_CB_BFILT           8'h5a
//`define HCODEC_DBLK_CR_BFILT           8'h5b
//`define HCODEC_DBLK_Y_HFILT            8'h5c
//`define HCODEC_DBLK_Y_HFILT_HIGH       8'h5d
//`define HCODEC_DBLK_Y_VFILT            8'h5e
//`define HCODEC_DBLK_CB_FILT            8'h5f
//`define HCODEC_DBLK_CR_FILT            8'h60
//`define HCODEC_DBLK_BETAX_QP_SEL       8'h61
//`define HCODEC_DBLK_CLIP_CTRL0         8'h62
//`define HCODEC_DBLK_CLIP_CTRL1         8'h63
//`define HCODEC_DBLK_CLIP_CTRL2         8'h64
//`define HCODEC_DBLK_CLIP_CTRL3         8'h65
//`define HCODEC_DBLK_CLIP_CTRL4         8'h66
//`define HCODEC_DBLK_CLIP_CTRL5         8'h67
//`define HCODEC_DBLK_CLIP_CTRL6         8'h68
//`define HCODEC_DBLK_CLIP_CTRL7         8'h69
//`define HCODEC_DBLK_CLIP_CTRL8         8'h6a
//
//`define HCODEC_DBLK_STATUS1            8'h6b
//`define HCODEC_DBLK_GCLK_FREE          8'h6c
//`define HCODEC_DBLK_GCLK_OFF           8'h6d
//
//`define HCODEC_DBLK_AVSFLAGS           8'h6e
//
//// bit 15:0
//`define HCODEC_DBLK_CBPY               8'h70
//// bit 11:8 -- deblk_cbpy_bottom
//// bit 7:4 -- deblk_cbpy_left
//// bit 3:0 -- deblk_cbpy_top
//`define HCODEC_DBLK_CBPY_ADJ           8'h71
//// bit 7:0 -- deblk_cbpc
//`define HCODEC_DBLK_CBPC               8'h72
//// bit 15 -- bottom_mb
//// bit 14 -- left_mb
//// bit 13 -- top_mb
//// bit 12 -- reserved
//// bit 11:8 -- deblk_cbpc_bottom
//// bit 7:4 -- deblk_cbpc_left
//// bit 3:0 -- deblk_cbpc_top
//`define HCODEC_DBLK_CBPC_ADJ           8'h73
//// bit 15:8 -- deblk_hmvd   -- {left_1, left_0, below_1, below_0, block3-0}
//// bit 7:0 -- deblk_vmvd    -- {top_1, top_0, below_1, below_0, block3-0}
//`define HCODEC_DBLK_VHMVD              8'h74
//// bit 13:12 -- right_vmvd
//// bit 11 -- right_above_vmvd
//// bit 10 -- left_below_hmvd
//// bit 9 -- disable_dblk_luma
//// bit 8 -- disable_dblk_chroma
//// bit 7 -- bBelowRefDiff
//// bit 6 -- bLeftRefDiff
//// bit 5 -- bAboveRefDiff
//// bit 4 -- reserved
//// bit 3 -- s_below
//// bit 2 -- s_left
//// bit 1 -- s_above
//// bit 0 -- s
//`define HCODEC_DBLK_STRONG             8'h75
//// bit 14:10 -- PQUANT
//// bit 9:5 -- left_PQUANT
//// bit 4:0 -- top_PQUANT
//`define HCODEC_DBLK_RV8_QUANT          8'h76
//
//`define HCODEC_DBLK_CBUS_HCMD2         8'h77
//`define HCODEC_DBLK_CBUS_HCMD1         8'h78
//`define HCODEC_DBLK_CBUS_HCMD0         8'h79
//`define HCODEC_DBLK_VLD_HCMD2          8'h7a
//`define HCODEC_DBLK_VLD_HCMD1          8'h7b
//`define HCODEC_DBLK_VLD_HCMD0          8'h7c
//
//`define HCODEC_DBLK_OST_YBASE          8'h7d
//`define HCODEC_DBLK_OST_CBCRDIFF       8'h7e
//
////13:8 dblk thread ID and token
////5:0  dblk prearbiter burst num
//`define HCODEC_DBLK_CTRL1              8'h7f
//
////DBLK last address 12'h97f
//
// Closing file:  hcodec_mdec_regs.h
//
//------------------------------------------------------------------------------
// HCODEC VLD module level register offset
//------------------------------------------------------------------------------
//
// Reading file:  hcodec_vld_regs.h
//
//========================================================================
//  VLD module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_HCODEC_VLD_CBUS_BASE = 0x0c
// -----------------------------------------------
//
//`define HCODEC_VLD_STATUS_CTRL     8'h00
////
//// bit 10 -- use_old_shift_en
//// bit 9 -- output_mv_not_pmv
//// bit 8:5 -- force_zigzag
//// bit 4 -- force_zigzag_en
//// bit 3 -- disable_viff_anempty_int
//// bit 2 -- disable_m2_ac_coeff_one_cycle
//// bit 1 -- forced_reset  force reset pmv
//// bit 0 -- mpeg_type  0:mpeg1 1: mpeg2
//`define HCODEC_MPEG1_2_REG         8'h01
//`define HCODEC_F_CODE_REG          8'h02
//`define HCODEC_PIC_HEAD_INFO       8'h03
//`define HCODEC_SLICE_VER_POS_PIC_TYPE  8'h04
//`define HCODEC_QP_VALUE_REG        8'h05
//`define HCODEC_MBA_INC             8'h06
//`define HCODEC_MB_MOTION_MODE      8'h07
////`define HCODEC_PACKET_BYTE_COUNT   8'h08
//// bit 15 -- force_search_startcode_en
//// bit 14 -- int_cpu_when_error (before do anything)
//// bit 13 -- vld_error_reset
//// bit 12 -- return_on_slice_header
//// bit 6 -- jpeg_ff00_en
//// bit 5:0 -- vld_power_ctl
//`define HCODEC_POWER_CTL_VLD       8'h08
//
//`define HCODEC_MB_WIDTH	    8'h09
//`define HCODEC_SLICE_QP            8'h0a
//// `define HCODEC_MB_X_MB_Y           8'h0b   // current MBX and MBY
//`define HCODEC_PRE_START_CODE      8'h0b  // ONLY for $ucode/real/amrisc/rv.s, reg value from apollo
//`define HCODEC_SLICE_START_BYTE_01 8'h0c  // ONLY for $ucode/real/amrisc/rv.s, reg value from apollo
//`define HCODEC_SLICE_START_BYTE_23 8'h0d  // ONLY for $ucode/real/amrisc/rv.s, reg value from apollo
//`define HCODEC_RESYNC_MARKER_LENGTH 8'h0e  // Does this exist in HW ? used in $ucode/mpeg4
//
//// bit[6:5] - frame/field info, 01 - top, 10 - bottom, 11 - frame
//// bit[4:0] - buffer ID
//// L0_BUFF_ID_0, L0_BUFF_ID_1, L1_BUFF_ID_0, L1_BUFF_ID_1
//`define HCODEC_DECODER_BUFFER_INFO  8'h0f  // Current Only Used for VC1 Interlace Field
//
//`define HCODEC_FST_FOR_MV_X        8'h10
//`define HCODEC_FST_FOR_MV_Y        8'h11
//`define HCODEC_SCD_FOR_MV_X        8'h12
//`define HCODEC_SCD_FOR_MV_Y        8'h13
//`define HCODEC_FST_BAK_MV_X        8'h14
//`define HCODEC_FST_BAK_MV_Y        8'h15
//`define HCODEC_SCD_BAK_MV_X        8'h16
//`define HCODEC_SCD_BAK_MV_Y        8'h17
//
//// Bit 7:4 -- read_buffer_interlace  0-progressive, 1-interlace, used in VC1
//// bit 3 -- reserved
//// bit 2 -- weighting_prediction
//// bit 1 -- mb_weighting_flag
//// bit 0 -- slice_weighting_flag
//`define HCODEC_VLD_DECODE_CONTROL  8'h18
//`define HCODEC_VLD_RESERVED_19     8'h19
//
//`define HCODEC_VIFF_BIT_CNT        8'h1a
//`define HCODEC_BYTE_ALIGN_PEAK_HI  8'h1b
//`define HCODEC_BYTE_ALIGN_PEAK_LO  8'h1c
//`define HCODEC_NEXT_ALIGN_PEAK     8'h1d  // Does this exist in HW ? used in $ucode/mpeg4
//
//// bit 19    : vc1_inv_intra_co_mb_ref_rd
//// bit 18    : vc1_inv_co_mb_ref_rd
//// bit 17    : vc1_inv_intra_co_mb_ref_wr
//// bit 16    : vc1_inv_co_mb_ref_wr
//// bit 15    : reserved
//// bit 14    : avs_drop_enable
//// bit 13:12 : avs_drop_ptr
//// bit 11:8  : avs_demu_ctl_reg
//// bit 7 : avs_enable
//// bit 6 : disable_dblk_hcmd
//// bit 5 : disable_mc_hcmd
//// bit 4 : first_mode3_set enable
//// bit 3 : first_mode3
//// bit 2:1 : vc1_profile  0-SP, 1-MP, 2-reserved, 3-AP
//// bit 0   : vc1_enable
//`define HCODEC_VC1_CONTROL_REG     8'h1e
//
//`define HCODEC_PMV1_X              8'h20
//`define HCODEC_PMV1_Y              8'h21
//`define HCODEC_PMV2_X              8'h22
//`define HCODEC_PMV2_Y              8'h23
//`define HCODEC_PMV3_X              8'h24
//`define HCODEC_PMV3_Y              8'h25
//`define HCODEC_PMV4_X              8'h26
//`define HCODEC_PMV4_Y              8'h27
//// Can't use the same address for different defines
//// Therefore, create a single define HCODEC_that covers both
//// Only appears to be used in micro-code since the VLD hardware is
//// hard coded.
//// `define HCODEC_M4_TABLE_SELECT     8'h28  // Does this exist in HW ? Added from register_mp2.h
//// `define HCODEC_M4_TABLE_OUTPUT     8'h28  // Does this exist in HW ? Added from register_mp2.h
//`define HCODEC_M4_TABLE_SELECT     8'h28
//`define HCODEC_M4_CONTROL_REG      8'h29
//`define HCODEC_BLOCK_NUM           8'h2a  // Does this exist in HW ? Added from register_mp2.h
//`define HCODEC_PATTERN_CODE        8'h2b  // Does this exist in HW ? Added from register_mp2.h
//`define HCODEC_MB_INFO             8'h2c  // Does this exist in HW ? Added from register_mp2.h
//`define HCODEC_VLD_DC_PRED         8'h2d  // Does this exist in HW ? Added from register_mp4.h
//`define HCODEC_VLD_ERROR_MASK      8'h2e
//`define HCODEC_VLD_DC_PRED_C       8'h2f  // Does this exist in HW ? Added from register_mp4.h
//
//`define HCODEC_LAST_SLICE_MV_ADDR  8'h30
//`define HCODEC_LAST_MVX            8'h31
//`define HCODEC_LAST_MVY            8'h32
//
//`define HCODEC_VLD_C38             8'h38
//`define HCODEC_VLD_C39             8'h39
//
//`define HCODEC_VLD_STATUS          8'h3a  // Does this exist in HW ? used in $ucode/real/amrisc/rv.s
//`define HCODEC_VLD_SHIFT_STATUS    8'h3b  // Does this exist in HW ? used in $ucode/real/amrisc/rv.s
//// `define HCODEC_VLD_SHIFT_INFO      8'h3b  // Does this exist in HW ? used in $ucode/mpeg4
//`define HCODEC_VOFF_STATUS         8'h3c  // Does this exist in HW ? used in $ucode/mpeg4
//
//`define HCODEC_VLD_C3D             8'h3d
//
//`define HCODEC_VLD_DBG_INDEX       8'h3e
//
//
//// vld_buff_info -- (index == 0)
//// Bit[7:6]  mv_UR_ready_cnt;
//// Bit[5]  vld_wr_idx
//// Bit[4]  iq_rd_idx
//// Bit[3]  vld_vi_block_rdy_1
//// Bit[2]  vld_vi_block_rdy_2
//// Bit[1]  voff_empty_1
//// Bit[0]  voff_empty_2
//
//// cabac_buff_info_0 -- (index == 1)
//// Bit[31] shift_data_ready
//// Bit[30:29] Reserved
//// Bit[28:24] cabac_buffer_ptr
//// Bit[23:0] cabac_buffer
//
//// cabac_buff_info_1 -- (index == 2)
//// Bit[31:29] Reserved
//// Bit[28:20] Drange
//// Bit[19:16] bin_count_4
//// Bit[15:13] Reserved
//// Bit[12:6] context_mem_do
//// Bit[5:3] coeff_state
//// Bit[2:0] mvd_state
//
//// h264_mv_present -- (index == 3)
//// Bit[31:16] mv_present_l0
//// Bit[15:0] mv_present_l1
//
//// h264_mv_cal_info_0 -- (index == 4)
//// [31:28] mv_cal_state
//// [27:24] direct_spatial_cnt
//// Bit[23:21] Reserved
//// Bit[20] mv_UR_ready_for_mv_cal
//// Bit[19] co_mb_mem_ready_for_mv_cal
//// Bit[18] mc_dblk_cmd_if_busy
//// Bit[17] h264_co_mb_wr_busy
//// Bit[16] H264_cbp_blk_ready
//// Bit[15] mc_hcmd_rrdy
//// Bit[14] mc_hcmd_srdy
//// Bit[13] mc_cmd_if_ready
//// Bit[12] mc_hcmd_mv_available
//// Bit[11:8] mc_cmd_if_state
//// Bit[7] dblk_hcmd_rrdy
//// Bit[6] dblk_hcmd_srdy
//// Bit[5] dblk_cmd_if_ready
//// Bit[4] dblk_hcmd_mv_available
//// Bit[3:0] dblk_cmd_if_state
//
//// h264_mv_cal_info_1 -- (index == 5)
////  Bit[31:29] Reserved
////  Bit[28:24] total_mvd_num_l0
////  Bit[23:21] Reserved
////  Bit[20:16] mv_cal_ptr_l0
////  Bit[15:13] Reserved
////  Bit[12:8] mc_hcmd_ptr_l0
////  Bit[7:5] Reserved
////  Bit[4:0] dblk_hcmd_ptr_l0
//
//// h264_mv_cal_info_2 -- (index == 6)
////  Bit[31:29] Reserved
////  Bit[28:24] total_mvd_num_l1
////  Bit[23:21] Reserved
////  Bit[20:16] mv_cal_ptr_l1
////  Bit[15:13] Reserved
////  Bit[12:8] mc_hcmd_ptr_l1
////  Bit[7:5] Reserved
////  Bit[4:0] dblk_hcmd_ptr_l1
//
//// h264_co_mb_info -- (index == 7)
//// Bit[31:26] Reserved
//// Bit[25] mv_scale_cal_busy
//// Bit[24:20] co_mv_count
//// Bit[19:16] co_mv_process_state
//// Bit[15] h264_co_mb_rd_busy
//// Bit[15] h264_co_mb_rd_ready
//// Bit[13:12] co_mv_transfer_block_cnt
//// Bit[11:8] co_mv_transfer_ptr
//// Bit[7] co_mv_POC_l1_busy
//// Bit[6] h264_weight_scale_cal_en
//// Bit[5] weight_cal_busy
//// Bit[4] weight_cal_not_finished
//// Bit[3:0] weight_process_state
//
//`define HCODEC_VLD_DBG_DATA        8'h3f
//// --------------------------------------------
//// VIFIFO DDR Interface
//// --------------------------------------------
//// The VIFIFO start pointer into DDR memory is a 32-bit number
//// The Start pointer will automatically be truncated to land on
//// an 8-byte boundary.  That is, bits [2:0] = 0;
//`define HCODEC_VLD_MEM_VIFIFO_START_PTR        8'h40
//// The current pointer points so some location between the START and END
//// pointers.  The current pointer is a BYTE pointer.  That is, you can
//// point to any BYTE address within the START/END range
//`define HCODEC_VLD_MEM_VIFIFO_CURR_PTR         8'h41
//`define HCODEC_VLD_MEM_VIFIFO_END_PTR          8'h42
//`define HCODEC_VLD_MEM_VIFIFO_BYTES_AVAIL      8'h43
//// VIFIFO FIFO Control
//// bit  [31:24] viff_empty_int_enable_cpu[7:0]
//// bit  [23:16] viff_empty_int_enable_amrisc[7:0]
////   -bit 23 Video BUFFER < 0x400 Bytes
////   -bit 22 Video BUFFER < 0x200 Bytes
////   -bit 21 Video BUFFER < 0x100 Bytes
////   -bit 20 Video BUFFER < 0x80 Bytes
////   -bit 19 Video BUFFER < 0x40 Bytes
////   -bit 18 Video BUFFER < 0x20 Bytes
////   -bit 17 vififo  < 16 double words
////   -bit 16 vififo  < 8 double words
//// bit  [15:13] unused
//// bit  [12]    A_urgent
//// bit  [11]    transfer_length 0 - 32x64 Bits per request, 1 - 16x64 Bits per request
//// bit  [10]    use_level       Set this bit to 1 to enable filling of the FIFO controlled by the buffer
////                              level control.  If this bit is 0, then use bit[1] to control the enabling of filling
//// bit  [9]     Data Ready.     This bit is set when data can be popped
//// bit  [8]     fill busy       This bit will be high when we're fetching data from the DDR memory
////                              To reset this module, set cntl_enable = 0, and then wait for busy = 0.
////                              After that you can pulse cntl_init to start over
//// bit  [7]     init_with_cntl_init
//// bit  [6]     reserved
//// bits [5:3]   endian:         see $lib/rtl/ddr_endian.v
//// bit  [2]     cntl_empty_en   Set to 1 to enable reading the DDR memory FIFO
////                              Set cntl_empty_en = cntl_fill_en = 0 when pulsing cntl_init
//// bit  [1]     cntl_fill_en    Set to 1 to enable reading data from DDR memory
//// bit  [0]     cntl_init:      After setting the read pointers, sizes, channel masks
////                              and read masks, set this bit to 1 and then to 0
////                              NOTE:  You don't need to pulse cntl_init if only the start address is
////                              being changed
//`define HCODEC_VLD_MEM_VIFIFO_CONTROL         8'h44
//// --------------------------------------------
//// VIFIFO Buffer Level Manager
//// --------------------------------------------
//`define HCODEC_VLD_MEM_VIFIFO_WP              8'h45 // Manual or Parser write pointer
//`define HCODEC_VLD_MEM_VIFIFO_RP              8'h46
//`define HCODEC_VLD_MEM_VIFIFO_LEVEL           8'h47 // must be low first to shadow low/high 16-bit words
////
//// bit  [8]     use_parser_video2_wp
//// bit  [7]     vbuf2_out_manual
//// bit  [6]     vbuf_out_manual
//// bit  [5]     empty (ReadOnly)
//// bit  [4]     full (ReadOnly)
//// bit  [3:2]   reserved
//// bit  [1]     manual mode     Set to 1 for manual write pointer mode
//// bit  [0]     Init            Set high then low after everything has been initialized
//`define HCODEC_VLD_MEM_VIFIFO_BUF_CNTL        8'h48
//
//// bit 31:16 -- drop_bytes
//// bit 15:14 -- drop_status (Read-Only)
//// bit 13:12 -- sync_match_position (Read-Only)
//// bit 11:6 -- reserved
//// bit 5:4 -- TIME_STAMP_NUMBER, 0-32bits, 1-64bits, 2-96bits, 3-128bits
//// bit 3 -- stamp_soft_reset
//// bit 2 -- TIME_STAMP_length_enable
//// bit 1 -- TIME_STAMP_sync64_enable
//// bit 0 -- TIME_STAMP_enable
//`define HCODEC_VLD_TIME_STAMP_CNTL            8'h49
//// bit 31:0 -- TIME_STAMP_SYNC_CODE_0
//`define HCODEC_VLD_TIME_STAMP_SYNC_0          8'h4a
//// bit 31:0 -- TIME_STAMP_SYNC_CODE_1
//`define HCODEC_VLD_TIME_STAMP_SYNC_1          8'h4b
//// bit 31:0 TIME_STAMP_0
//`define HCODEC_VLD_TIME_STAMP_0               8'h4c
//// bit 31:0 TIME_STAMP_1
//`define HCODEC_VLD_TIME_STAMP_1               8'h4d
//// bit 31:0 TIME_STAMP_2
//`define HCODEC_VLD_TIME_STAMP_2               8'h4e
//// bit 31:0 TIME_STAMP_3
//`define HCODEC_VLD_TIME_STAMP_3               8'h4f
//// bit 31:0 TIME_STAMP_LENGTH
//`define HCODEC_VLD_TIME_STAMP_LENGTH          8'h50
//
//// bit 15:0 vififo_rd_count
//`define HCODEC_VLD_MEM_VIFIFO_WRAP_COUNT      8'h51
//
//// bit 29:24 A_brst_num
//// bit 21:16 A_id
//// bit 15:0 level_hold
//`define HCODEC_VLD_MEM_VIFIFO_MEM_CTL         8'h52
//
//`define HCODEC_VLD_MEM_VBUF_RD_PTR            8'h53 // manual read address for VBUF1
//`define HCODEC_VLD_MEM_VBUF2_RD_PTR           8'h54 // manual read address for VBUF2
//
//`define HCODEC_VLD_MEM_SWAP_ADDR              8'h55
//// bit[23:16] - swap_d_count (Read Only)
//// bit[15:8]  - swap_a_count (Read Only)
//// bit [7] - swap busy (Read Only)
//// bit [6:2] - reserved
//// bit [1] - 1 - STORE to Memory, 0 - LOAD from Memory
//// bit [0] - swap active
//`define HCODEC_VLD_MEM_SWAP_CTL               8'h56
//
// Closing file:  hcodec_vld_regs.h
//
//------------------------------------------------------------------------------
// HCODEC IQIDCT module level register offset
//------------------------------------------------------------------------------
//
// Reading file:  hcodec_iqidct_regs.h
//
//========================================================================
//  IQ/IDCT module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_HCODEC_IQIDCT_CBUS_BASE = 0x0e
// -----------------------------------------------
//
//`define HCODEC_VCOP_CTRL_REG       8'h00
//`define HCODEC_QP_CTRL_REG         8'h01
//`define HCODEC_INTRA_QUANT_MATRIX  8'h02
//`define HCODEC_NON_I_QUANT_MATRIX  8'h03
//`define HCODEC_DC_SCALER           8'h04
//`define HCODEC_DC_AC_CTRL          8'h05
//// `define HCODEC_RV_AI_CTRL          8'h05  // ONLY for $ucode/real/amrisc/rv.s reg value from apollo
//`define HCODEC_DC_AC_SCALE_MUL     8'h06
//`define HCODEC_DC_AC_SCALE_DIV     8'h07
//// `define HCODEC_DC_AC_SCALE_RESULT  8'h06
//// `define HCODEC_RESERVED_E07        8'h07
//`define HCODEC_POWER_CTL_IQIDCT    8'h08
//`define HCODEC_RV_AI_Y_X           8'h09
//`define HCODEC_RV_AI_U_X           8'h0a
//`define HCODEC_RV_AI_V_X           8'h0b
//// bit 15:0 will count up when rv_ai_mb finished when non zero
//// and rv_ai_mb_finished_int will be generate when this is not zero
//`define HCODEC_RV_AI_MB_COUNT      8'h0c
//// For H264 I in PB picture Use -- dma type : h264_next_intra_dma
//`define HCODEC_NEXT_INTRA_DMA_ADDRESS 8'h0d
//// Bit 0 -- constrained_intra_pred_flag for H264
//`define HCODEC_IQIDCT_CONTROL         8'h0e
//
//
//// Bit[31:19] Reserved
//// Bit[18] iq_waiting
//// Bit[17] iq_om_wr_idx
//// Bit[16] iq_om_rd_idx
//// Bit[15] iq_om_busy
//// Bit[14] iq_om_2_busy
//// Bit[13] idx_fifo_0
//// Bit[12] idx_fifo_1
//// Bit[11] idx_fifo_2
//// Bit[10] idx_fifo_3
//// Bit[9] idx_fifo_4
//// Bit[8] idx_fifo_5
//// Bit[7] idx_fifo_6
//// Bit[6] idx_fifo_7
//// Bit[5:3] idx_fifo_wp
//// Bit[2:0] idx_fifo_rp
//
//`define HCODEC_IQIDCT_DEBUG_INFO_0    8'h0f
//
//// For RTL Simulation Only
//`define HCODEC_DEBLK_CMD              8'h10
//
//// Bit[15+16] ds_mc_valid_2
//// Bit[14+16] new_idct1_rd_idx_2
//// Bit[13+16] new_idct1_wr_idx_2
//// Bit[12+16] idct1_buff0_busy_2
//// Bit[11+16] idct1_buff1_busy_2
//// Bit[10+16] new_idct1_busy_2
//// Bit[9+16] iq_om_8val_2
//// Bit[8+16] idct1_pipe_busy_2
//
//// Bit[7+16] wait_mb_left_finish_hold_2
//// Bit[6+16] new_idct2_rd_idx_2
//// Bit[5+16] new_idct2_wr_idx_2
//// Bit[4+16] idct2_buff0_busy_2
//// Bit[3+16] idct2_buff1_busy_2
//// Bit[2+16] idct2_en_2
//// Bit[1+16] new_idct2_busy_2
//// Bit[0+16] new_idct1_ready_2
//
//// Bit[15] ds_mc_valid_1
//// Bit[14] new_idct1_rd_idx_1
//// Bit[13] new_idct1_wr_idx_1
//// Bit[12] idct1_buff0_busy_1
//// Bit[11] idct1_buff1_busy_1
//// Bit[10] new_idct1_busy_1
//// Bit[9] iq_om_8val_1
//// Bit[8] idct1_pipe_busy_1
//
//// Bit[7] wait_mb_left_finish_hold_1
//// Bit[6] new_idct2_rd_idx_1
//// Bit[5] new_idct2_wr_idx_1
//// Bit[4] idct2_buff0_busy_1
//// Bit[3] idct2_buff1_busy_1
//// Bit[2] idct2_en_1
//// Bit[1] new_idct2_busy_1
//// Bit[0] new_idct1_ready_1
//
//`define HCODEC_IQIDCT_DEBUG_IDCT      8'h11
//
//
//
//// bit 31 -- convas_enable
//// bit 30:24 -- convas_x_count ( 8 pixels / 64 bits )
//// bit 23:16 -- convas_y_count
//// bit 15   -- dcac_dma_busy
//// bit 14   -- dcac_dma_urgent
//// bit 13:8 -- dcac_dma_count
//// bit 7    -- dcac_dma_rw
//// bit 6    -- dcac_skip_read_mode
//// bit 5:0  -- dcac_dma_offset
//`define HCODEC_DCAC_DMA_CTRL        8'h12
//// when (convas_enable == 0 )
////   bit 31:0 dcac_dma_addr
//// when (convas_enable == 1 )
////   bit 31:25 canvas_addr (7 bits)
////   bit 24:12 convas_y_start ( 13 btis )
////   bit 11:0  convas_x_start ( 12 btis )
//`define HCODEC_DCAC_DMA_ADDRESS     8'h13
//// bit 7:0 -- dcac_cpu_addr
//`define HCODEC_DCAC_CPU_ADDRESS     8'h14
//// bit 31:0 -- dcac_cpu_data
//`define HCODEC_DCAC_CPU_DATA        8'h15
//
//// bit 31:19 -- reserved
//// bit 18:16 -- block_num_reg -- Read-Only
//// bit 15:0 -- dcac_mb_count
//`define HCODEC_DCAC_MB_COUNT        8'h16
//
//// bit 31:18 -- reserved
//// For H264 :
////   bit 17:2 -- h264_quant
////   bit 11:6 -- h264_quant_c
////   bit  5:0 -- h264_quant_c
//// For VC1 :
////   bit    17 -- qindex_GT_8
////   bit    16 -- HalfQPStep
////   bit 15:12 -- eQuantMode
////   bit 11:6  -- AltPQuant
////   bit  5:0  -- PQuant
////
//`define HCODEC_IQ_QUANT             8'h17
//
//// bit 31:24  -- bitplane_width
//// bit 23:16  -- bitplane_height
//// bit 15:14  -- bitplane_start_x
//// bit 13:12  -- bitplane_start_y
//// bit 11:4   -- reserved
//// bit 3:1    -- bitplane_type
//// bit 0      -- bitplane_busy
//`define HCODEC_VC1_BITPLANE_CTL     8'h18
//
//
//
//    `define HCODEC_RAM_TEST_CMD        12'h002
//    `define HCODEC_RAM_TEST_ADDR       12'h003
//    `define HCODEC_RAM_TEST_DATAH      12'h004
//    `define HCODEC_RAM_TEST_DATAL      12'h005
//
//    `define HCODEC_RAM_TEST_RD_CMD	    16'h0000
//    `define HCODEC_RAM_TEST_WR_CMD	    16'h8000
//    `define HCODEC_IDCT_TM2_PT0	    16'h0001
//    `define HCODEC_IDCT_TM2_PT1	    16'h0002
//    `define HCODEC_IDCT_TM1_PT0	    16'h0004
//    `define HCODEC_IDCT_TM1_PT1	    16'h0008
//    `define HCODEC_IQ_OMEM_PT0	        16'h0010
//    `define HCODEC_IQ_OMEM_PT1	        16'h0020
//    `define HCODEC_MC_IMEM_PT0	        16'h0040
//    `define HCODEC_ALL_RAM_PTS	        16'h007f
//
////======================================
////  VCOP Control Register Bits
////
////======================================
//    //`define HCODEC_IQIDCT_RESET	    16'h0001	    // Bit 0
//    `define HCODEC_QM_WEN		    16'h0002	    // Bit 1
//    `define HCODEC_IQIDCT_ENABLE	    16'h0004	    // Bit 2
//    `define HCODEC_INTRA_QM	    16'h0008	    // Bit 3	0 = Use default; 1 = use loaded
//    `define HCODEC_NINTRA_QM	    16'h0010	    // Bit 4	0 = Use default; 1 = use loaded
//
////======================================
////  QP Control Register Bits
////
////======================================
//    `define HCODEC_INTRA_MODE	    16'h0080	    // Bit 7
//// Duplicate Address:  When actually used
//// please move to a different address
//// `define HCODEC_FLD_DCT_TYPE	    16'h0100	    // Bit 8	0 = Frame DCT; 1 = field DCT
//
//
// Closing file:  hcodec_iqidct_regs.h
//
//------------------------------------------------------------------------------
// HCODEC IQIDCT module level register offset
//------------------------------------------------------------------------------
//
// Reading file:  hcodec_vcpu_regs.h
//
//========================================================================
//  VCPU module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_HCODEC_VCPU_CBUS_BASE = 0x03
// -----------------------------------------------
//`define HCODEC_MSP                 8'h00
//`define HCODEC_MPSR                8'h01
//`define HCODEC_MINT_VEC_BASE       8'h02
//`define HCODEC_MCPU_INTR_GRP       8'h03
//`define HCODEC_MCPU_INTR_MSK       8'h04
//`define HCODEC_MCPU_INTR_REQ       8'h05
//`define HCODEC_MPC_P               8'h06
//`define HCODEC_MPC_D               8'h07
//`define HCODEC_MPC_E			    8'h08
//`define HCODEC_MPC_W			    8'h09
//`define HCODEC_MINDEX0_REG			8'h0a
//`define HCODEC_MINDEX1_REG			8'h0b
//`define HCODEC_MINDEX2_REG			8'h0c
//`define HCODEC_MINDEX3_REG			8'h0d
//`define HCODEC_MINDEX4_REG			8'h0e
//`define HCODEC_MINDEX5_REG			8'h0f
//`define HCODEC_MINDEX6_REG			8'h10
//`define HCODEC_MINDEX7_REG			8'h11
//`define HCODEC_MMIN_REG			8'h12
//`define HCODEC_MMAX_REG			8'h13
//`define HCODEC_MBREAK0_REG			8'h14
//`define HCODEC_MBREAK1_REG			8'h15
//`define HCODEC_MBREAK2_REG			8'h16
//`define HCODEC_MBREAK3_REG			8'h17
//`define HCODEC_MBREAK_TYPE			8'h18
//`define HCODEC_MBREAK_CTRL			8'h19
//`define HCODEC_MBREAK_STAUTS		8'h1a
//`define HCODEC_MDB_ADDR_REG		8'h1b
//`define HCODEC_MDB_DATA_REG		8'h1c
//`define HCODEC_MDB_CTRL			8'h1d
//`define HCODEC_MSFTINT0            8'h1e
//`define HCODEC_MSFTINT1            8'h1f
//
//`define HCODEC_CSP                 8'h20
//`define HCODEC_CPSR                8'h21
//`define HCODEC_CINT_VEC_BASE       8'h22
//`define HCODEC_CCPU_INTR_GRP       8'h23
//`define HCODEC_CCPU_INTR_MSK       8'h24
//`define HCODEC_CCPU_INTR_REQ       8'h25
//`define HCODEC_CPC_P               8'h26
//`define HCODEC_CPC_D               8'h27
//`define HCODEC_CPC_E			    8'h28
//`define HCODEC_CPC_W			    8'h29
//`define HCODEC_CINDEX0_REG			8'h2a
//`define HCODEC_CINDEX1_REG			8'h2b
//`define HCODEC_CINDEX2_REG			8'h2c
//`define HCODEC_CINDEX3_REG			8'h2d
//`define HCODEC_CINDEX4_REG			8'h2e
//`define HCODEC_CINDEX5_REG			8'h2f
//`define HCODEC_CINDEX6_REG			8'h30
//`define HCODEC_CINDEX7_REG			8'h31
//`define HCODEC_CMIN_REG			8'h32
//`define HCODEC_CMAX_REG			8'h33
//`define HCODEC_CBREAK0_REG			8'h34
//`define HCODEC_CBREAK1_REG			8'h35
//`define HCODEC_CBREAK2_REG			8'h36
//`define HCODEC_CBREAK3_REG			8'h37
//`define HCODEC_CBREAK_TYPE			8'h38
//`define HCODEC_CBREAK_CTRL			8'h39
//`define HCODEC_CBREAK_STAUTS		8'h3a
//`define HCODEC_CDB_ADDR_REG		8'h3b
//`define HCODEC_CDB_DATA_REG		8'h3c
//`define HCODEC_CDB_CTRL			8'h3d
//`define HCODEC_CSFTINT0            8'h3e
//`define HCODEC_CSFTINT1            8'h3f
//
//`define HCODEC_IMEM_DMA_CTRL       8'h40
//`define HCODEC_IMEM_DMA_ADR        8'h41
//`define HCODEC_IMEM_DMA_COUNT      8'h42
//// bit[29:24] A_brst_num_imem
//// bit[21:16] A_id_imem
//// bit[11:0] wrrsp_count_imem (reserved)
//`define HCODEC_WRRSP_IMEM          8'h43
//
//`define HCODEC_LMEM_DMA_CTRL       8'h50
//`define HCODEC_LMEM_DMA_ADR        8'h51
//`define HCODEC_LMEM_DMA_COUNT      8'h52
//// bit[29:24] A_brst_num_lmem
//// bit[21:16] A_id_lmem
//// bit[11:0] wrrsp_count_lmem
//`define HCODEC_WRRSP_LMEM          8'h53
//
//`define HCODEC_MAC_CTRL1			8'h60
//`define HCODEC_ACC0REG1			8'h61
//`define HCODEC_ACC1REG1			8'h62
//
//`define HCODEC_MAC_CTRL2			8'h70
//`define HCODEC_ACC0REG2			8'h71
//`define HCODEC_ACC1REG2			8'h72
//`define HCODEC_CPU_TRACE			8'h80
//
//
// Closing file:  hcodec_vcpu_regs.h
//
//------------------------------------------------------------------------------
// HEVC_ASSIST module level register offset
//------------------------------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_ASSIST_CBUS_BASE = 0x00
// -----------------------------------------------
#define P_HEVC_ASSIST_AFIFO_CTRL                   (volatile uint32_t *)0xfe32c004
#define P_HEVC_ASSIST_AFIFO_CTRL1                  (volatile uint32_t *)0xfe32c008
#define P_HEVC_ASSIST_AUTO_CG_DISABLE              (volatile uint32_t *)0xfe32c00c
#define P_HEVC_ASSIST_SW_RESET                     (volatile uint32_t *)0xfe32c010
#define P_HEVC_ASSIST_AFIFO_CTRL2                  (volatile uint32_t *)0xfe32c014
// bit[31:28] - hed_wr_id (Write Only)
// bit[31:16] - hed_fb_wr_total_page_num (Read Only)
// bit[15:12] - hed_wr_map_addr_id
// bit[11]    - hed_wr_flush
// bit[10:8]  - hed_wr_map_addr_endian
// bit[7]     - hed_wr_map_addr_active(Read Only)
// bit[6:2]   - wr_entry_pending_num(Read Only)
// bit[1]     - hed_fb_wr_addr_auto_rd
// bit[0]     - hed_fb_wr_en
#define P_HEVC_ASSIST_HED_FB_W_CTL                 (volatile uint32_t *)0xfe32c018
// bit[31:28] - hed_rd_id (Write Only)
// bit[27:16] - hed_rd_map_auto_halt_num (Write Only)
// bit[31:16] - hed_fb_rd_total_page_num (Read Only)
// bit[15:12] - hed_rd_map_addr_id
// bit[11]    - hed_rd_map_auto_halt_en
// bit[10:8]  - hed_rd_map_addr_endian
// bit[7]     - hed_rd_map_addr_active(Read Only)
// bit[6:2]   - rd_entry_pending_num
// bit[1]     - hed_fb_rd_addr_auto_rd
// bit[0]     - hed_fb_rd_en
#define P_HEVC_ASSIST_HED_FB_R_CTL                 (volatile uint32_t *)0xfe32c01c
// WRITE
// bit[31] - heb_fb_page_addr_target 0-wr_addr, 1-rd_addr
// bit[30:20] - Reserved
// bit[19:0] - heb_fb_page_addr (4k page)
// READ:
// bit[31]   - srdy_hed_fb_wr_addr
// bit[30]   - rrdy_hed_fb_wr_addr
// bit[29]   - srdy_hed_fb_rd_addr
// bit[28]   - rrdy_hed_fb_rd_addr
// bit[27]   - hed_fb_read_halt
// bit[26]   - hed_wrrsp_count[7]
// bit[25:21] - fb_rd_status
// bit[20] -    EOS_sent
// bit[19:16] - EOS_cnt
// bit[15:14] - hed_fb_write_status
// bit[13:7] - hed_rdrsp_count
// bit[6:0]  - hed_wrrsp_count
#define P_HEVC_ASSIST_HED_FB_ADDR                  (volatile uint32_t *)0xfe32c020
#define P_HEVC_ASSIST_MMU_MAP_ADDR                 (volatile uint32_t *)0xfe32c024
#define P_HEVC_ASSIST_FB_MMU_MAP_ADDR              (volatile uint32_t *)0xfe32c028
#define P_HEVC_ASSIST_FBD_MMU_MAP_ADDR             (volatile uint32_t *)0xfe32c02c
// bit[31:20] -- fb_read_lcu_y // READ only
// bit[19:8]  -- fb_read_lcu_x // READ only
// bit[7]     -- fb_read_lcu_latch
// bit[6:5]   -- reserved
// bit[4]  -- fb_disable_wr_iqit_buf
// bit[3]  -- fb_read_avs2_enable
// bit[2]  -- fb_read_vp9_enable
// bit[1]  -- fb_avs2_enable
// bit[0]  -- fb_vp9_enable
#define P_HEVC_ASSIST_HED_FB_CTL                   (volatile uint32_t *)0xfe32c030
// [31:16] height
// [15:0] width
#define P_HEVC_ASSIST_PIC_SIZE_FB_READ             (volatile uint32_t *)0xfe32c034
#define P_HEVC_ASSIST_MMU_MAP_ADDR2                (volatile uint32_t *)0xfe32c038
// bit[21:20] ipp_intralbuf_axiaddr_prefix
// bit[19:18] awaddr_axi_dma_prefix
// bit[17:16] araddr_axi_dma_prefix
// bit[15:14] awaddr_axi_stream_prefix
// bit[13:12] araddr_axi_stream_prefix
// bit[11:10] awaddr_axi_fb_prefix
// bit[9:8]   araddr_axi_fb_prefix
// bit[7:6]   vcpu_lmem_dma_prefix
// bit[5:4]   vcpu_imem_dma_prefix
// bit[3:2]   fb_wr_mmu_map_addr_prefix
// bit[1:0]   fb_rd_mmu_map_addr_prefix
#define P_HEVC_ASSIST_AXIADDR_PREFIX               (volatile uint32_t *)0xfe32c03c
// bit[31]- parser_iqit_buff_clk_force_on
// bit[1] - parser_iqit_buff_bypass
// bit[0] - parser_iqit_buff_sw_rst
#define P_HEVC_PARSER_IQIT_BUFF_CTL                (volatile uint32_t *)0xfe32c040
#define P_HEVC_PARSER_IQIT_BUFF_STATUS             (volatile uint32_t *)0xfe32c044
#define P_HEVC_ASSIST_MMU_MAP_ADDR_DBE1            (volatile uint32_t *)0xfe32c048
#define P_HEVC_ASSIST_GCLK_EN_DISABLE              (volatile uint32_t *)0xfe32c04c
#define P_HEVC_ASSIST_AMR1_INT0                    (volatile uint32_t *)0xfe32c054
#define P_HEVC_ASSIST_AMR1_INT1                    (volatile uint32_t *)0xfe32c058
#define P_HEVC_ASSIST_AMR1_INT2                    (volatile uint32_t *)0xfe32c05c
#define P_HEVC_ASSIST_AMR1_INT3                    (volatile uint32_t *)0xfe32c060
#define P_HEVC_ASSIST_AMR1_INT4                    (volatile uint32_t *)0xfe32c064
#define P_HEVC_ASSIST_AMR1_INT5                    (volatile uint32_t *)0xfe32c068
#define P_HEVC_ASSIST_AMR1_INT6                    (volatile uint32_t *)0xfe32c06c
#define P_HEVC_ASSIST_AMR1_INT7                    (volatile uint32_t *)0xfe32c070
#define P_HEVC_ASSIST_AMR1_INT8                    (volatile uint32_t *)0xfe32c074
#define P_HEVC_ASSIST_AMR1_INT9                    (volatile uint32_t *)0xfe32c078
#define P_HEVC_ASSIST_AMR1_INTA                    (volatile uint32_t *)0xfe32c07c
#define P_HEVC_ASSIST_AMR1_INTB                    (volatile uint32_t *)0xfe32c080
#define P_HEVC_ASSIST_AMR1_INTC                    (volatile uint32_t *)0xfe32c084
#define P_HEVC_ASSIST_AMR1_INTD                    (volatile uint32_t *)0xfe32c088
#define P_HEVC_ASSIST_AMR1_INTE                    (volatile uint32_t *)0xfe32c08c
#define P_HEVC_ASSIST_AMR1_INTF                    (volatile uint32_t *)0xfe32c090
#define P_HEVC_ASSIST_AMR2_INT0                    (volatile uint32_t *)0xfe32c094
#define P_HEVC_ASSIST_AMR2_INT1                    (volatile uint32_t *)0xfe32c098
#define P_HEVC_ASSIST_AMR2_INT2                    (volatile uint32_t *)0xfe32c09c
#define P_HEVC_ASSIST_AMR2_INT3                    (volatile uint32_t *)0xfe32c0a0
#define P_HEVC_ASSIST_AMR2_INT4                    (volatile uint32_t *)0xfe32c0a4
#define P_HEVC_ASSIST_AMR2_INT5                    (volatile uint32_t *)0xfe32c0a8
#define P_HEVC_ASSIST_AMR2_INT6                    (volatile uint32_t *)0xfe32c0ac
#define P_HEVC_ASSIST_AMR2_INT7                    (volatile uint32_t *)0xfe32c0b0
#define P_HEVC_ASSIST_AMR2_INT8                    (volatile uint32_t *)0xfe32c0b4
#define P_HEVC_ASSIST_AMR2_INT9                    (volatile uint32_t *)0xfe32c0b8
#define P_HEVC_ASSIST_AMR2_INTA                    (volatile uint32_t *)0xfe32c0bc
#define P_HEVC_ASSIST_AMR2_INTB                    (volatile uint32_t *)0xfe32c0c0
#define P_HEVC_ASSIST_AMR2_INTC                    (volatile uint32_t *)0xfe32c0c4
#define P_HEVC_ASSIST_AMR2_INTD                    (volatile uint32_t *)0xfe32c0c8
#define P_HEVC_ASSIST_AMR2_INTE                    (volatile uint32_t *)0xfe32c0cc
#define P_HEVC_ASSIST_AMR2_INTF                    (volatile uint32_t *)0xfe32c0d0
#define P_HEVC_ASSIST_MBX_SSEL                     (volatile uint32_t *)0xfe32c0d4
#define P_HEVC_ASSIST_TIMER0_LO                    (volatile uint32_t *)0xfe32c0d8
#define P_HEVC_ASSIST_TIMER0_HI                    (volatile uint32_t *)0xfe32c0dc
#define P_HEVC_ASSIST_TIMER1_LO                    (volatile uint32_t *)0xfe32c0e0
#define P_HEVC_ASSIST_TIMER1_HI                    (volatile uint32_t *)0xfe32c0e4
#define P_HEVC_ASSIST_DMA_INT                      (volatile uint32_t *)0xfe32c0e8
#define P_HEVC_ASSIST_DMA_INT_MSK                  (volatile uint32_t *)0xfe32c0ec
#define P_HEVC_ASSIST_DMA_INT2                     (volatile uint32_t *)0xfe32c0f0
#define P_HEVC_ASSIST_DMA_INT_MSK2                 (volatile uint32_t *)0xfe32c0f4
#define P_HEVC_ASSIST_MBOX0_IRQ_REG                (volatile uint32_t *)0xfe32c100
#define P_HEVC_ASSIST_MBOX0_CLR_REG                (volatile uint32_t *)0xfe32c104
#define P_HEVC_ASSIST_MBOX0_MASK                   (volatile uint32_t *)0xfe32c108
#define P_HEVC_ASSIST_MBOX0_FIQ_SEL                (volatile uint32_t *)0xfe32c10c
#define P_HEVC_ASSIST_MBOX1_IRQ_REG                (volatile uint32_t *)0xfe32c110
#define P_HEVC_ASSIST_MBOX1_CLR_REG                (volatile uint32_t *)0xfe32c114
#define P_HEVC_ASSIST_MBOX1_MASK                   (volatile uint32_t *)0xfe32c118
#define P_HEVC_ASSIST_MBOX1_FIQ_SEL                (volatile uint32_t *)0xfe32c11c
#define P_HEVC_ASSIST_MBOX2_IRQ_REG                (volatile uint32_t *)0xfe32c120
#define P_HEVC_ASSIST_MBOX2_CLR_REG                (volatile uint32_t *)0xfe32c124
#define P_HEVC_ASSIST_MBOX2_MASK                   (volatile uint32_t *)0xfe32c128
#define P_HEVC_ASSIST_MBOX2_FIQ_SEL                (volatile uint32_t *)0xfe32c12c
// bit[31:24] - read request
// bit[23:16] - write request
// bit[15] - disable_aml_axi_clk_gating_b
// bit[14] - disable_arb_b
// bit[13:12] - Reserved
// bit[11:8] - arb_switch_cnt_b
// bit[7] - disable_aml_axi_clk_gating
// bit[6] - disable_arb
// bit[5] - aw_urgent_out_en
// bit[4] - ar_urgent_out_en
// bit[3:0] - arb_switch_cnt
#define P_HEVC_ASSIST_AXI_CTRL                     (volatile uint32_t *)0xfe32c130
// bit[31:24] - read arb result
// bit[23:16] - write arb result
// bit[15:12] - read_ar_cnt
// bit[11:8] - write_aw_cnt
// bit[7] - arvalid_axi_s0
// bit[6] - arready_axi_s0
// bit[5] - awvalid_axi_s0
// bit[4] - awready_axi_s0
// bit[3:0] - write_fifo_cnt
#define P_HEVC_ASSIST_AXI_STATUS                   (volatile uint32_t *)0xfe32c134
// bit[31:24] - read request b
// bit[23:16] - write request b
// bit[15:0] - Reserved
#define P_HEVC_ASSIST_AXI_STATUS2_HI               (volatile uint32_t *)0xfe32c138
// bit[31:24] - read arb result b
// bit[23:16] - write arb result b
// bit[15:12] - read_ar_cnt b
// bit[11:8] - write_aw_cnt b
// bit[7] - arvalid_axi_s0 b
// bit[6] - arready_axi_s0 b
// bit[5] - awvalid_axi_s0 b
// bit[4] - awready_axi_s0 b
// bit[3:0] - write_fifo_cnt b
#define P_HEVC_ASSIST_AXI_STATUS2_LO               (volatile uint32_t *)0xfe32c13c
// bit[7:4] - FB read AXI ID
// bit[3:0] - FB write AXI ID, MSB 3 bits
#define P_HEVC_ASSIST_FB_CTL                       (volatile uint32_t *)0xfe32c140
#define P_HEVC_ASSIST_FB_W_CTL                     (volatile uint32_t *)0xfe32c144
#define P_HEVC_ASSIST_FB_W_CTL1                    (volatile uint32_t *)0xfe32c148
#define P_HEVC_ASSIST_FB_WID                       (volatile uint32_t *)0xfe32c14c
#define P_HEVC_ASSIST_FB_R_CTL                     (volatile uint32_t *)0xfe32c150
#define P_HEVC_ASSIST_FB_R_CTL1                    (volatile uint32_t *)0xfe32c154
#define P_HEVC_ASSIST_FB_RID                       (volatile uint32_t *)0xfe32c158
#define P_HEVC_ASSIST_PIC_SIZE_FB_READ1            (volatile uint32_t *)0xfe32c15c
#define P_HEVC_ASSIST_FB_PIC_CLR                   (volatile uint32_t *)0xfe32c160
#define P_HEVC_ASSIST_BACKCORE_INT_STATUS          (volatile uint32_t *)0xfe32c164
#define P_HEVC_ASSIST_SCRATCH_0                    (volatile uint32_t *)0xfe32c2c0
#define P_HEVC_ASSIST_SCRATCH_1                    (volatile uint32_t *)0xfe32c2c4
#define P_HEVC_ASSIST_SCRATCH_2                    (volatile uint32_t *)0xfe32c2c8
#define P_HEVC_ASSIST_SCRATCH_3                    (volatile uint32_t *)0xfe32c2cc
#define P_HEVC_ASSIST_SCRATCH_4                    (volatile uint32_t *)0xfe32c2d0
#define P_HEVC_ASSIST_SCRATCH_5                    (volatile uint32_t *)0xfe32c2d4
#define P_HEVC_ASSIST_SCRATCH_6                    (volatile uint32_t *)0xfe32c2d8
#define P_HEVC_ASSIST_SCRATCH_7                    (volatile uint32_t *)0xfe32c2dc
#define P_HEVC_ASSIST_SCRATCH_8                    (volatile uint32_t *)0xfe32c2e0
#define P_HEVC_ASSIST_SCRATCH_9                    (volatile uint32_t *)0xfe32c2e4
#define P_HEVC_ASSIST_SCRATCH_A                    (volatile uint32_t *)0xfe32c2e8
#define P_HEVC_ASSIST_SCRATCH_B                    (volatile uint32_t *)0xfe32c2ec
#define P_HEVC_ASSIST_SCRATCH_C                    (volatile uint32_t *)0xfe32c2f0
#define P_HEVC_ASSIST_SCRATCH_D                    (volatile uint32_t *)0xfe32c2f4
#define P_HEVC_ASSIST_SCRATCH_E                    (volatile uint32_t *)0xfe32c2f8
#define P_HEVC_ASSIST_SCRATCH_F                    (volatile uint32_t *)0xfe32c2fc
#define P_HEVC_ASSIST_SCRATCH_G                    (volatile uint32_t *)0xfe32c300
#define P_HEVC_ASSIST_SCRATCH_H                    (volatile uint32_t *)0xfe32c304
#define P_HEVC_ASSIST_SCRATCH_I                    (volatile uint32_t *)0xfe32c308
#define P_HEVC_ASSIST_SCRATCH_J                    (volatile uint32_t *)0xfe32c30c
#define P_HEVC_ASSIST_SCRATCH_K                    (volatile uint32_t *)0xfe32c310
#define P_HEVC_ASSIST_SCRATCH_L                    (volatile uint32_t *)0xfe32c314
#define P_HEVC_ASSIST_SCRATCH_M                    (volatile uint32_t *)0xfe32c318
#define P_HEVC_ASSIST_SCRATCH_N                    (volatile uint32_t *)0xfe32c31c
#define P_HEVC_ASSIST_SCRATCH_O                    (volatile uint32_t *)0xfe32c320
#define P_HEVC_ASSIST_SCRATCH_P                    (volatile uint32_t *)0xfe32c324
#define P_HEVC_ASSIST_SCRATCH_Q                    (volatile uint32_t *)0xfe32c328
#define P_HEVC_ASSIST_SCRATCH_R                    (volatile uint32_t *)0xfe32c32c
#define P_HEVC_ASSIST_SCRATCH_S                    (volatile uint32_t *)0xfe32c330
#define P_HEVC_ASSIST_SCRATCH_T                    (volatile uint32_t *)0xfe32c334
#define P_HEVC_ASSIST_SCRATCH_U                    (volatile uint32_t *)0xfe32c338
#define P_HEVC_ASSIST_SCRATCH_V                    (volatile uint32_t *)0xfe32c33c
#define P_HEVC_ASSIST_SCRATCH_W                    (volatile uint32_t *)0xfe32c340
#define P_HEVC_ASSIST_SCRATCH_X                    (volatile uint32_t *)0xfe32c344
#define P_HEVC_ASSIST_SCRATCH_Y                    (volatile uint32_t *)0xfe32c348
#define P_HEVC_ASSIST_SCRATCH_Z                    (volatile uint32_t *)0xfe32c34c
#define P_HEVC_ASSIST_SCRATCH_10                   (volatile uint32_t *)0xfe32c350
#define P_HEVC_ASSIST_SCRATCH_11                   (volatile uint32_t *)0xfe32c354
#define P_HEVC_ASSIST_SCRATCH_12                   (volatile uint32_t *)0xfe32c358
#define P_HEVC_ASSIST_SCRATCH_13                   (volatile uint32_t *)0xfe32c35c
#define P_HEVC_ASSIST_SCRATCH_14                   (volatile uint32_t *)0xfe32c360
#define P_HEVC_ASSIST_SCRATCH_15                   (volatile uint32_t *)0xfe32c364
#define P_HEVC_ASSIST_SCRATCH_16                   (volatile uint32_t *)0xfe32c368
#define P_HEVC_ASSIST_SCRATCH_17                   (volatile uint32_t *)0xfe32c36c
#define P_HEVC_ASSIST_SCRATCH_18                   (volatile uint32_t *)0xfe32c370
#define P_HEVC_ASSIST_SCRATCH_19                   (volatile uint32_t *)0xfe32c374
#define P_HEVC_ASSIST_DEBUG_0                      (volatile uint32_t *)0xfe32c380
#define P_HEVC_ASSIST_DEBUG_1                      (volatile uint32_t *)0xfe32c384
#define P_HEVC_ASSIST_DEBUG_2                      (volatile uint32_t *)0xfe32c388
#define P_HEVC_ASSIST_DEBUG_3                      (volatile uint32_t *)0xfe32c38c
#define P_HEVC_ASSIST_DEBUG_4                      (volatile uint32_t *)0xfe32c390
#define P_HEVC_ASSIST_DEBUG_5                      (volatile uint32_t *)0xfe32c394
#define P_HEVC_ASSIST_DEBUG_6                      (volatile uint32_t *)0xfe32c398
#define P_HEVC_ASSIST_DEBUG_7                      (volatile uint32_t *)0xfe32c39c
#define P_HEVC_ASSIST_DEBUG_8                      (volatile uint32_t *)0xfe32c3a0
#define P_HEVC_ASSIST_DEBUG_9                      (volatile uint32_t *)0xfe32c3a4
#define P_HEVC_ASSIST_DEBUG_A                      (volatile uint32_t *)0xfe32c3a8
#define P_HEVC_ASSIST_DEBUG_B                      (volatile uint32_t *)0xfe32c3ac
#define P_HEVC_ASSIST_DEBUG_C                      (volatile uint32_t *)0xfe32c3b0
#define P_HEVC_ASSIST_MIRROR_CONFIG                (volatile uint32_t *)0xfe32c3b4
#define P_HEVC_ASSIST_CRC_INDEX                    (volatile uint32_t *)0xfe32c3b8
#define P_HEVC_ASSIST_CRC_VALUE                    (volatile uint32_t *)0xfe32c3bc
//------------------------------------------------------------------------------
// HEVC_ASSIST module level register offset
// Same as VDEC/HCODEC to avoid confusing software guy
//------------------------------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_VCPU_CBUS_BASE = 0x03
// -----------------------------------------------
//------------------------------------------------------------------------------
// HEVC_PARSER module level register offset
//------------------------------------------------------------------------------
//
// Reading file:  hevc_parser_regs.h
//
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_PARSER_CBUS_BASE = 0x01
// -----------------------------------------------
// [31:0] After reset version, can be used for test scratch register
#define P_HEVC_PARSER_VERSION                      (volatile uint32_t *)0xfe32c400
// [31:16] - axi_setting
// [15]    - disable_stream_clock_gating
// [14]    - wstrb_set
// [13]    - stream_read_pause
// [7:4]   - stream_fetch_endian
// [3]     - use_parser_vbuf_wp
// [2]     - use_parser_vbuf2_wp
// [1]     - stream_fetch_busy - Read Only
// [0]     - stream_fetch_enable
#define P_HEVC_STREAM_CONTROL                      (volatile uint32_t *)0xfe32c404
#define P_HEVC_STREAM_START_ADDR                   (volatile uint32_t *)0xfe32c408
#define P_HEVC_STREAM_END_ADDR                     (volatile uint32_t *)0xfe32c40c
// SW stream_buffer_wr_ptr
#define P_HEVC_STREAM_WR_PTR                       (volatile uint32_t *)0xfe32c410
#define P_HEVC_STREAM_RD_PTR                       (volatile uint32_t *)0xfe32c414
//[31:0] stream_buffer_level - read only
#define P_HEVC_STREAM_LEVEL                        (volatile uint32_t *)0xfe32c418
// [31:29] stream_buffer_hole 256*(4^0) bytes
// [28:23] stream_fifo_hole
// [22:16] stream_fifo_level
// [15]    stream_fifo_wr_ptr_update_en
// [14:8]  stream_fifo_wr_ptr
// [7]     stream_fifo_rd_ptr_update_en
// [6:0]   stream_fifo_rd_ptr
#define P_HEVC_STREAM_FIFO_CTL                     (volatile uint32_t *)0xfe32c41c
// [31:26] - Reserved
// [25]    - data_length_protect_lt_8
// [24]    - align_to_emu_buffer // for AVS
// [23:20] - emu_push_bits
// [19]    - emu_3_enable // for AVS
// [18]    - emu_2_enable // for AVS
// [17]    - emu_1_enable // for AVS
// [16]    - emu_0_enable // For AVS
// [15]    - disable_shift_clock_gating
// [14]    - disable_start_code_protect
// [10]    - length_zero_startcode_en
// [9]     - length_valid_startcode_en
// [8:6]   - sft_valid_wr_position (default : 3 (at least 24 bits available))
// [5:4]   - emulate_code_length_sub_1(Default : 2)
// [3]     - emulation_auto_on_startcode(Default : 0)
// [2:1]   - start_code_length_sub_1(Default : 2)
// [0]     - stream_shift_enable(Default : 0)
#define P_HEVC_SHIFT_CONTROL                       (volatile uint32_t *)0xfe32c420
// [31:0]  - max 4-bytes start code (Default : 0x00000100)
#define P_HEVC_SHIFT_STARTCODE                     (volatile uint32_t *)0xfe32c424
// [31:0]  - max 4-bytes emulate code (Default : 0x00000300)
#define P_HEVC_SHIFT_EMULATECODE                   (volatile uint32_t *)0xfe32c428
// Read
// shift_buffer_ready,  // 31
// stream_fifo_ready,   // 30
// shift_buffer_enough, // 29
// startcode_found,     // 28
// stream_fifo_rd_ptr,     // 27:25
// shift_buffer_wr_ptr,    // 24:21
// shift_buffer_rd_offset, // 20:18
// 2'h0,                  // 17:16
// shift_buffer_start_flag[7:0], // 15:8
// av1_enable ? gmc_status : shift_buffer_emulate_count, // 7:4
// start_code_protect_en, // 3
// startcode_searching, // 2
// emulation_check_on, // 1
// startcode_check_on  // 0
// Write
// [2]     - startcode_searching
// [1]     - emulation_check_on
// [0]     - startcode_check_on
#define P_HEVC_SHIFT_STATUS                        (volatile uint32_t *)0xfe32c42c
// [31:0] hevc_shifted_data - read only
#define P_HEVC_SHIFTED_DATA                        (volatile uint32_t *)0xfe32c430
// [31:0] shift_byte_count[31:0]
#define P_HEVC_SHIFT_BYTE_COUNT                    (volatile uint32_t *)0xfe32c434
// [31:28] - shift_byte_count[35:32] -- READ
// [27:20] - element_read_data[31:24] -- READ
// [31:16] - av1_element_n
// [15]    - Reserved
// [14]    - start_av1_gmc_params_read
// [13]    - av1_gmc_params_intra_only
// [12]    - av1_gmc_params_allow_hp
// [11]    - av1_element
// [10]    - bytealign
// [9]     - signed_element
// [8]     - start_element_read
// [7]     - shift_busy
// [6:0]   - shift_bits
#define P_HEVC_SHIFT_COMMAND                       (volatile uint32_t *)0xfe32c438
// 31:8    - element_read_data[23:0]
//  7:2    - element_read_length
//  1:0    - element_read_state
#define P_HEVC_ELEMENT_RESULT                      (volatile uint32_t *)0xfe32c43c
// [31:16] - cabac_buffer
// [15]    - cabac_buffer_init
// [14]    - cabac_context_init
// [13]    - disable_cabac_clock_gating
// [12]    - cabac_init_flag
// AV1  --
// [3:2]   - av1_cdf_q_index
// VP9  --
// [11]    - Reserved
// [10]    - VP9_init_mv
// [9]     - VP9_init_ref_mode
// [8]     - VP9_init_if_y_mode
// [7]     - VP9_init_intra_inter
// [6]     - VP9_init_inter_mode
// [5]     - VP9_init_coef
// [4]     - VP9_init_tx_mode
// [3]     - VP9_init_skip
// [2]     - VP9_init_partition
// [1]     - VP9_key_frame
// [0]     - cabac_enable(Default : 0)
#define P_HEVC_CABAC_CONTROL                       (volatile uint32_t *)0xfe32c440
// VVC-- When vvc_enable
// [29]    - disableSMForLFNST(ExplicitScalingListUsed & DisableScalingMatrixForLfnstBlks)
// [28]    - ExplicitScalingListUsed (sh_explicit_scaling_list_used_flag)
// [27]    - Reserved (UseCiip before)
// [26]    - UseMTS
// [25]    - UseIntraMTS
// [24]    - UseInterMTS
// [23]    - UseLFNST
// [22]    - TransformSkipEnabledFlag
// [21:19] - sps_log2_transform_skip_max_size_minus2 0-4x4
// [18:16] - VVCminCUSize 0-4x4, 1-8x8, 2-16x16, 3-32x32, 4-64x64, 5-128x128
// [15:13] - MaxCUSize 0-8x8, 1-16x16, 2-32x32, 3-64x64, 4-128x128, 7-4x4
// [12:10] - MinCUSize 0-8x8, 1-16x16, 2-32x32, 3-64x64, 4-128x128, 7-4x4
// [9]     - slice_sao_luma_flag
// [8]     - slice_sao_chroma_flag
// [7:2]   - slice_quant
// [1:0]   - slice_type
// HEVC
// [31:25] - chromaQPOffset_U
// [24:18] - chromaQPOffset_V
// [17:16] - MaxTrSize 0-4x4, 1-8x8, 2-16x16, 3-32x32
// [15:14] - MinTrSize 0-4x4, 1-8x8, 2-16x16, 3-32x32
// AVS3-- When avs3_p1
// [13:11] - MaxCUSize 0-8x8, 1-16x16, 2-32x32, 3-64x64, 4-128x128
// [10:8]  - MinCUSize 0-8x8, 1-16x16, 2-32x32, 3-64x64, 4-128x128
// HEVC
// [13:12] - MaxCUSize 0-8x8, 1-16x16, 2-32x32, 3-64x64
// [11:10] - MinCUSize 0-8x8, 1-16x16, 2-32x32, 3-64x64
// [9]     - slice_sao_luma_flag
// [8]     - slice_sao_chroma_flag
// VP9 -- When vp9_enable
// [13:11] - MaxCUSize 0-8x8, 1-16x16, 2-32x32, 3-64x64, 7-4x4
// [10:8]  - MinCUSize 0-8x8, 1-16x16, 2-32x32, 3-64x64, 7-4x4
// [7:2]   - slice_quant
// [1:0]   - slice_type
// AVS2
// [13:12] - MaxCUSize 0-8x8, 1-16x16, 2-32x32, 3-64x64
// [11:10] - MinCUSize 0-8x8, 1-16x16, 2-32x32, 3-64x64
// [9]     - avs2_use_DQP
// [8]     - slice_quant[6]
// [7:2]   - slice_quant
// [1:0]   - slice_type
#define P_HEVC_PARSER_SLICE_INFO                   (volatile uint32_t *)0xfe32c444
// bit[16]  - 0:command, 1:address(will auto increase when write command)
// bit[15:0]- command or addr
#define P_HEVC_PARSER_CMD_WRITE                    (volatile uint32_t *)0xfe32c448
// [31:16] - parser_free_clock_enable
// [15]    - disable_parser_core_clock_gating
// [14:7]  - Reserved
// [6]     - vvc_bLowDelay
// [5]     - vvc_BiDirPred
// [4]     - entropy_coding_sync_enable
// [3]     - h265_context_sync_copy_start(Write) h265_context_sync_copy_busy(Read)
// [2]     - h265_context_sync_store_en
// [1]     - h265_context_use_hi
// [0]     - parser_core_enable(Default : 0) not used now
#define P_HEVC_PARSER_CORE_CONTROL                 (volatile uint32_t *)0xfe32c44c
// [31:16] - pre_parser_cmd
// [15]    - start_cmd_fetch/fetch_busy
// [14]    - parser_cmd_ready
// [13]    - pre_parser_cmd_ready
// [12]    - do_not_wait_if_busy
// [11:8]  - cmd_fetch_status // Read-only
// [7:0]   - cmd_fetch_addr
#define P_HEVC_PARSER_CMD_FETCH                    (volatile uint32_t *)0xfe32c450
// [31:16] - parser_cmd
// [9:5]   - parser_function
// [4:0]   - cmd_status
#define P_HEVC_PARSER_CMD_STATUS                   (volatile uint32_t *)0xfe32c454
// [31]    - end_of_picture
// [30]    - uiLeft
// [39]    - uiTop
// [28]    - uiTopRight
// [27:24] - reserved
// [23:12] - uiLin
// [11:0]  - uiCol
#define P_HEVC_PARSER_LCU_INFO                     (volatile uint32_t *)0xfe32c458
// For VVC
// 31    - vvc_UseDualITree
// 30    - vvc_mono
// 29    - BDPCMEnabledFlag
// 28    - vvc_UseISP
// 27    - vvc_UseMRL
// 26    - vvc_UseMIP
// 25    - vvc_UseLMChroma
// 24    - TB_64_FLAG
// 23    - JointCbCrEnabledFlag
// For other formats
// 30    - avs3_bi_mid_ptr  // (ctx->ptr - ctx->refp[0][REFP_0].ptr == ctx->refp[0][REFP_1].ptr - ctx->ptr)
// 29:28 - min_cu_size_qp_delta
// 27    - cu_qp_delta_enabled_flag
// 26    - amp_enabled_flag
// 25:23 - max_num_merge_cand
// 22    - mvd_l1_zero_flag
// 21:16 - num_ref_idx_l1_active
// 15:10 - num_ref_idx_l0_active
// 9:7   - max_transform_hierarchy_depth_inter
// 6:4   - max_transform_hierarchy_depth_intra
// 3     - transquant_bypass_enable_flag
// 2     - constrained_intra_pred_flag
// 1     - transform_skip_enabled_flag
// 0     - sign_data_hiding_flag
#define P_HEVC_PARSER_HEADER_INFO                  (volatile uint32_t *)0xfe32c45c
#define P_HEVC_PARSER_RESULT_0                     (volatile uint32_t *)0xfe32c460
#define P_HEVC_PARSER_RESULT_1                     (volatile uint32_t *)0xfe32c464
#define P_HEVC_PARSER_RESULT_2                     (volatile uint32_t *)0xfe32c468
#define P_HEVC_PARSER_RESULT_3                     (volatile uint32_t *)0xfe32c46c
// For HEVC
// bit[31:24] - quant[47:40]
// bit[23:16] - quant[39:32]
// For VP9
// bit[31:24] - intra_flag
// bit[23:16] - SplitFlag_4
// bit[15:8]  - SkipFlag
// bit[7]     - SliceEnd|end_of_picture
// bit[6:3]   - SplitFlag_8
// bit[2:1]   - SplitFlag_16
// bit[0]     - SplitFlag_32
#define P_HEVC_CABAC_TOP_INFO                      (volatile uint32_t *)0xfe32c470
// For VVC
// Bit [31:24] - CuChromaQpOffsetSubdivInter
// Bit [23:16] - CuQpDeltaSubdivInter
// Bit [15: 8] - CuChromaQpOffsetSubdivIntra
// Bit [ 7: 0] - CuQpDeltaSubdivIntra
// For HEVC
// bit[31:0]  - quant[31:0]
// For VP9
// bit [31:24] - vp9_top_eob_v
// bit [23:16] - vp9_top_eob_u
// bit [15:0] - vp9_top_eob_y
#define P_HEVC_CABAC_TOP_INFO_2                    (volatile uint32_t *)0xfe32c474
// For HEVC
// bit[31:24] - quant[47:40]
// bit[23:16] - quant[39:32]
// For VP9
// bit[31:24] - Reserved
// bit[23:16] - SplitFlag_4
// bit[15:8]  - SkipFlag
// bit[7]     - Reserved
// bit[6:3]   - SplitFlag_8
// bit[2:1]   - SplitFlag_16
// bit[0]     - SplitFlag_32
#define P_HEVC_CABAC_LEFT_INFO                     (volatile uint32_t *)0xfe32c478
// For HEVC
// bit[31:0]  - quant[31:0]
// For VP9
// bit [31:24] - vp9_left_eob_v
// bit [23:16] - vp9_left_eob_u
// bit [15:0] - vp9_left_eob_y
#define P_HEVC_CABAC_LEFT_INFO_2                   (volatile uint32_t *)0xfe32c47c
// [31:29] - stream_buffer_empty_int_ctl (32bytes - 4k bytes) (default : 4 : 512 bytes interrupt)
// [28:26] - stream_fifo_empty_int_ctl (0 - 128)(default : 0 - 0 byte interrupt)
// [25]    - stream_buffer_empty_int_cpu_enable
// [24]    - stream_buffer_empty_int_amrisc_enable
// [23]    - stream_fifo_empty_int_cpu_enable
// [22]    - stream_fifo_empty_int_amrisc_enable
// [15]    - disable_parser_clock_gating
// [10]    - fed_fb_slice_done_int_cpu_enable
// [9]     - fed_fb_slice_done_int_amrisc_enable
// [8]     - dec_done_int_cpu_enable
// [7]     - dec_done_int_amrisc_enable
// [6]     - cmd_done_int_cpu_enable
// [5]     - cmd_done_int_amrisc_enable
// [4]     - startcode_found_int_cpu_enable
// [3]     - startcode_found_int_amrisc_enable
// [2]     - parser_int_cpu_level (default : 0(pulse))
// [1]     - parser_int_amrisc_level (default : 0(pulse))
// [0]     - parser_int_enable(Default : 0)
#define P_HEVC_PARSER_INT_CONTROL                  (volatile uint32_t *)0xfe32c480
// [7]     - stream_empty_int_cpu
// [6]     - stream_empty_int_amrisc
// [3]     - fed_fb_slice_done_int
// [2]     - dec_done_int
// [1]     - cmd_done_int
// [0]     - startcode_found_int
#define P_HEVC_PARSER_INT_STATUS                   (volatile uint32_t *)0xfe32c484
// [31]    - parser_mpred_if_busy  -- Read Only
// [12]    - alf_with_sao  -- For Dual Core fb_write
// [11]    - disable_fast_Coeff_Done
// [10]    - disable_parser_alf_if_clock_gating
// [9]     - parser_alf_if_en
// [8]     - sao_sw_pred_enable
// [7]     - sao_top_save_even_no_sao
// [6]     - disable_parser_sao_if_clock_gating
// [5]     - parser_sao_if_en
// [4]     - scaler_if_leave_one_more_space
// [3]     - disable_parser_mpred_if_clock_gating
// [2]     - parser_mpred_if_en
// [1]     - disable_parser_scaler_if_clock_gating
// [0]     - parser_scaler_if_en
#define P_HEVC_PARSER_IF_CONTROL                   (volatile uint32_t *)0xfe32c488
// [31:16] PicHeightInLumaSamples
// [15:0]  PicWidthInLumaSamples
#define P_HEVC_PARSER_PICTURE_SIZE                 (volatile uint32_t *)0xfe32c48c
// [31]    - start_lcu_mpred_cmd
// [30]    - lcu_decoding_start
// [29]    - do_not_wait_if_busy
// [23:0]  - lcu_idx
#define P_HEVC_PARSER_LCU_START                    (volatile uint32_t *)0xfe32c490
// [31:30] - bit_depth_chroma_minus8
// [29:24] - MAX_QP
// [23:20] - qpBdOffsetC
// [19:16] - qpBdOffsetY
// [15:12] - pcm_sample_bit_depth_chroma
// [11:8]  - pcm_sample_bit_depth_luma
// [7:6]   - max_pcm_luma_coding_block_size
// [5:4]   - min_pcm_luma_coding_block_size
// [3:2]   - bit_depth_luma_minus8
// [1]     - enable_negative_quant
// [0]     - pcm_enabled_flag
#define P_HEVC_PARSER_HEADER_INFO2                 (volatile uint32_t *)0xfe32c494
// Read Only
// bit[23]    - 1'b1
// bit[22]    - Reserved
// bit[21:16] - quant_V
// bit[15]    - 1'b1
// bit[14]    - Reserved
// bit[13:8]  - quant_U
// bit[7]     - 1'b1
// bit[6]     - Reserved
// bit[5:0]   - quant_Y
#define P_HEVC_PARSER_QUANT_READ                   (volatile uint32_t *)0xfe32c498
#define P_HEVC_PARSER_RESERVED_27                  (volatile uint32_t *)0xfe32c49c
// bit[15:8]  - skip_addr_SaoOffData
// bit[7:0]   - skip_addr_SaoMerge
#define P_HEVC_PARSER_CMD_SKIP_0                   (volatile uint32_t *)0xfe32c4a0
// bit[31:24] - skip_point_coding_unit_slice_type_RET
// bit[23:16] - skip_point_coding_unit_slice_type_B
// bit[15:8]  - skip_point_coding_unit_slice_type_P
// bit[7:0]   - skip_point_coding_unit_slice_type_I
#define P_HEVC_PARSER_CMD_SKIP_1                   (volatile uint32_t *)0xfe32c4a4
// bit[31:24] - reserved
// bit[23:16] - skip_point_coding_unit_pred_mode_RET
// bit[15:8]  - skip_point_coding_unit_pred_mode_INTER
// bit[7:0]   - skip_point_coding_unit_pred_mode_INTRA
#define P_HEVC_PARSER_CMD_SKIP_2                   (volatile uint32_t *)0xfe32c4a8
// Write :
// [24:16] context_addr for dec_Bin
// [15:0]  parser_cmd
// Read result:
// cabac_context_decodeBin,       // 31
// cabac_context_decodeBinEP,     // 30
// cabac_context_decodeBinTrm,    // 29
// cabac_context_decodeBinBit,    // 28
// parser_command,                // 27:22
// cabac_context_ready,           // 21
// cmd_status,                    // 20:16
// cabac_manual_data              // 15:0
//
#define P_HEVC_PARSER_MANUAL_CMD                   (volatile uint32_t *)0xfe32c4ac
// bit [12:0] - Read address :
//          address 0-255 stream_fifo (128x64)
//          address 256-319 context_mem (256x7)
//          address 512-639 parser_cmd_mem (256x16)
//          address 0x400-0xfff vp9_count_mem(768x96)
//          address 0x1000-0x11ff vp9_prob_mem(512x32)
#define P_HEVC_PARSER_MEM_RD_ADDR                  (volatile uint32_t *)0xfe32c4b0
// bit [9:0] - Write address :
//          address 0-255 stream_fifo (128x64)
//          address 512-639 parser_cmd_mem (256x16)
//          address 0x400-0xfff vp9_count_mem(768x96)
//          address 0x1000-0x11ff vp9_prob_mem(512x32)
#define P_HEVC_PARSER_MEM_WR_ADDR                  (volatile uint32_t *)0xfe32c4b4
// bit[31:0] read/write data
#define P_HEVC_PARSER_MEM_RW_DATA                  (volatile uint32_t *)0xfe32c4b8
// [31:20] sao_lcu_x
// [19:8]  sao_lcu_y
// [7] sao_lcu_xy_update
// [6:2] reserved
// [1] sao_wait_up_read
// [0] sao_wait_write
#define P_HEVC_SAO_IF_STATUS                       (volatile uint32_t *)0xfe32c4c0
// Y_offset_3,    // 31:26
// Y_offset_2,    // 25:20
// Y_offset_1,    // 19:14
// Y_offset_0,    // 13:8
// Y_typeAuxInfo[3:0], // 7:4
// Y_typeIdc,     // 3:1 [0, 1, 2, 3]-EO, [4,5]-BO+Y_typeAuxInfo[4]
// Y_modelIdc     // 0
#define P_HEVC_SAO_IF_DATA_Y                       (volatile uint32_t *)0xfe32c4c4
#define P_HEVC_SAO_IF_DATA_U                       (volatile uint32_t *)0xfe32c4c8
#define P_HEVC_SAO_IF_DATA_V                       (volatile uint32_t *)0xfe32c4cc
#define P_HEVC_STREAM_SWAP_ADDR                    (volatile uint32_t *)0xfe32c4d0
// bit[31:24] - swap_wrrsp_count
// bit[23:16] - swap_d_count (Read Only)
// bit[15:8]  - swap_a_count (Read Only) (7:0 or 9:2)
// bit [7] - swap busy (Read Only)
// bit [6:4] - swap_d_count[10:8] (Read Only)
// bit [3] - swap_a_count[10] (Read Only)
// bit [2] - swap_wrrsp_count_update
// bit [1] - 1 - STORE to Memory, 0 - LOAD from Memory
// bit [0] - swap active
#define P_HEVC_STREAM_SWAP_CTRL                    (volatile uint32_t *)0xfe32c4d4
// bit[8:4] if_monitor_rd_idx
// bit[3:2] Reserved
// bit[1]   Clear all count
// bit[0]   Enable/Disable monitor
#define P_HEVC_PARSER_IF_MONITOR_CTRL              (volatile uint32_t *)0xfe32c4d8
// idx  -- read out
//   0  -- iqit_if_active_count
//   1  -- iqit_if_wait_count
//   2  -- mpred_if_active_count
//   3  -- mpred_if_wait_count
//   4  -- sao_if_active_count
//   5  -- sao_if_wait_count
//   6  -- alf_if_active_count
//   7  -- alf_if_wait_count
//  31  -- {
//            interface_ready[15:0],
//            interface_valid[15:0]
//         }
//interface_ready <= {
//		    12'h0,
//                  alf_rdy_parser,
//                  sao_rdy_parser,
//                  mpred_rdy_parser,
//		    TReady_scaler
//                 };
//interface_valid <= {
//		    12'h0,
//		    parser_vld_alf,
//		    parser_vld_sao,
//		    parser_valid_mpred,
//		    TValid_scaler
//                 };
#define P_HEVC_PARSER_IF_MONITOR_DATA              (volatile uint32_t *)0xfe32c4dc
//`define HEVC_IQIT_IF_WAIT_CNT        8'h36
//`define HEVC_MPRED_IF_WAIT_CNT       8'h37
//`define HEVC_SAO_IF_WAIT_CNT         8'h38
// [31:0] packet_length_count
#define P_HEVC_STREAM_PACKET_LENGTH                (volatile uint32_t *)0xfe32c4e4
// [31]   data_length_protect_enable
// [30]   data_protect_fill_00_enable
// [29]   data_protect_fill_ff_enable
// [28:0] data_length_protect_count
#define P_HEVC_SHIFT_LENGTH_PROTECT                (volatile uint32_t *)0xfe32c4e8
// [31:0] skip_count_blk44 -- RW
#define P_HEVC_SKIP_COUNT_BLK44                    (volatile uint32_t *)0xfe32c4ec
// Write
// bit[8] -- clear_all_quant_count
// bit[2:0] -- read_idx
// Read
// For H265 - QUANT0-Y, QUANT1-Cb, QUANT2-Cr
// For AVS2 - QUANT0-qb
// For VP9  - QUANT0-YDC, QUANT1-YAC, QUANT3-CDC, QUANT3-CAC
// [31:0] idx 0 - blk88_count
//            1 - QUANT_1_COUNT
//            2 - QUANT_1_COUNT
//            3 - {quant_1_max, quant_1_min, quant_0_max, quant_0_min}
//            4 - QUANT_2_COUNT
//            5 - QUANT_3_COUNT
//            6 - {quant_3_max, quant_3_min, quant_2_max, quant_2_min}
#define P_HEVC_QUANT_COUNT_BLK44                   (volatile uint32_t *)0xfe32c4f0
// bit[3:0] parser_debug_idx
#define P_HEVC_PARSER_DEBUG_IDX                    (volatile uint32_t *)0xfe32c4f8
// bit[31:0] parser_debug_dat -- read only
#define P_HEVC_PARSER_DEBUG_DAT                    (volatile uint32_t *)0xfe32c4fc
// bit[31:27] - av1_status
// bit[26] - change_av1_status
// bit[25:23]  - Reserved
// bit[22]    - vp9_second_pu_use_if_busy_2
// bit[21]    - parser_mpred_if_busy_when_pu_mpred_busy
// bit[20:18]  - Reserved
// bit[17] - av1_decode_start(W)/av1_decode_busy
// bit[16] - av1_enable
// bit[15:9]  - Reserved
// bit[8]   - force_skip_1 (SEG_LVL_SKIP)
// bit[7:3] - vp9_status
// bit[2] - change_vp9_status
// bit[1] - vp9_decode_start(W)/vp9_decode_busy
// bit[0] - vp9_enable
#define P_VP9_CONTROL                              (volatile uint32_t *)0xfe32c500
// bit[15:8]- vp9_emd_cmd_parameter
// bit[3]   - vp9_emd_cmd_busy
// bit[2:0] - vp9_emd_command (bit[7]-start/busy)
//            0 - vp9_read
//                   (
//                      input : bit[15:8] - prob,
//                              bit[7:4] - vp9_read_literal_bits(1-16 bits)
//                      output : bit[31:16] - result)
//                   )
//            1 - vp9_diff_update_prob
//                   (
//                      input : bit[7:4] - function:
// `define vp9_read_tx_mode_prob     0
// `define vp9_read_coef_prob        1
// `define vp9_read_skip_prob        2
// `define vp9_read_inter_mode_prob  3
// `define vp9_read_interp_prob      4
// `define vp9_read_intra_inter_prob 5
// `define vp9_read_comp_inter_prob  6
// `define vp9_read_comp_ref_prob    7
// `define vp9_read_single_ref_prob  8
// `define vp9_read_if_y_mode_prob   9
// `define vp9_read_partition_prob  10
// `define vp9_read_mv_prob         11
//                              bit[29:16] - total loop times
//                              bit[31:30] - probs_common
//                      output : bit[15:8] - prob)
//                   )
#define P_VP9_EMD_CMD                              (volatile uint32_t *)0xfe32c504
// vp9_top_y_mode[31:0]
#define P_VP9_TOP_Y_MODE_0                         (volatile uint32_t *)0xfe32c508
// vp9_top_y_mode[63:32]
#define P_VP9_TOP_Y_MODE_1                         (volatile uint32_t *)0xfe32c50c
// vp9_left_y_mode[31:0]
#define P_VP9_LEFT_Y_MODE_0                        (volatile uint32_t *)0xfe32c510
// vp9_left_y_mode[63:32]
#define P_VP9_LEFT_Y_MODE_1                        (volatile uint32_t *)0xfe32c514
// bit[31] - 0:write_vp9_quant, 1:write_vp9/av1_seg_feature
// For write_vp9_seg_feature:
// bit[24:22] - seg_id
// bit[21]    - seg_q_enable
// bit[20]    - seg_q_sign
// bit[19:12] - seg_q_abs
// bit[11]    - seg_lf_enable
// bit[10]    - seg_lf_sign
// bit[9:4]   - seg_lf_abs
// bit[3]     - seg_ref_enable
// bit[2:1]   - seg_ref_abs
// bit[0]     - seg_skip_enable
// For write_av1_seg_feature:
// bit[27:25]   - last_active_segid (only for segment 0)
// bit[24:22] - seg_id
// bit[21]    - segid_preskip (only for segment 0)
// bit[20:12] - qindex
// bit[6] - av1_seg_qindex_enable
// bit[5] - av1_seg_ref_enable
// bit[4:2] - av1_seg_ref_abs
// bit[1] - av1_seg_skip_enable
// bit[0] - av1_seg_gmv_enable
// For write_vp9_quant:
// bit[19:16] - Write index : Seg_0_Y-0, Seg_0_UV-1, ... Seq_7_Y-14, Seq_7_UV-15
// bit[15:8] - AC quant
// bit[7:0]  - DC quant
#define P_VP9_QUANT_WR                             (volatile uint32_t *)0xfe32c518
// bit [31:16] - vp9_inter_mode_top/{8'h0, vp9_seg_pred_top}
// bit [15:0] - vp9_top_tx_mode (odd/even mi has same tx_mode)
#define P_HEVC_CABAC_TOP_INFO_3                    (volatile uint32_t *)0xfe32c51c
// bit [31:16] - vp9_inter_mode_left/{8'h0, vp9_seg_pred_left}
// bit [15:0] - vp9_left_tx_mode (odd/even mi has same tx_mode)
#define P_HEVC_CABAC_LEFT_INFO_3                   (volatile uint32_t *)0xfe32c520
// bit [31:16] - ref_frame[1]
// bit [15:0]  - ref_frame[0]
#define P_HEVC_CABAC_TOP_INFO_4                    (volatile uint32_t *)0xfe32c524
// bit [31:16] - ref_frame[1]
// bit [15:0]  - ref_frame[0]
#define P_HEVC_CABAC_LEFT_INFO_4                   (volatile uint32_t *)0xfe32c528
// bit [31:16]  - interp_filter
// bit [15:8]   - Reserved
// bit [7:0]    - vp9_seg_pred_top
#define P_HEVC_CABAC_TOP_INFO_5                    (volatile uint32_t *)0xfe32c52c
// bit [31:16]  - interp_filter
// bit [15:8]   - Reserved
// bit [7:0]    - vp9_seg_pred_left
#define P_HEVC_CABAC_LEFT_INFO_5                   (volatile uint32_t *)0xfe32c530
// bit[31]    - operation start (read : busy)
// bit[30:28] - operation_endian
// bit[27:24] - Reserved
// bit[23:22] - operation_mem 00:prob_mem, 01:count_mem
// bit[21:20] - operation_cmd 0:clear, 1-store, 2-load
// bit[19:10] - operation_end_addr
// bit[9:0] - operation_start_addr
#define P_VP9_MEM_OPERATION                        (volatile uint32_t *)0xfe32c534
// For VVC ------
// bit[31:16] - tree_info_intra_Y // Intra-Frame minQT/maxBTD/maxBTSize/maxTTSize
// bit[31:16] - tree_info_inter   // Inter-Frame minQT/maxBTD/maxBTSize/maxTTSize
// bit[15:0]  - tree_info_intra_C // minQT/maxBTD/maxBTSize/maxTTSize
// For VP9 ------
// bit[27]    - vp9_seg_pred_info_3
// bit[26]    - vp9_seg_abs_delta
// bit[25]    - vp9_seg_temporal
// bit[24]    - vp9_seg_update_map
// bit[23]    - vp9_seg_enable
// bit[22]    - vp9_lossless_use_set
// bit[21]    - vp9_lossless_set_data
// bit[20]    - vp9_swap_Y_MODE_with_INFO45
// bit[19]    - vp9_allow_hp
// bit[18:16] - vp9_interp_filter
// bit[15]    - vp9_intra_frame
// bit[14:12] - vp9_tx_mode
// bit[11:10] - vp9_ref_mode // SINGLE_REFERENCE(0), COMPOUND_REFERENCE(1), REFERENCE_MODE_SELECT(2)
// bit[9]   - VPX_BITS_10
// bit[8] - ref_frame_bias[2]
// bit[7] - ref_frame_bias[1]
// bit[6] - ref_frame_bias[0]
// [5:4] - comp_var_ref[1]
// [3:2] - comp_var_ref[0]
// [1:0] - comp_fixed_ref
// For AVS3 ------  avs3_split_param
// bit[31]    -- secondary_transform_enable_flag
// bit[30]    -- affine_enable_flag
// bit[29]    -- smvd_enable_flag
// bit[28]    -- ipcm_enable_flag
// bit[27]    -- amvr_enable_flag
// bit[26]    -- umve_enable_flag
// bit[25]    -- emvr_enable_flag
// bit[24]    -- ipf_enable_flag
// bit[23]    -- tscpm_enable_flag
// bit[22]    -- dt_intra_enable_flag
// bit[21:20] -- log2_max_dt_size_minus4
// bit[19:17] -- log2_lcu_size_minus2
// bit[16:15] -- log2_min_cu_size_minus2
// bit[14:13] -- log2_max_part_ratio_minus2
// bit[12:10] -- max_split_times_minus6
// bit[9]     -- VPX_BITS_10
// bit[8]     -- Reserved
// bit[7:5]   -- log2_min_qt_size_minus2
// bit[4:2]   -- log2_max_bt_size_minus2
// bit[1:0]   -- log2_max_eqt_size_minus3
#define P_VP9_DECODING_INFO                        (volatile uint32_t *)0xfe32c53c
// [7]   -- segment_id_map_from_shadow
// [6]   -- segment_id_map_to_shadow
// [5]   -- shadow_rw_addr_update
// [4:0] -- shadiw_rw_addr
#define P_VP9_SHADOW_CTRL                          (volatile uint32_t *)0xfe32c540
// [31:0] -- shadow_rw_data
#define P_VP9_SHADOW_DATA                          (volatile uint32_t *)0xfe32c544
// bit[31:22]  - Reserved
// bit[21]    - parser_mpred_if_busy_when_pu_mpred_busy
// bit[20:13]  - Reserved
// bit[12]  - vvc_enable
// bit[11]  - avs3_p1
// bit[10]  - avs2_init_left_quant
// bit[9]   - avs2_init_delta_quant
// bit[8]   - avs2_trans_size_when_no_present
// bit[7:3] - avs2_status
// bit[2] - change_avs2_status
// bit[1] - avs2_decode_start(W)/avs2_decode_busy
// bit[0] - avs2_enable
#define P_AVS2_CONTROL                             (volatile uint32_t *)0xfe32c548
// CASE VVC
// bit[31] - vvc_force_zero_hold_enable
// bit[30:29] - Reserved
// bit[28:26] - ChromaQpOffsetListLen
// bit[25] - UseChromaQpAdj
// bit[24] - DepQuantEnabledFlag
// bit[23] - UseDQP
// bit[22] - PLTMode
// bit[21] - IBCFlag
// bit[20:18] - MaxNumIBCMergeCand (IBC_MRG_MAX_NUM_CANDS-sps_six_minus_max_num_ibc_merge_cand)
// bit[17] - SignDataHidingEnabledFlag
// bit[16] - TSResidualCodingDisabledFlag
// bit[15:14] - ccAlfFilterCount_Cb
// bit[13:12] - ccAlfFilterCount_Cr
// bit[11] - CcAlfCbEnabledFlag
// bit[10] - CcAlfCrEnabledFlag
// bit[9] - CCALFEnabledFlag
// bit[8:6] - numAlternativesChroma_m1
// bit[5] - slice_alf_enable_Y
// bit[4] - slice_alf_enable_U
// bit[3] - slice_alf_enable_V
// bit[2:0] - NumAlfApsIdsLuma(sh_num_alf_aps_ids_luma)
// CASE AVS2
// bit[31] - reserved
// bit[30:28] - avs2_num_of_references
// bit[27] - background_pred_flag
// bit[11] multi_hypothesis_skip_enable (b_mhpskip_enabled)
// bit[10]  dual_hypothesis_prediction_enable (dhp_enabled)
// bit[9] - weighted_skip_enable (wsm_enabled)
// bit[8] - asynmetric_motion_partitions_enable (Asymmetric Motion Partitions - inter_amp_enable)
// bit[7] - useNSIP (nonsquare_intra_prediction_enable)
// bit[6] - secT_enabled (secondary_transform_enable_flag)
// bit[5] - slice_alf_enable_Y
// bit[4] - slice_alf_enable_U
// bit[3] - slice_alf_enable_V
// bit[2] - slice_sao_enable_Y
// bit[1] - slice_sao_enable_U
// bit[0] - slice_sao_enable_V
// CASE AVS3 Phase 1
// bit[31:28] - num_of_hmvp_cand
// bit[27]    - affine_subblock_size_idx
// bit[26]    - position_based_transform_enable_flag
#define P_AVS2_DEC_INFO                            (volatile uint32_t *)0xfe32c54c
// bit[12:10] av1_CUSize
// bit[9:5]   av1_CU_Y
// bit[4:0]   av1_CU_X
#define P_AV1_PARSER_RESULT_0                      (volatile uint32_t *)0xfe32c550
#define P_AV1_PARSER_RESULT_1                      (volatile uint32_t *)0xfe32c554
#define P_AV1_PARSER_RESULT_2                      (volatile uint32_t *)0xfe32c558
#define P_AV1_PARSER_RESULT_3                      (volatile uint32_t *)0xfe32c55c
// bit[29]    - reference_mode
// bit[28]    - segmentation_temporal_update
// bit[27]    - allow_high_precision_mv
// bit[26]    - cur_frame_force_integer_mv
// bit[25]    - allow_warped_motion
// bit[24]    - switchable_motion_mode
// bit[23]    - enable_interintra_compound
// bit[22]    - reserved
// bit[21]    - segmentation_update_map
// bit[20]    - reduced_tx_set
// bit[19:18] - cdef_bits
// bit[17:16] - tx_mode
// bit[15] - enable_filter_intra
// bit[14] - allow_screen_content_tools
// bit[13] - subsampling_x
// bit[12] - subsampling_x
// bit[11] - color_range
// bit[10] - VPX_BITS_10
// bit[9] - mono_chrome
// bit[8] - allow_intrabc
// bit[7:5] - Reserved
// bit[4] - reset_av1_seg_qindex
// bit[3] - segmentation_enabled
// bit[2] - intra_only
// bit[1] - disable_cdf_update
// bit[0] - use_128x128_superblock
#define P_AV1_DEC_INFO                             (volatile uint32_t *)0xfe32c560
// For VVC
// From slice_ph_decoding_flags_2
// bit[31]     - DisFracMMVD (ph_fpel_mmvd_enabled_flag)
// bit[30]     - MvdL1ZeroFlag (ph_mvd_l1_zero_flag)
// bit[29]     - BdofDisabledFlag (ph_bdof_disabled_flag)
// bit[28]     - DmvrDisabledFlag (ph_dmvr_disabled_flag)
// bit[27]     - ProfDisabledFlag (ph_prof_disabled_flag)
// From sps_decoding_flags_2
// bit[15]     - RPL1CopyFromRPL0Flag (sps_rpl1_same_as_rpl0_flag)
// bit[14]     - WrapAroundEnabledFlag (sps_ref_wraparound_enabled_flag)
// bit[13]     - SPSTemporalMVPEnabledFlag (sps_temporal_mvp_enabled_flag)
// bit[12]     - SbTMVPEnabledFlag (sps_sbtmvp_enabled_flag)
// bit[11]     - AMVREnabledFlag (sps_amvr_enabled_flag)
// bit[10]     - BDOFEnabledFlag (sps_bdof_enabled_flag)
// bit[9]      - BdofControlPresentInPhFlag (sps_bdof_control_present_in_ph_flag)
// bit[8]      - UseSMVD (sps_smvd_enabled_flag)
// bit[7]      - UseDMVR (sps_dmvr_enabled_flag)
// bit[6]      - DmvrControlPresentInPhFlag (sps_dmvr_control_present_in_ph_flag)
// bit[5]      - UseMMVD (sps_mmvd_enabled_flag)
// bit[4]      - FpelMmvdEnabledFlag (sps_mmvd_fullpel_only_flag)
// bit[3:1]    - MaxNumMergeCand (MRG_MAX_NUM_CANDS-sps_six_minus_max_num_merge_cand)
// bit[0]      - Reserved
// For AV1
// bit[31]    - enable_jnt_comp
// bit[30]    - enable_masked_compound
// bit[29]    - enable_dual_filter
// bit[28:26] - frame_interp_filter
// bit[25:13] - mi_rows/2
// bit[12:0]  - mi_cols/2
#define P_AV1_DEC_INFO_2                           (volatile uint32_t *)0xfe32c564
// For VVC
// bit[15]     - UseSBT (sps_sbt_enabled_flag)
// bit[14]     - UseAffine (sps_affine_enabled_flag)
// bit[13:11]  - MaxNumAffineMergeCand (5-sps_five_minus_max_num_subblock_merge_cand)
// bit[10]     - UseAffineType (sps_affine_type_flag)
// bit[9]      - AffineAmvrEnabledFlag (sps_affine_amvr_enabled_flag)
// bit[8]      - UsePROF (sps_affine_prof_enabled_flag)
// bit[7]      - ProfControlPresentInPhFlag (sps_prof_control_present_in_ph_flag)
// bit[6]      - UseBcw (sps_bcw_enabled_flag)
// bit[5]      - UseCiip (sps_ciip_enabled_flag)
// bit[4]      - UseGeo (sps_gpm_enabled_flag)
// bit[3:1]    - MaxNumGeoCand (sps_max_num_merge_cand_minus_max_num_gpm_cand)
// bit[0]      - Reserved
// For AV1
// bit[31:10] reserved
// bit [9] skip_mode_flag
// bit [8] skip_mode_allowed // not used
// bit [7:4] ref_frame_idx_1
// bit [3:0] ref_frame_idx_0
#define P_AV1_DEC_INFO_3                           (volatile uint32_t *)0xfe32c568
// bit[31]    - reset_delta_lf_01
// bit[30]    - reset_xqd
// bit[23]    - reserved
// bit[22:16] - y_dc_delta_q
// bit[15]    - lossless_use_current_qindex_use
// bit[14]    - delta_lf_multi
// bit[13:12] - delta_lf_res
// bit[11]    - delta_if_present
// bit[10:9]  - delta_q_res
// bit[8]     - delta_q_present
// bit[7:0]   - base_qindex
#define P_AV1_QUANT_Y                              (volatile uint32_t *)0xfe32c56c
// bit[31]    - reset_delta_lf_23
// bit[30:24] - v_ac_delta_q
// bit[23]    - reserved
// bit[22:16] - u_ac_delta_q
// bit[15]    - reserved
// bit[14:8]  - v_dc_delta_q
// bit[7]    - reserved
// bit[6:0]   - u_dc_delta_q
#define P_AV1_QUANT_C                              (volatile uint32_t *)0xfe32c570
// bit[31]    - coded_lossless
// bit[31]    - ref_coded_lossless
// bit[29:17]  - Reserved
// bit[16:12]  - seg_dma_last_cycle
// bit[11:8]  - daala_top_dma_last_cycle
// bit[7:0]   - current_qindex
#define P_AV1_DEC_PROCESS                          (volatile uint32_t *)0xfe32c574
// bit[31]    - disable_top_r_wrrsp_wait
// bit[30]    - enable_reg_map_r_wrrsp_wait
// bit[29:16]    - reserved
// bit[15]    - swap_seg_idx
// bit[14]    - mem_busy
// bit[13]    - start_top_init (top_init_busy when read)
// bit[12]    - seg_cache_store_load_busy (Read Only)
// bit[11]    - update_mem_wr_busy (Read Only)
// bit[10]    - no_top_swap
// bit[9]    - set_seg_idx (top_swap_pending pending when read)
// bit[8]    - clr_seg_idx (seg_idx when read)
// bit[7]    - start_seg_map_read (seg_read busy when read)
// bit[6]    - start_seg_map_write (seg_write busy when read)
// bit[5]    - start_top_read (top_read busy when read)
// bit[4]    - start_top_write (top_write busy when read)
// bit[3]    - enable_top_swap (top_swap_hold when read)
// bit[2]    - start_seg_map_init(seg_init_busy when read)
// bit[1]    - initial_left
// bit[0]    - initial_top
#define P_AV1_TOP_LEFT_CTL                         (volatile uint32_t *)0xfe32c578
#define P_AV1_DMA_ADDR                             (volatile uint32_t *)0xfe32c57c
// bit[31:24] - wrrsp_count
// bit[23] - Reserved
// bit[22:16] - dma_d_count (Read) -- dma_count(Write)
// bit[15] - Reserved
// bit[14:8]  - dma_a_count (Read) -- context_offset(write)
// bit [7:6] - Reserved
// bit [5:3] - dma_id // gmc dma also share this id
// bit [2] - wrrsp_count_update
// bit [1] - 1 - STORE to Memory, 0 - LOAD from Memory
// bit [0] - dma  active
#define P_AV1_DMA_CTRL                             (volatile uint32_t *)0xfe32c580
// bit[31:8] hevc_axi_status (Read Only)
// bit[31:24] - lcu_top_size (in 32Bytes Unit)
// bit[23:16] - lcu_seg_map_size (in 32Bytes Unit)
// bit[15]    - reserved
// bit[14:12] - top_dma_id
// bit[11]    - reserved
// bit[10:8]  - seg_dma_id
// bit[7] - disable_aml_axi_clk_gating
// bit[6] - output_axi_status
// bit[5] - aw_urgent_out_en
// bit[4] - ar_urgent_out_en
// bit[3:0] - arb_switch_cnt
#define P_AV1_DMA_SETTING                          (volatile uint32_t *)0xfe32c584
// av1_ref_frame_idx
// 27:24 - 6
// 22:20 - 5
// 18:16 - 4
// 14:12 - 3
// 10:8 - 2
//  6:4 - 1
//  2:0 - 0
#define P_AV1_REF_FRAME_IDX                        (volatile uint32_t *)0xfe32c588
#define P_AV1_TOP_W_ADDR                           (volatile uint32_t *)0xfe32c58c
#define P_AV1_TOP_R_ADDR                           (volatile uint32_t *)0xfe32c590
#define P_AV1_SEG_W_ADDR                           (volatile uint32_t *)0xfe32c594
#define P_AV1_SEG_R_ADDR                           (volatile uint32_t *)0xfe32c598
// [31:16] -- av1_seg_r_addr_offset
// [15:0]  -- av1_seg_w_addr_offset
#define P_AV1_SEG_ADDR_OFFSET                      (volatile uint32_t *)0xfe32c59c
#define P_RESTORATION_PARAMS                       (volatile uint32_t *)0xfe32c5a0
// 31:24 - Row 1
// 23:16 - Col 1
// 15:8 - Row 0
//  7:0 - Col 0
#define P_RESTORATION_CORNER_Y                     (volatile uint32_t *)0xfe32c5a4
// 31:24 - Row 1
// 23:16 - Col 1
// 15:8 - Row 0
//  7:0 - Col 0
#define P_RESTORATION_CORNER_C                     (volatile uint32_t *)0xfe32c5a8
// [7:0] av1_scale_enable
#define P_PARSER_REF_SCALE_ENBL                    (volatile uint32_t *)0xfe32c5ac
// 31    - prev_segmentation_enabled
// 30    - prev_gmc_intra
// 30:29 - Reserved
// 28:24 - prev_buf_index
// 20:16 - cur_buf_index
//   8 - skip_mode_allowed
// 7:4 - ref_frame_idx_1
// 3:0 - ref_frame_idx_0
#define P_AV1_SKIP_MODE_INFO                       (volatile uint32_t *)0xfe32c5b0
#define P_AV1_GMC_PARAM_BUFF_ADDR                  (volatile uint32_t *)0xfe32c5b4
// 31:16 - chroma
// 15: 0 - luma
#define P_AV1_UPSCALE_X0_QN                        (volatile uint32_t *)0xfe32c5b8
#define P_AV1_UPSCALE_STEP_QN                      (volatile uint32_t *)0xfe32c5bc
// write --
// 31:16 - tile_end
//     3 -- disable_no_upscale_bypass
//     2 -- status_output(For debug)
//     1 -- keep_to_ux_8
//     0 -- start
// read --
// 31:16 - previous_ux_tiler
// 15:1  - current_ux_tiler[15:1]
//    0  - busy
#define P_AV1_UPSCALE_INOUT                        (volatile uint32_t *)0xfe32c5c0
// bit[31:24] - av1_seg_q_en      -- Read Only
// bit[23:16] - av1_seg_q_eq_0    -- Read Only
// bit[15:8]  - av1_ref_seg_q_en      -- R/W
// bit[7:0]   - av1_ref_seg_q_eq_0    -- R/W
#define P_AV1_REF_SEG_INFO                         (volatile uint32_t *)0xfe32c5c4
// bit[31:16] slice_lcu_count
// bit[15:0]  slice_lcu_width
#define P_HEVC_SLICE_DATA_CTL                      (volatile uint32_t *)0xfe32c5c8
// bit[31:16] vvc_wp_enable_l0_chroma
// bit[15:0]  vvc_wp_enable_l0_luma
#define P_VVC_WP_ENABLE_L0                         (volatile uint32_t *)0xfe32c5cc
// bit[31:16] vvc_wp_enable_l1_chroma
// bit[15:0]  vvc_wp_enable_l1_luma
#define P_VVC_WP_ENABLE_L1                         (volatile uint32_t *)0xfe32c5d0
// bit[31:0] - HEVC PARSER SHIFT CRC calculate length, 8 bytes align
#define P_HEVC_SHIFT_CRC_CTL                       (volatile uint32_t *)0xfe32c5d4
// 31:0 hevc_shift_crc
#define P_HEVC_SHIFT_CRC                           (volatile uint32_t *)0xfe32c5d8
#define P_VP9_ACP_CTRL                             (volatile uint32_t *)0xfe32c5dc
// bit[31:7] reserved
// bit[6]    acp status byte: 0-idel  1-done
// bit[5]    select prob_ram ofset
// bit[4:3]  pre_fc: prev prob table index
// bit[2]    prev_kf:whether last frame is key frame
// bit[1]    cur_kf: whether cur is key or intra frame
// bit[0]    acp start crtl bit:set 1 to start process
#define P_PARSER_TOP_CLK_GATING_CTL                (volatile uint32_t *)0xfe32c5e0
// bit[31:24] top_clk_gating_interface_delay_count
// bit[23:16] top_clk_gating_decode_delay_count
// bit[15:8]  top_clk_gating_stream_delay_count
// bit[7:4]   top_clk_gating_cbus_delay_count
// bit[3]     top_clk_gating_interface_no_delay
// bit[2]     top_clk_gating_decode_no_delay
// bit[1]     top_clk_gating_stream_no_delay
// bit[0]     top_clk_gating_cbus_no_delay
//
// Closing file:  hevc_parser_regs.h
//
//------------------------------------------------------------------------------
// HEVC_MPRED module level register offset
//------------------------------------------------------------------------------
//
// Reading file:  hevc_mpred_regs.h
//
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_MPRED_CBUS_BASE = 0x02
// -----------------------------------------------
#define P_HEVC_MPRED_VERSION                       (volatile uint32_t *)0xfe32c800
//  [31:0]  reversion               default:32'h00010001
#define P_HEVC_MPRED_CTRL0                         (volatile uint32_t *)0xfe32c804
// [1:0]    slice_type[1:0]
// [2]      new_pic
// [3]      new_tile
// [4]      SliceSegment
// [5]      TMVPFlag_en
// [6]      LDCFlag
// [7]      ColFromL0Flag
// [8]      reserved
// [9]      above_en
// [10]     mv_wr_en  :collocated MV write enable: 0=no-write,1=write;default:1'b1
// [11]     mv_rd_en
// [12]     col_isIntra
// [13]     mv_linear
// [14]     LongTerm_Curr
// [15]     LongTerm_Col
// [19:16]  lcu_size_log2[3:0]
// [23:20]  cu_size_log2[3:0]
// [26:24]  plevel[2:0]
// [31:27]  mpred_ctrl0
#define P_HEVC_MPRED_CTRL1                         (volatile uint32_t *)0xfe32c808
//  [3:0]   MERGE_MAX_NUM_CANDS[3:0]
//  [7:4]   AMVP_MAX_NUM_CANDS[3:0]
//  [23:8]  reserved
//  [24]    clk_forceon
//  [31:25] reserved
#define P_HEVC_MPRED_INT_EN                        (volatile uint32_t *)0xfe32c80c
//  [0]     mpred_int_enable
//  [1]     mpred_int_amrisc_level
//  [2]     mpred_int_cpu_level
//  [3]     slice_done_int_amrisc_enable
//  [4]     slice_done_int_cpu_enable
//  [15]    disable_mpred_int_clock_gating
#define P_HEVC_MPRED_INT_STATUS                    (volatile uint32_t *)0xfe32c810
//  [0]     slice_done IRQ
//  [31]    write "1"=slice start(self clear,read always return "0")
#define P_HEVC_MPRED_PIC_SIZE                      (volatile uint32_t *)0xfe32c814
//  [15:0]  pic_width[15:0]
//  [31:16] pic_height[15:0]
#define P_HEVC_MPRED_PIC_SIZE_LCU                  (volatile uint32_t *)0xfe32c818
//  [15:0]  lcu_x_num_1[15:0]   (=lcu_x_total-1)
//  [31:16] lcu_y_num_1[15:0]   (=lcu_y_total-1)
#define P_HEVC_MPRED_TILE_START                    (volatile uint32_t *)0xfe32c81c
//  [15:0]  tile_start_lcu_x[15:0]
//  [31:16] tile_start_lcu_y[15:0]
#define P_HEVC_MPRED_TILE_SIZE_LCU                 (volatile uint32_t *)0xfe32c820
//  [15:0]  tile_width_lcu[15:0]
//  [31:16] tile_height_lcu[15:0]
#define P_HEVC_MPRED_REF_NUM                       (volatile uint32_t *)0xfe32c824
//  if vvc
//  [4:0]   refNum_L0[4:0]
//  [9:5]   refNum_L1[4:0]
//  [10]    use_affine
//  else
//  [4:0]   refNum_L0[4:0]
//  [12:8]  refNum_L1[4:0]
//  endif
//  [15:13] h265_merge_fix
//  [31:16] clk gate force on
#define P_HEVC_MPRED_LT_REF                        (volatile uint32_t *)0xfe32c828
//  [00]    LongTerm_L0_Ref00
//  [01]    LongTerm_L0_Ref01
//  ......
//  [15]    LongTerm_L0_Ref15
//  [16]    LongTerm_L1_Ref00
//  [17]    LongTerm_L1_Ref01
//  ......
//  [31]    LongTerm_L1_Ref15
#define P_HEVC_MPRED_LT_COLREF                     (volatile uint32_t *)0xfe32c82c
//  [00]    LongTerm_Col_L0_Ref00
//  [01]    LongTerm_Col_L0_Ref01
//  ......
//  [15]    LongTerm_Col_L0_Ref15
//  [16]    LongTerm_Col_L1_Ref00
//  [17]    LongTerm_Col_L1_Ref01
//  ......
//  [31]    LongTerm_Col_L1_Ref15
#define P_HEVC_MPRED_REF_EN_L0                     (volatile uint32_t *)0xfe32c830
//  [00]    L0_ref00_en
//  [01]    L0_ref01_en
//  ......
//  [15]    L0_ref15_en
#define P_HEVC_MPRED_REF_EN_L1                     (volatile uint32_t *)0xfe32c834
//  [00]    L1_ref00_en
//  [01]    L1_ref01_en
//  ......
//  [15]    L1_ref15_en
#define P_HEVC_MPRED_COLREF_EN_L0                  (volatile uint32_t *)0xfe32c838
//  [00]    COL_L0_ref00_en
//  [01]    COL_L0_ref01_en
//  ......
//  [15]    COL_L0_ref15_en
#define P_HEVC_MPRED_COLREF_EN_L1                  (volatile uint32_t *)0xfe32c83c
//  [00]    COL_L1_ref00_en
//  [01]    COL_L1_ref01_en
//  ......
//  [15]    COL_L1_ref15_en
#define P_HEVC_MPRED_AXI_WCTRL                     (volatile uint32_t *)0xfe32c840
//  [11:8]  aw_id_set[3:0]
#define P_HEVC_MPRED_AXI_RCTRL                     (volatile uint32_t *)0xfe32c844
//  [11:8]  ar_id_set[3:0]
#define P_HEVC_MPRED_ABV_START_ADDR                (volatile uint32_t *)0xfe32c848
#define P_HEVC_MPRED_MV_WR_START_ADDR              (volatile uint32_t *)0xfe32c84c
#define P_HEVC_MPRED_MV_RD_START_ADDR              (volatile uint32_t *)0xfe32c850
#define P_HEVC_MPRED_MV_WPTR                       (volatile uint32_t *)0xfe32c854
#define P_HEVC_MPRED_MV_RPTR                       (volatile uint32_t *)0xfe32c858
#define P_HEVC_MPRED_MV_WR_ROW_JUMP                (volatile uint32_t *)0xfe32c85c
#define P_HEVC_MPRED_MV_RD_ROW_JUMP                (volatile uint32_t *)0xfe32c860
#define P_HEVC_MPRED_CURR_LCU                      (volatile uint32_t *)0xfe32c864
#define P_HEVC_MPRED_ABV_WPTR                      (volatile uint32_t *)0xfe32c868
#define P_HEVC_MPRED_ABV_RPTR                      (volatile uint32_t *)0xfe32c86c
#define P_HEVC_MPRED_CTRL2                         (volatile uint32_t *)0xfe32c870
#define P_HEVC_MPRED_CTRL3                         (volatile uint32_t *)0xfe32c874
#define P_HEVC_MPRED_MV_WLCUY                      (volatile uint32_t *)0xfe32c878
#define P_HEVC_MPRED_MV_RLCUY                      (volatile uint32_t *)0xfe32c87c
#define P_HEVC_MPRED_L0_REF00_POC                  (volatile uint32_t *)0xfe32c880
#define P_HEVC_MPRED_L0_REF01_POC                  (volatile uint32_t *)0xfe32c884
#define P_HEVC_MPRED_L0_REF02_POC                  (volatile uint32_t *)0xfe32c888
#define P_HEVC_MPRED_L0_REF03_POC                  (volatile uint32_t *)0xfe32c88c
#define P_HEVC_MPRED_L0_REF04_POC                  (volatile uint32_t *)0xfe32c890
#define P_HEVC_MPRED_L0_REF05_POC                  (volatile uint32_t *)0xfe32c894
#define P_HEVC_MPRED_L0_REF06_POC                  (volatile uint32_t *)0xfe32c898
#define P_HEVC_MPRED_L0_REF07_POC                  (volatile uint32_t *)0xfe32c89c
#define P_HEVC_MPRED_L0_REF08_POC                  (volatile uint32_t *)0xfe32c8a0
#define P_HEVC_MPRED_L0_REF09_POC                  (volatile uint32_t *)0xfe32c8a4
#define P_HEVC_MPRED_L0_REF10_POC                  (volatile uint32_t *)0xfe32c8a8
#define P_HEVC_MPRED_L0_REF11_POC                  (volatile uint32_t *)0xfe32c8ac
#define P_HEVC_MPRED_L0_REF12_POC                  (volatile uint32_t *)0xfe32c8b0
#define P_HEVC_MPRED_L0_REF13_POC                  (volatile uint32_t *)0xfe32c8b4
#define P_HEVC_MPRED_L0_REF14_POC                  (volatile uint32_t *)0xfe32c8b8
#define P_HEVC_MPRED_L0_REF15_POC                  (volatile uint32_t *)0xfe32c8bc
#define P_HEVC_MPRED_L1_REF00_POC                  (volatile uint32_t *)0xfe32c8c0
#define P_HEVC_MPRED_L1_REF01_POC                  (volatile uint32_t *)0xfe32c8c4
#define P_HEVC_MPRED_L1_REF02_POC                  (volatile uint32_t *)0xfe32c8c8
#define P_HEVC_MPRED_L1_REF03_POC                  (volatile uint32_t *)0xfe32c8cc
#define P_HEVC_MPRED_L1_REF04_POC                  (volatile uint32_t *)0xfe32c8d0
#define P_HEVC_MPRED_L1_REF05_POC                  (volatile uint32_t *)0xfe32c8d4
#define P_HEVC_MPRED_L1_REF06_POC                  (volatile uint32_t *)0xfe32c8d8
#define P_HEVC_MPRED_L1_REF07_POC                  (volatile uint32_t *)0xfe32c8dc
#define P_HEVC_MPRED_L1_REF08_POC                  (volatile uint32_t *)0xfe32c8e0
#define P_HEVC_MPRED_L1_REF09_POC                  (volatile uint32_t *)0xfe32c8e4
#define P_HEVC_MPRED_L1_REF10_POC                  (volatile uint32_t *)0xfe32c8e8
#define P_HEVC_MPRED_L1_REF11_POC                  (volatile uint32_t *)0xfe32c8ec
#define P_HEVC_MPRED_L1_REF12_POC                  (volatile uint32_t *)0xfe32c8f0
#define P_HEVC_MPRED_L1_REF13_POC                  (volatile uint32_t *)0xfe32c8f4
#define P_HEVC_MPRED_L1_REF14_POC                  (volatile uint32_t *)0xfe32c8f8
#define P_HEVC_MPRED_L1_REF15_POC                  (volatile uint32_t *)0xfe32c8fc
#define P_HEVC_MPRED_PIC_SIZE_EXT                  (volatile uint32_t *)0xfe32c900
#define P_HEVC_MPRED_DBG_MODE0                     (volatile uint32_t *)0xfe32c904
#define P_HEVC_MPRED_DBG_MODE1                     (volatile uint32_t *)0xfe32c908
#define P_HEVC_MPRED_DBG2_MODE                     (volatile uint32_t *)0xfe32c90c
#define P_HEVC_MPRED_IMP_CMD0                      (volatile uint32_t *)0xfe32c910
#define P_HEVC_MPRED_IMP_CMD1                      (volatile uint32_t *)0xfe32c914
#define P_HEVC_MPRED_IMP_CMD2                      (volatile uint32_t *)0xfe32c918
#define P_HEVC_MPRED_IMP_CMD3                      (volatile uint32_t *)0xfe32c91c
#define P_HEVC_MPRED_DBG2_DATA_0                   (volatile uint32_t *)0xfe32c920
#define P_HEVC_MPRED_DBG2_DATA_1                   (volatile uint32_t *)0xfe32c924
#define P_HEVC_MPRED_DBG2_DATA_2                   (volatile uint32_t *)0xfe32c928
#define P_HEVC_MPRED_DBG2_DATA_3                   (volatile uint32_t *)0xfe32c92c
#define P_HEVC_MPRED_CTRL4                         (volatile uint32_t *)0xfe32c930
//  [0]     above intermedia data compress: 0=no-compress,1=compress;default:1'b0
//  [1]     collocated MV intermedia data compress: 0=no-compress,1=compress;default:1'b0
//  [2]     vp9_mode,0=hevc_mode,1=vp9_mode,default=0
//  [6]     vp9_use_prev_frame_mvs  0=not allow vp9_use_prev_frame_mvs,1=allow vp9_use_prev_frame_mvs,default=0
//  [8]     vp9_not_allow_hp    0=vp9_allow_hp,1=vp9_not_allow_hp,default=0
//  [9]     vp9_is_compound     0=vp9_is_not_compound,1=vp9_is_compound,default=0
//  [12]    vp9_ref_sign_bias[1]        ref1(last) ref_sign_bias, default=0
//  [13]    vp9_ref_sign_bias[2]        ref2(golden) ref_sign_bias,default=0
//  [14]    vp9_ref_sign_bias[3]        ref3(altref) ref_sign_bias,default=0
//  [24]    avs2 mode
//  [25]    av1 mode
//  [26]    avs3 mode
//  [27]    vvc mode
#define P_HEVC_MPRED_CTRL5                         (volatile uint32_t *)0xfe32c934
//  [15:0]  idle thread
//  [23:16] min_cu_width
//  [31:24] min_cu_height
#define P_HEVC_MPRED_POC24_CTRL0                   (volatile uint32_t *)0xfe32c938
#define P_HEVC_MPRED_POC24_CTRL1                   (volatile uint32_t *)0xfe32c93c
#define P_HEVC_MPRED_DBG_DATA_0                    (volatile uint32_t *)0xfe32c940
#define P_HEVC_MPRED_DBG_DATA_1                    (volatile uint32_t *)0xfe32c944
#define P_HEVC_MPRED_DBG_DATA_2                    (volatile uint32_t *)0xfe32c948
#define P_HEVC_MPRED_DBG_DATA_3                    (volatile uint32_t *)0xfe32c94c
#define P_HEVC_MPRED_DBG_DATA_4                    (volatile uint32_t *)0xfe32c950
#define P_HEVC_MPRED_DBG_DATA_5                    (volatile uint32_t *)0xfe32c954
#define P_HEVC_MPRED_DBG_DATA_6                    (volatile uint32_t *)0xfe32c958
#define P_HEVC_MPRED_DBG_DATA_7                    (volatile uint32_t *)0xfe32c95c
#define P_HEVC_MPRED_CTRL6                         (volatile uint32_t *)0xfe32c960
#define P_HEVC_MPRED_CTRL7                         (volatile uint32_t *)0xfe32c964
#define P_HEVC_MPRED_CTRL8                         (volatile uint32_t *)0xfe32c968
#define P_HEVC_MPRED_CTRL9                         (volatile uint32_t *)0xfe32c96c
// [24]  sub_treat_as_pic
#define P_HEVC_MPRED_CTRL10                        (volatile uint32_t *)0xfe32c978
#define P_HEVC_MPRED_CTRL11                        (volatile uint32_t *)0xfe32c97c
// [5:4] abv_prefix
// [3:2] col_prefix
// [1:0] cm_ptr_prefix
#define P_HEVC_MPRED_MCR_CNT_CTL                   (volatile uint32_t *)0xfe32c970
// [3:0] mcr_cnt_rd_ptr
// [7:4] mcr_cnt_extend_pixel_w -- default : 7
// [11:8] mcr_cnt_extend_pixel_h -- default : 7
// [14:12] - Reserved
// [15]  mcr_cnt_clear
#define P_HEVC_MPRED_MCR_CNT_DATA                  (volatile uint32_t *)0xfe32c974
// read only
#define P_HEVC_MPRED_CUR_POC                       (volatile uint32_t *)0xfe32c980
#define P_HEVC_MPRED_COL_POC                       (volatile uint32_t *)0xfe32c984
#define P_HEVC_MPRED_MV_RD_END_ADDR                (volatile uint32_t *)0xfe32c988
#define P_HEVC_MPRED_MV_RPTR_1                     (volatile uint32_t *)0xfe32c98c
#define P_HEVC_MPRED_MV_RPTR_2                     (volatile uint32_t *)0xfe32c990
#define P_HEVC_MPRED_MV_RLCUY_1                    (volatile uint32_t *)0xfe32c994
#define P_HEVC_MPRED_MV_RLCUY_2                    (volatile uint32_t *)0xfe32c998
#define P_HEVC_MPRED_SHADOWMODE_CNTL               (volatile uint32_t *)0xfe32c99c
// [0]      -- shadow_mode_enbl
// [3:1]    -- reserved
// [4]      -- shadow_armed
// [31:5]   -- reserved
//
// registers need shadowed
//   HEVC_MPRED_TILE_SIZE_LCU
//   HEVC_MPRED_TILE_START
#define P_HEVC_MPRED_SUBPIC_START                  (volatile uint32_t *)0xfe32c9a0
// [11: 0]  subpic x start in lcu
// [23:12]  subpic y start in lcu
// [25]     subpic treated as pic
#define P_HEVC_MPRED_SUBPIC_SIZE                   (volatile uint32_t *)0xfe32c9a4
// [11: 0]  subpic x size in lcu m1
// [23:12]  subpic y size in lcu m1
#define P_HEVC_MPRED_COL_REF_CANVAS_00_POC         (volatile uint32_t *)0xfe32c9a8
#define P_HEVC_MPRED_COL_REF_CANVAS_01_POC         (volatile uint32_t *)0xfe32c9ac
#define P_HEVC_MPRED_COL_REF_CANVAS_02_POC         (volatile uint32_t *)0xfe32c9b0
#define P_HEVC_MPRED_COL_REF_CANVAS_03_POC         (volatile uint32_t *)0xfe32c9b4
#define P_HEVC_MPRED_COL_REF_CANVAS_04_POC         (volatile uint32_t *)0xfe32c9b8
#define P_HEVC_MPRED_COL_REF_CANVAS_05_POC         (volatile uint32_t *)0xfe32c9bc
#define P_HEVC_MPRED_COL_REF_CANVAS_06_POC         (volatile uint32_t *)0xfe32c9c0
#define P_HEVC_MPRED_COL_REF_CANVAS_07_POC         (volatile uint32_t *)0xfe32c9c4
#define P_HEVC_MPRED_COL_REF_CANVAS_08_POC         (volatile uint32_t *)0xfe32c9c8
#define P_HEVC_MPRED_COL_REF_CANVAS_09_POC         (volatile uint32_t *)0xfe32c9cc
#define P_HEVC_MPRED_COL_REF_CANVAS_10_POC         (volatile uint32_t *)0xfe32c9d0
#define P_HEVC_MPRED_COL_REF_CANVAS_11_POC         (volatile uint32_t *)0xfe32c9d4
#define P_HEVC_MPRED_COL_REF_CANVAS_12_POC         (volatile uint32_t *)0xfe32c9d8
#define P_HEVC_MPRED_COL_REF_CANVAS_13_POC         (volatile uint32_t *)0xfe32c9dc
#define P_HEVC_MPRED_COL_REF_CANVAS_14_POC         (volatile uint32_t *)0xfe32c9e0
#define P_HEVC_MPRED_COL_REF_CANVAS_15_POC         (volatile uint32_t *)0xfe32c9e4
#define P_HEVC_MPRED_COL_REF_CANVAS_16_POC         (volatile uint32_t *)0xfe32c9e8
#define P_HEVC_MPRED_COL_REF_CANVAS_17_POC         (volatile uint32_t *)0xfe32c9ec
#define P_HEVC_MPRED_COL_REF_CANVAS_18_POC         (volatile uint32_t *)0xfe32c9f0
#define P_HEVC_MPRED_COL_REF_CANVAS_19_POC         (volatile uint32_t *)0xfe32c9f4
#define P_HEVC_MPRED_COL_REF_CANVAS_20_POC         (volatile uint32_t *)0xfe32c9f8
#define P_HEVC_MPRED_COL_REF_CANVAS_21_POC         (volatile uint32_t *)0xfe32c9fc
#define P_HEVC_MPRED_COL_REF_CANVAS_22_POC         (volatile uint32_t *)0xfe32ca00
#define P_HEVC_MPRED_COL_REF_CANVAS_23_POC         (volatile uint32_t *)0xfe32ca04
#define P_HEVC_MPRED_COL_REF_CANVAS_24_POC         (volatile uint32_t *)0xfe32ca08
#define P_HEVC_MPRED_COL_REF_CANVAS_25_POC         (volatile uint32_t *)0xfe32ca0c
#define P_HEVC_MPRED_COL_REF_CANVAS_26_POC         (volatile uint32_t *)0xfe32ca10
#define P_HEVC_MPRED_COL_REF_CANVAS_27_POC         (volatile uint32_t *)0xfe32ca14
#define P_HEVC_MPRED_COL_REF_CANVAS_28_POC         (volatile uint32_t *)0xfe32ca18
#define P_HEVC_MPRED_COL_REF_CANVAS_29_POC         (volatile uint32_t *)0xfe32ca1c
#define P_HEVC_MPRED_COL_REF_CANVAS_30_POC         (volatile uint32_t *)0xfe32ca20
#define P_HEVC_MPRED_COL_REF_CANVAS_LT             (volatile uint32_t *)0xfe32ca24
#define P_HEVC_MPRED_SLICE_START                   (volatile uint32_t *)0xfe32ca28
// [11: 0] slice start x in lcu
// [23:12] slice start y in lcu
// [31   ] slice in tile
#define P_HEVC_MPRED_SLICE_SIZE                    (volatile uint32_t *)0xfe32ca2c
// [11: 0] slice size x m1 in lcu
// [23:12] slice size y m1 in lcu
//
// Closing file:  hevc_mpred_regs.h
//
//------------------------------------------------------------------------------
// HEVC_IPP module level register offset
//------------------------------------------------------------------------------
//
// Reading file:  hevc_ipp_regs.h
//
// John A. Thodiyil
// Register map for intra/inter/pcm pixel-prediction/reconstruction + MCRCC + DECOMP
// August 14th, 2013
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_IPP_CBUS_BASE = 0x04
// -----------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_IPP_CBUS_BASE_DBE1 = 0x09
// -----------------------------------------------
#define P_HEVCD_IPP_TOP_CNTL                       (volatile uint32_t *)0xfe32d000
#define P_HEVCD_IPP_TOP_CNTL_DBE1                  (volatile uint32_t *)0xfe32e400
// [0]      -- software reset ipp and mpp
// [1]      -- enable ipp
// [2]      -- reserved
// [5:3]    -- codec[2:0] 000:hevc 010:vp9 100:avs2 110:av1 001:avs3 011:VVC
// [6]      -- intra_only_frame
// [7]      -- oslice_flush_enable -- needed for dual core for AV1 special Tile
// [30:8]   -- reserved
// [31]     -- mcr_intrabc_stall_disable
#define P_HEVCD_IPP_TOP_STATUS                     (volatile uint32_t *)0xfe32d004
#define P_HEVCD_IPP_TOP_STATUS_DBE1                (volatile uint32_t *)0xfe32e404
// [0]      -- ready for next tile/frame
// [1]      -- ready for next ctb
// [2]      -- ready for next slice
// [3]      -- reserved
// [4]      -- ipp_axi_rd_idle
// [5]      -- ipp_axi_wr_idle
// [6]      -- mpp_axi_rd_idle
// [31:7]   -- reserved
#define P_HEVCD_IPP_TOP_FRMCONFIG                  (volatile uint32_t *)0xfe32d008
#define P_HEVCD_IPP_TOP_FRMCONFIG_DBE1             (volatile uint32_t *)0xfe32e408
// [14:0]   -- frame width in luma pixels
// [30:16]  -- frame height in luma pixels
#define P_HEVCD_IPP_TOP_TILECONFIG1                (volatile uint32_t *)0xfe32d00c
#define P_HEVCD_IPP_TOP_TILECONFIG1_DBE1           (volatile uint32_t *)0xfe32e40c
// [11:0]   -- tile_width_in_lcu
// [27:16]  -- tile_height_in_lcu
#define P_HEVCD_IPP_TOP_TILECONFIG2                (volatile uint32_t *)0xfe32d010
#define P_HEVCD_IPP_TOP_TILECONFIG2_DBE1           (volatile uint32_t *)0xfe32e410
// [11:0]   -- tile_offset_x_in_lcu
// [27:16]  -- tile_offset_y_in_lcu
#define P_HEVCD_IPP_TOP_TILECONFIG3                (volatile uint32_t *)0xfe32d014
#define P_HEVCD_IPP_TOP_TILECONFIG3_DBE1           (volatile uint32_t *)0xfe32e414
// [0]      -- tiles_enabled_flag
// [31:1]   -- reserved
#define P_HEVCD_IPP_TOP_LCUCONFIG                  (volatile uint32_t *)0xfe32d018
#define P_HEVCD_IPP_TOP_LCUCONFIG_DBE1             (volatile uint32_t *)0xfe32e418
// [7:0]    -- lcu size in pixels
#define P_HEVCD_IPP_TOP_FRMCTL                     (volatile uint32_t *)0xfe32d01c
#define P_HEVCD_IPP_TOP_FRMCTL_DBE1                (volatile uint32_t *)0xfe32e41c
// [x]      -- start ipp tile decode
#define P_HEVCD_IPP_CONFIG                         (volatile uint32_t *)0xfe32d020
#define P_HEVCD_IPP_CONFIG_DBE1                    (volatile uint32_t *)0xfe32e420
// [0]      -- ipp_strong_intra_smoothing_enable_flag
// [1]      -- cfg_ipp_constrained_intra_pred_flag
// [31:2]   -- reserved
#define P_HEVCD_IPP_LINEBUFF_BASE                  (volatile uint32_t *)0xfe32d024
#define P_HEVCD_IPP_LINEBUFF_BASE_DBE1             (volatile uint32_t *)0xfe32e424
// [31:14]  -- intra-prediction line-buffer 16KByte axi address
//             [single-core:wr/rd multi-core:wr]
// [13:0]   -- reserved
#define P_HEVCD_IPP_INTR_MASK                      (volatile uint32_t *)0xfe32d028
#define P_HEVCD_IPP_INTR_MASK_DBE1                 (volatile uint32_t *)0xfe32e428
// [0]      -- tile/frame ready
// [1]      -- ctb ready
// [2]      -- slice ready
// [31:3]   -- reserved
#define P_HEVCD_IPP_AXIIF_CONFIG                   (volatile uint32_t *)0xfe32d02c
#define P_HEVCD_IPP_AXIIF_CONFIG_DBE1              (volatile uint32_t *)0xfe32e42c
// [3:0]    -- little_endian
// [5:4]    -- address_format 00:linear 01:32x32 10:64x32
// [7:6]    -- reserved
// [9:8]    -- Linear_LineAlignment 00:16byte 01:32byte 10:64byte
// [11:10]  -- reserved
// [12]     -- CbCr_byte_swap
// [31:13]  -- reserved
#define P_HEVCD_IPP_BITDEPTH_CONFIG                (volatile uint32_t *)0xfe32d030
#define P_HEVCD_IPP_BITDEPTH_CONFIG_DBE1           (volatile uint32_t *)0xfe32e430
// [1:0]    -- bit_depth_int_luma   00:8 01:9 10:10
// [3:2]    -- bit_depth_int_chroma 00:8 01:9 10:10
// [5:4]    -- bit_depth_ext_luma   00:8 01:9 10:10
// [7:6]    -- bit_depth_ext_chroma 00:8 01:9 10:10
// [31:8]   -- reserved
#define P_HEVCD_IPP_RTL_CONFIG                     (volatile uint32_t *)0xfe32d034
#define P_HEVCD_IPP_RTL_CONFIG_DBE1                (volatile uint32_t *)0xfe32e434
// [0]      -- HEVC_ENABLE
// [1]      -- VP9_ENABLE
// [2]      -- AVS2_ENABLE
// [3]      -- VDEC_MCR_IF_ENABLE
// [31:12]  -- reserved
#define P_HEVCD_IPP_SHADOWMODE_CNTL                (volatile uint32_t *)0xfe32d038
#define P_HEVCD_IPP_SHADOWMODE_CNTL_DBE1           (volatile uint32_t *)0xfe32e438
// [0]      -- shadow_mode_enbl
// [3:1]    -- reserved
// [4]      -- shadow_armed
// [30:5]   -- reserved
// [31]     -- shadow_mode 0:tile_mode 1:slice_mode
//
// registers need shadowed
//   HEVCD_IPP_TOP_TILECONFIG1
//   HEVCD_IPP_TOP_TILECONFIG2
//`define     HEVCD_IPP_AUTOSWIMP_CONFIG              8'h10
// [0]      -- autoswimp_enable
// [31:1]   -- reserved
//`define     HEVCD_IPP_AUTOSWIMP_STATUS              8'h11
// [0]      -- autoswimp_rdy
// [31:1]   -- reserved
//`define     HEVCD_IPP_AUTOSWIMP_CTRL0               8'h12
// [7:0]    -- autoswimp_refid
// [8]      -- autoswimp_reflist
// [30:9]   -- reserved
//`define     HEVCD_IPP_AUTOSWIMP_CTRL1               8'h13
// [15:0]   -- autoswimp_mvx
// [31:16]  -- autoswimp_mvy
//`define     HEVCD_IPP_AUTOSWIMP_CTRL2               8'h14
// [10:0]   -- autoswimp_ctb_start_x
// [15:11]  -- reserved
// [26:16]  -- autoswimp_ctb_start_y
// [31:27]  -- reserved
//`define     HEVCD_IPP_AUTOSWIMP_CTRL3               8'h15
// [10:0]   -- autoswimp_ctb_width
// [15:11]  -- reserved
// [26:16]  -- autoswimp_ctb_height
// [31:27]  -- reserved
//          -- starts autoswimp hw if ready on writing
//          -- this register
#define P_HEVCD_IPP_AXIADDR_PREFIX                 (volatile uint32_t *)0xfe32d060
#define P_HEVCD_IPP_AXIADDR_PREFIX_DBE1            (volatile uint32_t *)0xfe32e460
// [1:0]    -- intra-prediction line-buffer prefix
// [3:2]    -- reserved
// [5:4]    -- nv21-data-buffer prefix
// [7:6]    -- reserved
// [9:8]    -- compress-header-buffer prefix
// [11:9]   -- reserved
// [31:12]  -- reserved
#define P_AV1D_IPP_DIR_CFG                         (volatile uint32_t *)0xfe32d064
#define P_AV1D_IPP_DIR_CFG_DBE1                    (volatile uint32_t *)0xfe32e464
// [0]      -- edge_filter_enable
// [31:1]   -- reserved
#define P_HEVCD_IPP_DYNCLKGATE_CONFIG              (volatile uint32_t *)0xfe32d080
#define P_HEVCD_IPP_DYNCLKGATE_CONFIG_DBE1         (volatile uint32_t *)0xfe32e480
// [0]      -- mpp_wpredict_clkgate_disbl
// [1]      -- mpp_ref_fetch_clkgate_disbl
// [2]      -- mpp_interpol_top_clkgate_disbl
// [3]      -- mpp_4x4mcr_clkgate_disbl
// [4]      -- mpp_ref_pack_clkgate_disbl
// [5]      -- mpp_mdec_if_clkgate_disbl
// [7:6]    -- reserved
// [8]      -- ipp_res_fetch_clkgate_disbl
// [9]      -- ipp_iqitIf_clkgate_disbl
// [10]     -- ipp_dblkCmdIf_clkgate_disbl
// [11]     -- ipp_dblkIf_clkgate_disbl
// [12]     -- ipp_cntl_clkgate_disbl
// [13]     -- ipp_nsamples_proc_clkgate_disbl
// [14]     -- ipp_refroute_clkgate_disbl
// [15]     -- ipp_spread_clkgate_disbl
// [16]     -- ipp_reg_clkgate_disbl
// [17]     -- ipp_recon_clkgate_disbl
// [19:18]  -- reserved
// [20]     -- decomp_cntl_clkgate_disbl
// [21]     -- decomp_axiIf_clkgate_disbl
// [22]     -- decomp_dcache_clkgate_disbl
// [23]     -- decomp_hcache_clkgate_disbl
// [24]     -- decomp_gearup_clkgate_disbl
// [25]     -- decomp_cores_clkgate_disbl
// [26]     -- decomp_rdroute_clkgate_disbl
// [27]     -- reserved
// [28]     -- master_decomp_clkgate_disbl
// [29]     -- master_mpp_clkgate_disbl
// [30]     -- master_ipp_clkgate_disbl
// [31]     -- master_ipp_mpp_decomp_clkgate_disbl
#define P_HEVCD_IPP_DYNCLKGATE_STATUS              (volatile uint32_t *)0xfe32d084
#define P_HEVCD_IPP_DYNCLKGATE_STATUS_DBE1         (volatile uint32_t *)0xfe32e484
// [0]      -- mpp_wpredict_clkgate
// [1]      -- mpp_ref_fetch_clkgate
// [2]      -- mpp_interpol_top_clkgate
// [3]      -- mpp_4x4mcr_clkgate
// [4]      -- mpp_ref_pack_clkgate
// [5]      -- mpp_mdec_if_clkgate
// [7:6]    -- reserved
// [8]      -- ipp_res_fetch_clkgate
// [9]      -- ipp_iqitIf_clkgate
// [10]     -- ipp_dblkCmdIf_clkgate
// [11]     -- ipp_dblkIf_clkgate
// [12]     -- ipp_cntl_clkgate
// [13]     -- ipp_nsamples_proc_clkgate
// [14]     -- ipp_refroute_clkgate
// [15]     -- ipp_spread_clkgate
// [16]     -- ipp_reg_clkgate
// [17]     -- ipp_recon_clkgate
// [19:18]  -- reserved
// [20]     -- decomp_cntl_clkgate
// [21]     -- decomp_axiIf_clkgate
// [22]     -- decomp_dcache_clkgate
// [23]     -- decomp_hcache_clkgate
// [24]     -- decomp_gearup_clkgate
// [25]     -- decomp_cores_clkgate
// [26]     -- decomp_rdroute_clkgate
// [27]     -- reserved
// [30:28]  -- reserved
// [31]     -- mcrcc_axi_clkgate
//
#define P_HEVCD_MPP_DYNCLKGATE_CONFIG              (volatile uint32_t *)0xfe32d088
#define P_HEVCD_MPP_DYNCLKGATE_CONFIG_DBE1         (volatile uint32_t *)0xfe32e488
// [0]      -- mpp_regfifo_clkgate_disbl
// [1]      -- mpp_av1_compound_clkgate_disbl
// [2]      -- mpp_interintra_buff_clkgate_disbl
// [3]      -- mpp_gpm_mvcal_clkgate_disbl
// [4]      -- mpp_comv_data_clkgate_disbl
// [5]      -- mpp_comv_wr_clkgate_disbl
// [6]      -- mpp_merge_split_clkgate_disbl
// [7]      -- mpp_prof_clkgate_disbl
// [8]      -- mpp_wrap_data_pipe_clkgate_disbl
#define P_HEVCD_MPP_DYNCLKGATE_STATUS              (volatile uint32_t *)0xfe32d08c
#define P_HEVCD_MPP_DYNCLKGATE_STATUS_DBE1         (volatile uint32_t *)0xfe32e48c
// [0]      -- mpp_regfifo_clkgate
// [1]      -- mpp_av1_compound_clkgate
// [2]      -- mpp_interintra_buff_clkgate
// [3]      -- mpp_gpm_mvcal_clkgate
// [4]      -- mpp_comv_data_clkgate
// [5]      -- mpp_comv_wr_clkgate
// [6]      -- mpp_merge_split_clkgate
// [7]      -- mpp_prof_clkgate
// [8]      -- mpp_wrap_data_pipe_clkgate
#define P_HEVCD_IPP_DBG_SEL                        (volatile uint32_t *)0xfe32d0c0
#define P_HEVCD_IPP_DBG_SEL_DBE1                   (volatile uint32_t *)0xfe32e4c0
// [3:0]    -- module_level_sel
// [7:4]    -- mpp_ipp_top_level
// [8]      -- ipp_sel
// [31:9]   -- reserved
#define P_HEVCD_IPP_DBG_DATA                       (volatile uint32_t *)0xfe32d0c4
#define P_HEVCD_IPP_DBG_DATA_DBE1                  (volatile uint32_t *)0xfe32e4c4
// [31:0]   -- Debug information
#define P_HEVCD_IPP_LMCS_DELTA_CW_INDEX            (volatile uint32_t *)0xfe32d0c8
#define P_HEVCD_IPP_LMCS_DELTA_CW_INDEX_DBE1       (volatile uint32_t *)0xfe32e4c8
// [4:0]    -- cfg_lmcs_delta_cw_index
#define P_HEVCD_IPP_LMCS_DELTA_CW_DATA             (volatile uint32_t *)0xfe32d0cc
#define P_HEVCD_IPP_LMCS_DELTA_CW_DATA_DBE1        (volatile uint32_t *)0xfe32e4cc
// [15:0]   -- cfg_lmcs_delta_cw[cfg_lmcs_delta_cw_index]
#define P_HEVCD_IPP_LMCS_DELTA_CRS                 (volatile uint32_t *)0xfe32d0d0
#define P_HEVCD_IPP_LMCS_DELTA_CRS_DBE1            (volatile uint32_t *)0xfe32e4d0
// [3:0]    -- cfg_lmcs_delta_crs
#define P_HEVCD_IPP_VVC_CTL                        (volatile uint32_t *)0xfe32d0d4
#define P_HEVCD_IPP_VVC_CTL_DBE1                   (volatile uint32_t *)0xfe32e4d4
//////////////////////////////////////////////////////////////////////////////
///// MPP Registers                                       ////////////////////
//////////////////////////////////////////////////////////////////////////////
// Canvas Anchor to Axi-Address translation table
#define P_HEVCD_MPP_ANC2AXI_TBL_CONF_ADDR          (volatile uint32_t *)0xfe32d180
#define P_HEVCD_MPP_ANC2AXI_TBL_CONF_ADDR_DBE1     (volatile uint32_t *)0xfe32e580
// [0]      -- anc2axi canvas address translation table switch 0:sw 1:hw
// [1]      -- access type 1:wr 0:rd
// [2]      -- auto index increment
// [7:3]    -- reserved
// [15:8]   -- start index
// [31:16]  -- reserved
#define P_HEVCD_MPP_ANC2AXI_TBL_DATA               (volatile uint32_t *)0xfe32d190
#define P_HEVCD_MPP_ANC2AXI_TBL_DATA_DBE1          (volatile uint32_t *)0xfe32e590
// [26:0]   -- anc2axi address r/w  32byte aligned
// [31:27]  -- reserved
#define P_HEVCD_MPP_WEIGHTPRED_CNTL_ADDR           (volatile uint32_t *)0xfe32d1ec
#define P_HEVCD_MPP_WEIGHTPRED_CNTL_ADDR_DBE1      (volatile uint32_t *)0xfe32e5ec
// [0]      -- weighted_pred_flag
#define P_HEVCD_MPP_L0_WEIGHT_FLAG_ADDR            (volatile uint32_t *)0xfe32d1f0
#define P_HEVCD_MPP_L0_WEIGHT_FLAG_ADDR_DBE1       (volatile uint32_t *)0xfe32e5f0
// [15:0]   -- luma_weght_flag0[15:0], indexed by refidx0
// [31:16]  -- chroma_weght_flag0[15:0], indexed by refidx0
// NOTE: For VVC, refidx0 is on MSB
#define P_HEVCD_MPP_L1_WEIGHT_FLAG_ADDR            (volatile uint32_t *)0xfe32d1f4
#define P_HEVCD_MPP_L1_WEIGHT_FLAG_ADDR_DBE1       (volatile uint32_t *)0xfe32e5f4
// [15:0]   -- luma_weght_flag1[15:0], indexed by refidx1
// [31:16]  -- chroma_weght_flag1[15:0], indexed by refidx1
// NOTE: For VVC, refidx0 is on MSB
#define P_HEVCD_MPP_YLOG2WGHTDENOM_ADDR            (volatile uint32_t *)0xfe32d1f8
#define P_HEVCD_MPP_YLOG2WGHTDENOM_ADDR_DBE1       (volatile uint32_t *)0xfe32e5f8
// [3:0]    -- luma_log2_weight_denom
#define P_HEVCD_MPP_DELTACLOG2WGHTDENOM_ADDR       (volatile uint32_t *)0xfe32d1fc
#define P_HEVCD_MPP_DELTACLOG2WGHTDENOM_ADDR_DBE1  (volatile uint32_t *)0xfe32e5fc
// [4:0]    -- delta_chroma_log2_weight_denom
#define P_HEVCD_MPP_WEIGHT_ADDR                    (volatile uint32_t *)0xfe32d200
#define P_HEVCD_MPP_WEIGHT_ADDR_DBE1               (volatile uint32_t *)0xfe32e600
// [5:0]    -- weight_rw_addr
// [0]      -- DELTA_WEIGHT0
// [1]      -- OFFSET0
// [2]      -- DELTA_WEIGHT1
// [3]      -- OFFSET1
// ......
// [62]     -- DELTA_WEIGHT31
// [63]     -- OFFSET31
#define P_HEVCD_MPP_WEIGHT_DATA                    (volatile uint32_t *)0xfe32d204
#define P_HEVCD_MPP_WEIGHT_DATA_DBE1               (volatile uint32_t *)0xfe32e604
// For DELTA_WEIGHT :
// [7:0]    -- delta_y_weight for refidx0:0
// [15:8]   -- delta_cb_weight for refidx0:0
// [23:16]  -- delta_cr_weight for refidx0:0
// For OFFSET :
// [7:0]    -- luma_offset for refidx0:0
// [17:8]   -- delta_cb_offset for refidx0:0
// [27:18]  -- delta_cr_offset for refidx0:0
// VVC does NOT need to config HEVCD_MPP_WEIGHT_ADDR
// [31]     -- refList0/1
// [25:24]  -- Y/Cb/Cr
// [23:20]  -- refIdx
// [17:8]   -- chroma_delta_offset(10bit) or luma_offset(8bit)
// [7:0]    -- delta_weight
// ID to Anchor-Canvas-Address table
// [31:13]  reserved
// [12:8]   access_index
// [7:2]    reserved
// [1]      auto_inc_read
// [0]      auto_inc_write
#define P_HEVCD_MPP_ANC_CANVAS_ACCCONFIG_ADDR      (volatile uint32_t *)0xfe32d300
#define P_HEVCD_MPP_ANC_CANVAS_ACCCONFIG_ADDR_DBE1 (volatile uint32_t *)0xfe32e700
// Id[4:0]  --> {orderhint[7:0],AnchorAddrCr[7:0],AnchorAddrCb[7:0],AnchorAddrY[7:0]}
#define P_HEVCD_MPP_ANC_CANVAS_DATA_ADDR           (volatile uint32_t *)0xfe32d304
#define P_HEVCD_MPP_ANC_CANVAS_DATA_ADDR_DBE1      (volatile uint32_t *)0xfe32e704
// [0]       -- decomp_nocompress
// [1]       -- decomp_dcache_bypass
// [2]       -- reserved
// [3]       -- decomp_smem_bdepth888
// [4]       -- decomp_paged_mem_mode
// [15:5]    -- reserved
// [18:16]   -- decomp_cbcr_endian
// [19]      -- reserved
// [23:20]   -- decomp_y_endian
// [27:24]   -- is_p01x_mode   //0001:P010  0010:P012  0100:P014  1000:P016
// [28]      -- P010_byte_swap
// [30:29]   -- reserved
// [31]      -- decomp_axif_lbmode888
#define P_HEVCD_MPP_DECOMP_CTL1                    (volatile uint32_t *)0xfe32d308
#define P_HEVCD_MPP_DECOMP_CTL1_DBE1               (volatile uint32_t *)0xfe32e708
// [23:0]    -- header1_offset : 32byte address from canvas base
// [31:24]   -- reserved
#define P_HEVCD_MPP_DECOMP_CTL2                    (volatile uint32_t *)0xfe32d30c
#define P_HEVCD_MPP_DECOMP_CTL2_DBE1               (volatile uint32_t *)0xfe32e70c
// [9:0]     -- decomp_default_Y
// [19:10]   -- decomp_default_Cb
// [29:20]   -- decomp_default_Cr
// [31:30]   -- bitdepth_sel 00:8bit 01:9bit 10:10bit
#define P_HEVCD_MPP_DECOMP_CTL3                    (volatile uint32_t *)0xfe32d310
#define P_HEVCD_MPP_DECOMP_CTL3_DBE1               (volatile uint32_t *)0xfe32e710
// HEVCD_MPP_DECOMP_PERFMON_CTL
// [0]      percount_reset
// [3:1]    perfcount_sel
// [31:4]   reserved
// {1'b0,perfcount_sel[1:0]}    perfcount
//     0                        raw_hcache_cnt
//     1                        hit_hcache_cnt
//     2                        raw_dcache_cnt
//     3                        hit_dcache_cnt
// {1'b1,perfcount_sel[1:0]}    perfcount
//     0                        fast_num_compburst
//     1                        slow_num_compburst
//     2,3                      raw_num_ncompburst
#define P_HEVCD_MPP_DECOMP_PERFMON_CTL             (volatile uint32_t *)0xfe32d314
#define P_HEVCD_MPP_DECOMP_PERFMON_CTL_DBE1        (volatile uint32_t *)0xfe32e714
// HEVCD_MPP_DECOMP_PERFMON_DATA
// [31:0]   percount_data
#define P_HEVCD_MPP_DECOMP_PERFMON_DATA            (volatile uint32_t *)0xfe32d318
#define P_HEVCD_MPP_DECOMP_PERFMON_DATA_DBE1       (volatile uint32_t *)0xfe32e718
// HEVCD_MPP_DECOMP_AXIURG_CTL
// [1:0]      -- decomp_hdrurg  00:Normal 01:Urgent 10:SuperUrgent
// [2]        -- decomp_fpathurg_en 1->Urgent if below lo_thresh
// [3]        -- decomp_spathurg_en 1->Urgent if below lo_thresh
// [10:4]     -- decomp_fpathurg_lothresh [32byte steps : max 96]
// [17:11]    -- decomp_fpathurg_hithresh [32byte steps : max 96]
// [24:18]    -- decomp_spathurg_lothresh [32byte steps : max 64]
// [31:25]    -- decomp_spathurg_hithresh [32byte steps : max 64]
#define P_HEVCD_MPP_DECOMP_AXIURG_CTL              (volatile uint32_t *)0xfe32d31c
#define P_HEVCD_MPP_DECOMP_AXIURG_CTL_DBE1         (volatile uint32_t *)0xfe32e71c
// HEVCD_MPP_VDEC_MCR_CTL
// [0]        -- mcr_mdec_mode : 1:mcr fetch used by vdec:mdec
// [3:1]      -- reserved
// [4]        -- mcr_mdec_8byte_endian : 1:big 0:little
// [31:5]     -- reserved
#define P_HEVCD_MPP_VDEC_MCR_CTL                   (volatile uint32_t *)0xfe32d320
#define P_HEVCD_MPP_VDEC_MCR_CTL_DBE1              (volatile uint32_t *)0xfe32e720
//////////////////////////////////////////////////////////////////////////////
///// MCRCC_AXI Registers                                 ////////////////////
//////////////////////////////////////////////////////////////////////////////
// HEVCD_MCRCC_CTL1
// 31:12 <reserved[20:0]>
// 11:10 <cfg_anc11_tb>                           // 01: top 10:bot 11:frame
// 9:8   <cfg_anc10_tb>
// 7:6   <cfg_anc01_tb>
// 5:4   <cfg_anc00_tb>
// 3     <cfg_clkgate_disbl>
// 2     <cfg_field_pic>                           // not used for hevc
// 1     <sw_rst>
// 0     <bypass_en>
#define P_HEVCD_MCRCC_CTL1                         (volatile uint32_t *)0xfe32d3c0
#define P_HEVCD_MCRCC_CTL1_DBE1                    (volatile uint32_t *)0xfe32e7c0
// HEVCD_MCRCC_CTL2
// 31:24    <cfg_cache_anc01_c[7:0]>
// 23:16    <cfg_cache_anc01_y[7:0]>
// 15:8     <cfg_cache_anc00_c[7:0]>
// 7:0      <cfg_cache_anc00_y[7:0]>
#define P_HEVCD_MCRCC_CTL2                         (volatile uint32_t *)0xfe32d3c4
#define P_HEVCD_MCRCC_CTL2_DBE1                    (volatile uint32_t *)0xfe32e7c4
// HEVCD_MCRCC_CTL3
// 31:24    <cfg_cache_anc11_c[7:0]>
// 23:16    <cfg_cache_anc11_y[7:0]>
// 15:8     <cfg_cache_anc10_c[7:0]>
// 7:0      <cfg_cache_anc10_y[7:0]>
#define P_HEVCD_MCRCC_CTL3                         (volatile uint32_t *)0xfe32d3c8
#define P_HEVCD_MCRCC_CTL3_DBE1                    (volatile uint32_t *)0xfe32e7c8
// HEVCD_MCRCC_PERFMON_CTL
// [0]      percount_reset
// [3:1]    perfcount_sel
// [31:4]   reserved
// perfcount_sel[2:0]     perfcount
//     0                  raw_mcr_cnt
//     1                  hit_mcr_cnt
//     2                  byp_mcr_cnt_nchoutwin
//     3                  byp_mcr_cnt_nchcanv
//     4                  miss_mcr_cnt_0
//     5                  miss_mcr_cnt_1
//     6                  hit_mcr_cnt_0
//     7                  hit_mcr_cnt_1
#define P_HEVCD_MCRCC_PERFMON_CTL                  (volatile uint32_t *)0xfe32d3cc
#define P_HEVCD_MCRCC_PERFMON_CTL_DBE1             (volatile uint32_t *)0xfe32e7cc
// HEVCD_MCRCC_PERFMON_DATA
// [31:0]   percount_data
#define P_HEVCD_MCRCC_PERFMON_DATA                 (volatile uint32_t *)0xfe32d3d0
#define P_HEVCD_MCRCC_PERFMON_DATA_DBE1            (volatile uint32_t *)0xfe32e7d0
// HEVCD_MCRCC_STALL_ADJUST
// [2:0]    datapath_lcu16_delay
//          xx1         64 lcu16 or tilestart_y
//          x10        128 lcu16 or tilestart_y
//          100        256 lcu16 or tilestart_y
//          else       no adjust
#define P_HEVCD_MCRCC_STALL_ADJUST                 (volatile uint32_t *)0xfe32d3d4
#define P_HEVCD_MCRCC_STALL_ADJUST_DBE1            (volatile uint32_t *)0xfe32e7d4
//////////////////////////////////////////////////////////////////////////////
///// VP9 Decoder Registers                               ////////////////////
//////////////////////////////////////////////////////////////////////////////
// scale_xy :: REF_SCALE_SHIFT = 14
    // VP9 :: (other_size << REF_SCALE_SHIFT) / this_size
    // AV1 :: ((other_size << REF_SCALE_SHIFT) + this_size / 2) / this_size
// VP9D_MPP_INTERPOL_CFG0
// [2:0]    VP9 MC Interpolation type
            // 0-3:perframe type 4:per partition type
// [3]      reserved
// [4]      V99 MV precision
            // 1:high precision else  mv=mv*2
// [31:5]   reserved
#define P_VP9D_MPP_INTERPOL_CFG0                   (volatile uint32_t *)0xfe32d100
#define P_VP9D_MPP_INTERPOL_CFG0_DBE1              (volatile uint32_t *)0xfe32e500
// VP9D_MPP_REF_SCALE_ENBL
// [7:0]    VP9 MC reference scaled info                                          // -> VVC_MPP_REF_SCALE_ENBL
// [15:8]   VP9 MC reference scaled dir 0:Dwn 1:Up                                // [15:0]    List0 ref0_ref15 is scaled
// [31:16]  reserved                                                              // [31:16]   List1 ref0~ref15 is scaled
#define P_VP9D_MPP_REF_SCALE_ENBL                  (volatile uint32_t *)0xfe32d104
#define P_VP9D_MPP_REF_SCALE_ENBL_DBE1             (volatile uint32_t *)0xfe32e504
// VP9D_MPP_REFINFO_TBL_ACCCONFIG
// [1:0]    reserved
// [2]      auto_inc_index/field
// [5:3]    reference index   0:last 1:golden 2:altref[vp9] .... 6:altref[av1]
// [8:6]    info field 0:<ref_width[14:0]> 1:<ref_height[14:0]>
            //         2:<scale_x[26:0]  3:<scale_y[26:0]>
            //         4:<decomp_header1_offset[23:0]> -- 32byte aligned
// [31:9]   reserved	
#define P_VP9D_MPP_REFINFO_TBL_ACCCONFIG           (volatile uint32_t *)0xfe32d108
#define P_VP9D_MPP_REFINFO_TBL_ACCCONFIG_DBE1      (volatile uint32_t *)0xfe32e508
// VP9D_MPP_REFINFO_DATA
// [n:0]    refinfo_tbl[index]field]  wr_data/rd_data
#define P_VP9D_MPP_REFINFO_DATA                    (volatile uint32_t *)0xfe32d10c
#define P_VP9D_MPP_REFINFO_DATA_DBE1               (volatile uint32_t *)0xfe32e50c
//////////////////////////////////////////////////////////////////////////////
///// AV1 Decoder Registers                               ////////////////////
//////////////////////////////////////////////////////////////////////////////
//`define     AV1D_IPP_DIR_CFG                  8'h90
// [0]      -- edge_filter_enable
// [31:1]   -- reserved
// refid to global motion warped-mode matrix lookup table
#define P_AV1D_MPP_REF2WMMAT_TBL_CONF_ADDR         (volatile uint32_t *)0xfe32d244
#define P_AV1D_MPP_REF2WMMAT_TBL_CONF_ADDR_DBE1    (volatile uint32_t *)0xfe32e644
// [0]      -- gm_wmmat lookup table switch 0:sw 1:hw : read and write
// [1]      -- access type 1:wr 0:rd  : sw access type
// [2]      -- auto index increment
// [7:3]    -- reserved
// [10:8]   -- start refid :: 0 through 7
// [13:11]  -- start matrix entry index :: 0 through 7
// [29:14]  -- reserved
// [30]     -- wr-bank : 2-banks: possible ping-pong
// [31]     -- rd-bank
#define P_AV1D_MPP_REF2WMMAT_TBL_DATA              (volatile uint32_t *)0xfe32d248
#define P_AV1D_MPP_REF2WMMAT_TBL_DATA_DBE1         (volatile uint32_t *)0xfe32e648
// [26:0]   -- global motion warped-mode matrix  r/w  32byte aligned
// [31:27]  -- reserved
#define P_AV1D_MPP_ORDERHINT_CFG                   (volatile uint32_t *)0xfe32d24c
#define P_AV1D_MPP_ORDERHINT_CFG_DBE1              (volatile uint32_t *)0xfe32e64c
// [3:0]    current frame orderhintbits                                           // [31:0]   curr frame POC (range -2^31 ~ 2^31-1)
// [7:4]    reserved                                                              // SHARED BY VVC
// [15:8]   current frame orderhint
// [31:8]   reserved
#define P_AV1D_MPP_MISC_CFG                        (volatile uint32_t *)0xfe32d250
#define P_AV1D_MPP_MISC_CFG_DBE1                   (volatile uint32_t *)0xfe32e650
// [0]      -- frame_force_integer_mv
// [31:1]   -- reserved
//////////////////////////////////////////////////////////////////////////////
///// Multi-core COnfiguration Registers                  ////////////////////
//////////////////////////////////////////////////////////////////////////////
#define P_HEVCD_IPP_MULTICORE_CFG                  (volatile uint32_t *)0xfe32d280
#define P_HEVCD_IPP_MULTICORE_CFG_DBE1             (volatile uint32_t *)0xfe32e680
// [0]      -- multi-core-enable
// [3:1]    -- reserved
// [4]      -- intra-lbuf write_mode 0:ddr 1:fifo
// [5]      -- intra_lbuf read_mode 0:ddr 1:fifo
// [31:6]   -- reserved
#define P_HEVCD_IPP_MULTICORE_LINE_CTL             (volatile uint32_t *)0xfe32d284
#define P_HEVCD_IPP_MULTICORE_LINE_CTL_DBE1        (volatile uint32_t *)0xfe32e684
// [11:0]   -- mcore_first_lcu_row, first row processed by this core, programmed at tile/frame sof
// [15:12]  -- reserved
// [27:16]  -- mcore_last_lcu_row, last row processed by this core, programmed at tile/frame sof
// [31:28]  -- reserved
#define P_HEVCD_IPP_LINEBUFF_BASE2                 (volatile uint32_t *)0xfe32d288
#define P_HEVCD_IPP_LINEBUFF_BASE2_DBE1            (volatile uint32_t *)0xfe32e688
// [31:14]  -- intra-prediction line-buffer 16KByte axi address
//              [single-core:nu multi-core:rd]
// [13:0]   -- reserved
#define P_HEVCD_IPP_DYN_CACHE                      (volatile uint32_t *)0xfe32d28c
#define P_HEVCD_IPP_DYN_CACHE_DBE1                 (volatile uint32_t *)0xfe32e68c
// [0]	    dyn_cache_en
// [1]	    n_hcache
// [5:2]    mode change num
#define P_HEVCD_IPP_CTRL0                          (volatile uint32_t *)0xfe32d290
#define P_HEVCD_IPP_CTRL0_DBE1                     (volatile uint32_t *)0xfe32e690
#define P_HEVCD_IPP_CTRL1                          (volatile uint32_t *)0xfe32d294
#define P_HEVCD_IPP_CTRL1_DBE1                     (volatile uint32_t *)0xfe32e694
#define P_HEVCD_IPP_CTRL2                          (volatile uint32_t *)0xfe32d298
#define P_HEVCD_IPP_CTRL2_DBE1                     (volatile uint32_t *)0xfe32e698
#define P_HEVCD_IPP_CTRL3                          (volatile uint32_t *)0xfe32d29c
#define P_HEVCD_IPP_CTRL3_DBE1                     (volatile uint32_t *)0xfe32e69c
//////////////////////////////////////////////////////////////////////////////
///// VVC Decoder Registers                               ////////////////////
//////////////////////////////////////////////////////////////////////////////
#define P_VVC_MPP_REF0_POC_CFG                     (volatile uint32_t *)0xfe32d2c0
#define P_VVC_MPP_REF0_POC_CFG_DBE1                (volatile uint32_t *)0xfe32e6c0
// [31:0]   -- reference_POC
#define P_VVC_MPP_REF1_POC_CFG                     (volatile uint32_t *)0xfe32d2c4
#define P_VVC_MPP_REF1_POC_CFG_DBE1                (volatile uint32_t *)0xfe32e6c4
// [31:0]   -- reference_POC
#define P_VVC_MPP_REF_IS_LONGTERM                  (volatile uint32_t *)0xfe32d2c8
#define P_VVC_MPP_REF_IS_LONGTERM_DBE1             (volatile uint32_t *)0xfe32e6c8
// [15:0]   -- ref0~ref15(list0) is longterm
// [31:16]  -- ref0~ref15(list1) is longterm
#define P_VVC_MPP_CHROMA_COLLOCATED_CFG            (volatile uint32_t *)0xfe32d2cc
#define P_VVC_MPP_CHROMA_COLLOCATED_CFG_DBE1       (volatile uint32_t *)0xfe32e6cc
// [0]      -- chroma_hcollocated_flag
// [1]      -- chroma_vcollocated_flag
// [31:2]   -- reserved
#define P_VVC_MPP_REF_WRAPAROUND_CFG               (volatile uint32_t *)0xfe32d2d0
#define P_VVC_MPP_REF_WRAPAROUND_CFG_DBE1          (volatile uint32_t *)0xfe32e6d0
// [15]     -- warparound_enable
// [14:0]   -- wraparound_offset
#define P_VVC_MPP_SUBPIC_START                     (volatile uint32_t *)0xfe32d2d4
#define P_VVC_MPP_SUBPIC_START_DBE1                (volatile uint32_t *)0xfe32e6d4
// [11:0]   -- subpic_start_X_in_ctu
// [23:12]  -- subpic_start_Y_in_ctu
// [24]     -- num of subpictures > 1 (sps_num_subpics_minus1 > 0)
// [25]     -- subpic_treated_as_pic
#define P_VVC_MPP_SUBPIC_SIZE                      (volatile uint32_t *)0xfe32d2d8
#define P_VVC_MPP_SUBPIC_SIZE_DBE1                 (volatile uint32_t *)0xfe32e6d8
// [11:0]   -- subpic_width_in_ctu_m1
// [23:12]  -- subpic_height_in_ctu_m1
#define P_VVC_MPP_SCALING_WIN_OFFSET               (volatile uint32_t *)0xfe32d2dc
#define P_VVC_MPP_SCALING_WIN_OFFSET_DBE1          (volatile uint32_t *)0xfe32e6dc
// [18:0]   -- scaling_win_left/top_offset
// [19]     -- 0: left 1: top
// [31:20]  -- reserved
#define P_VVC_MPP_CURR_PROF_ENABLE                 (volatile uint32_t *)0xfe32d2e0
#define P_VVC_MPP_CURR_PROF_ENABLE_DBE1            (volatile uint32_t *)0xfe32e6e0
// [0]      -- enable PROF(sps && picheader)
// [31:1]   -- reserved
#define P_VVC_MPP_CANVAS_ID_L0                     (volatile uint32_t *)0xfe32d2e4
#define P_VVC_MPP_CANVAS_ID_L0_DBE1                (volatile uint32_t *)0xfe32e6e4
// [31:30]  -- address 0-2
// [29:0]   -- six canvasid
#define P_VVC_MPP_CANVAS_ID_L1                     (volatile uint32_t *)0xfe32d2e8
#define P_VVC_MPP_CANVAS_ID_L1_DBE1                (volatile uint32_t *)0xfe32e6e8
// [31:30]  -- address 0-2
// [29:0]   -- six canvasid
#define P_VVC_MPP_MV_WRPTR                         (volatile uint32_t *)0xfe32d2ec
#define P_VVC_MPP_MV_WRPTR_DBE1                    (volatile uint32_t *)0xfe32e6ec
// [31:0]   -- comv_wrptr
#define P_VVC_MPP_SLICE_INFO                       (volatile uint32_t *)0xfe32d2f0
#define P_VVC_MPP_SLICE_INFO_DBE1                  (volatile uint32_t *)0xfe32e6f0
// [1:0]    -- slice_type
// [5:2]    -- lcu_size_log2
// [6]      -- is_monochroma
#define P_VVC_MPP_AXI_CTL                          (volatile uint32_t *)0xfe32d2f4
#define P_VVC_MPP_AXI_CTL_DBE1                     (volatile uint32_t *)0xfe32e6f4
// [0:7]    -- reserved
// [11:8]   -- AXI_WR_ID
// [14:12]  -- AXI_AWSIZE
// [16:15]  -- AXI_AWBURST
// [18:17]  -- AXI_AWLOCK
// [22:19]  -- AXI_AWCACHE
// [25:23]  -- AXI_AWPROT
// [31:26]  -- reserved
#define P_VVC_MPP_LCU_INFO                         (volatile uint32_t *)0xfe32d2f8
#define P_VVC_MPP_LCU_INFO_DBE1                    (volatile uint32_t *)0xfe32e6f8
// [15:0]   -- lcu_x_num
// [31:16]  -- lcu_y_num
#define P_VVC_MPP_RPR_REFINFO                      (volatile uint32_t *)0xfe32d2fc
#define P_VVC_MPP_RPR_REFINFO_DBE1                 (volatile uint32_t *)0xfe32e6fc
// [31]     -- 0: refL0 1: refL1
// [30:27]  -- refIdx
// [26:24]  -- field config:  000: refWidth[14:0]
//                            001: refHeifht[14:0]
//                            010: scaleX[15:0]
//                            011: scaleY[15:0]
//                            100: ref_left_win_scaling_offset[18:0]
//                            101: ref_top_win_scaling_offset[18:0]
//
// Closing file:  hevc_ipp_regs.h
//
//------------------------------------------------------------------------------
// HEVC_DBLK module level register offset
//------------------------------------------------------------------------------
//
// Reading file:  hevc_dblk_regs.h
//
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_DBLK_CBUS_BASE = 0x05
// -----------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_DBLK_CBUS_BASE_DBE1 = 0x0a
// -----------------------------------------------
//cfg0[0];        //software_reset
//cfg0[1];        //status clear, only for axi error or pic_done
//cfg0[2];        //clock_forced_on_all
//cfg0[3];        //clock_forced_off_all
//cfg0[11:8];     //PU FIFO Threshold   , 0:16 1:1 ... 1:15
//cfg0[15:12];    //TU FIFO Threshold>>4, 0:16<<4 1:1<<4 ... 1:15<<4
//cfg0[29:16];    //clock_forced_on_submodules
#define P_HEVC_DBLK_CFG0                           (volatile uint32_t *)0xfe32d400
#define P_HEVC_DBLK_CFG0_DBE1                      (volatile uint32_t *)0xfe32e800
//cfg1[1:0];      //ctb_size 0:64x64 1:32x32 2:16x16
//cfg1[2];        //ignore_out_of_boundary
//cfg1[3];        //pcm_loop_filter_disabled_flag
//cfg1[8:4];      //pps_cb_qp_offset (-12~12,inclusive)
//cfg1[13:9];     //pps_cr_qp_offset (-12~12,inclusive)
//cfg1[14];       //ctbx,y swap in pu i/f
//cfg1[15];       //sao_corner_45_degree_all_software_control
#define P_HEVC_DBLK_CFG1                           (volatile uint32_t *)0xfe32d404
#define P_HEVC_DBLK_CFG1_DBE1                      (volatile uint32_t *)0xfe32e804
//cfg2[15:0];     //picture_size_width
//cfg2[31:16];    //picture_size_height
#define P_HEVC_DBLK_CFG2                           (volatile uint32_t *)0xfe32d408
#define P_HEVC_DBLK_CFG2_DBE1                      (volatile uint32_t *)0xfe32e808
//cfg3[3:0];      //parameter_axi_arid
//cfg3[7:4];      //parameter_axi_awid
//cfg3[11:8];     //parameter_axi_wid
//cfg3[12];       //parameter_axi_not_check_write_response
//cfg3[19:16];    //data_axi_arid
//cfg3[23:20];    //data_axi_awid
//cfg3[27:24];    //data_axi_wid
//cfg3[28];       //data_axi_not_check_write_response
#define P_HEVC_DBLK_CFG3                           (volatile uint32_t *)0xfe32d40c
#define P_HEVC_DBLK_CFG3_DBE1                      (volatile uint32_t *)0xfe32e80c
//cfg4[31:0];     //parameter_axi_start_address
#define P_HEVC_DBLK_CFG4                           (volatile uint32_t *)0xfe32d410
#define P_HEVC_DBLK_CFG4_DBE1                      (volatile uint32_t *)0xfe32e810
//cfg5[31:0];     //data_axi_start_address
#define P_HEVC_DBLK_CFG5                           (volatile uint32_t *)0xfe32d414
#define P_HEVC_DBLK_CFG5_DBE1                      (volatile uint32_t *)0xfe32e814
//cfg6[9:0];      //tile_ctbx
//cfg6[25:16];    //tile_ctby
//cfg6[31];       //tile_enabled
#define P_HEVC_DBLK_CFG6                           (volatile uint32_t *)0xfe32d418
#define P_HEVC_DBLK_CFG6_DBE1                      (volatile uint32_t *)0xfe32e818
//cfg7[9:0];      //tile_ctbxsize
//cfg7[25:16];    //tile_ctbysize
#define P_HEVC_DBLK_CFG7                           (volatile uint32_t *)0xfe32d41c
#define P_HEVC_DBLK_CFG7_DBE1                      (volatile uint32_t *)0xfe32e81c
//cfg8[9:0];      //start_ctbx, normally equals to tile_ctbx
//cfg8[25:16];    //start_ctby, normally equals to tile_ctby
//cfg8[31];       //start, self_cleared signal, normally set it at the begin of tile
#define P_HEVC_DBLK_CFG8                           (volatile uint32_t *)0xfe32d420
#define P_HEVC_DBLK_CFG8_DBE1                      (volatile uint32_t *)0xfe32e820
//cfg9[0]         //loop_filter_across_tiles_enabled_flag
//cfg9[1]         //loop_filter_across_slices_enabled_flag
//cfg9[2]         //deblocking_filter_disabled_flag
//cfg9[6:3]       //beta_offset_div2 (-6~6,inclusive)
//cfg9[10:7]      //tc_offset_div2 (-6~6,inclusive)
#define P_HEVC_DBLK_CFG9                           (volatile uint32_t *)0xfe32d424
#define P_HEVC_DBLK_CFG9_DBE1                      (volatile uint32_t *)0xfe32e824
//cfga[4:0]       //corner45degree{FIFO_CNT}
//cfga[31:27]     //corner45degree{EN,FIFO_CLR,FIFO_PUSH,DATA,DATA_SEL}
#define P_HEVC_DBLK_CFGA                           (volatile uint32_t *)0xfe32d428
#define P_HEVC_DBLK_CFGA_DBE1                      (volatile uint32_t *)0xfe32e828
//cfgb[3:0]       //0:HEVC 1:VP9 ...
#define P_HEVC_DBLK_CFGB                           (volatile uint32_t *)0xfe32d42c
#define P_HEVC_DBLK_CFGB_DBE1                      (volatile uint32_t *)0xfe32e82c
//cfgc[31:0]      //cfg_addr_y1
#define P_HEVC_DBLK_CFGC                           (volatile uint32_t *)0xfe32d430
#define P_HEVC_DBLK_CFGC_DBE1                      (volatile uint32_t *)0xfe32e830
//cfgd[31:0]      //cfg_alfpar
#define P_HEVC_DBLK_CFGD                           (volatile uint32_t *)0xfe32d434
#define P_HEVC_DBLK_CFGD_DBE1                      (volatile uint32_t *)0xfe32e834
//cfge[31:0]
#define P_HEVC_DBLK_CFGE                           (volatile uint32_t *)0xfe32d438
#define P_HEVC_DBLK_CFGE_DBE1                      (volatile uint32_t *)0xfe32e838
#define P_HEVC_DBLK_STS0                           (volatile uint32_t *)0xfe32d43c
#define P_HEVC_DBLK_STS0_DBE1                      (volatile uint32_t *)0xfe32e83c
#define P_HEVC_DBLK_STS1                           (volatile uint32_t *)0xfe32d440
#define P_HEVC_DBLK_STS1_DBE1                      (volatile uint32_t *)0xfe32e840
//cfg11[31:0]
#define P_HEVC_DBLK_CFG11                          (volatile uint32_t *)0xfe32d444
#define P_HEVC_DBLK_CFG11_DBE1                     (volatile uint32_t *)0xfe32e844
//cfg12[31:0]
#define P_HEVC_DBLK_CFG12                          (volatile uint32_t *)0xfe32d448
#define P_HEVC_DBLK_CFG12_DBE1                     (volatile uint32_t *)0xfe32e848
//cfg13[31:0]
#define P_HEVC_DBLK_CFG13                          (volatile uint32_t *)0xfe32d44c
#define P_HEVC_DBLK_CFG13_DBE1                     (volatile uint32_t *)0xfe32e84c
//cfg14[31:0]
#define P_HEVC_DBLK_CFG14                          (volatile uint32_t *)0xfe32d450
#define P_HEVC_DBLK_CFG14_DBE1                     (volatile uint32_t *)0xfe32e850
// cfgs for av1 cdef
#define P_HEVC_DBLK_CDEF0                          (volatile uint32_t *)0xfe32d454
#define P_HEVC_DBLK_CDEF0_DBE1                     (volatile uint32_t *)0xfe32e854
#define P_HEVC_DBLK_CDEF1                          (volatile uint32_t *)0xfe32d458
#define P_HEVC_DBLK_CDEF1_DBE1                     (volatile uint32_t *)0xfe32e858
#define P_HEVC_DBLK_CDEF2                          (volatile uint32_t *)0xfe32d45c
#define P_HEVC_DBLK_CDEF2_DBE1                     (volatile uint32_t *)0xfe32e85c
#define P_HEVC_DBLK_CDEF3                          (volatile uint32_t *)0xfe32d460
#define P_HEVC_DBLK_CDEF3_DBE1                     (volatile uint32_t *)0xfe32e860
#define P_HEVC_DBLK_CDEF4                          (volatile uint32_t *)0xfe32d464
#define P_HEVC_DBLK_CDEF4_DBE1                     (volatile uint32_t *)0xfe32e864
#define P_HEVC_DBLK_CDEF5                          (volatile uint32_t *)0xfe32d468
#define P_HEVC_DBLK_CDEF5_DBE1                     (volatile uint32_t *)0xfe32e868
// cfgs for av1 upscaling
// ups0[15:0] upscl_picsizex
// ups0[16] use_superre::upscaling enable
// ups0[19:17] denominator
// ups1[15:0] upscaled x0 luma
// ups1[31:16] upscaled x0 chroma
// ups2[29:0] x0_qn luma
// ups3[29:0] x0_qn chroma
// ups4[29:0] x_step luma
// ups5[29:0] x_step luma
#define P_HEVC_DBLK_UPS0                           (volatile uint32_t *)0xfe32d46c
#define P_HEVC_DBLK_UPS0_DBE1                      (volatile uint32_t *)0xfe32e86c
#define P_HEVC_DBLK_UPS1                           (volatile uint32_t *)0xfe32d470
#define P_HEVC_DBLK_UPS1_DBE1                      (volatile uint32_t *)0xfe32e870
#define P_HEVC_DBLK_UPS2                           (volatile uint32_t *)0xfe32d474
#define P_HEVC_DBLK_UPS2_DBE1                      (volatile uint32_t *)0xfe32e874
#define P_HEVC_DBLK_UPS3                           (volatile uint32_t *)0xfe32d478
#define P_HEVC_DBLK_UPS3_DBE1                      (volatile uint32_t *)0xfe32e878
#define P_HEVC_DBLK_UPS4                           (volatile uint32_t *)0xfe32d47c
#define P_HEVC_DBLK_UPS4_DBE1                      (volatile uint32_t *)0xfe32e87c
#define P_HEVC_DBLK_UPS5                           (volatile uint32_t *)0xfe32d480
#define P_HEVC_DBLK_UPS5_DBE1                      (volatile uint32_t *)0xfe32e880
//cfgs for av1 lrf
//lrf0[0] lrf_enable
//lrf0[4:1] lrf_unitsize
//lrf1[31:0] lrf_unitnum
#define P_HEVC_DBLK_LRF0                           (volatile uint32_t *)0xfe32d484
#define P_HEVC_DBLK_LRF0_DBE1                      (volatile uint32_t *)0xfe32e884
#define P_HEVC_DBLK_LRF1                           (volatile uint32_t *)0xfe32d488
#define P_HEVC_DBLK_LRF1_DBE1                      (volatile uint32_t *)0xfe32e888
//cfgs for av1 dblk
//dblk0[23:0] base_lvl
//dblk1[6:0] for mode_ref_lvl
//dblk2[31:0] for seg_lvl
#define P_HEVC_DBLK_DBLK0                          (volatile uint32_t *)0xfe32d48c
#define P_HEVC_DBLK_DBLK0_DBE1                     (volatile uint32_t *)0xfe32e88c
#define P_HEVC_DBLK_DBLK1                          (volatile uint32_t *)0xfe32d490
#define P_HEVC_DBLK_DBLK1_DBE1                     (volatile uint32_t *)0xfe32e890
#define P_HEVC_DBLK_DBLK2                          (volatile uint32_t *)0xfe32d494
#define P_HEVC_DBLK_DBLK2_DBE1                     (volatile uint32_t *)0xfe32e894
// cfgs for AXI ADDRESS PREFIX
#define P_HEVC_DBLK_PREFIX                         (volatile uint32_t *)0xfe32d498
#define P_HEVC_DBLK_PREFIX_DBE1                    (volatile uint32_t *)0xfe32e898
#define P_HEVC_DBLK_BUSYSEL                        (volatile uint32_t *)0xfe32d49c
#define P_HEVC_DBLK_BUSYSEL_DBE1                   (volatile uint32_t *)0xfe32e89c
#define P_HEVC_DBLK_SHADOWMODE_CNTL                (volatile uint32_t *)0xfe32d4a0
#define P_HEVC_DBLK_SHADOWMODE_CNTL_DBE1           (volatile uint32_t *)0xfe32e8a0
// [0]      -- shadow_mode_enbl
// [3:1]    -- reserved
// [4]      -- shadow_armed
// [31:5]   -- reserved
//
// registers need shadowed
//   HEVC_DBLK_CFG6
//   HEVC_DBLK_CFG7
//   HEVC_DBLK_CFG8
#define P_HEVC_DBLK_MCP                            (volatile uint32_t *)0xfe32d4a4
#define P_HEVC_DBLK_MCP_DBE1                       (volatile uint32_t *)0xfe32e8a4
#define P_HEVC_DBLK_SLICNT                         (volatile uint32_t *)0xfe32d4a8
#define P_HEVC_DBLK_SLICNT_DBE1                    (volatile uint32_t *)0xfe32e8a8
#define P_HEVC_DBLK_INTRPT                         (volatile uint32_t *)0xfe32d4ac
#define P_HEVC_DBLK_INTRPT_DBE1                    (volatile uint32_t *)0xfe32e8ac
#define P_HEVC_DBLK_LMCS_DELTA_CW_INDEX            (volatile uint32_t *)0xfe32d4b0
#define P_HEVC_DBLK_LMCS_DELTA_CW_INDEX_DBE1       (volatile uint32_t *)0xfe32e8b0
// [4:0]    -- cfg_lmcs_delta_cw_index
#define P_HEVC_DBLK_LMCS_DELTA_CW_DATA             (volatile uint32_t *)0xfe32d4b4
#define P_HEVC_DBLK_LMCS_DELTA_CW_DATA_DBE1        (volatile uint32_t *)0xfe32e8b4
// [15:0]   -- cfg_lmcs_delta_cw[cfg_lmcs_delta_cw_index]
#define P_HEVC_DBLK_LMCS_DELTA_CTRL                (volatile uint32_t *)0xfe32d4b8
#define P_HEVC_DBLK_LMCS_DELTA_CTRL_DBE1           (volatile uint32_t *)0xfe32e8b8
// [03:00]  -- resv
// [07:04]  -- cfg_lmcs_min_idx(0)
// [11:08]  -- cfg_lmcs_max_idx(0)
// [15:12]  -- resv
// [16]  -- lmi_bypass(0)
// [17]  -- lmi_on(0)
// [30:18]  -- resv
// [31]  -- lmi_cfg_start WO (write only,write "1" to generate one pulse start signal)
#define P_HEVC_DBLK_SAO0                           (volatile uint32_t *)0xfe32d500
#define P_HEVC_DBLK_SAO0_DBE1                      (volatile uint32_t *)0xfe32e900
#define P_HEVC_DBLK_SAO1                           (volatile uint32_t *)0xfe32d504
#define P_HEVC_DBLK_SAO1_DBE1                      (volatile uint32_t *)0xfe32e904
#define P_HEVC_DBLK_SAO2                           (volatile uint32_t *)0xfe32d508
#define P_HEVC_DBLK_SAO2_DBE1                      (volatile uint32_t *)0xfe32e908
#define P_HEVC_DBLK_SAO3                           (volatile uint32_t *)0xfe32d50c
#define P_HEVC_DBLK_SAO3_DBE1                      (volatile uint32_t *)0xfe32e90c
#define P_HEVC_DBLK_ALF0                           (volatile uint32_t *)0xfe32d510
#define P_HEVC_DBLK_ALF0_DBE1                      (volatile uint32_t *)0xfe32e910
#define P_HEVC_DBLK_ALF1                           (volatile uint32_t *)0xfe32d514
#define P_HEVC_DBLK_ALF1_DBE1                      (volatile uint32_t *)0xfe32e914
#define P_HEVC_DBLK_ALF2                           (volatile uint32_t *)0xfe32d518
#define P_HEVC_DBLK_ALF2_DBE1                      (volatile uint32_t *)0xfe32e918
#define P_HEVC_DBLK_ALF3                           (volatile uint32_t *)0xfe32d51c
#define P_HEVC_DBLK_ALF3_DBE1                      (volatile uint32_t *)0xfe32e91c
// VirtualBoundaryVertical [31:16]ver0 [15:0]ver_number
#define P_HEVC_DBLK_VBVER                          (volatile uint32_t *)0xfe32d520
#define P_HEVC_DBLK_VBVER_DBE1                     (volatile uint32_t *)0xfe32e920
// VirtualBoundaryVertical [31:16]ver2 [15:0]ver1
#define P_HEVC_DBLK_VBVER1                         (volatile uint32_t *)0xfe32d524
#define P_HEVC_DBLK_VBVER1_DBE1                    (volatile uint32_t *)0xfe32e924
// VirtualboundaryHorizontal [31:16]hor0 [15:0]hor_number
#define P_HEVC_DBLK_VBHOR                          (volatile uint32_t *)0xfe32d528
#define P_HEVC_DBLK_VBHOR_DBE1                     (volatile uint32_t *)0xfe32e928
// VirtualboundaryHorizontal [31:16]hor2 [15:0]hor1
#define P_HEVC_DBLK_VBHOR1                         (volatile uint32_t *)0xfe32d52c
#define P_HEVC_DBLK_VBHOR1_DBE1                    (volatile uint32_t *)0xfe32e92c
// SUBPIC [15:0]:subPic index, [16]:lpf_across_subpic_enabled,
#define P_HEVC_DBLK_SUBPIC                         (volatile uint32_t *)0xfe32d530
#define P_HEVC_DBLK_SUBPIC_DBE1                    (volatile uint32_t *)0xfe32e930
// EOT [31]:eot_flag [25:16]:eot_ctuy [9:0]:eot_ctux (for OW only)
#define P_HEVC_DBLK_EOT                            (volatile uint32_t *)0xfe32d534
#define P_HEVC_DBLK_EOT_DBE1                       (volatile uint32_t *)0xfe32e934
//
// Closing file:  hevc_dblk_regs.h
//
//------------------------------------------------------------------------------
// HEVC_SAO module level register offset
//------------------------------------------------------------------------------
//
// Reading file:  hevc_sao_regs.h
//
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_SAO_CBUS_BASE = 0x06
// -----------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_SAO_CBUS_BASE_DBE1 = 0x0b
// -----------------------------------------------
#define P_HEVC_SAO_VERSION                         (volatile uint32_t *)0xfe32d800
#define P_HEVC_SAO_VERSION_DBE1                    (volatile uint32_t *)0xfe32ec00
//  [31:0]  reversion               default:32'h00020001
#define P_HEVC_SAO_CTRL0                           (volatile uint32_t *)0xfe32d804
#define P_HEVC_SAO_CTRL0_DBE1                      (volatile uint32_t *)0xfe32ec04
//  [3:0]   lcu_size_log2
//  [27:4]  reserved
//  [28]    vp9_mode:0=not vp9 mode,1=vp9 mode(default:0)
//  [31:29] reserved
#define P_HEVC_SAO_CTRL1                           (volatile uint32_t *)0xfe32d808
#define P_HEVC_SAO_CTRL1_DBE1                      (volatile uint32_t *)0xfe32ec08
//  [31:24] ar_fifo1_axi_thred
//  [23:16] ar_fifo0_axi_thred
//  [15:14] axi_linealign, 0-16bytes, 1-32bytes, 2-64bytes (default=1)
//  [13:12] axi_aformat, 0-Linear, 1-32x32, 2-64x32
//  [11:08] axi_lendian_C
//  [07:04] axi_lendian_Y
//  [3]     reserved
//  [2]     clk_forceon
//  [1]     dw_disable:disable double write output
//  [0]     cm_disable:disable compress output
#define P_HEVC_SAO_INT_EN                          (volatile uint32_t *)0xfe32d80c
#define P_HEVC_SAO_INT_EN_DBE1                     (volatile uint32_t *)0xfe32ec0c
//  [0]     sao_int_enable
//  [1]     sao_int_amrisc_level
//  [2]     sao_int_cpu_level
//  [3]     slice_done_int_amrisc_enable
//  [4]     slice_done_int_cpu_enable
//  [15]    disable_sao_int_clock_gating
//  [22]    OW Picture Done: 1=OW picture is done, 0=picture is not done, default:0
//  [26]    shadow_armed
//  [27]    shadow_mode_enbl
//  [28]    OW_TO_LPF_READY:0=not ready,1=ready
//  [29]    LPF_TO_OW_VALID:0=not valid,1=valid
//  [30]    LPF_IS_DONE:0=LPF is ON/BUSY,1=LPF/DBLK is DONE/OFF
//  [31]    OW_IS_ON:1=OW is ON/BUSY,0=OW is DONW/OFF
//  Other bits are reserved and RO
#define P_HEVC_SAO_INT_STATUS                      (volatile uint32_t *)0xfe32d810
#define P_HEVC_SAO_INT_STATUS_DBE1                 (volatile uint32_t *)0xfe32ec10
//  [0]     slice_done IRQ
//  [31]    write "1"=slice start(self clear,read always return "0")
#define P_HEVC_SAO_PIC_SIZE                        (volatile uint32_t *)0xfe32d814
#define P_HEVC_SAO_PIC_SIZE_DBE1                   (volatile uint32_t *)0xfe32ec14
//  [15:0]  pic_width[15:0]
//  [31:16] pic_height[15:0]
#define P_HEVC_SAO_PIC_SIZE_LCU                    (volatile uint32_t *)0xfe32d818
#define P_HEVC_SAO_PIC_SIZE_LCU_DBE1               (volatile uint32_t *)0xfe32ec18
//  [15:0]  lcu_x_num_1[15:0]   (=lcu_x_total-1)
//  [31:16] lcu_y_num_1[15:0]   (=lcu_y_total-1)
#define P_HEVC_SAO_TILE_START                      (volatile uint32_t *)0xfe32d81c
#define P_HEVC_SAO_TILE_START_DBE1                 (volatile uint32_t *)0xfe32ec1c
//  [15:0]  tile_start_lcu_x[15:0]
//  [31:16] tile_start_lcu_y[15:0]
#define P_HEVC_SAO_TILE_SIZE_LCU                   (volatile uint32_t *)0xfe32d820
#define P_HEVC_SAO_TILE_SIZE_LCU_DBE1              (volatile uint32_t *)0xfe32ec20
//  [15:0]  tile_width_lcu[15:0]
//  [31:16] tile_height_lcu[15:0]
#define P_HEVC_SAO_AXI_WCTRL                       (volatile uint32_t *)0xfe32d824
#define P_HEVC_SAO_AXI_WCTRL_DBE1                  (volatile uint32_t *)0xfe32ec24
#define P_HEVC_SAO_AXI_RCTRL                       (volatile uint32_t *)0xfe32d828
#define P_HEVC_SAO_AXI_RCTRL_DBE1                  (volatile uint32_t *)0xfe32ec28
#define P_HEVC_SAO_Y_START_ADDR                    (volatile uint32_t *)0xfe32d82c
#define P_HEVC_SAO_Y_START_ADDR_DBE1               (volatile uint32_t *)0xfe32ec2c
#define P_HEVC_SAO_Y_LENGTH                        (volatile uint32_t *)0xfe32d830
#define P_HEVC_SAO_Y_LENGTH_DBE1                   (volatile uint32_t *)0xfe32ec30
#define P_HEVC_SAO_C_START_ADDR                    (volatile uint32_t *)0xfe32d834
#define P_HEVC_SAO_C_START_ADDR_DBE1               (volatile uint32_t *)0xfe32ec34
#define P_HEVC_SAO_C_LENGTH                        (volatile uint32_t *)0xfe32d838
#define P_HEVC_SAO_C_LENGTH_DBE1                   (volatile uint32_t *)0xfe32ec38
#define P_HEVC_SAO_Y_WPTR                          (volatile uint32_t *)0xfe32d83c
#define P_HEVC_SAO_Y_WPTR_DBE1                     (volatile uint32_t *)0xfe32ec3c
#define P_HEVC_SAO_C_WPTR                          (volatile uint32_t *)0xfe32d840
#define P_HEVC_SAO_C_WPTR_DBE1                     (volatile uint32_t *)0xfe32ec40
#define P_HEVC_SAO_ABV_START_ADDR                  (volatile uint32_t *)0xfe32d844
#define P_HEVC_SAO_ABV_START_ADDR_DBE1             (volatile uint32_t *)0xfe32ec44
#define P_HEVC_SAO_VB_WR_START_ADDR                (volatile uint32_t *)0xfe32d848
#define P_HEVC_SAO_VB_WR_START_ADDR_DBE1           (volatile uint32_t *)0xfe32ec48
#define P_HEVC_SAO_VB_RD_START_ADDR                (volatile uint32_t *)0xfe32d84c
#define P_HEVC_SAO_VB_RD_START_ADDR_DBE1           (volatile uint32_t *)0xfe32ec4c
#define P_HEVC_SAO_ABV_WPTR                        (volatile uint32_t *)0xfe32d850
#define P_HEVC_SAO_ABV_WPTR_DBE1                   (volatile uint32_t *)0xfe32ec50
#define P_HEVC_SAO_ABV_RPTR                        (volatile uint32_t *)0xfe32d854
#define P_HEVC_SAO_ABV_RPTR_DBE1                   (volatile uint32_t *)0xfe32ec54
#define P_HEVC_SAO_VB_WPTR                         (volatile uint32_t *)0xfe32d858
#define P_HEVC_SAO_VB_WPTR_DBE1                    (volatile uint32_t *)0xfe32ec58
#define P_HEVC_SAO_VB_RPTR                         (volatile uint32_t *)0xfe32d85c
#define P_HEVC_SAO_VB_RPTR_DBE1                    (volatile uint32_t *)0xfe32ec5c
#define P_HEVC_SAO_DBG_MODE0                       (volatile uint32_t *)0xfe32d878
#define P_HEVC_SAO_DBG_MODE0_DBE1                  (volatile uint32_t *)0xfe32ec78
#define P_HEVC_SAO_DBG_MODE1                       (volatile uint32_t *)0xfe32d87c
#define P_HEVC_SAO_DBG_MODE1_DBE1                  (volatile uint32_t *)0xfe32ec7c
#define P_HEVC_SAO_CTRL2                           (volatile uint32_t *)0xfe32d880
#define P_HEVC_SAO_CTRL2_DBE1                      (volatile uint32_t *)0xfe32ec80
//[[23:16]=aw_fifo2_axi_thred[7:0],default:0x20
#define P_HEVC_SAO_CTRL3                           (volatile uint32_t *)0xfe32d884
#define P_HEVC_SAO_CTRL3_DBE1                      (volatile uint32_t *)0xfe32ec84
//[0]  VVC MODE 0=not VVC mode,1=VVC mode (default:0)
//[1]  Double write P010 MODE 0=not P010 mode 1=P010 mode (default:0)
//[2]  Triple write mode,0=off,1=triple write on,(default:0)
//[3]  Triple write P010 MODE 0=not P010 mode 1=P010 mode (default:0)
//[31:4] reserved
#define P_HEVC_SAO_CTRL4                           (volatile uint32_t *)0xfe32d888
#define P_HEVC_SAO_CTRL4_DBE1                      (volatile uint32_t *)0xfe32ec88
//pic_height_ext_r,pic_width_ext_r
#define P_HEVC_SAO_CTRL5                           (volatile uint32_t *)0xfe32d88c
#define P_HEVC_SAO_CTRL5_DBE1                      (volatile uint32_t *)0xfe32ec8c
//[23:22]  dw_v1_ctrl   default:2'b11
//[21:20]  dw_v0_ctrl   default:2'b11
//[19:18]  dw_h1_ctrl   default:2'b11
//[17:16]  dw_h0_ctrl   default:2'b11
//[14]    av1_mode:0=not av1 mode,1=av1 mode(default:0)
//[13]    avs2/avs3_mode:0=not avs2/avs3 mode,1=avs2/avs3 mode(default:0)
//[7]  blk_unc_force   0=NOT force-uncompress 1=force-uncompress default:0
//[01:00]  SYS USE FOR TEMP REGISTERS(FGS)
#define P_HEVC_SAO_CTRL6                           (volatile uint32_t *)0xfe32d890
#define P_HEVC_SAO_CTRL6_DBE1                      (volatile uint32_t *)0xfe32ec90
//pad_v_cbus[9:0]
//pad_u_cbus[9:0]
//pad_y_cbus[9:0]
#define P_HEVC_SAO_CTRL7                           (volatile uint32_t *)0xfe32d894
#define P_HEVC_SAO_CTRL7_DBE1                      (volatile uint32_t *)0xfe32ec94
//ar_fifo5_axi_thred
//aw_fifo5_axi_thred
//aw_fifo4_axi_thred
//aw_fifo3_axi_thred
#define P_HEVC_CM_BODY_START_ADDR                  (volatile uint32_t *)0xfe32d898
#define P_HEVC_CM_BODY_START_ADDR_DBE1             (volatile uint32_t *)0xfe32ec98
#define P_HEVC_CM_BODY_LENGTH                      (volatile uint32_t *)0xfe32d89c
#define P_HEVC_CM_BODY_LENGTH_DBE1                 (volatile uint32_t *)0xfe32ec9c
#define P_HEVC_CM_HEADER_START_ADDR                (volatile uint32_t *)0xfe32d8a0
#define P_HEVC_CM_HEADER_START_ADDR_DBE1           (volatile uint32_t *)0xfe32eca0
#define P_HEVC_CM_HEADER_LENGTH                    (volatile uint32_t *)0xfe32d8a4
#define P_HEVC_CM_HEADER_LENGTH_DBE1               (volatile uint32_t *)0xfe32eca4
#define P_HEVC_CM_COLOR                            (volatile uint32_t *)0xfe32d8a8
#define P_HEVC_CM_COLOR_DBE1                       (volatile uint32_t *)0xfe32eca8
//cm_color_v_cfg_cbus
//cm_color_u_cfg_cbus
//cm_color_y_cfg_cbus
#define P_HEVC_CM_HEADER_OFFSET                    (volatile uint32_t *)0xfe32d8ac
#define P_HEVC_CM_HEADER_OFFSET_DBE1               (volatile uint32_t *)0xfe32ecac
#define P_HEVC_SAO_CTRL8                           (volatile uint32_t *)0xfe32d8b0
#define P_HEVC_SAO_CTRL8_DBE1                      (volatile uint32_t *)0xfe32ecb0
//axi_idle_thred=sao_ctrl8[15:0]
#define P_HEVC_SAO_CTRL9                           (volatile uint32_t *)0xfe32d8b4
#define P_HEVC_SAO_CTRL9_DBE1                      (volatile uint32_t *)0xfe32ecb4
//[10] dw_output_sel:0=nv21,1=compress,default=0
//[11] fgs_bypass:0=bypass,1=not bypass,default=0
//[16] fgs_table_disable:0=enable 1=disable,default=0
//[17] fgs_dma_disable:0=enable 1=disable,default=0
//[18] fgs_core_disable:0=enable 1=disable,default=0
//[23:20] fgs_dma_axi_lendian
#define P_HEVC_SAO_CTRL10                          (volatile uint32_t *)0xfe32d8b8
#define P_HEVC_SAO_CTRL10_DBE1                     (volatile uint32_t *)0xfe32ecb8
#define P_HEVC_SAO_CTRL11                          (volatile uint32_t *)0xfe32d8bc
#define P_HEVC_SAO_CTRL11_DBE1                     (volatile uint32_t *)0xfe32ecbc
#define P_HEVC_SAO_DBG_DATA_0                      (volatile uint32_t *)0xfe32d8c0
#define P_HEVC_SAO_DBG_DATA_0_DBE1                 (volatile uint32_t *)0xfe32ecc0
#define P_HEVC_SAO_DBG_DATA_1                      (volatile uint32_t *)0xfe32d8c4
#define P_HEVC_SAO_DBG_DATA_1_DBE1                 (volatile uint32_t *)0xfe32ecc4
#define P_HEVC_SAO_DBG_DATA_2                      (volatile uint32_t *)0xfe32d8c8
#define P_HEVC_SAO_DBG_DATA_2_DBE1                 (volatile uint32_t *)0xfe32ecc8
#define P_HEVC_SAO_DBG_DATA_3                      (volatile uint32_t *)0xfe32d8cc
#define P_HEVC_SAO_DBG_DATA_3_DBE1                 (volatile uint32_t *)0xfe32eccc
#define P_HEVC_SAO_DBG_DATA_4                      (volatile uint32_t *)0xfe32d8d0
#define P_HEVC_SAO_DBG_DATA_4_DBE1                 (volatile uint32_t *)0xfe32ecd0
#define P_HEVC_SAO_DBG_DATA_5                      (volatile uint32_t *)0xfe32d8d4
#define P_HEVC_SAO_DBG_DATA_5_DBE1                 (volatile uint32_t *)0xfe32ecd4
#define P_HEVC_SAO_DBG_DATA_6                      (volatile uint32_t *)0xfe32d8d8
#define P_HEVC_SAO_DBG_DATA_6_DBE1                 (volatile uint32_t *)0xfe32ecd8
#define P_HEVC_SAO_DBG_DATA_7                      (volatile uint32_t *)0xfe32d8dc
#define P_HEVC_SAO_DBG_DATA_7_DBE1                 (volatile uint32_t *)0xfe32ecdc
#define P_HEVC_SAO_MMU_WR                          (volatile uint32_t *)0xfe32d8e0
#define P_HEVC_SAO_MMU_WR_DBE1                     (volatile uint32_t *)0xfe32ece0
//RO:mmu_cm_body_ddr_addr
#define P_HEVC_SAO_MMU_STATUS                      (volatile uint32_t *)0xfe32d8e4
#define P_HEVC_SAO_MMU_STATUS_DBE1                 (volatile uint32_t *)0xfe32ece4
//Read Only
//[31:16]   mmu_cmd_rd_cnt[15:0]
//[15:0]    reserved0[15:0]
#define P_HEVC_SAO_MMU_VH0_ADDR                    (volatile uint32_t *)0xfe32d8e8
#define P_HEVC_SAO_MMU_VH0_ADDR_DBE1               (volatile uint32_t *)0xfe32ece8
#define P_HEVC_SAO_MMU_VH1_ADDR                    (volatile uint32_t *)0xfe32d8ec
#define P_HEVC_SAO_MMU_VH1_ADDR_DBE1               (volatile uint32_t *)0xfe32ecec
#define P_HEVC_SAO_MMU_WPTR                        (volatile uint32_t *)0xfe32d8f0
#define P_HEVC_SAO_MMU_WPTR_DBE1                   (volatile uint32_t *)0xfe32ecf0
#define P_HEVC_SAO_MMU_RPTR                        (volatile uint32_t *)0xfe32d8f4
#define P_HEVC_SAO_MMU_RPTR_DBE1                   (volatile uint32_t *)0xfe32ecf4
#define P_HEVC_SAO_MMU_DMA_CTRL                    (volatile uint32_t *)0xfe32d8f8
#define P_HEVC_SAO_MMU_DMA_CTRL_DBE1               (volatile uint32_t *)0xfe32ecf8
//[31:6] mmu_dma_base_address
//[5:1]  reserved 0
//[0]    mmu_dma_enable
#define P_HEVC_SAO_MMU_DMA_STATUS                  (volatile uint32_t *)0xfe32d8fc
#define P_HEVC_SAO_MMU_DMA_STATUS_DBE1             (volatile uint32_t *)0xfe32ecfc
//[31:1] reserved0
//[0]    dma_idle
#define P_HEVC_CM_CORE_STATUS                      (volatile uint32_t *)0xfe32d900
#define P_HEVC_CM_CORE_STATUS_DBE1                 (volatile uint32_t *)0xfe32ed00
//[0]    tile_busy
//[30:1] reserved 0
//[31]   mmu_4kbuffer_empty
#define P_HEVC_SAO_MMU_RESET_CTRL                  (volatile uint32_t *)0xfe32d904
#define P_HEVC_SAO_MMU_RESET_CTRL_DBE1             (volatile uint32_t *)0xfe32ed04
//[31:1] reserved 0
//[0]    sw_rst_mmu
#define P_HEVC_CM_LOSSY_QUANT_CTRL                 (volatile uint32_t *)0xfe32d908
#define P_HEVC_CM_LOSSY_QUANT_CTRL_DBE1            (volatile uint32_t *)0xfe32ed08
//[0]    lossy_quant_enable
//[3:1]  reserved 0
//[7:4]  luma_bcleav_offset
//[11:8] chroma_bcleav_offset
//[31:12] reserved 0
#define P_HEVC_CM_LOSSY_RQUANT_YCLUT_ACCCONFIG     (volatile uint32_t *)0xfe32d90c
#define P_HEVC_CM_LOSSY_RQUANT_YCLUT_ACCCONFIG_DBE1 (volatile uint32_t *)0xfe32ed0c
// ID to bctree quant lookup table 2x12
// [31:12]  reserved
// [11:8]   access_index
// [7:2]    reserved
// [1]      auto_inc_read
// [0]      auto_inc_write
#define P_HEVC_CM_LOSSY_RQUANT_YCLUT_DATA          (volatile uint32_t *)0xfe32d910
#define P_HEVC_CM_LOSSY_RQUANT_YCLUT_DATA_DBE1     (volatile uint32_t *)0xfe32ed10
// Id[3:0]  --> {chroma_rquant[3:0],luma_rquant[3:0]}
#define P_HEVC_CM_LOSSY_IQUANT_YCLUT_ACCCONFIG     (volatile uint32_t *)0xfe32d914
#define P_HEVC_CM_LOSSY_IQUANT_YCLUT_ACCCONFIG_DBE1 (volatile uint32_t *)0xfe32ed14
// ID to mintree quant lookup table 2x12
// [31:12]  reserved
// [11:8]   access_index
// [7:2]    reserved
// [1]      auto_inc_read
// [0]      auto_inc_write
#define P_HEVC_CM_LOSSY_IQUANT_YCLUT_DATA          (volatile uint32_t *)0xfe32d918
#define P_HEVC_CM_LOSSY_IQUANT_YCLUT_DATA_DBE1     (volatile uint32_t *)0xfe32ed18
// Id[3:0]  --> {chroma_iquant[3:0],luma_iquant[3:0]}
#define P_HEVC_CM_AV1_TILE_LOC_X                   (volatile uint32_t *)0xfe32d91c
#define P_HEVC_CM_AV1_TILE_LOC_X_DBE1              (volatile uint32_t *)0xfe32ed1c
// AV1 Tile info -- due to width superscaling in lpf
// [15:0]   tile_start_x
// [31:16]  tile_end_x
#define P_HEVC_CM_AV1_TILE_LOC_Y                   (volatile uint32_t *)0xfe32d920
#define P_HEVC_CM_AV1_TILE_LOC_Y_DBE1              (volatile uint32_t *)0xfe32ed20
// AV1 Tile info -- due to width superscaling in lpf
// [15:0]   tile_start_y
// [31:16]  tile_end_y
#define P_HEVC_CM_CORE_CTRL                        (volatile uint32_t *)0xfe32d924
#define P_HEVC_CM_CORE_CTRL_DBE1                   (volatile uint32_t *)0xfe32ed24
// [0]      cfg_av1_loopfilter_bypass (0)
// [3:1]    reserved
// [07:04]  axi_lendian_Y (0)
// [11:08]  axi_lendian_C (0)
// [31:12]   reserved
#define P_HEVC_CM_HEADER_START_ADDR2               (volatile uint32_t *)0xfe32d928
#define P_HEVC_CM_HEADER_START_ADDR2_DBE1          (volatile uint32_t *)0xfe32ed28
#define P_HEVC_SAO_MMU_WR2                         (volatile uint32_t *)0xfe32d92c
#define P_HEVC_SAO_MMU_WR2_DBE1                    (volatile uint32_t *)0xfe32ed2c
#define P_HEVC_SAO_MMU_DMA_CTRL2                   (volatile uint32_t *)0xfe32d930
#define P_HEVC_SAO_MMU_DMA_CTRL2_DBE1              (volatile uint32_t *)0xfe32ed30
//[31:6] mmu_dma_base_address2
//[5:1]  reserved 0
//[0]    mmu_dma_enable2
#define P_HEVC_SAO_MMU_VH0_ADDR2                   (volatile uint32_t *)0xfe32d934
#define P_HEVC_SAO_MMU_VH0_ADDR2_DBE1              (volatile uint32_t *)0xfe32ed34
#define P_HEVC_SAO_MMU_VH1_ADDR2                   (volatile uint32_t *)0xfe32d938
#define P_HEVC_SAO_MMU_VH1_ADDR2_DBE1              (volatile uint32_t *)0xfe32ed38
#define P_HEVC_CM_CORE_STATUS2                     (volatile uint32_t *)0xfe32d93c
#define P_HEVC_CM_CORE_STATUS2_DBE1                (volatile uint32_t *)0xfe32ed3c
//[0]    tile_busy
//[30:1] reserved 0
//[31]   mmu_4kbuffer_empty
//
#define P_HEVC_SAO_MMU_STATUS2                     (volatile uint32_t *)0xfe32d940
#define P_HEVC_SAO_MMU_STATUS2_DBE1                (volatile uint32_t *)0xfe32ed40
//Read Only
//[31:16]   mmu_cmd_rd_cnt2[15:0]
//[15:0]    reserved0[15:0]
//
#define P_HEVC_CM_LOSSY_QUANT_CTRL2                (volatile uint32_t *)0xfe32d948
#define P_HEVC_CM_LOSSY_QUANT_CTRL2_DBE1           (volatile uint32_t *)0xfe32ed48
//[0]    lossy_quant_enable
//[3:1]  reserved 0
//[7:4]  luma_bcleav_offset
//[11:8] chroma_bcleav_offset
//[31:12] reserved 0
#define P_HEVC_CM_LOSSY_RQUANT_YCLUT_ACCCONFIG2    (volatile uint32_t *)0xfe32d94c
#define P_HEVC_CM_LOSSY_RQUANT_YCLUT_ACCCONFIG2_DBE1 (volatile uint32_t *)0xfe32ed4c
// ID to bctree quant lookup table 2x12
// [31:12]  reserved
// [11:8]   access_index
// [7:2]    reserved
// [1]      auto_inc_read
// [0]      auto_inc_write
#define P_HEVC_CM_LOSSY_RQUANT_YCLUT_DATA2         (volatile uint32_t *)0xfe32d950
#define P_HEVC_CM_LOSSY_RQUANT_YCLUT_DATA2_DBE1    (volatile uint32_t *)0xfe32ed50
// Id[3:0]  --> {chroma_rquant[3:0],luma_rquant[3:0]}
#define P_HEVC_CM_LOSSY_IQUANT_YCLUT_ACCCONFIG2    (volatile uint32_t *)0xfe32d954
#define P_HEVC_CM_LOSSY_IQUANT_YCLUT_ACCCONFIG2_DBE1 (volatile uint32_t *)0xfe32ed54
// ID to mintree quant lookup table 2x12
// [31:12]  reserved
// [11:8]   access_index
// [7:2]    reserved
// [1]      auto_inc_read
// [0]      auto_inc_write
#define P_HEVC_CM_LOSSY_IQUANT_YCLUT_DATA2         (volatile uint32_t *)0xfe32d958
#define P_HEVC_CM_LOSSY_IQUANT_YCLUT_DATA2_DBE1    (volatile uint32_t *)0xfe32ed58
// Id[3:0]  --> {chroma_iquant[3:0],luma_iquant[3:0]}
#define P_HEVC_CM_AV1_TILE_LOC_X2                  (volatile uint32_t *)0xfe32d95c
#define P_HEVC_CM_AV1_TILE_LOC_X2_DBE1             (volatile uint32_t *)0xfe32ed5c
// AV1 Tile info -- due to width superscaling in lpf
// [15:0]   tile_start_x
// [31:16]  tile_end_x
#define P_HEVC_CM_AV1_TILE_LOC_Y2                  (volatile uint32_t *)0xfe32d960
#define P_HEVC_CM_AV1_TILE_LOC_Y2_DBE1             (volatile uint32_t *)0xfe32ed60
// AV1 Tile info -- due to width superscaling in lpf
// [15:0]   tile_start_y
// [31:16]  tile_end_y
#define P_HEVC_CM_CORE_CTRL2                       (volatile uint32_t *)0xfe32d964
#define P_HEVC_CM_CORE_CTRL2_DBE1                  (volatile uint32_t *)0xfe32ed64
// [0]      cfg_av1_loopfilter_bypass (0)
// [3:1]    reserved
// [07:04]  axi_lendian_Y (0)
// [11:08]  axi_lendian_C (0)
// [31:12]   reserved
#define P_HEVC_CM_BODY_START_ADDR2                 (volatile uint32_t *)0xfe32d968
#define P_HEVC_CM_BODY_START_ADDR2_DBE1            (volatile uint32_t *)0xfe32ed68
#define P_HEVC_FORCE_YUV_CTRL                      (volatile uint32_t *)0xfe32d96c
#define P_HEVC_FORCE_YUV_CTRL_DBE1                 (volatile uint32_t *)0xfe32ed6c
//[0]	CM force Y: 0=off,1=on,default=0
//[1]	CM force U: 0=off,1=on,default=0
//[2]	CM force V: 0=off,1=on,default=0
//[4]	DW force Y: 0=off,1=on,default=0
//[5]	DW force U: 0=off,1=on,default=0
//[6]	DW force V: 0=off,1=on,default=0
#define P_HEVC_FORCE_YUV_0                         (volatile uint32_t *)0xfe32d970
#define P_HEVC_FORCE_YUV_0_DBE1                    (volatile uint32_t *)0xfe32ed70
//[9:0]	CM force Y value:default=10'h010
//[19:10]	CM force U value:default=10'h080
//[29:20]	CM force V value:default=10'h080
#define P_HEVC_FORCE_YUV_1                         (volatile uint32_t *)0xfe32d974
#define P_HEVC_FORCE_YUV_1_DBE1                    (volatile uint32_t *)0xfe32ed74
//[9:0]	DW force Y value:default=10'h010
//[19:10]	DW force U value:default=10'h080
//[29:20]	DW force V value:default=10'h080
#define P_HEVC_DW_VH0_ADDDR                        (volatile uint32_t *)0xfe32d978
#define P_HEVC_DW_VH0_ADDDR_DBE1                   (volatile uint32_t *)0xfe32ed78
#define P_HEVC_DW_VH1_ADDDR                        (volatile uint32_t *)0xfe32d97c
#define P_HEVC_DW_VH1_ADDDR_DBE1                   (volatile uint32_t *)0xfe32ed7c
#define P_HEVC_FGS_IDX                             (volatile uint32_t *)0xfe32d980
#define P_HEVC_FGS_IDX_DBE1                        (volatile uint32_t *)0xfe32ed80
// [5:0]  :  fgs_idx
// fbs_idx :
// 0 --
//       bit[30]   - bit_depth_10
//       bit[29]   - mc_identity
//       bit[28]   - num_pos_chroma_one_more
//       bit[27:24] - ar_coeff_shift
//       bit[23:20] - scaling_shift
//       bit[19]   - overlap_flag
//       bit[18]   - clip_to_restricted_range
//       bit[17]   - chroma_scaling_from_luma
// 1 --
//       bit[31:30] - grain_scale_shift
//       bit[29:28] - ar_coeff_lag
//       bit[27:20] - ar_coeffs_cr[24]
//       bit[19:12] - ar_coeffs_cb[24]
//       bit[11:8]  - num_cr_points
//       bit[7:4]   - num_cb_points
//       bit[3:0]   - num_y_points
// 2-8   -- scaling_points_y[14][2]
// 9-13  -- scaling_points_cb[10][2]
// 14-18 -- scaling_points_cr[10][2]
// 19-24 -- ar_coeffs_y[0-23]
// 25-30 -- ar_coeffs_cb[0-23]
// 31-36 -- ar_coeffs_cr[0-23]
// 37 --
//       bit[31:24]  - cb_mult
//       bit[23:16]  - cb_luma_mult
//       bit[15:7]   - cb_offset
// 38 --
//       bit[31:24]  - cr_mult
//       bit[23:16]  - cr_luma_mult
//       bit[15:7]   - cr_offset
#define P_HEVC_FGS_DATA                            (volatile uint32_t *)0xfe32d984
#define P_HEVC_FGS_DATA_DBE1                       (volatile uint32_t *)0xfe32ed84
#define P_HEVC_FGS_CTRL                            (volatile uint32_t *)0xfe32d988
#define P_HEVC_FGS_CTRL_DBE1                       (volatile uint32_t *)0xfe32ed88
//       bit[31:16] - random_seed
//       bit[06]   - apply_cr (RO) //assign  apply_cr        =num_cr_points>0 | chroma_scaling_from_luma;
//       bit[05]   - apply_cb (RO) //assign  apply_cb        =num_cb_points>0 | chroma_scaling_from_luma;
//       bit[04]   - apply_lu (RO) //assign  apply_lu        =num_y_points>0;
//       bit[03]   - fgs_not_bypass : 0=fgs bypass 1:=fgs not bypass (default=0)
//       bit[02]   - update_parameters
//       bit[01]   - apply_grain
//       bit[00]   - film gran start
#define P_HEVC_CM_BODY_LENGTH2                     (volatile uint32_t *)0xfe32d98c
#define P_HEVC_CM_BODY_LENGTH2_DBE1                (volatile uint32_t *)0xfe32ed8c
#define P_HEVC_CM_HEADER_OFFSET2                   (volatile uint32_t *)0xfe32d990
#define P_HEVC_CM_HEADER_OFFSET2_DBE1              (volatile uint32_t *)0xfe32ed90
#define P_HEVC_CM_HEADER_LENGTH2                   (volatile uint32_t *)0xfe32d994
#define P_HEVC_CM_HEADER_LENGTH2_DBE1              (volatile uint32_t *)0xfe32ed94
#define P_HEVC_FGS_TABLE_START                     (volatile uint32_t *)0xfe32d998
#define P_HEVC_FGS_TABLE_START_DBE1                (volatile uint32_t *)0xfe32ed98
#define P_HEVC_FGS_TABLE_LENGTH                    (volatile uint32_t *)0xfe32d99c
#define P_HEVC_FGS_TABLE_LENGTH_DBE1               (volatile uint32_t *)0xfe32ed9c
#define P_HEVC_OW_FRAME_CNT                        (volatile uint32_t *)0xfe32d9a0
#define P_HEVC_OW_FRAME_CNT_DBE1                   (volatile uint32_t *)0xfe32eda0
#define P_HEVC_SAO_CTRL12                          (volatile uint32_t *)0xfe32d9a4
#define P_HEVC_SAO_CTRL12_DBE1                     (volatile uint32_t *)0xfe32eda4
//	[10]	AV1 DW_NV21 DW_PIC_WIDTH_SEL,0=pic_width,1=pic_width_clip,default=0
//	[11]	AV1 DW_NV21 DW_PIC_HEIGHT_SEL,0=pic_height,1=pic_height_clip,default=0
#define P_HEVC_SAO_CTRL13                          (volatile uint32_t *)0xfe32d9a8
#define P_HEVC_SAO_CTRL13_DBE1                     (volatile uint32_t *)0xfe32eda8
#define P_HEVC_SAO_CTRL14                          (volatile uint32_t *)0xfe32d9ac
#define P_HEVC_SAO_CTRL14_DBE1                     (volatile uint32_t *)0xfe32edac
#define P_HEVC_SAO_CTRL15                          (volatile uint32_t *)0xfe32d9b0
#define P_HEVC_SAO_CTRL15_DBE1                     (volatile uint32_t *)0xfe32edb0
#define P_HEVC_SAO_CTRL16                          (volatile uint32_t *)0xfe32d9b4
#define P_HEVC_SAO_CTRL16_DBE1                     (volatile uint32_t *)0xfe32edb4
#define P_HEVC_SAO_CTRL17                          (volatile uint32_t *)0xfe32d9b8
#define P_HEVC_SAO_CTRL17_DBE1                     (volatile uint32_t *)0xfe32edb8
#define P_HEVC_SAO_CTRL18                          (volatile uint32_t *)0xfe32d9bc
#define P_HEVC_SAO_CTRL18_DBE1                     (volatile uint32_t *)0xfe32edbc
#define P_HEVC_SAO_CTRL19                          (volatile uint32_t *)0xfe32d9c0
#define P_HEVC_SAO_CTRL19_DBE1                     (volatile uint32_t *)0xfe32edc0
#define P_HEVC_SAO_CTRL20                          (volatile uint32_t *)0xfe32d9c4
#define P_HEVC_SAO_CTRL20_DBE1                     (volatile uint32_t *)0xfe32edc4
#define P_HEVC_SAO_CTRL21                          (volatile uint32_t *)0xfe32d9c8
#define P_HEVC_SAO_CTRL21_DBE1                     (volatile uint32_t *)0xfe32edc8
#define P_HEVC_SAO_CTRL22                          (volatile uint32_t *)0xfe32d9cc
#define P_HEVC_SAO_CTRL22_DBE1                     (volatile uint32_t *)0xfe32edcc
#define P_HEVC_SAO_CTRL23                          (volatile uint32_t *)0xfe32d9d0
#define P_HEVC_SAO_CTRL23_DBE1                     (volatile uint32_t *)0xfe32edd0
#define P_HEVC_SAO_CTRL24                          (volatile uint32_t *)0xfe32d9d4
#define P_HEVC_SAO_CTRL24_DBE1                     (volatile uint32_t *)0xfe32edd4
#define P_HEVC_SAO_CTRL25                          (volatile uint32_t *)0xfe32d9d8
#define P_HEVC_SAO_CTRL25_DBE1                     (volatile uint32_t *)0xfe32edd8
#define P_HEVC_SAO_CTRL26                          (volatile uint32_t *)0xfe32d9dc
#define P_HEVC_SAO_CTRL26_DBE1                     (volatile uint32_t *)0xfe32eddc
//[03:02]  dw_v2_ctrl   default:2'b00
//[01:00]  dw_h2_ctrl   default:2'b00
#define P_HEVC_SAO_CTRL27                          (volatile uint32_t *)0xfe32d9e0
#define P_HEVC_SAO_CTRL27_DBE1                     (volatile uint32_t *)0xfe32ede0
#define P_HEVC_SAO_CTRL28                          (volatile uint32_t *)0xfe32d9e4
#define P_HEVC_SAO_CTRL28_DBE1                     (volatile uint32_t *)0xfe32ede4
//[31]AFBC_SEC_ENABLE 0=disable 1=enable default:0
//[30:16]AFBC_SEC_Y default:0
//[15:0]AFBC_SEC_X default:0
#define P_HEVC_SAO_CTRL29                          (volatile uint32_t *)0xfe32d9e8
#define P_HEVC_SAO_CTRL29_DBE1                     (volatile uint32_t *)0xfe32ede8
//[31]DW_SEC_ENABLE 0=disable 1=enable default:0
//[30:16]DW_SEC_Y default:0
//[15:0]DW_SEC_X default:0
#define P_HEVC_SAO_CTRL30                          (volatile uint32_t *)0xfe32d9ec
#define P_HEVC_SAO_CTRL30_DBE1                     (volatile uint32_t *)0xfe32edec
#define P_HEVC_SAO_CTRL31                          (volatile uint32_t *)0xfe32d9f0
#define P_HEVC_SAO_CTRL31_DBE1                     (volatile uint32_t *)0xfe32edf0
//[31:12]  reserved
//[11:10]  triple-write dw_v2_ctrl   default:2'b00
//[09:08]  triple-write dw_v1_ctrl   default:2'b11
//[07:06]  triple-write dw_v0_ctrl   default:2'b11
//[05:04]  triple-write dw_h2_ctrl   default:2'b00
//[03:02]  triple-write dw_h1_ctrl   default:2'b11
//[01:00]  triple-write dw_h0_ctrl   default:2'b11
#define P_HEVC_SAO_CTRL32                          (volatile uint32_t *)0xfe32d9f4
#define P_HEVC_SAO_CTRL32_DBE1                     (volatile uint32_t *)0xfe32edf4
//  [31:12] Reserved
//  [11:10] triple write axi_linealign, 0-16bytes, 1-32bytes, 2-64bytes (default=1)
//  [09:08] triple write axi_aformat, 0-Linear, 1-32x32, 2-64x32
//  [07:04] triple write axi_lendian_C
//  [03:00] triple write axi_lendian_Y
//`define HEVC_SAO_CTRL33           8'h7e
//`define HEVC_SAO_CTRL34           8'h7f
#define P_HEVC_OW_AXIADDR_PREFIX                   (volatile uint32_t *)0xfe32d9f8
#define P_HEVC_OW_AXIADDR_PREFIX_DBE1              (volatile uint32_t *)0xfe32edf8
//[01:00]nv21_addr_prefix
//[03:02]reserved
//[05:04]dw_vh_addr_prefix
//[07:06]reserved
//[09:08]fgs_table_start_addr_prefix
//[11:10]reserved
//[13:12]mmu_dma_baddr_prefix_0(AFBC)
//[15:14]reserved
//[17:16]vinfo_addr_prefix_0(AFBC)
//[19:18]reserved
//[21:20]header_addr_prefix_0(AFBC)
//[23:22]reserved
//[25:24]mmu_dma_baddr_prefix_1(DWCM)
//[27:26]reserved
//[29:28]vinfo_addr_prefix_1(DWCM)
//[31:30]reserved
#define P_HEVC_OW_AXIADDR_PREFIX2                  (volatile uint32_t *)0xfe32d9fc
#define P_HEVC_OW_AXIADDR_PREFIX2_DBE1             (volatile uint32_t *)0xfe32edfc
//[01:00]header_addr_prefix_1(DWCM)
//[03:02]reserved
#define P_HEVC_SAO_STATUS0                         (volatile uint32_t *)0xfe32da00
#define P_HEVC_SAO_STATUS0_DBE1                    (volatile uint32_t *)0xfe32ee00
#define P_HEVC_SAO_STATUS1                         (volatile uint32_t *)0xfe32da04
#define P_HEVC_SAO_STATUS1_DBE1                    (volatile uint32_t *)0xfe32ee04
#define P_HEVC_SAO_STATUS2                         (volatile uint32_t *)0xfe32da08
#define P_HEVC_SAO_STATUS2_DBE1                    (volatile uint32_t *)0xfe32ee08
#define P_HEVC_SAO_STATUS3                         (volatile uint32_t *)0xfe32da0c
#define P_HEVC_SAO_STATUS3_DBE1                    (volatile uint32_t *)0xfe32ee0c
#define P_HEVC_SAO_STATUS4                         (volatile uint32_t *)0xfe32da10
#define P_HEVC_SAO_STATUS4_DBE1                    (volatile uint32_t *)0xfe32ee10
#define P_HEVC_SAO_STATUS5                         (volatile uint32_t *)0xfe32da14
#define P_HEVC_SAO_STATUS5_DBE1                    (volatile uint32_t *)0xfe32ee14
#define P_HEVC_SAO_STATUS6                         (volatile uint32_t *)0xfe32da18
#define P_HEVC_SAO_STATUS6_DBE1                    (volatile uint32_t *)0xfe32ee18
#define P_HEVC_SAO_STATUS7                         (volatile uint32_t *)0xfe32da1c
#define P_HEVC_SAO_STATUS7_DBE1                    (volatile uint32_t *)0xfe32ee1c
//mmu_copy
#define P_COPY_REG_R0                              (volatile uint32_t *)0xfe32da20
#define P_COPY_REG_R0_DBE1                         (volatile uint32_t *)0xfe32ee20
#define P_COPY_REG_R1                              (volatile uint32_t *)0xfe32da24
#define P_COPY_REG_R1_DBE1                         (volatile uint32_t *)0xfe32ee24
#define P_COPY_SEL                                 (volatile uint32_t *)0xfe32da28
#define P_COPY_SEL_DBE1                            (volatile uint32_t *)0xfe32ee28
#define P_COPY_REG_R3                              (volatile uint32_t *)0xfe32da2c
#define P_COPY_REG_R3_DBE1                         (volatile uint32_t *)0xfe32ee2c
#define P_COPY_REG_R4                              (volatile uint32_t *)0xfe32da30
#define P_COPY_REG_R4_DBE1                         (volatile uint32_t *)0xfe32ee30
#define P_COPY_REG_R5                              (volatile uint32_t *)0xfe32da34
#define P_COPY_REG_R5_DBE1                         (volatile uint32_t *)0xfe32ee34
#define P_HEVC_SAO_SHADOWMODE_CNTL                 (volatile uint32_t *)0xfe32da38
#define P_HEVC_SAO_SHADOWMODE_CNTL_DBE1            (volatile uint32_t *)0xfe32ee38
// [0]      -- shadow_mode_enbl
// [3:1]    -- reserved
// [4]      -- shadow_armed
// [31:5]   -- reserved
//
// registers need shadowed
//   HEVC_SAO_TILE_START
//   HEVC_SAO_TILE_SIZE_LCU
#define P_HEVC_SAO_CRC                             (volatile uint32_t *)0xfe32da40
#define P_HEVC_SAO_CRC_DBE1                        (volatile uint32_t *)0xfe32ee40
//lpf to ow input data CRC
#define P_HEVC_SAO_CRC_Y                           (volatile uint32_t *)0xfe32da44
#define P_HEVC_SAO_CRC_Y_DBE1                      (volatile uint32_t *)0xfe32ee44
//lpf to ow input Y data CRC
#define P_HEVC_SAO_CRC_C                           (volatile uint32_t *)0xfe32da48
#define P_HEVC_SAO_CRC_C_DBE1                      (volatile uint32_t *)0xfe32ee48
//lpf to ow input C data CRC
#define P_HEVC_SAO_CRC_1                           (volatile uint32_t *)0xfe32da4c
#define P_HEVC_SAO_CRC_1_DBE1                      (volatile uint32_t *)0xfe32ee4c
//ow normal decoder loop afbc output CRC
#define P_HEVC_SAO_CRC_2                           (volatile uint32_t *)0xfe32da50
#define P_HEVC_SAO_CRC_2_DBE1                      (volatile uint32_t *)0xfe32ee50
//ow film grain output CRC
#define P_HEVC_SAO_CRC_3                           (volatile uint32_t *)0xfe32da54
#define P_HEVC_SAO_CRC_3_DBE1                      (volatile uint32_t *)0xfe32ee54
//ow double write no-compress(NV21) output CRC
#define P_HEVC_SAO_CRC_4                           (volatile uint32_t *)0xfe32da58
#define P_HEVC_SAO_CRC_4_DBE1                      (volatile uint32_t *)0xfe32ee58
//ow double write compress output CRC
#define P_HEVC_SAO_CRC_5                           (volatile uint32_t *)0xfe32da5c
#define P_HEVC_SAO_CRC_5_DBE1                      (volatile uint32_t *)0xfe32ee5c
//ow triple write no-compress(NV21) output CRC
#define P_HEVC_SAO_Y_START_ADDR3                   (volatile uint32_t *)0xfe32da60
#define P_HEVC_SAO_Y_START_ADDR3_DBE1              (volatile uint32_t *)0xfe32ee60
#define P_HEVC_SAO_Y_LENGTH3                       (volatile uint32_t *)0xfe32da64
#define P_HEVC_SAO_Y_LENGTH3_DBE1                  (volatile uint32_t *)0xfe32ee64
#define P_HEVC_SAO_C_START_ADDR3                   (volatile uint32_t *)0xfe32da68
#define P_HEVC_SAO_C_START_ADDR3_DBE1              (volatile uint32_t *)0xfe32ee68
#define P_HEVC_SAO_C_LENGTH3                       (volatile uint32_t *)0xfe32da6c
#define P_HEVC_SAO_C_LENGTH3_DBE1                  (volatile uint32_t *)0xfe32ee6c
#define P_HEVC_FORCE_YUV_2                         (volatile uint32_t *)0xfe32da70
#define P_HEVC_FORCE_YUV_2_DBE1                    (volatile uint32_t *)0xfe32ee70
//[9:0]	DW force Y value:default=10'h010
//[19:10]	DW force U value:default=10'h080
//[29:20]	DW force V value:default=10'h080
#define P_HEVC_SAO_AXI_CTRL                        (volatile uint32_t *)0xfe32da74
#define P_HEVC_SAO_AXI_CTRL_DBE1                   (volatile uint32_t *)0xfe32ee74
#define P_HEVC_SAO_Y2_START_ADDR                   (volatile uint32_t *)0xfe32da80
#define P_HEVC_SAO_Y2_START_ADDR_DBE1              (volatile uint32_t *)0xfe32ee80
#define P_HEVC_SAO_Y2_LENGTH                       (volatile uint32_t *)0xfe32da84
#define P_HEVC_SAO_Y2_LENGTH_DBE1                  (volatile uint32_t *)0xfe32ee84
#define P_HEVC_SAO_C2_START_ADDR                   (volatile uint32_t *)0xfe32da88
#define P_HEVC_SAO_C2_START_ADDR_DBE1              (volatile uint32_t *)0xfe32ee88
#define P_HEVC_SAO_C2_LENGTH                       (volatile uint32_t *)0xfe32da8c
#define P_HEVC_SAO_C2_LENGTH_DBE1                  (volatile uint32_t *)0xfe32ee8c
#define P_HEVC_SAO_TILE_IDX                        (volatile uint32_t *)0xfe32da90
#define P_HEVC_SAO_TILE_IDX_DBE1                   (volatile uint32_t *)0xfe32ee90
//[7:0]		TILE_IDX_X (H266/VVC only)
//[15:8]	TILE_IDX_y (H266/VVC only)
//[31:16]	reserved
//
// Closing file:  hevc_sao_regs.h
//
//------------------------------------------------------------------------------
// HEVC_IQIT module level register offset
//------------------------------------------------------------------------------
//
// Reading file:  hevc_iqit_regs.h
//
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_IQIT_CBUS_BASE = 0x07
// -----------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_IQIT_CBUS_BASE_DBE1 = 0x0c
// -----------------------------------------------
// [    2] RW en_freeclk.   0=Auto-gated clock for saving power;
//                          1=Free running clock if something wrong with auto-gating.
//                          Default 0.
// [    1] RW enable_clk.   0=Disable clock; 1=Enable clock.        Default 0.
#define P_HEVC_IQIT_CLK_RST_CTRL                   (volatile uint32_t *)0xfe32dc00
#define P_HEVC_IQIT_CLK_RST_CTRL_DBE1              (volatile uint32_t *)0xfe32f000
// [ 5: 4] RW ctb_size.     0=8x8; 1=16x16; 2=32x32; 3=64x64.                       Default 0.
// [    3] RW itr_skip_mode. For dealing with discrepancy between Spec and C model for transform_skip.
//                          0=Follow Spec; 1=Follow C model.                        Default 0.
// [    2] RW scalelist_mode. Applicable only when scalelist_en=1.
//                          0=Use default scaling factor list;
//                          1=Use scaling factor list define in bit stream.
//                          Default 0.
// [    1] RW scalelist_en. 0=Use flat scale; 1=Use scaling factor list.            Default 0.
// [    0] RW diagscan_en.  0=Linear lookup dQ table; 1=Diagonally lookup dQ table. Default 0.
#define P_HEVC_IQIT_DEQUANT_CTRL                   (volatile uint32_t *)0xfe32dc04
#define P_HEVC_IQIT_DEQUANT_CTRL_DBE1              (volatile uint32_t *)0xfe32f004
// [31:10] WR Reserved.                                 Default 0.
// [ 9: 0] WR scalelut_addr.                            Default 0.
#define P_HEVC_IQIT_SCALELUT_WR_ADDR               (volatile uint32_t *)0xfe32dc08
#define P_HEVC_IQIT_SCALELUT_WR_ADDR_DBE1          (volatile uint32_t *)0xfe32f008
// [31:10] RD Reserved.                                 Default 0.
// [ 9: 0] RD scalelut_addr.                            Default 0.
#define P_HEVC_IQIT_SCALELUT_RD_ADDR               (volatile uint32_t *)0xfe32dc0c
#define P_HEVC_IQIT_SCALELUT_RD_ADDR_DBE1          (volatile uint32_t *)0xfe32f00c
// [ 7: 0] RW LUT data.
#define P_HEVC_IQIT_SCALELUT_DATA                  (volatile uint32_t *)0xfe32dc10
#define P_HEVC_IQIT_SCALELUT_DATA_DBE1             (volatile uint32_t *)0xfe32f010
//---------------------------------------------------
// tab_idx [2:0] -
//    0-5 use custom table index
//    6 - reserved
//    7 - use default table
//---------------------------------------------------
// [22:20] 4x4 tab 5
// [   19] reserved
// [18:16] 4x4 tab 4
// [   15] reserved
// [14:12] 4x4 tab 3
// [   11] reserved
// [10: 8] 4x4 tab 2
// [    7] reserved
// [ 6: 4] 4x4 tab 1
// [    3] reserved
// [ 2: 0] 4x4 tab 0
#define P_HEVC_IQIT_SCALELUT_IDX_4                 (volatile uint32_t *)0xfe32dc14
#define P_HEVC_IQIT_SCALELUT_IDX_4_DBE1            (volatile uint32_t *)0xfe32f014
// [22:20] 8x8 tab 5
// [   19] reserved
// [18:16] 8x8 tab 4
// [   15] reserved
// [14:12] 8x8 tab 3
// [   11] reserved
// [10: 8] 8x8 tab 2
// [    7] reserved
// [ 6: 4] 8x8 tab 1
// [    3] reserved
// [ 2: 0] 8x8 tab 0
#define P_HEVC_IQIT_SCALELUT_IDX_8                 (volatile uint32_t *)0xfe32dc18
#define P_HEVC_IQIT_SCALELUT_IDX_8_DBE1            (volatile uint32_t *)0xfe32f018
// [   31] reserved
// [30:28] 32x32 tab 1
// [   27] reserved
// [26:24] 32x32 tab 0
// [   23] reserved
// [22:20] 16x16 tab 5
// [   19] reserved
// [18:16] 16x16 tab 4
// [   15] reserved
// [14:12] 16x16 tab 3
// [   11] reserved
// [10: 8] 16x16 tab 2
// [    7] reserved
// [ 6: 4] 16x16 tab 1
// [    3] reserved
// [ 2: 0] 16x16 tab 0
#define P_HEVC_IQIT_SCALELUT_IDX_16_32             (volatile uint32_t *)0xfe32dc1c
#define P_HEVC_IQIT_SCALELUT_IDX_16_32_DBE1        (volatile uint32_t *)0xfe32f01c
// [ 8: 2] R  tuinfo_fifo_cnt.
// [    1] R  fifo_has_room.
// [    0] R  mem_init_done.
#define P_HEVC_IQIT_STAT_GEN0                      (volatile uint32_t *)0xfe32dc20
#define P_HEVC_IQIT_STAT_GEN0_DBE1                 (volatile uint32_t *)0xfe32f020
// [   23] RW cntl_qp_cr_valid.
// [21:16] RW cntl_qp_cr.
// [   15] RW cntl_qp_cb_valid.
// [13: 8] RW cntl_qp_cb.
// [    7] RW cntl_qp_y_valid.
// [ 5: 0] RW cntl_qp_y.
#define P_HEVC_QP_WRITE                            (volatile uint32_t *)0xfe32dc24
#define P_HEVC_QP_WRITE_DBE1                       (volatile uint32_t *)0xfe32f024
// [31:30] R  ipp_size.
// [28:24] R  ipp_mem_ptr.
// [23:22] R  itr2_size.
// [20:16] R  itr2_mem_ptr.
// [15:14] R  itr1_size.
// [12: 8] R  itr1_mem_ptr.
// [ 7: 6] R  iq_size.
// [ 4: 0] R  iq_mem_ptr.
#define P_HEVC_IQIT_STAT_GEN1                      (volatile uint32_t *)0xfe32dc28
#define P_HEVC_IQIT_STAT_GEN1_DBE1                 (volatile uint32_t *)0xfe32f028
// [ 5: 4] RW cntl_bitdepth_c. 0=8-bit; 1=9-bit; 2=10-bit.
// [ 1: 0] RW cntl_bitdepth_y. 0=8-bit; 1=9-bit; 2=10-bit.
#define P_HEVC_IQIT_BITDEPTH                       (volatile uint32_t *)0xfe32dc2c
#define P_HEVC_IQIT_BITDEPTH_DBE1                  (volatile uint32_t *)0xfe32f02c
// [   10] R  ipp_active.
// [    9] R  itr2_active.
// [    8] R  itr1_active.
// [ 5: 0] R  mem_spare_num.
#define P_HEVC_IQIT_STAT_GEN2                      (volatile uint32_t *)0xfe32dc30
#define P_HEVC_IQIT_STAT_GEN2_DBE1                 (volatile uint32_t *)0xfe32f030
#define P_HEVC_IQIT_AVS2_WQP_0123                  (volatile uint32_t *)0xfe32dc34
#define P_HEVC_IQIT_AVS2_WQP_0123_DBE1             (volatile uint32_t *)0xfe32f034
#define P_HEVC_IQIT_AVS2_WQP_45                    (volatile uint32_t *)0xfe32dc38
#define P_HEVC_IQIT_AVS2_WQP_45_DBE1               (volatile uint32_t *)0xfe32f038
#define P_HEVC_IQIT_AVS2_QP_DELTA                  (volatile uint32_t *)0xfe32dc3c
#define P_HEVC_IQIT_AVS2_QP_DELTA_DBE1             (volatile uint32_t *)0xfe32f03c
// bit[11]  -- mv_use_abs (only calculate abs)
// bit[10]  -- mv_use_simple_mode (every size count has same weight)
// bit[9]   -- use_simple_mode (every size count has same weight)
// bit[8]   -- reset_all_count // write only
// bit[7:5] Reserved
// bit[4:0] pic_quality_rd_idx
#define P_HEVC_PIC_QUALITY_CTRL                    (volatile uint32_t *)0xfe32dc40
#define P_HEVC_PIC_QUALITY_CTRL_DBE1               (volatile uint32_t *)0xfe32f040
// idx  -- read out
//   0  -- blk44_y_count // 4k will use 20 bits
//   1  -- qp_y_sum // 4k use 27 bits
//   2  -- intra_y_count // 4k use 20 bits
//   3  -- skipped_cu_y_count // 4k use 20 bits
//   4  -- coeff_zero_y_count // 4k use 20 bits
//   5  -- blk44_c_count // 4k will use 20 bits
//   6  -- qp_c_sum // 4k use 26 bits
//   7  -- intra_c_count // 4k use 20 bits
//   8  -- skipped_cu_c_count // 4k use 20 bits
//   9  -- coeff_zero_c_count // 4k use 20 bits
//  10  -- { 1'h0, qp_c_max[6:0], 1'h0, qp_c_min[6:0], 1'h0, qp_y_max[6:0], 1'h0, qp_y_min[6:0]}
//  11  -- blk44_mv_count
//  12  -- {mvy_L1_count[39:32], mvx_L1_count[39:32], mvy_L0_count[39:32], mvx_L0_count[39:32]}
//  13  -- mvx_L0_count[31:0]
//  14  -- mvy_L0_count[31:0]
//  15  -- mvx_L1_count[31:0]
//  16  -- mvy_L1_count[31:0]
//  17  -- {mvx_L0_max, mvx_L0_min} // format : {sign, abs[14:0]}
//  18  -- {mvy_L0_max, mvy_L0_min}
//  19  -- {mvx_L1_max, mvx_L1_min}
//  20  -- {mvy_L1_max, mvy_L1_min}
#define P_HEVC_PIC_QUALITY_DATA                    (volatile uint32_t *)0xfe32dc44
#define P_HEVC_PIC_QUALITY_DATA_DBE1               (volatile uint32_t *)0xfe32f044
// bit[15]  disable_ddr_r_count
// bit[14]  disable_ddr_ar_count
// bit[13]  disable_ddr_w_count
// bit[12]  disable_ddr_aw_count
// bit[11]  disable_dblk_puinfo_count
// bit[10]  disable_dblk_tuinfo_count
// bit[9]   disable_mpreg_imp_count
// bit[8:4] path_monitor_rd_idx
// bit[3:2] Reserved
// bit[1]   Clear all count
// bit[0]   Enable/Disable monitor
#define P_HEVC_PATH_MONITOR_CTRL                   (volatile uint32_t *)0xfe32dc48
#define P_HEVC_PATH_MONITOR_CTRL_DBE1              (volatile uint32_t *)0xfe32f048
// idx  -- read out
//   0  -- total_clock_count
//   1  -- parser_iqit_transfer_count
//   2  -- parser_iqit_wait_count
//   3  -- iqit_ipp_transfer_count
//   4  -- iqit_ipp_wait_count
//   5  -- dblk_ipp_transfer_count
//   6  -- dblk_ipp_wait_count
//   7  -- dblk_ow_transfer_count
//   8  -- dblk_ow_wait_count
//   9  -- ddr_transfer_count
//  10  -- ddr_wait_count
//  11  -- cmd_transfer_count
//  12  -- cmd_wait_count
//  13  -- {
//            interface_ready[15:0],
//            interface_valid[15:0]
//         }
//interface_ready <= {
//		    5'h0,
//		    imp_rdy_imp,
//		    dblk_tuinfo_ready,
//		    dblk_puinfo_ready,
//		    rready_axi_hs_b,
//		    arready_axi_hs_b,
//		    wready_axi_hs_b,
//		    awready_axi_hs_b,
//		    dblk_ow_ready,
//		    dblk_ipp_ready,
//		    iqit_ipp_ready,
//		    parser_iqit_ready
//                 };
//interface_valid <= {
//		    5'h0,
//		    imp_valid_imp,
//		    dblk_tuinfo_valid,
//		    dblk_puinfo_valid,
//		    rvalid_axi_hs_b,
//		    arvalid_axi_hs_b,
//		    wvalid_axi_hs_b,
//		    awvalid_axi_hs_b,
//		    dblk_ow_valid,
//		    dblk_ipp_valid,
//		    iqit_ipp_valid,
//		    parser_iqit_valid
//                 };
#define P_HEVC_PATH_MONITOR_DATA                   (volatile uint32_t *)0xfe32dc4c
#define P_HEVC_PATH_MONITOR_DATA_DBE1              (volatile uint32_t *)0xfe32f04c
#define P_HEVC_IQIT_STAT_GEN3                      (volatile uint32_t *)0xfe32dc80
#define P_HEVC_IQIT_STAT_GEN3_DBE1                 (volatile uint32_t *)0xfe32f080
#define P_HEVC_IQIT_STAT_GEN4                      (volatile uint32_t *)0xfe32dc84
#define P_HEVC_IQIT_STAT_GEN4_DBE1                 (volatile uint32_t *)0xfe32f084
#define P_HEVC_IQIT_STAT_GEN5                      (volatile uint32_t *)0xfe32dc88
#define P_HEVC_IQIT_STAT_GEN5_DBE1                 (volatile uint32_t *)0xfe32f088
#define P_HEVC_IQIT_RES_CNT                        (volatile uint32_t *)0xfe32dc8c
#define P_HEVC_IQIT_RES_CNT_DBE1                   (volatile uint32_t *)0xfe32f08c
// Added for VVC
//`define HEVC_IQIT_SCALELUT_IDX_2_VVC        8'h30
//`define HEVC_IQIT_SCALELUT_IDX_32_VVC       8'h31
//`define HEVC_IQIT_SCALELUT_IDX_64_VVC       8'h32
#define P_HEVC_IQIT_DEQUANT_CTRL2                  (volatile uint32_t *)0xfe32dccc
#define P_HEVC_IQIT_DEQUANT_CTRL2_DBE1             (volatile uint32_t *)0xfe32f0cc
#define P_HEVC_IQIT_QP_OFFSET_CHROMA_HEADER        (volatile uint32_t *)0xfe32dcd0
#define P_HEVC_IQIT_QP_OFFSET_CHROMA_HEADER_DBE1   (volatile uint32_t *)0xfe32f0d0
#define P_HEVC_IQIT_QP_OFFSET_CHROMA_SLICE         (volatile uint32_t *)0xfe32dcd4
#define P_HEVC_IQIT_QP_OFFSET_CHROMA_SLICE_DBE1    (volatile uint32_t *)0xfe32f0d4
#define P_HEVC_IQIT_QP_OFFSET_CHROMA_ADJ_1         (volatile uint32_t *)0xfe32dcd8
#define P_HEVC_IQIT_QP_OFFSET_CHROMA_ADJ_1_DBE1    (volatile uint32_t *)0xfe32f0d8
#define P_HEVC_IQIT_QP_OFFSET_CHROMA_ADJ_2         (volatile uint32_t *)0xfe32dcdc
#define P_HEVC_IQIT_QP_OFFSET_CHROMA_ADJ_2_DBE1    (volatile uint32_t *)0xfe32f0dc
#define P_HEVC_IQIT_QP_OFFSET_CHROMA_ADJ_3         (volatile uint32_t *)0xfe32dce0
#define P_HEVC_IQIT_QP_OFFSET_CHROMA_ADJ_3_DBE1    (volatile uint32_t *)0xfe32f0e0
#define P_HEVC_IQIT_QP_OFFSET_CHROMA_ADJ_4         (volatile uint32_t *)0xfe32dce4
#define P_HEVC_IQIT_QP_OFFSET_CHROMA_ADJ_4_DBE1    (volatile uint32_t *)0xfe32f0e4
#define P_HEVC_IQIT_QP_OFFSET_CHROMA_ADJ_5         (volatile uint32_t *)0xfe32dce8
#define P_HEVC_IQIT_QP_OFFSET_CHROMA_ADJ_5_DBE1    (volatile uint32_t *)0xfe32f0e8
#define P_HEVC_IQIT_QP_OFFSET_CHROMA_ADJ_6         (volatile uint32_t *)0xfe32dcec
#define P_HEVC_IQIT_QP_OFFSET_CHROMA_ADJ_6_DBE1    (volatile uint32_t *)0xfe32f0ec
#define P_HEVC_IQIT_QP_CHROMA_MAP_WADDR            (volatile uint32_t *)0xfe32dcf0
#define P_HEVC_IQIT_QP_CHROMA_MAP_WADDR_DBE1       (volatile uint32_t *)0xfe32f0f0
#define P_HEVC_IQIT_QP_CHROMA_MAP_RADDR            (volatile uint32_t *)0xfe32dcf4
#define P_HEVC_IQIT_QP_CHROMA_MAP_RADDR_DBE1       (volatile uint32_t *)0xfe32f0f4
#define P_HEVC_IQIT_QP_CHROMA_MAP_DATA             (volatile uint32_t *)0xfe32dcf8
#define P_HEVC_IQIT_QP_CHROMA_MAP_DATA_DBE1        (volatile uint32_t *)0xfe32f0f8
#define P_HEVC_IQIT_ERR_STATUS                     (volatile uint32_t *)0xfe32dcfc
#define P_HEVC_IQIT_ERR_STATUS_DBE1                (volatile uint32_t *)0xfe32f0fc
//
// Closing file:  hevc_iqit_regs.h
//
//------------------------------------------------------------------------------
//  DOS top-level register offset
//------------------------------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_TOP_CBUS_BASE = 0x3f
// -----------------------------------------------
// [0]  reserved
// [1]  Reset Dos top level registers, except sw_reset0/1/2 which is only reset by external reset_n.
// [2]  VDEC1 Reset assist, mdec's CBUS
// [3]  VDEC1 Reset mdec's VLD
// [4]  VDEC1 Reset mdec's VLD
// [5]  VDEC1 Reset mdec's VLD
// [6]  VDEC1 Reset mdec's IQIDCT
// [7]  VDEC1 Reset mdec's MC
// [8]  VDEC1 Reset mdec's DBLK
// [9]  VDEC1 Reset mdec's PIC_DC
// [10] VDEC1 Reset mdec's Pscale
// [11] VDEC1 Reset vcpu's MCPU
// [12] VDEC1 Reset vcpu's CCPU
// [13] VDEC1 Reset mmc_pre_arb
#define P_DOS_SW_RESET0                            (volatile uint32_t *)0xfe32fc00
// [31:27] reserved
// [26] hcodec clk_en for henc assist
// [25:22] reserved
// [21] hcodec clk_en for henc qdct
// [20] hcodec clk_en for henc vlc
// [19] hcodec clk_en for assist and cbus
// [18] hcodec clk_en for ddr
// [17] hcodec clk_en for vcpu
// [16] hcodec clk_en for hdec assist
// [15] hcodec clk_en for hdec dblk
// [14] reserved
// [13] hcodec clk_en for hdec mc
// [12] hcodec clk_en for hdec pic_dc
// [11:10] reserved
// [9] vdec clk_en for vdec assist and cbus
// [8] vdec clk_en for ddr
// [7] vdec clk_en for vcpu
// [6] vdec clk_en for mdec vld
// [5] vdec clk_en for mdec psc
// [4] vdec clk_en for mdec pic_dc
// [3] vdec clk_en for mdec mc
// [2] vdec clk_en for mdec iqidct
// [1] vdec clk_en for mdec dblk
// [0] vdec clk_en for mdec assist
#define P_DOS_GCLK_EN0                             (volatile uint32_t *)0xfe32fc04
#define P_DOS_GEN_CTRL0                            (volatile uint32_t *)0xfe32fc08
#define P_DOS_APB_ERR_CTRL                         (volatile uint32_t *)0xfe32fc0c
#define P_DOS_APB_ERR_STAT                         (volatile uint32_t *)0xfe32fc10
#define P_DOS_VDEC_INT_EN                          (volatile uint32_t *)0xfe32fc14
#define P_DOS_HCODEC_INT_EN                        (volatile uint32_t *)0xfe32fc18
#define P_HCODEC_DOS_HCODEC_INT_EN                 (volatile uint32_t *)0xfe32fc18
// [0]  Reserved
// [1]  Reserved
// [2]  HCODEC Reset assist, hdec's CBUS
// [3]  HCODEC Reset hdec's VLD
// [4]  HCODEC Reset hdec's VLD
// [5]  HCODEC Reset hdec's VLD
// [6]  HCODEC Reset hdec's IQIDCT
// [7]  HCODEC Reset hdec's MC
// [8]  HCODEC Reset hdec's DBLK
// [9]  HCODEC Reset hdec's PIC_DC
// [10] HCODEC Reset hdec's Pscale
// [11] HCODEC Reset vcpu's MCPU
// [12] HCODEC Reset vcpu's CCPU
// [13] HCODEC Reset mmc_pre_arb
// [14] HCODEC Reserved
// [15] HCODEC Reserved
// [16] HCODEC Reset henc's VLC
#define P_DOS_SW_RESET1                            (volatile uint32_t *)0xfe32fc1c
// [0]  Reserved
// [1]  Reserved
// [2]  VDEC2 Reset assist, mdec's CBUS
// [3]  VDEC2 Reset mdec's VLD
// [4]  VDEC2 Reset mdec's VLD
// [5]  VDEC2 Reset mdec's VLD
// [6]  VDEC2 Reset mdec's IQIDCT
// [7]  VDEC2 Reset mdec's MC
// [8]  VDEC2 Reset mdec's DBLK
// [9]  VDEC2 Reset mdec's PIC_DC
// [10] VDEC2 Reset mdec's Pscale
// [11] VDEC2 Reset vcpu's MCPU
// [12] VDEC2 Reset vcpu's CCPU
// [13] VDEC2 Reset mmc_pre_arb
#define P_DOS_SW_RESET2                            (volatile uint32_t *)0xfe32fc20
// [31:10] Reserved
// [9] vdec2 clk_en for assist and cbus.
// [8] vdec2 clk_en for ddr;
// [7] vdec2 clk_en for vcpu;
// [6] vdec2 clk_en for mdec vld
// [5] vdec2 clk_en for mdec psc
// [4] vdec2 clk_en for mdec pic_dc
// [3] vdec2 clk_en for mdec mc
// [2] vdec2 clk_en for mdec iqidct
// [1] vdec2 clk_en for mdec dblk
// [0] vdec2 clk_en for mdec assist
#define P_DOS_GCLK_EN1                             (volatile uint32_t *)0xfe32fc24
#define P_DOS_VDEC2_INT_EN                         (volatile uint32_t *)0xfe32fc28
#define P_DOS_VDIN_LCNT                            (volatile uint32_t *)0xfe32fc2c
#define P_DOS_VDIN_FCNT                            (volatile uint32_t *)0xfe32fc30
#define P_DOS_VDIN_CCTL                            (volatile uint32_t *)0xfe32fc34
#define P_DOS_SCRATCH0                             (volatile uint32_t *)0xfe32fc40
#define P_DOS_SCRATCH1                             (volatile uint32_t *)0xfe32fc44
#define P_DOS_SCRATCH2                             (volatile uint32_t *)0xfe32fc48
#define P_DOS_SCRATCH3                             (volatile uint32_t *)0xfe32fc4c
#define P_DOS_SCRATCH4                             (volatile uint32_t *)0xfe32fc50
#define P_DOS_SCRATCH5                             (volatile uint32_t *)0xfe32fc54
#define P_DOS_SCRATCH6                             (volatile uint32_t *)0xfe32fc58
#define P_DOS_SCRATCH7                             (volatile uint32_t *)0xfe32fc5c
#define P_DOS_SCRATCH8                             (volatile uint32_t *)0xfe32fc60
#define P_DOS_SCRATCH9                             (volatile uint32_t *)0xfe32fc64
#define P_DOS_SCRATCH10                            (volatile uint32_t *)0xfe32fc68
#define P_DOS_SCRATCH11                            (volatile uint32_t *)0xfe32fc6c
#define P_DOS_SCRATCH12                            (volatile uint32_t *)0xfe32fc70
#define P_DOS_SCRATCH13                            (volatile uint32_t *)0xfe32fc74
#define P_DOS_SCRATCH14                            (volatile uint32_t *)0xfe32fc78
#define P_DOS_SCRATCH15                            (volatile uint32_t *)0xfe32fc7c
#define P_DOS_SCRATCH16                            (volatile uint32_t *)0xfe32fc80
#define P_DOS_SCRATCH17                            (volatile uint32_t *)0xfe32fc84
#define P_DOS_SCRATCH18                            (volatile uint32_t *)0xfe32fc88
#define P_DOS_SCRATCH19                            (volatile uint32_t *)0xfe32fc8c
#define P_DOS_SCRATCH20                            (volatile uint32_t *)0xfe32fc90
#define P_DOS_SCRATCH21                            (volatile uint32_t *)0xfe32fc94
#define P_DOS_SCRATCH22                            (volatile uint32_t *)0xfe32fc98
#define P_DOS_SCRATCH23                            (volatile uint32_t *)0xfe32fc9c
#define P_DOS_SCRATCH24                            (volatile uint32_t *)0xfe32fca0
#define P_DOS_SCRATCH25                            (volatile uint32_t *)0xfe32fca4
#define P_DOS_SCRATCH26                            (volatile uint32_t *)0xfe32fca8
#define P_DOS_SCRATCH27                            (volatile uint32_t *)0xfe32fcac
#define P_DOS_SCRATCH28                            (volatile uint32_t *)0xfe32fcb0
#define P_DOS_SCRATCH29                            (volatile uint32_t *)0xfe32fcb4
#define P_DOS_SCRATCH30                            (volatile uint32_t *)0xfe32fcb8
#define P_DOS_SCRATCH31                            (volatile uint32_t *)0xfe32fcbc
#define P_DOS_MEM_PD_VDEC                          (volatile uint32_t *)0xfe32fcc0
#define P_DOS_MEM_PD_VDEC2                         (volatile uint32_t *)0xfe32fcc4
#define P_DOS_MEM_PD_HCODEC                        (volatile uint32_t *)0xfe32fcc8
#define P_HCODEC_DOS_MEM_PD_HCODEC                 (volatile uint32_t *)0xfe32fcc8
#define P_DOS_MEM_PD_HEVC                          (volatile uint32_t *)0xfe32fccc
#define P_DOS_MEM_PD_HEVC_DBE                      (volatile uint32_t *)0xfe32fcec
#define P_DOS_SW_RESET3                            (volatile uint32_t *)0xfe32fcd0
#define P_DOS_GCLK_EN3                             (volatile uint32_t *)0xfe32fcd4
#define P_DOS_HEVC_INT_EN                          (volatile uint32_t *)0xfe32fcd8
#define P_DOS_SW_RESET4                            (volatile uint32_t *)0xfe32fcdc
#define P_DOS_GCLK_EN4                             (volatile uint32_t *)0xfe32fce0
#define P_DOS_MEM_PD_WAVE420L                      (volatile uint32_t *)0xfe32fce4
#define P_DOS_WAVE420L_CNTL_STAT                   (volatile uint32_t *)0xfe32fce8
// bit[31]    mcrcc_stall_en
// bit[30:28] Reserved
// bit[27:20] target_canvas
// bit[19:10] target_mby
// bit[ 9: 0] target_mbx
#define P_DOS_VDEC_MCRCC_STALL_CTRL                (volatile uint32_t *)0xfe32fd00
#define P_DOS_VDEC_MCRCC_STALL2_CTRL               (volatile uint32_t *)0xfe32fd08
#define P_DOS_VDEC2_MCRCC_STALL_CTRL               (volatile uint32_t *)0xfe32fd04
#define P_DOS_VDEC2_MCRCC_STALL2_CTRL              (volatile uint32_t *)0xfe32fd0c
#define P_DOS_MEM_PD_HEVC2                         (volatile uint32_t *)0xfe32fd10
#define P_DOS_HEVC2_INT_EN                         (volatile uint32_t *)0xfe32fd14
// bit[1] s_clk off
// bit[0] m_clk off
#define P_DOS_CFG_CMPIF_BRIDGE                     (volatile uint32_t *)0xfe32fd20
// bit[31]    cfg_stall_en
// bit[30]    co_mv_stall_en
// bit[29]    cfg_stall_force
// bit[28:24] reserved
// bit[23:12] cfg_stall_tilestrt_ctb_y
// bit[11: 0] cfg_stall_tilestrt_ctb_x
#define P_DOS_HEVC_STALL_START                     (volatile uint32_t *)0xfe32fd40
// bit[31:24] cfg_stall_canvas
// bit[23:12] cfg_stall_tileend_ctb_y
// bit[11: 0] cfg_stall_tileend_ctb_x
#define P_DOS_HEVC_STALL_END                       (volatile uint32_t *)0xfe32fd44
// bit[31:24] reserved
// bit[23:12] cfg_stall_ctb_y
// bit[11: 0] cfg_stall_ctb_x
#define P_DOS_HEVC_STALL_POSITION                  (volatile uint32_t *)0xfe32fd48
// bit[31]    cfg_stall_en
// bit[30]    co_mv_stall_en
// bit[29]    cfg_stall_force
// bit[28:24] reserved
// bit[23:12] cfg_stall_tilestrt_ctb_y
// bit[11: 0] cfg_stall_tilestrt_ctb_x
#define P_DOS_HEVC2_STALL_START                    (volatile uint32_t *)0xfe32fd4c
// bit[31:24] cfg_stall_canvas
// bit[23:12] cfg_stall_tileend_ctb_y
// bit[11: 0] cfg_stall_tileend_ctb_x
#define P_DOS_HEVC2_STALL_END                      (volatile uint32_t *)0xfe32fd50
// bit[31:24] reserved
// bit[23:12] cfg_stall_ctb_y
// bit[11: 0] cfg_stall_ctb_x
#define P_DOS_HEVC2_STALL_POSITION                 (volatile uint32_t *)0xfe32fd54
#define P_DOS_SECURE_CTL_INDEX                     (volatile uint32_t *)0xfe32fe00
#define P_DOS_SECURE_CTL_DATA                      (volatile uint32_t *)0xfe32fe04
#define P_DOS_SECURE_REG_NULL                      (volatile uint32_t *)0xfe32fe08
//bit[31] - Enable
//bit[30:16] - max height
//bit[15:0] - max
#define P_DOS_VDEC_WR_MAX_SIZE_CTL                 (volatile uint32_t *)0xfe32fe10
#define P_DOS_VDEC_DW_MAX_SIZE_CTL                 (volatile uint32_t *)0xfe32fe14
#define P_DOS_HEVC_WR_MAX_SIZE_CTL                 (volatile uint32_t *)0xfe32fe18
#define P_DOS_HEVC_DW_MAX_SIZE_CTL                 (volatile uint32_t *)0xfe32fe1c
#define P_DOS_HEVC_TW_MAX_SIZE_CTL                 (volatile uint32_t *)0xfe32fe20
#define P_DOS_HEVC_TW_MAX_SIZE_CTL1                (volatile uint32_t *)0xfe32fe24
#define P_DOS_HEVC_WR_MAX_SIZE_CTL1                (volatile uint32_t *)0xfe32fe28
#define P_DOS_HEVC_DW_MAX_SIZE_CTL1                (volatile uint32_t *)0xfe32fe2c
#define P_DOS_HEVC_SECURE_RESERVED                 (volatile uint32_t *)0xfe32fe30
// Bit[3:0] - axi_id_map_index (auto increase when read/write)
#define P_DOS_AXI_ID_MAP_INDEX                     (volatile uint32_t *)0xfe32fe34
// axi_id_map_index :
//   0 -  bit [7:0]   vdec_axi_id_0_rd
//        bit [15:8]  vdec_axi_id_1_rd
//        bit [23:16] vdec_axi_id_2_rd
//        bit [31:24] vdec_axi_id_3_rd
//   1 -  bit [7:0]   vdec_axi_id_4_rd
//        bit [15:8]  vdec_axi_id_5_rd
//        bit [23:16] vdec_axi_id_6_rd
//        bit [30:24] reserved
//        bit [31]    vdec_lockdown_rd
//   2 -  bit [7:0]   vdec_axi_id_0_wr
//        bit [15:8]  vdec_axi_id_1_wr
//        bit [23:16] vdec_axi_id_2_wr
//        bit [31:24] vdec_axi_id_3_wr
//   3 -  bit [7:0]   vdec_axi_id_4_wr
//        bit [15:8]  vdec_axi_id_5_wr
//        bit [23:16] vdec_axi_id_6_wr
//        bit [30:24] reserved
//        bit [31]    vdec_lockdown_wr
//   4 -  bit [7:0]   hevc_f_axi_id_0_rd (hevc_axi_id_0_rd for single AXI)
//        bit [15:8]  hevc_f_axi_id_1_rd (hevc_axi_id_1_rd for single AXI)
//        bit [23:16] hevc_f_axi_id_2_rd (hevc_axi_id_2_rd for single AXI)
//        bit [31:24] hevc_f_axi_id_3_rd (hevc_axi_id_3_rd for single AXI)
//   5 -  bit [7:0]   hevc_f_axi_id_4_rd (hevc_axi_id_4_rd for single AXI)
//        bit [15:8]  hevc_f_axi_id_5_rd (hevc_axi_id_5_rd for single AXI)
//        bit [23:16] hevc_f_axi_id_6_rd (hevc_axi_id_6_rd for single AXI)
//        bit [30:24] reserved
//        bit [31]    hevc_f_lockdown_rd
//   6 -  bit [7:0]   hevc_f_axi_id_0_wr (hevc_axi_id_0_wr for single AXI)
//        bit [15:8]  hevc_f_axi_id_1_wr (hevc_axi_id_1_wr for single AXI)
//        bit [23:16] hevc_f_axi_id_2_wr (hevc_axi_id_2_wr for single AXI)
//        bit [31:24] hevc_f_axi_id_3_wr (hevc_axi_id_3_wr for single AXI)
//   7 -  bit [7:0]   hevc_f_axi_id_4_wr (hevc_axi_id_4_wr for single AXI)
//        bit [15:8]  hevc_f_axi_id_5_wr (hevc_axi_id_5_wr for single AXI)
//        bit [23:16] hevc_f_axi_id_6_wr (hevc_axi_id_6_wr for single AXI)
//        bit [30:24] reserved
//        bit [31]    hevc_f_lockdown_wr
//   8 -  bit [7:0]   hevc_b_axi_id_0_rd (hevc_axi_id_7_rd for single AXI)
//        bit [15:8]  hevc_b_axi_id_1_rd (hevc_axi_id_8_rd for single AXI)
//        bit [23:16] hevc_b_axi_id_2_rd (hevc_axi_id_9_rd for single AXI)
//        bit [31:24] hevc_b_axi_id_3_rd (hevc_axi_id_10_rd for single AXI)
//   9 -  bit [7:0]   hevc_b_axi_id_4_rd (hevc_axi_id_11_rd for single AXI)
//        bit [15:8]  hevc_b_axi_id_5_rd (hevc_axi_id_12_rd for single AXI)
//        bit [23:16] hevc_b_axi_id_6_rd (hevc_axi_id_13_rd for single AXI)
//        bit [30:24] reserved
//        bit [31]    hevc_b_lockdown_rd
//  10 -  bit [7:0]   hevc_b_axi_id_0_wr (hevc_axi_id_7_wr for single AXI)
//        bit [15:8]  hevc_b_axi_id_1_wr (hevc_axi_id_8_wr for single AXI)
//        bit [23:16] hevc_b_axi_id_2_wr (hevc_axi_id_9_wr for single AXI)
//        bit [31:24] hevc_b_axi_id_3_wr (hevc_axi_id_10_wr for single AXI)
//  11 -  bit [7:0]   hevc_b_axi_id_4_wr (hevc_axi_id_11_wr for single AXI)
//        bit [15:8]  hevc_b_axi_id_5_wr (hevc_axi_id_12_wr for single AXI)
//        bit [23:16] hevc_b_axi_id_6_wr (hevc_axi_id_13_wr for single AXI)
//        bit [30:24] reserved
//        bit [31]    hevc_b_lockdown_wr
//  12 -  bit [7:0]   hcodec_axi_id_0_rd
//        bit [15:8]  hcodec_axi_id_1_rd
//        bit [23:16] hcodec_axi_id_2_rd
//        bit [31:24] hcodec_axi_id_3_rd
//  13 -  bit [7:0]   hcodec_axi_id_4_rd
//        bit [15:8]  hcodec_axi_id_5_rd
//        bit [23:16] hcodec_axi_id_6_rd
//        bit [30:24] reserved
//        bit [31]    hcodec_lockdown_rd
//  14 -  bit [7:0]   hcodec_axi_id_0_wr
//        bit [15:8]  hcodec_axi_id_1_wr
//        bit [23:16] hcodec_axi_id_2_wr
//        bit [31:24] hcodec_axi_id_3_wr
//  15 -  bit [7:0]   hcodec_axi_id_4_wr
//        bit [15:8]  hcodec_axi_id_5_wr
//        bit [23:16] hcodec_axi_id_6_wr
//        bit [30:24] reserved
//        bit [31]    hcodec_lockdown_wr
#define P_DOS_AXI_ID_MAP_DATA                      (volatile uint32_t *)0xfe32fe38
#define P_DOS_HEVC_PATH_CTL                        (volatile uint32_t *)0xfe32fe3c
//======================================
//  CPU Assist module
//
//======================================
#define P_ASSIST_AMR_SCRATCH0                      (volatile uint32_t *)0xfe32fd80
#define P_ASSIST_AMR_SCRATCH1                      (volatile uint32_t *)0xfe32fd84
#define P_ASSIST_AMR_SCRATCH2                      (volatile uint32_t *)0xfe32fd88
#define P_ASSIST_AMR_SCRATCH3                      (volatile uint32_t *)0xfe32fd8c
#define P_ASSIST_SPARE16_REG1                      (volatile uint32_t *)0xfe32fd90
#define P_ASSIST_SPARE16_REG2                      (volatile uint32_t *)0xfe32fd94
#define P_ASSIST_SPARE8_REG1                       (volatile uint32_t *)0xfe32fd98
#define P_ASSIST_SPARE8_REG2                       (volatile uint32_t *)0xfe32fd9c
#define P_ASSIST_SPARE8_REG3                       (volatile uint32_t *)0xfe32fda0
#define P_AC3_CTRL_REG1                            (volatile uint32_t *)0xfe32fda4
#define P_AC3_CTRL_REG2                            (volatile uint32_t *)0xfe32fda8
#define P_AC3_CTRL_REG3                            (volatile uint32_t *)0xfe32fdac
#define P_AC3_CTRL_REG4                            (volatile uint32_t *)0xfe32fdb0
#define P_ASSIST_GEN_CNTL                          (volatile uint32_t *)0xfe32fdb4
#define P_EE_ASSIST_MBOX0_IRQ_REG                  (volatile uint32_t *)0xfe32fdc0
#define P_EE_ASSIST_MBOX0_CLR_REG                  (volatile uint32_t *)0xfe32fdc4
#define P_EE_ASSIST_MBOX0_MASK                     (volatile uint32_t *)0xfe32fdc8
#define P_EE_ASSIST_MBOX0_FIQ_SEL                  (volatile uint32_t *)0xfe32fdcc
#define P_EE_ASSIST_MBOX1_IRQ_REG                  (volatile uint32_t *)0xfe32fdd0
#define P_EE_ASSIST_MBOX1_CLR_REG                  (volatile uint32_t *)0xfe32fdd4
#define P_EE_ASSIST_MBOX1_MASK                     (volatile uint32_t *)0xfe32fdd8
#define P_EE_ASSIST_MBOX1_FIQ_SEL                  (volatile uint32_t *)0xfe32fddc
#define P_EE_ASSIST_MBOX2_IRQ_REG                  (volatile uint32_t *)0xfe32fde0
#define P_EE_ASSIST_MBOX2_CLR_REG                  (volatile uint32_t *)0xfe32fde4
#define P_EE_ASSIST_MBOX2_MASK                     (volatile uint32_t *)0xfe32fde8
#define P_EE_ASSIST_MBOX2_FIQ_SEL                  (volatile uint32_t *)0xfe32fdec
#define P_EE_ASSIST_MBOX3_IRQ_REG                  (volatile uint32_t *)0xfe32fdf0
#define P_EE_ASSIST_MBOX3_CLR_REG                  (volatile uint32_t *)0xfe32fdf4
#define P_EE_ASSIST_MBOX3_MASK                     (volatile uint32_t *)0xfe32fdf8
#define P_EE_ASSIST_MBOX3_FIQ_SEL                  (volatile uint32_t *)0xfe32fdfc
#define P_EE_ASSIST_MBOX_EN_0                      (volatile uint32_t *)0xfe32fe40
#define P_EE_ASSIST_MBOX_EN_1                      (volatile uint32_t *)0xfe32fe44
#define P_EE_ASSIST_MBOX_EN_2                      (volatile uint32_t *)0xfe32fe48
#define P_EE_ASSIST_MBOX_EN_3                      (volatile uint32_t *)0xfe32fe4c
#define P_DOS_SECURE_REMAP_HEVC_F_WR               (volatile uint32_t *)0xfe32fe54
#define P_DOS_SECURE_REMAP_HEVC_B_WR               (volatile uint32_t *)0xfe32fe58
#define P_DOS_SECURE_REMAP_VDEC_WR                 (volatile uint32_t *)0xfe32fe5c
#define P_DOS_SECURE_REMAP_HCODEC_WR               (volatile uint32_t *)0xfe32fe60
#define P_HCODEC_DOS_SECURE_REMAP_HCODEC_WR        (volatile uint32_t *)0xfe32fe60
#define P_DOS_SECURE_REMAP_HEVC_F_RD               (volatile uint32_t *)0xfe32fe64
#define P_DOS_SECURE_REMAP_HEVC_B_RD               (volatile uint32_t *)0xfe32fe68
#define P_DOS_SECURE_REMAP_VDEC_RD                 (volatile uint32_t *)0xfe32fe6c
#define P_DOS_SECURE_REMAP_HCODEC_RD               (volatile uint32_t *)0xfe32fe70
#define P_HCODEC_DOS_SECURE_REMAP_HCODEC_RD        (volatile uint32_t *)0xfe32fe70
// Just for DOS module regression
//-----------------------------------------------------------
// PARSER
//-----------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  PARSER_CBUS_BASE = 0x38
// -----------------------------------------------
//
// Closing file:  ./dos_param.h
//
//
// Reading file:  mdec_regs.h
//
//========================================================================
//  MDEC module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_VDEC_MDEC_CBUS_BASE = 0x09
// -----------------------------------------------
#define P_HCODEC_MC_CTRL_REG                       (volatile uint32_t *)0xfe326400
#define P_HCODEC_MC_MB_INFO                        (volatile uint32_t *)0xfe326404
#define P_HCODEC_MC_PIC_INFO                       (volatile uint32_t *)0xfe326408
#define P_HCODEC_MC_HALF_PEL_ONE                   (volatile uint32_t *)0xfe32640c
#define P_HCODEC_MC_HALF_PEL_TWO                   (volatile uint32_t *)0xfe326410
#define P_HCODEC_POWER_CTL_MC                      (volatile uint32_t *)0xfe326414
#define P_HCODEC_MC_CMD                            (volatile uint32_t *)0xfe326418
#define P_HCODEC_MC_CTRL0                          (volatile uint32_t *)0xfe32641c
#define P_HCODEC_MC_PIC_W_H                        (volatile uint32_t *)0xfe326420
#define P_HCODEC_MC_STATUS0                        (volatile uint32_t *)0xfe326424
#define P_HCODEC_MC_STATUS1                        (volatile uint32_t *)0xfe326428
#define P_HCODEC_MC_CTRL1                          (volatile uint32_t *)0xfe32642c
#define P_HCODEC_MC_MIX_RATIO0                     (volatile uint32_t *)0xfe326430
#define P_HCODEC_MC_MIX_RATIO1                     (volatile uint32_t *)0xfe326434
#define P_HCODEC_MC_DP_MB_XY                       (volatile uint32_t *)0xfe326438
#define P_HCODEC_MC_OM_MB_XY                       (volatile uint32_t *)0xfe32643c
#define P_HCODEC_PSCALE_RST                        (volatile uint32_t *)0xfe326440
#define P_HCODEC_PSCALE_CTRL                       (volatile uint32_t *)0xfe326444
#define P_HCODEC_PSCALE_PICI_W                     (volatile uint32_t *)0xfe326448
#define P_HCODEC_PSCALE_PICI_H                     (volatile uint32_t *)0xfe32644c
#define P_HCODEC_PSCALE_PICO_W                     (volatile uint32_t *)0xfe326450
#define P_HCODEC_PSCALE_PICO_H                     (volatile uint32_t *)0xfe326454
#define P_HCODEC_PSCALE_PICO_START_X               (volatile uint32_t *)0xfe326458
#define P_HCODEC_PSCALE_PICO_START_Y               (volatile uint32_t *)0xfe32645c
#define P_HCODEC_PSCALE_DUMMY                      (volatile uint32_t *)0xfe326460
#define P_HCODEC_PSCALE_FILT0_COEF0                (volatile uint32_t *)0xfe326464
#define P_HCODEC_PSCALE_FILT0_COEF1                (volatile uint32_t *)0xfe326468
#define P_HCODEC_PSCALE_CMD_CTRL                   (volatile uint32_t *)0xfe32646c
#define P_HCODEC_PSCALE_CMD_BLK_X                  (volatile uint32_t *)0xfe326470
#define P_HCODEC_PSCALE_CMD_BLK_Y                  (volatile uint32_t *)0xfe326474
#define P_HCODEC_PSCALE_STATUS                     (volatile uint32_t *)0xfe326478
#define P_HCODEC_PSCALE_BMEM_ADDR                  (volatile uint32_t *)0xfe32647c
#define P_HCODEC_PSCALE_BMEM_DAT                   (volatile uint32_t *)0xfe326480
#define P_HCODEC_PSCALE_DRAM_BUF_CTRL              (volatile uint32_t *)0xfe326484
#define P_HCODEC_PSCALE_MCMD_CTRL                  (volatile uint32_t *)0xfe326488
#define P_HCODEC_PSCALE_MCMD_XSIZE                 (volatile uint32_t *)0xfe32648c
#define P_HCODEC_PSCALE_MCMD_YSIZE                 (volatile uint32_t *)0xfe326490
#define P_HCODEC_PSCALE_RBUF_START_BLKX            (volatile uint32_t *)0xfe326494
#define P_HCODEC_PSCALE_RBUF_START_BLKY            (volatile uint32_t *)0xfe326498
//`define PSCALE_RBUF_MB_WIDTH   8'h27
#define P_HCODEC_PSCALE_PICO_SHIFT_XY              (volatile uint32_t *)0xfe3264a0
#define P_HCODEC_PSCALE_CTRL1                      (volatile uint32_t *)0xfe3264a4
//Bit 15, wmask enable
//Bit 14:13, filt0 srckey_less,
//Bit 12:11, filt1 srckey_less, in the case of the interpolated data is equal distance to
//key data and normal data, 00: select normal data, 01: select right data, 10: select key data
//Bit 10:9, srckey mode, 00: equal, 01: less than or equal, 10: great than or equal
//Bit 8, src key enable
//Bit 7:0, y src key
#define P_HCODEC_PSCALE_SRCKEY_CTRL0               (volatile uint32_t *)0xfe3264a8
//Bit 15:8, cb src key
//Bit 7:0, cr src key
#define P_HCODEC_PSCALE_SRCKEY_CTRL1               (volatile uint32_t *)0xfe3264ac
//Bit 22:16 canvas_rd_addr2
//Bit 14:8 canvas_rd_addr1
//Bit 6:0 canvas_rd_addr1
#define P_HCODEC_PSCALE_CANVAS_RD_ADDR             (volatile uint32_t *)0xfe3264b0
//Bit 22:16 canvas_wr_addr2
//Bit 14:8 canvas_wr_addr1
//Bit 6:0 canvas_wr_addr1
#define P_HCODEC_PSCALE_CANVAS_WR_ADDR             (volatile uint32_t *)0xfe3264b4
//bit 13:8 pscale thread ID and token
//bit 7 disable write response count adding to busy bit
//bit 5:0  pscale prearbiter burst num
#define P_HCODEC_PSCALE_CTRL2                      (volatile uint32_t *)0xfe3264b8
//   31 - use_omem_mb_xy_auto
//23:16 - omem_max_mb_x
//15:8  - omem_mb_y_auto
// 7:0  - omem_mb_x_auto
#define P_HCODEC_HDEC_MC_OMEM_AUTO                 (volatile uint32_t *)0xfe3264c0
#define P_HCODEC_HDEC_MC_MBRIGHT_IDX               (volatile uint32_t *)0xfe3264c4
#define P_HCODEC_HDEC_MC_MBRIGHT_RD                (volatile uint32_t *)0xfe3264c8
#define P_HCODEC_MC_MPORT_CTRL                     (volatile uint32_t *)0xfe326500
#define P_HCODEC_MC_MPORT_DAT                      (volatile uint32_t *)0xfe326504
#define P_HCODEC_MC_WT_PRED_CTRL                   (volatile uint32_t *)0xfe326508
#define P_HCODEC_MC_MBBOT_ST_EVEN_ADDR             (volatile uint32_t *)0xfe326510
#define P_HCODEC_MC_MBBOT_ST_ODD_ADDR              (volatile uint32_t *)0xfe326514
#define P_HCODEC_MC_DPDN_MB_XY                     (volatile uint32_t *)0xfe326518
#define P_HCODEC_MC_OMDN_MB_XY                     (volatile uint32_t *)0xfe32651c
#define P_HCODEC_MC_HCMDBUF_H                      (volatile uint32_t *)0xfe326520
#define P_HCODEC_MC_HCMDBUF_L                      (volatile uint32_t *)0xfe326524
#define P_HCODEC_MC_HCMD_H                         (volatile uint32_t *)0xfe326528
#define P_HCODEC_MC_HCMD_L                         (volatile uint32_t *)0xfe32652c
#define P_HCODEC_MC_IDCT_DAT                       (volatile uint32_t *)0xfe326530
#define P_HCODEC_MC_CTRL_GCLK_CTRL                 (volatile uint32_t *)0xfe326534
#define P_HCODEC_MC_OTHER_GCLK_CTRL                (volatile uint32_t *)0xfe326538
//Bit 29:24, mbbot thread ID and token
//Bit 21:16, mc read/write thread ID and token
//Bit 13:8,  mbbot pre-arbiter burst number
//Bit 5:0,   mc pre-arbiter burst number
#define P_HCODEC_MC_CTRL2                          (volatile uint32_t *)0xfe32653c
// `define DBLK_QUANT            8'h76 // ONLY for $ucode/real/amrisc/rv.s, reg value from apollo
//`define ANC1_CANVAS_ADDR      8'h80
//`define ANC2_CANVAS_ADDR      8'h81
//`define REC_CANVAS_ADDR       8'h89
//`define MDEC_PIC_W          8'h8c
//`define MDEC_PIC_H          8'h8d
// mdec_pic_dc_mux_ctrl[31]  -- mcr_hevc_mode
#define P_HCODEC_MDEC_PIC_DC_MUX_CTRL              (volatile uint32_t *)0xfe326634
#define P_HCODEC_MDEC_PIC_DC_CTRL                  (volatile uint32_t *)0xfe326638
#define P_HCODEC_MDEC_PIC_DC_STATUS                (volatile uint32_t *)0xfe32663c
#define P_HCODEC_ANC0_CANVAS_ADDR                  (volatile uint32_t *)0xfe326640
#define P_HCODEC_ANC1_CANVAS_ADDR                  (volatile uint32_t *)0xfe326644
#define P_HCODEC_ANC2_CANVAS_ADDR                  (volatile uint32_t *)0xfe326648
#define P_HCODEC_ANC3_CANVAS_ADDR                  (volatile uint32_t *)0xfe32664c
#define P_HCODEC_ANC4_CANVAS_ADDR                  (volatile uint32_t *)0xfe326650
#define P_HCODEC_ANC5_CANVAS_ADDR                  (volatile uint32_t *)0xfe326654
#define P_HCODEC_ANC6_CANVAS_ADDR                  (volatile uint32_t *)0xfe326658
#define P_HCODEC_ANC7_CANVAS_ADDR                  (volatile uint32_t *)0xfe32665c
#define P_HCODEC_ANC8_CANVAS_ADDR                  (volatile uint32_t *)0xfe326660
#define P_HCODEC_ANC9_CANVAS_ADDR                  (volatile uint32_t *)0xfe326664
#define P_HCODEC_ANC10_CANVAS_ADDR                 (volatile uint32_t *)0xfe326668
#define P_HCODEC_ANC11_CANVAS_ADDR                 (volatile uint32_t *)0xfe32666c
#define P_HCODEC_ANC12_CANVAS_ADDR                 (volatile uint32_t *)0xfe326670
#define P_HCODEC_ANC13_CANVAS_ADDR                 (volatile uint32_t *)0xfe326674
#define P_HCODEC_ANC14_CANVAS_ADDR                 (volatile uint32_t *)0xfe326678
#define P_HCODEC_ANC15_CANVAS_ADDR                 (volatile uint32_t *)0xfe32667c
#define P_HCODEC_ANC16_CANVAS_ADDR                 (volatile uint32_t *)0xfe326680
#define P_HCODEC_ANC17_CANVAS_ADDR                 (volatile uint32_t *)0xfe326684
#define P_HCODEC_ANC18_CANVAS_ADDR                 (volatile uint32_t *)0xfe326688
#define P_HCODEC_ANC19_CANVAS_ADDR                 (volatile uint32_t *)0xfe32668c
#define P_HCODEC_ANC20_CANVAS_ADDR                 (volatile uint32_t *)0xfe326690
#define P_HCODEC_ANC21_CANVAS_ADDR                 (volatile uint32_t *)0xfe326694
#define P_HCODEC_ANC22_CANVAS_ADDR                 (volatile uint32_t *)0xfe326698
#define P_HCODEC_ANC23_CANVAS_ADDR                 (volatile uint32_t *)0xfe32669c
#define P_HCODEC_ANC24_CANVAS_ADDR                 (volatile uint32_t *)0xfe3266a0
#define P_HCODEC_ANC25_CANVAS_ADDR                 (volatile uint32_t *)0xfe3266a4
#define P_HCODEC_ANC26_CANVAS_ADDR                 (volatile uint32_t *)0xfe3266a8
#define P_HCODEC_ANC27_CANVAS_ADDR                 (volatile uint32_t *)0xfe3266ac
#define P_HCODEC_ANC28_CANVAS_ADDR                 (volatile uint32_t *)0xfe3266b0
#define P_HCODEC_ANC29_CANVAS_ADDR                 (volatile uint32_t *)0xfe3266b4
#define P_HCODEC_ANC30_CANVAS_ADDR                 (volatile uint32_t *)0xfe3266b8
#define P_HCODEC_ANC31_CANVAS_ADDR                 (volatile uint32_t *)0xfe3266bc
#define P_HCODEC_DBKR_CANVAS_ADDR                  (volatile uint32_t *)0xfe3266c0
#define P_HCODEC_DBKW_CANVAS_ADDR                  (volatile uint32_t *)0xfe3266c4
#define P_HCODEC_REC_CANVAS_ADDR                   (volatile uint32_t *)0xfe3266c8
//28:24, read/write, current canvas idx, used in h264 only now
//23:0, read only, current canvas address, 23:16, Cr canvas addr, 15:8, Cb canvas addr, 7:0, Y  canvas addr
#define P_HCODEC_CURR_CANVAS_CTRL                  (volatile uint32_t *)0xfe3266cc
#define P_HCODEC_MDEC_PIC_DC_THRESH                (volatile uint32_t *)0xfe3266e0
#define P_HCODEC_MDEC_PICR_BUF_STATUS              (volatile uint32_t *)0xfe3266e4
#define P_HCODEC_MDEC_PICW_BUF_STATUS              (volatile uint32_t *)0xfe3266e8
#define P_HCODEC_MCW_DBLK_WRRSP_CNT                (volatile uint32_t *)0xfe3266ec
#define P_HCODEC_MC_MBBOT_WRRSP_CNT                (volatile uint32_t *)0xfe3266f0
#define P_HCODEC_MDEC_PICW_BUF2_STATUS             (volatile uint32_t *)0xfe3266f4
#define P_HCODEC_WRRSP_FIFO_PICW_DBK               (volatile uint32_t *)0xfe3266f8
#define P_HCODEC_WRRSP_FIFO_PICW_MC                (volatile uint32_t *)0xfe3266fc
#define P_HCODEC_AV_SCRATCH_0                      (volatile uint32_t *)0xfe326700
#define P_HCODEC_AV_SCRATCH_1                      (volatile uint32_t *)0xfe326704
#define P_HCODEC_AV_SCRATCH_2                      (volatile uint32_t *)0xfe326708
#define P_HCODEC_AV_SCRATCH_3                      (volatile uint32_t *)0xfe32670c
#define P_HCODEC_AV_SCRATCH_4                      (volatile uint32_t *)0xfe326710
#define P_HCODEC_AV_SCRATCH_5                      (volatile uint32_t *)0xfe326714
#define P_HCODEC_AV_SCRATCH_6                      (volatile uint32_t *)0xfe326718
#define P_HCODEC_AV_SCRATCH_7                      (volatile uint32_t *)0xfe32671c
#define P_HCODEC_AV_SCRATCH_8                      (volatile uint32_t *)0xfe326720
#define P_HCODEC_AV_SCRATCH_9                      (volatile uint32_t *)0xfe326724
#define P_HCODEC_AV_SCRATCH_A                      (volatile uint32_t *)0xfe326728
#define P_HCODEC_AV_SCRATCH_B                      (volatile uint32_t *)0xfe32672c
#define P_HCODEC_AV_SCRATCH_C                      (volatile uint32_t *)0xfe326730
#define P_HCODEC_AV_SCRATCH_D                      (volatile uint32_t *)0xfe326734
#define P_HCODEC_AV_SCRATCH_E                      (volatile uint32_t *)0xfe326738
#define P_HCODEC_AV_SCRATCH_F                      (volatile uint32_t *)0xfe32673c
#define P_HCODEC_AV_SCRATCH_G                      (volatile uint32_t *)0xfe326740
#define P_HCODEC_AV_SCRATCH_H                      (volatile uint32_t *)0xfe326744
#define P_HCODEC_AV_SCRATCH_I                      (volatile uint32_t *)0xfe326748
#define P_HCODEC_AV_SCRATCH_J                      (volatile uint32_t *)0xfe32674c
#define P_HCODEC_AV_SCRATCH_K                      (volatile uint32_t *)0xfe326750
#define P_HCODEC_AV_SCRATCH_L                      (volatile uint32_t *)0xfe326754
#define P_HCODEC_AV_SCRATCH_M                      (volatile uint32_t *)0xfe326758
#define P_HCODEC_AV_SCRATCH_N                      (volatile uint32_t *)0xfe32675c
// bit[29:24] A_brst_num_co_mb
// bit[21:16] A_id_co_mb
// bit[11:0] wrrsp_count_co_mb
#define P_HCODEC_WRRSP_CO_MB                       (volatile uint32_t *)0xfe326760
// bit[29:24] A_brst_num_dcac
// bit[21:16] A_id_dcac
// bit[11:0] wrrsp_count_dcac
#define P_HCODEC_WRRSP_DCAC                        (volatile uint32_t *)0xfe326764
// bit[11:0] wrrsp_count_vld
#define P_HCODEC_WRRSP_VLD                         (volatile uint32_t *)0xfe326768
// doublew_cfg0[0];     //       Second Channel Enable, 1:Enable 0:Disable
// doublew_cfg0[3:1];   // [2:0] Endian Control for Luma
// doublew_cfg0[5:4];   // [1:0] Pixel sel by horizontal, 0x:1/2 10:left 11:right
// doublew_cfg0[7:6];   // [1:0] Pixel sel by vertical,   0x:1/2 10:up 11:down
// doublew_cfg0[8];     //       Size by horizontal, 0:original size 1: 1/2 shrunken size
// doublew_cfg0[9];     //       Size by vertical,   0:original size 1: 1/2 shrunken size
// doublew_cfg0[10];    //       1:Round 0:Truncation
// doublew_cfg0[11];    //       DMA Urgent
// doublew_cfg0[17:12]; // [5:0] DMA Burst Number
// doublew_cfg0[23:18]; // [5:0] DMA ID
// doublew_cfg0[26:24]; // [2:0] Endian Control for Chroma
// doublew_cfg0[27];    //       Source from, 1:MCW 0:DBLK
// doublew_cfg0[29:28]; // [1:0] 0x:select both top and bottom 10:select top 11:select bottom
// doublew_cfg0[30];    //       0:no merge 1:automatic merge
// doublew_cfg0[31];    //       0:Y addr no change 1:Y addr divided to half
#define P_HCODEC_MDEC_DOUBLEW_CFG0                 (volatile uint32_t *)0xfe32676c
// doublew_cfg1[7:0];   // [7:0] DMA Canvas Address for Luma
// doublew_cfg1[15:8];  // [7:0] DMA Canvas Address for Chroma
// doublew_cfg1[16];    //       Disable 1st Write -
// doublew_cfg1[17];    //       Reverse to original version -
// doublew_cfg1[18];    //       DMA Address Mode - 0:Canvas Mode 1:Non-Canvas Mode
#define P_HCODEC_MDEC_DOUBLEW_CFG1                 (volatile uint32_t *)0xfe326770
// doublew_cfg2[11:0];  //[11:0] vertical flip initial value
// doublew_cfg2[15];    //       vertical flip enable
// doublew_cfg2[24:16]; // [8:0] horizontal flip initial value
// doublew_cfg2[31];    //       horizontal flip enable
#define P_HCODEC_MDEC_DOUBLEW_CFG2                 (volatile uint32_t *)0xfe326774
// doublew_cfg3[31:0];  //[31:0] non-canvas start address for Luma -
#define P_HCODEC_MDEC_DOUBLEW_CFG3                 (volatile uint32_t *)0xfe326778
// doublew_cfg4[31:0];  //[31:0] non-canvas start address for Chroma -
#define P_HCODEC_MDEC_DOUBLEW_CFG4                 (volatile uint32_t *)0xfe32677c
// doublew_cfg5[12:0];  //[12:0] non-canvas picture width for Luma -
// doublew_cfg5[28:16]; //[12:0] non-canvas picture width for Chroma -
#define P_HCODEC_MDEC_DOUBLEW_CFG5                 (volatile uint32_t *)0xfe326780
// doublew_cfg6: reserved
#define P_HCODEC_MDEC_DOUBLEW_CFG6                 (volatile uint32_t *)0xfe326784
// doublew_cfg7: reserved
#define P_HCODEC_MDEC_DOUBLEW_CFG7                 (volatile uint32_t *)0xfe326788
// doublew_status[11:0];//[11:0] wrrsp_count_doublew
// doublew_status[12];  //       doublew_status_busy
// doublew_status[13];  //       doublew_status_error
#define P_HCODEC_MDEC_DOUBLEW_STATUS               (volatile uint32_t *)0xfe32678c
#define P_HCODEC_MDEC_EXTIF_CFG0                   (volatile uint32_t *)0xfe326790
#define P_HCODEC_MDEC_EXTIF_CFG1                   (volatile uint32_t *)0xfe326794
#define P_HCODEC_MDEC_EXTIF_CFG2                   (volatile uint32_t *)0xfe326798
#define P_HCODEC_MDEC_EXTIF_STS0                   (volatile uint32_t *)0xfe32679c
#define P_HCODEC_MDEC_PICW_BUFDW_CFG0              (volatile uint32_t *)0xfe3267a0
#define P_HCODEC_MDEC_PICW_BUFDW_CFG1              (volatile uint32_t *)0xfe3267a4
#define P_HCODEC_MDEC_CAV_LUT_DATAL                (volatile uint32_t *)0xfe3267a8
#define P_HCODEC_MDEC_CAV_LUT_DATAH                (volatile uint32_t *)0xfe3267ac
#define P_HCODEC_MDEC_CAV_LUT_ADDR                 (volatile uint32_t *)0xfe3267b0
#define P_HCODEC_MDEC_CAV_CFG0                     (volatile uint32_t *)0xfe3267b4
#define P_HCODEC_MDEC_CRCW                         (volatile uint32_t *)0xfe3267b8
#define P_HCODEC_MDEC_PIC_DC_CTRL2                 (volatile uint32_t *)0xfe3267bc
//======================================
//  MC Control Register Bits
//
//======================================
// For bits, just copy the defines...don't translate to addresses
    //`define MC_RESET	    16'h0002
//======================================
//  MB Info Register Bits
//
//======================================
//======================================
//  MB Info Register Bits
//
//======================================
//========================================================================
// DBLK Register:  12'h950 - 12'h97f
//========================================================================
#define P_HCODEC_DBLK_RST                          (volatile uint32_t *)0xfe326540
#define P_HCODEC_DBLK_CTRL                         (volatile uint32_t *)0xfe326544
#define P_HCODEC_DBLK_MB_WID_HEIGHT                (volatile uint32_t *)0xfe326548
#define P_HCODEC_DBLK_STATUS                       (volatile uint32_t *)0xfe32654c
#define P_HCODEC_DBLK_CMD_CTRL                     (volatile uint32_t *)0xfe326550
#define P_HCODEC_DBLK_MB_XY                        (volatile uint32_t *)0xfe326554
#define P_HCODEC_DBLK_QP                           (volatile uint32_t *)0xfe326558
#define P_HCODEC_DBLK_Y_BHFILT                     (volatile uint32_t *)0xfe32655c
#define P_HCODEC_DBLK_Y_BHFILT_HIGH                (volatile uint32_t *)0xfe326560
#define P_HCODEC_DBLK_Y_BVFILT                     (volatile uint32_t *)0xfe326564
#define P_HCODEC_DBLK_CB_BFILT                     (volatile uint32_t *)0xfe326568
#define P_HCODEC_DBLK_CR_BFILT                     (volatile uint32_t *)0xfe32656c
#define P_HCODEC_DBLK_Y_HFILT                      (volatile uint32_t *)0xfe326570
#define P_HCODEC_DBLK_Y_HFILT_HIGH                 (volatile uint32_t *)0xfe326574
#define P_HCODEC_DBLK_Y_VFILT                      (volatile uint32_t *)0xfe326578
#define P_HCODEC_DBLK_CB_FILT                      (volatile uint32_t *)0xfe32657c
#define P_HCODEC_DBLK_CR_FILT                      (volatile uint32_t *)0xfe326580
#define P_HCODEC_DBLK_BETAX_QP_SEL                 (volatile uint32_t *)0xfe326584
#define P_HCODEC_DBLK_CLIP_CTRL0                   (volatile uint32_t *)0xfe326588
#define P_HCODEC_DBLK_CLIP_CTRL1                   (volatile uint32_t *)0xfe32658c
#define P_HCODEC_DBLK_CLIP_CTRL2                   (volatile uint32_t *)0xfe326590
#define P_HCODEC_DBLK_CLIP_CTRL3                   (volatile uint32_t *)0xfe326594
#define P_HCODEC_DBLK_CLIP_CTRL4                   (volatile uint32_t *)0xfe326598
#define P_HCODEC_DBLK_CLIP_CTRL5                   (volatile uint32_t *)0xfe32659c
#define P_HCODEC_DBLK_CLIP_CTRL6                   (volatile uint32_t *)0xfe3265a0
#define P_HCODEC_DBLK_CLIP_CTRL7                   (volatile uint32_t *)0xfe3265a4
#define P_HCODEC_DBLK_CLIP_CTRL8                   (volatile uint32_t *)0xfe3265a8
#define P_HCODEC_DBLK_STATUS1                      (volatile uint32_t *)0xfe3265ac
#define P_HCODEC_DBLK_GCLK_FREE                    (volatile uint32_t *)0xfe3265b0
#define P_HCODEC_DBLK_GCLK_OFF                     (volatile uint32_t *)0xfe3265b4
#define P_HCODEC_DBLK_AVSFLAGS                     (volatile uint32_t *)0xfe3265b8
// bit 15:0
#define P_HCODEC_DBLK_CBPY                         (volatile uint32_t *)0xfe3265c0
// bit 11:8 -- deblk_cbpy_bottom
// bit 7:4 -- deblk_cbpy_left
// bit 3:0 -- deblk_cbpy_top
#define P_HCODEC_DBLK_CBPY_ADJ                     (volatile uint32_t *)0xfe3265c4
// bit 7:0 -- deblk_cbpc
#define P_HCODEC_DBLK_CBPC                         (volatile uint32_t *)0xfe3265c8
// bit 15 -- bottom_mb
// bit 14 -- left_mb
// bit 13 -- top_mb
// bit 12 -- reserved
// bit 11:8 -- deblk_cbpc_bottom
// bit 7:4 -- deblk_cbpc_left
// bit 3:0 -- deblk_cbpc_top
#define P_HCODEC_DBLK_CBPC_ADJ                     (volatile uint32_t *)0xfe3265cc
// bit 15:8 -- deblk_hmvd   -- {left_1, left_0, below_1, below_0, block3-0}
// bit 7:0 -- deblk_vmvd    -- {top_1, top_0, below_1, below_0, block3-0}
#define P_HCODEC_DBLK_VHMVD                        (volatile uint32_t *)0xfe3265d0
// bit 13:12 -- right_vmvd
// bit 11 -- right_above_vmvd
// bit 10 -- left_below_hmvd
// bit 9 -- disable_dblk_luma
// bit 8 -- disable_dblk_chroma
// bit 7 -- bBelowRefDiff
// bit 6 -- bLeftRefDiff
// bit 5 -- bAboveRefDiff
// bit 4 -- reserved
// bit 3 -- s_below
// bit 2 -- s_left
// bit 1 -- s_above
// bit 0 -- s
#define P_HCODEC_DBLK_STRONG                       (volatile uint32_t *)0xfe3265d4
// bit 14:10 -- PQUANT
// bit 9:5 -- left_PQUANT
// bit 4:0 -- top_PQUANT
#define P_HCODEC_DBLK_RV8_QUANT                    (volatile uint32_t *)0xfe3265d8
#define P_HCODEC_DBLK_CBUS_HCMD2                   (volatile uint32_t *)0xfe3265dc
#define P_HCODEC_DBLK_CBUS_HCMD1                   (volatile uint32_t *)0xfe3265e0
#define P_HCODEC_DBLK_CBUS_HCMD0                   (volatile uint32_t *)0xfe3265e4
#define P_HCODEC_DBLK_VLD_HCMD2                    (volatile uint32_t *)0xfe3265e8
#define P_HCODEC_DBLK_VLD_HCMD1                    (volatile uint32_t *)0xfe3265ec
#define P_HCODEC_DBLK_VLD_HCMD0                    (volatile uint32_t *)0xfe3265f0
#define P_HCODEC_DBLK_OST_YBASE                    (volatile uint32_t *)0xfe3265f4
#define P_HCODEC_DBLK_OST_CBCRDIFF                 (volatile uint32_t *)0xfe3265f8
//13:8 dblk thread ID and token
//5:0  dblk prearbiter burst num
#define P_HCODEC_DBLK_CTRL1                        (volatile uint32_t *)0xfe3265fc
// MCRCC_CTL1
// 31:3  <reserved[23:0]>
// 2     <cfg_field_pic>
// 1     <sw_rst>
// 0     <bypass_en>
#define P_HCODEC_MCRCC_CTL1                        (volatile uint32_t *)0xfe326600
// MCRCC_CTL2
// 31:24    <cfg_cache_anc01_c[7:0]>
// 23:16    <cfg_cache_anc01_y[7:0]>
// 15:8     <cfg_cache_anc00_c[7:0]>
// 7:0      <cfg_cache_anc00_y[7:0]>
#define P_HCODEC_MCRCC_CTL2                        (volatile uint32_t *)0xfe326604
// MCRCC_CTL3
// 31:24    <cfg_cache_anc11_c[7:0]>
// 23:16    <cfg_cache_anc11_y[7:0]>
// 15:8     <cfg_cache_anc10_c[7:0]>
// 7:0      <cfg_cache_anc10_y[7:0]>
#define P_HCODEC_MCRCC_CTL3                        (volatile uint32_t *)0xfe326608
// bit[31:10] reserved
// bit[9:0] sw_clock_gating control
// [9] vdec clk_en for assist and cbus.
// [8] vdec clk_en for ddr
// [7] vdec clk_en for vcpu
// [6] vdec clk_en for assist
// [5] vdec clk_en for dblk
// [4] vdec clk_en for iqidct
// [3] vdec clk_en for mc
// [2] vdec clk_en for pic_dc
// [1] vdec clk_en for psc
// [0] vdec clk_en for vld
#define P_HCODEC_GCLK_EN                           (volatile uint32_t *)0xfe32660c
// [0]  Reserved
// [1]  Reserved
// [2]  Reset assist, mdec's CBUS
// [3]  Reset mdec's VLD
// [4]  Reset mdec's VLD
// [5]  Reset mdec's VLD
// [6]  Reset mdec's IQIDCT
// [7]  Reset mdec's MC
// [8]  Reset mdec's DBLK
// [9]  Reset mdec's PIC_DC
// [10] Reset mdec's Pscale
// [11] Reset vcpu's MCPU
// [12] Reset vcpu's CCPU
// [13] Reset mmc_pre_arb
#define P_HCODEC_MDEC_SW_RESET                     (volatile uint32_t *)0xfe326610
// [0]      dblkmerge_bypass
// [2:1]    picture_structure
// [3]      is_mbaff_frame
// [5:4]    canvas_write_mode
// [6]      Reserved
// [7]      write_mask_redge
// [31:6]   Reserved
#define P_HCODEC_MDEC_DBLKWMERGE_CTRL0             (volatile uint32_t *)0xfe326614
// [12:0]   dblkwmerge_pic_w
// [15:13]  Reserved
// [28:16]  dblkwmerge_pic_h
// [31:29]  Reserved
#define P_HCODEC_MDEC_DBLKWMERGE_CTRL1             (volatile uint32_t *)0xfe326618
//DBLK last address 12'h97f
//
// Closing file:  mdec_regs.h
//
//
// Reading file:  mdec_regs.h
//
//========================================================================
//  MDEC module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_VDEC_MDEC_CBUS_BASE = 0x09
// -----------------------------------------------
#define P_VDEC2_MC_CTRL_REG                        (volatile uint32_t *)0xfe32a400
#define P_VDEC2_MC_MB_INFO                         (volatile uint32_t *)0xfe32a404
#define P_VDEC2_MC_PIC_INFO                        (volatile uint32_t *)0xfe32a408
#define P_VDEC2_MC_HALF_PEL_ONE                    (volatile uint32_t *)0xfe32a40c
#define P_VDEC2_MC_HALF_PEL_TWO                    (volatile uint32_t *)0xfe32a410
#define P_VDEC2_POWER_CTL_MC                       (volatile uint32_t *)0xfe32a414
#define P_VDEC2_MC_CMD                             (volatile uint32_t *)0xfe32a418
#define P_VDEC2_MC_CTRL0                           (volatile uint32_t *)0xfe32a41c
#define P_VDEC2_MC_PIC_W_H                         (volatile uint32_t *)0xfe32a420
#define P_VDEC2_MC_STATUS0                         (volatile uint32_t *)0xfe32a424
#define P_VDEC2_MC_STATUS1                         (volatile uint32_t *)0xfe32a428
#define P_VDEC2_MC_CTRL1                           (volatile uint32_t *)0xfe32a42c
#define P_VDEC2_MC_MIX_RATIO0                      (volatile uint32_t *)0xfe32a430
#define P_VDEC2_MC_MIX_RATIO1                      (volatile uint32_t *)0xfe32a434
#define P_VDEC2_MC_DP_MB_XY                        (volatile uint32_t *)0xfe32a438
#define P_VDEC2_MC_OM_MB_XY                        (volatile uint32_t *)0xfe32a43c
#define P_VDEC2_PSCALE_RST                         (volatile uint32_t *)0xfe32a440
#define P_VDEC2_PSCALE_CTRL                        (volatile uint32_t *)0xfe32a444
#define P_VDEC2_PSCALE_PICI_W                      (volatile uint32_t *)0xfe32a448
#define P_VDEC2_PSCALE_PICI_H                      (volatile uint32_t *)0xfe32a44c
#define P_VDEC2_PSCALE_PICO_W                      (volatile uint32_t *)0xfe32a450
#define P_VDEC2_PSCALE_PICO_H                      (volatile uint32_t *)0xfe32a454
#define P_VDEC2_PSCALE_PICO_START_X                (volatile uint32_t *)0xfe32a458
#define P_VDEC2_PSCALE_PICO_START_Y                (volatile uint32_t *)0xfe32a45c
#define P_VDEC2_PSCALE_DUMMY                       (volatile uint32_t *)0xfe32a460
#define P_VDEC2_PSCALE_FILT0_COEF0                 (volatile uint32_t *)0xfe32a464
#define P_VDEC2_PSCALE_FILT0_COEF1                 (volatile uint32_t *)0xfe32a468
#define P_VDEC2_PSCALE_CMD_CTRL                    (volatile uint32_t *)0xfe32a46c
#define P_VDEC2_PSCALE_CMD_BLK_X                   (volatile uint32_t *)0xfe32a470
#define P_VDEC2_PSCALE_CMD_BLK_Y                   (volatile uint32_t *)0xfe32a474
#define P_VDEC2_PSCALE_STATUS                      (volatile uint32_t *)0xfe32a478
#define P_VDEC2_PSCALE_BMEM_ADDR                   (volatile uint32_t *)0xfe32a47c
#define P_VDEC2_PSCALE_BMEM_DAT                    (volatile uint32_t *)0xfe32a480
#define P_VDEC2_PSCALE_DRAM_BUF_CTRL               (volatile uint32_t *)0xfe32a484
#define P_VDEC2_PSCALE_MCMD_CTRL                   (volatile uint32_t *)0xfe32a488
#define P_VDEC2_PSCALE_MCMD_XSIZE                  (volatile uint32_t *)0xfe32a48c
#define P_VDEC2_PSCALE_MCMD_YSIZE                  (volatile uint32_t *)0xfe32a490
#define P_VDEC2_PSCALE_RBUF_START_BLKX             (volatile uint32_t *)0xfe32a494
#define P_VDEC2_PSCALE_RBUF_START_BLKY             (volatile uint32_t *)0xfe32a498
//`define PSCALE_RBUF_MB_WIDTH   8'h27
#define P_VDEC2_PSCALE_PICO_SHIFT_XY               (volatile uint32_t *)0xfe32a4a0
#define P_VDEC2_PSCALE_CTRL1                       (volatile uint32_t *)0xfe32a4a4
//Bit 15, wmask enable
//Bit 14:13, filt0 srckey_less,
//Bit 12:11, filt1 srckey_less, in the case of the interpolated data is equal distance to
//key data and normal data, 00: select normal data, 01: select right data, 10: select key data
//Bit 10:9, srckey mode, 00: equal, 01: less than or equal, 10: great than or equal
//Bit 8, src key enable
//Bit 7:0, y src key
#define P_VDEC2_PSCALE_SRCKEY_CTRL0                (volatile uint32_t *)0xfe32a4a8
//Bit 15:8, cb src key
//Bit 7:0, cr src key
#define P_VDEC2_PSCALE_SRCKEY_CTRL1                (volatile uint32_t *)0xfe32a4ac
//Bit 22:16 canvas_rd_addr2
//Bit 14:8 canvas_rd_addr1
//Bit 6:0 canvas_rd_addr1
#define P_VDEC2_PSCALE_CANVAS_RD_ADDR              (volatile uint32_t *)0xfe32a4b0
//Bit 22:16 canvas_wr_addr2
//Bit 14:8 canvas_wr_addr1
//Bit 6:0 canvas_wr_addr1
#define P_VDEC2_PSCALE_CANVAS_WR_ADDR              (volatile uint32_t *)0xfe32a4b4
//bit 13:8 pscale thread ID and token
//bit 7 disable write response count adding to busy bit
//bit 5:0  pscale prearbiter burst num
#define P_VDEC2_PSCALE_CTRL2                       (volatile uint32_t *)0xfe32a4b8
//   31 - use_omem_mb_xy_auto
//23:16 - omem_max_mb_x
//15:8  - omem_mb_y_auto
// 7:0  - omem_mb_x_auto
#define P_VDEC2_HDEC_MC_OMEM_AUTO                  (volatile uint32_t *)0xfe32a4c0
#define P_VDEC2_HDEC_MC_MBRIGHT_IDX                (volatile uint32_t *)0xfe32a4c4
#define P_VDEC2_HDEC_MC_MBRIGHT_RD                 (volatile uint32_t *)0xfe32a4c8
#define P_VDEC2_MC_MPORT_CTRL                      (volatile uint32_t *)0xfe32a500
#define P_VDEC2_MC_MPORT_DAT                       (volatile uint32_t *)0xfe32a504
#define P_VDEC2_MC_WT_PRED_CTRL                    (volatile uint32_t *)0xfe32a508
#define P_VDEC2_MC_MBBOT_ST_EVEN_ADDR              (volatile uint32_t *)0xfe32a510
#define P_VDEC2_MC_MBBOT_ST_ODD_ADDR               (volatile uint32_t *)0xfe32a514
#define P_VDEC2_MC_DPDN_MB_XY                      (volatile uint32_t *)0xfe32a518
#define P_VDEC2_MC_OMDN_MB_XY                      (volatile uint32_t *)0xfe32a51c
#define P_VDEC2_MC_HCMDBUF_H                       (volatile uint32_t *)0xfe32a520
#define P_VDEC2_MC_HCMDBUF_L                       (volatile uint32_t *)0xfe32a524
#define P_VDEC2_MC_HCMD_H                          (volatile uint32_t *)0xfe32a528
#define P_VDEC2_MC_HCMD_L                          (volatile uint32_t *)0xfe32a52c
#define P_VDEC2_MC_IDCT_DAT                        (volatile uint32_t *)0xfe32a530
#define P_VDEC2_MC_CTRL_GCLK_CTRL                  (volatile uint32_t *)0xfe32a534
#define P_VDEC2_MC_OTHER_GCLK_CTRL                 (volatile uint32_t *)0xfe32a538
//Bit 29:24, mbbot thread ID and token
//Bit 21:16, mc read/write thread ID and token
//Bit 13:8,  mbbot pre-arbiter burst number
//Bit 5:0,   mc pre-arbiter burst number
#define P_VDEC2_MC_CTRL2                           (volatile uint32_t *)0xfe32a53c
// `define DBLK_QUANT            8'h76 // ONLY for $ucode/real/amrisc/rv.s, reg value from apollo
//`define ANC1_CANVAS_ADDR      8'h80
//`define ANC2_CANVAS_ADDR      8'h81
//`define REC_CANVAS_ADDR       8'h89
//`define MDEC_PIC_W          8'h8c
//`define MDEC_PIC_H          8'h8d
// mdec_pic_dc_mux_ctrl[31]  -- mcr_hevc_mode
#define P_VDEC2_MDEC_PIC_DC_MUX_CTRL               (volatile uint32_t *)0xfe32a634
#define P_VDEC2_MDEC_PIC_DC_CTRL                   (volatile uint32_t *)0xfe32a638
#define P_VDEC2_MDEC_PIC_DC_STATUS                 (volatile uint32_t *)0xfe32a63c
#define P_VDEC2_ANC0_CANVAS_ADDR                   (volatile uint32_t *)0xfe32a640
#define P_VDEC2_ANC1_CANVAS_ADDR                   (volatile uint32_t *)0xfe32a644
#define P_VDEC2_ANC2_CANVAS_ADDR                   (volatile uint32_t *)0xfe32a648
#define P_VDEC2_ANC3_CANVAS_ADDR                   (volatile uint32_t *)0xfe32a64c
#define P_VDEC2_ANC4_CANVAS_ADDR                   (volatile uint32_t *)0xfe32a650
#define P_VDEC2_ANC5_CANVAS_ADDR                   (volatile uint32_t *)0xfe32a654
#define P_VDEC2_ANC6_CANVAS_ADDR                   (volatile uint32_t *)0xfe32a658
#define P_VDEC2_ANC7_CANVAS_ADDR                   (volatile uint32_t *)0xfe32a65c
#define P_VDEC2_ANC8_CANVAS_ADDR                   (volatile uint32_t *)0xfe32a660
#define P_VDEC2_ANC9_CANVAS_ADDR                   (volatile uint32_t *)0xfe32a664
#define P_VDEC2_ANC10_CANVAS_ADDR                  (volatile uint32_t *)0xfe32a668
#define P_VDEC2_ANC11_CANVAS_ADDR                  (volatile uint32_t *)0xfe32a66c
#define P_VDEC2_ANC12_CANVAS_ADDR                  (volatile uint32_t *)0xfe32a670
#define P_VDEC2_ANC13_CANVAS_ADDR                  (volatile uint32_t *)0xfe32a674
#define P_VDEC2_ANC14_CANVAS_ADDR                  (volatile uint32_t *)0xfe32a678
#define P_VDEC2_ANC15_CANVAS_ADDR                  (volatile uint32_t *)0xfe32a67c
#define P_VDEC2_ANC16_CANVAS_ADDR                  (volatile uint32_t *)0xfe32a680
#define P_VDEC2_ANC17_CANVAS_ADDR                  (volatile uint32_t *)0xfe32a684
#define P_VDEC2_ANC18_CANVAS_ADDR                  (volatile uint32_t *)0xfe32a688
#define P_VDEC2_ANC19_CANVAS_ADDR                  (volatile uint32_t *)0xfe32a68c
#define P_VDEC2_ANC20_CANVAS_ADDR                  (volatile uint32_t *)0xfe32a690
#define P_VDEC2_ANC21_CANVAS_ADDR                  (volatile uint32_t *)0xfe32a694
#define P_VDEC2_ANC22_CANVAS_ADDR                  (volatile uint32_t *)0xfe32a698
#define P_VDEC2_ANC23_CANVAS_ADDR                  (volatile uint32_t *)0xfe32a69c
#define P_VDEC2_ANC24_CANVAS_ADDR                  (volatile uint32_t *)0xfe32a6a0
#define P_VDEC2_ANC25_CANVAS_ADDR                  (volatile uint32_t *)0xfe32a6a4
#define P_VDEC2_ANC26_CANVAS_ADDR                  (volatile uint32_t *)0xfe32a6a8
#define P_VDEC2_ANC27_CANVAS_ADDR                  (volatile uint32_t *)0xfe32a6ac
#define P_VDEC2_ANC28_CANVAS_ADDR                  (volatile uint32_t *)0xfe32a6b0
#define P_VDEC2_ANC29_CANVAS_ADDR                  (volatile uint32_t *)0xfe32a6b4
#define P_VDEC2_ANC30_CANVAS_ADDR                  (volatile uint32_t *)0xfe32a6b8
#define P_VDEC2_ANC31_CANVAS_ADDR                  (volatile uint32_t *)0xfe32a6bc
#define P_VDEC2_DBKR_CANVAS_ADDR                   (volatile uint32_t *)0xfe32a6c0
#define P_VDEC2_DBKW_CANVAS_ADDR                   (volatile uint32_t *)0xfe32a6c4
#define P_VDEC2_REC_CANVAS_ADDR                    (volatile uint32_t *)0xfe32a6c8
//28:24, read/write, current canvas idx, used in h264 only now
//23:0, read only, current canvas address, 23:16, Cr canvas addr, 15:8, Cb canvas addr, 7:0, Y  canvas addr
#define P_VDEC2_CURR_CANVAS_CTRL                   (volatile uint32_t *)0xfe32a6cc
#define P_VDEC2_MDEC_PIC_DC_THRESH                 (volatile uint32_t *)0xfe32a6e0
#define P_VDEC2_MDEC_PICR_BUF_STATUS               (volatile uint32_t *)0xfe32a6e4
#define P_VDEC2_MDEC_PICW_BUF_STATUS               (volatile uint32_t *)0xfe32a6e8
#define P_VDEC2_MCW_DBLK_WRRSP_CNT                 (volatile uint32_t *)0xfe32a6ec
#define P_VDEC2_MC_MBBOT_WRRSP_CNT                 (volatile uint32_t *)0xfe32a6f0
#define P_VDEC2_MDEC_PICW_BUF2_STATUS              (volatile uint32_t *)0xfe32a6f4
#define P_VDEC2_WRRSP_FIFO_PICW_DBK                (volatile uint32_t *)0xfe32a6f8
#define P_VDEC2_WRRSP_FIFO_PICW_MC                 (volatile uint32_t *)0xfe32a6fc
#define P_VDEC2_AV_SCRATCH_0                       (volatile uint32_t *)0xfe32a700
#define P_VDEC2_AV_SCRATCH_1                       (volatile uint32_t *)0xfe32a704
#define P_VDEC2_AV_SCRATCH_2                       (volatile uint32_t *)0xfe32a708
#define P_VDEC2_AV_SCRATCH_3                       (volatile uint32_t *)0xfe32a70c
#define P_VDEC2_AV_SCRATCH_4                       (volatile uint32_t *)0xfe32a710
#define P_VDEC2_AV_SCRATCH_5                       (volatile uint32_t *)0xfe32a714
#define P_VDEC2_AV_SCRATCH_6                       (volatile uint32_t *)0xfe32a718
#define P_VDEC2_AV_SCRATCH_7                       (volatile uint32_t *)0xfe32a71c
#define P_VDEC2_AV_SCRATCH_8                       (volatile uint32_t *)0xfe32a720
#define P_VDEC2_AV_SCRATCH_9                       (volatile uint32_t *)0xfe32a724
#define P_VDEC2_AV_SCRATCH_A                       (volatile uint32_t *)0xfe32a728
#define P_VDEC2_AV_SCRATCH_B                       (volatile uint32_t *)0xfe32a72c
#define P_VDEC2_AV_SCRATCH_C                       (volatile uint32_t *)0xfe32a730
#define P_VDEC2_AV_SCRATCH_D                       (volatile uint32_t *)0xfe32a734
#define P_VDEC2_AV_SCRATCH_E                       (volatile uint32_t *)0xfe32a738
#define P_VDEC2_AV_SCRATCH_F                       (volatile uint32_t *)0xfe32a73c
#define P_VDEC2_AV_SCRATCH_G                       (volatile uint32_t *)0xfe32a740
#define P_VDEC2_AV_SCRATCH_H                       (volatile uint32_t *)0xfe32a744
#define P_VDEC2_AV_SCRATCH_I                       (volatile uint32_t *)0xfe32a748
#define P_VDEC2_AV_SCRATCH_J                       (volatile uint32_t *)0xfe32a74c
#define P_VDEC2_AV_SCRATCH_K                       (volatile uint32_t *)0xfe32a750
#define P_VDEC2_AV_SCRATCH_L                       (volatile uint32_t *)0xfe32a754
#define P_VDEC2_AV_SCRATCH_M                       (volatile uint32_t *)0xfe32a758
#define P_VDEC2_AV_SCRATCH_N                       (volatile uint32_t *)0xfe32a75c
// bit[29:24] A_brst_num_co_mb
// bit[21:16] A_id_co_mb
// bit[11:0] wrrsp_count_co_mb
#define P_VDEC2_WRRSP_CO_MB                        (volatile uint32_t *)0xfe32a760
// bit[29:24] A_brst_num_dcac
// bit[21:16] A_id_dcac
// bit[11:0] wrrsp_count_dcac
#define P_VDEC2_WRRSP_DCAC                         (volatile uint32_t *)0xfe32a764
// bit[11:0] wrrsp_count_vld
#define P_VDEC2_WRRSP_VLD                          (volatile uint32_t *)0xfe32a768
// doublew_cfg0[0];     //       Second Channel Enable, 1:Enable 0:Disable
// doublew_cfg0[3:1];   // [2:0] Endian Control for Luma
// doublew_cfg0[5:4];   // [1:0] Pixel sel by horizontal, 0x:1/2 10:left 11:right
// doublew_cfg0[7:6];   // [1:0] Pixel sel by vertical,   0x:1/2 10:up 11:down
// doublew_cfg0[8];     //       Size by horizontal, 0:original size 1: 1/2 shrunken size
// doublew_cfg0[9];     //       Size by vertical,   0:original size 1: 1/2 shrunken size
// doublew_cfg0[10];    //       1:Round 0:Truncation
// doublew_cfg0[11];    //       DMA Urgent
// doublew_cfg0[17:12]; // [5:0] DMA Burst Number
// doublew_cfg0[23:18]; // [5:0] DMA ID
// doublew_cfg0[26:24]; // [2:0] Endian Control for Chroma
// doublew_cfg0[27];    //       Source from, 1:MCW 0:DBLK
// doublew_cfg0[29:28]; // [1:0] 0x:select both top and bottom 10:select top 11:select bottom
// doublew_cfg0[30];    //       0:no merge 1:automatic merge
// doublew_cfg0[31];    //       0:Y addr no change 1:Y addr divided to half
#define P_VDEC2_MDEC_DOUBLEW_CFG0                  (volatile uint32_t *)0xfe32a76c
// doublew_cfg1[7:0];   // [7:0] DMA Canvas Address for Luma
// doublew_cfg1[15:8];  // [7:0] DMA Canvas Address for Chroma
// doublew_cfg1[16];    //       Disable 1st Write -
// doublew_cfg1[17];    //       Reverse to original version -
// doublew_cfg1[18];    //       DMA Address Mode - 0:Canvas Mode 1:Non-Canvas Mode
#define P_VDEC2_MDEC_DOUBLEW_CFG1                  (volatile uint32_t *)0xfe32a770
// doublew_cfg2[11:0];  //[11:0] vertical flip initial value
// doublew_cfg2[15];    //       vertical flip enable
// doublew_cfg2[24:16]; // [8:0] horizontal flip initial value
// doublew_cfg2[31];    //       horizontal flip enable
#define P_VDEC2_MDEC_DOUBLEW_CFG2                  (volatile uint32_t *)0xfe32a774
// doublew_cfg3[31:0];  //[31:0] non-canvas start address for Luma -
#define P_VDEC2_MDEC_DOUBLEW_CFG3                  (volatile uint32_t *)0xfe32a778
// doublew_cfg4[31:0];  //[31:0] non-canvas start address for Chroma -
#define P_VDEC2_MDEC_DOUBLEW_CFG4                  (volatile uint32_t *)0xfe32a77c
// doublew_cfg5[12:0];  //[12:0] non-canvas picture width for Luma -
// doublew_cfg5[28:16]; //[12:0] non-canvas picture width for Chroma -
#define P_VDEC2_MDEC_DOUBLEW_CFG5                  (volatile uint32_t *)0xfe32a780
// doublew_cfg6: reserved
#define P_VDEC2_MDEC_DOUBLEW_CFG6                  (volatile uint32_t *)0xfe32a784
// doublew_cfg7: reserved
#define P_VDEC2_MDEC_DOUBLEW_CFG7                  (volatile uint32_t *)0xfe32a788
// doublew_status[11:0];//[11:0] wrrsp_count_doublew
// doublew_status[12];  //       doublew_status_busy
// doublew_status[13];  //       doublew_status_error
#define P_VDEC2_MDEC_DOUBLEW_STATUS                (volatile uint32_t *)0xfe32a78c
#define P_VDEC2_MDEC_EXTIF_CFG0                    (volatile uint32_t *)0xfe32a790
#define P_VDEC2_MDEC_EXTIF_CFG1                    (volatile uint32_t *)0xfe32a794
#define P_VDEC2_MDEC_EXTIF_CFG2                    (volatile uint32_t *)0xfe32a798
#define P_VDEC2_MDEC_EXTIF_STS0                    (volatile uint32_t *)0xfe32a79c
#define P_VDEC2_MDEC_PICW_BUFDW_CFG0               (volatile uint32_t *)0xfe32a7a0
#define P_VDEC2_MDEC_PICW_BUFDW_CFG1               (volatile uint32_t *)0xfe32a7a4
#define P_VDEC2_MDEC_CAV_LUT_DATAL                 (volatile uint32_t *)0xfe32a7a8
#define P_VDEC2_MDEC_CAV_LUT_DATAH                 (volatile uint32_t *)0xfe32a7ac
#define P_VDEC2_MDEC_CAV_LUT_ADDR                  (volatile uint32_t *)0xfe32a7b0
#define P_VDEC2_MDEC_CAV_CFG0                      (volatile uint32_t *)0xfe32a7b4
#define P_VDEC2_MDEC_CRCW                          (volatile uint32_t *)0xfe32a7b8
#define P_VDEC2_MDEC_PIC_DC_CTRL2                  (volatile uint32_t *)0xfe32a7bc
//======================================
//  MC Control Register Bits
//
//======================================
// For bits, just copy the defines...don't translate to addresses
    //`define MC_RESET	    16'h0002
//======================================
//  MB Info Register Bits
//
//======================================
//======================================
//  MB Info Register Bits
//
//======================================
//========================================================================
// DBLK Register:  12'h950 - 12'h97f
//========================================================================
#define P_VDEC2_DBLK_RST                           (volatile uint32_t *)0xfe32a540
#define P_VDEC2_DBLK_CTRL                          (volatile uint32_t *)0xfe32a544
#define P_VDEC2_DBLK_MB_WID_HEIGHT                 (volatile uint32_t *)0xfe32a548
#define P_VDEC2_DBLK_STATUS                        (volatile uint32_t *)0xfe32a54c
#define P_VDEC2_DBLK_CMD_CTRL                      (volatile uint32_t *)0xfe32a550
#define P_VDEC2_DBLK_MB_XY                         (volatile uint32_t *)0xfe32a554
#define P_VDEC2_DBLK_QP                            (volatile uint32_t *)0xfe32a558
#define P_VDEC2_DBLK_Y_BHFILT                      (volatile uint32_t *)0xfe32a55c
#define P_VDEC2_DBLK_Y_BHFILT_HIGH                 (volatile uint32_t *)0xfe32a560
#define P_VDEC2_DBLK_Y_BVFILT                      (volatile uint32_t *)0xfe32a564
#define P_VDEC2_DBLK_CB_BFILT                      (volatile uint32_t *)0xfe32a568
#define P_VDEC2_DBLK_CR_BFILT                      (volatile uint32_t *)0xfe32a56c
#define P_VDEC2_DBLK_Y_HFILT                       (volatile uint32_t *)0xfe32a570
#define P_VDEC2_DBLK_Y_HFILT_HIGH                  (volatile uint32_t *)0xfe32a574
#define P_VDEC2_DBLK_Y_VFILT                       (volatile uint32_t *)0xfe32a578
#define P_VDEC2_DBLK_CB_FILT                       (volatile uint32_t *)0xfe32a57c
#define P_VDEC2_DBLK_CR_FILT                       (volatile uint32_t *)0xfe32a580
#define P_VDEC2_DBLK_BETAX_QP_SEL                  (volatile uint32_t *)0xfe32a584
#define P_VDEC2_DBLK_CLIP_CTRL0                    (volatile uint32_t *)0xfe32a588
#define P_VDEC2_DBLK_CLIP_CTRL1                    (volatile uint32_t *)0xfe32a58c
#define P_VDEC2_DBLK_CLIP_CTRL2                    (volatile uint32_t *)0xfe32a590
#define P_VDEC2_DBLK_CLIP_CTRL3                    (volatile uint32_t *)0xfe32a594
#define P_VDEC2_DBLK_CLIP_CTRL4                    (volatile uint32_t *)0xfe32a598
#define P_VDEC2_DBLK_CLIP_CTRL5                    (volatile uint32_t *)0xfe32a59c
#define P_VDEC2_DBLK_CLIP_CTRL6                    (volatile uint32_t *)0xfe32a5a0
#define P_VDEC2_DBLK_CLIP_CTRL7                    (volatile uint32_t *)0xfe32a5a4
#define P_VDEC2_DBLK_CLIP_CTRL8                    (volatile uint32_t *)0xfe32a5a8
#define P_VDEC2_DBLK_STATUS1                       (volatile uint32_t *)0xfe32a5ac
#define P_VDEC2_DBLK_GCLK_FREE                     (volatile uint32_t *)0xfe32a5b0
#define P_VDEC2_DBLK_GCLK_OFF                      (volatile uint32_t *)0xfe32a5b4
#define P_VDEC2_DBLK_AVSFLAGS                      (volatile uint32_t *)0xfe32a5b8
// bit 15:0
#define P_VDEC2_DBLK_CBPY                          (volatile uint32_t *)0xfe32a5c0
// bit 11:8 -- deblk_cbpy_bottom
// bit 7:4 -- deblk_cbpy_left
// bit 3:0 -- deblk_cbpy_top
#define P_VDEC2_DBLK_CBPY_ADJ                      (volatile uint32_t *)0xfe32a5c4
// bit 7:0 -- deblk_cbpc
#define P_VDEC2_DBLK_CBPC                          (volatile uint32_t *)0xfe32a5c8
// bit 15 -- bottom_mb
// bit 14 -- left_mb
// bit 13 -- top_mb
// bit 12 -- reserved
// bit 11:8 -- deblk_cbpc_bottom
// bit 7:4 -- deblk_cbpc_left
// bit 3:0 -- deblk_cbpc_top
#define P_VDEC2_DBLK_CBPC_ADJ                      (volatile uint32_t *)0xfe32a5cc
// bit 15:8 -- deblk_hmvd   -- {left_1, left_0, below_1, below_0, block3-0}
// bit 7:0 -- deblk_vmvd    -- {top_1, top_0, below_1, below_0, block3-0}
#define P_VDEC2_DBLK_VHMVD                         (volatile uint32_t *)0xfe32a5d0
// bit 13:12 -- right_vmvd
// bit 11 -- right_above_vmvd
// bit 10 -- left_below_hmvd
// bit 9 -- disable_dblk_luma
// bit 8 -- disable_dblk_chroma
// bit 7 -- bBelowRefDiff
// bit 6 -- bLeftRefDiff
// bit 5 -- bAboveRefDiff
// bit 4 -- reserved
// bit 3 -- s_below
// bit 2 -- s_left
// bit 1 -- s_above
// bit 0 -- s
#define P_VDEC2_DBLK_STRONG                        (volatile uint32_t *)0xfe32a5d4
// bit 14:10 -- PQUANT
// bit 9:5 -- left_PQUANT
// bit 4:0 -- top_PQUANT
#define P_VDEC2_DBLK_RV8_QUANT                     (volatile uint32_t *)0xfe32a5d8
#define P_VDEC2_DBLK_CBUS_HCMD2                    (volatile uint32_t *)0xfe32a5dc
#define P_VDEC2_DBLK_CBUS_HCMD1                    (volatile uint32_t *)0xfe32a5e0
#define P_VDEC2_DBLK_CBUS_HCMD0                    (volatile uint32_t *)0xfe32a5e4
#define P_VDEC2_DBLK_VLD_HCMD2                     (volatile uint32_t *)0xfe32a5e8
#define P_VDEC2_DBLK_VLD_HCMD1                     (volatile uint32_t *)0xfe32a5ec
#define P_VDEC2_DBLK_VLD_HCMD0                     (volatile uint32_t *)0xfe32a5f0
#define P_VDEC2_DBLK_OST_YBASE                     (volatile uint32_t *)0xfe32a5f4
#define P_VDEC2_DBLK_OST_CBCRDIFF                  (volatile uint32_t *)0xfe32a5f8
//13:8 dblk thread ID and token
//5:0  dblk prearbiter burst num
#define P_VDEC2_DBLK_CTRL1                         (volatile uint32_t *)0xfe32a5fc
// MCRCC_CTL1
// 31:3  <reserved[23:0]>
// 2     <cfg_field_pic>
// 1     <sw_rst>
// 0     <bypass_en>
#define P_VDEC2_MCRCC_CTL1                         (volatile uint32_t *)0xfe32a600
// MCRCC_CTL2
// 31:24    <cfg_cache_anc01_c[7:0]>
// 23:16    <cfg_cache_anc01_y[7:0]>
// 15:8     <cfg_cache_anc00_c[7:0]>
// 7:0      <cfg_cache_anc00_y[7:0]>
#define P_VDEC2_MCRCC_CTL2                         (volatile uint32_t *)0xfe32a604
// MCRCC_CTL3
// 31:24    <cfg_cache_anc11_c[7:0]>
// 23:16    <cfg_cache_anc11_y[7:0]>
// 15:8     <cfg_cache_anc10_c[7:0]>
// 7:0      <cfg_cache_anc10_y[7:0]>
#define P_VDEC2_MCRCC_CTL3                         (volatile uint32_t *)0xfe32a608
// bit[31:10] reserved
// bit[9:0] sw_clock_gating control
// [9] vdec clk_en for assist and cbus.
// [8] vdec clk_en for ddr
// [7] vdec clk_en for vcpu
// [6] vdec clk_en for assist
// [5] vdec clk_en for dblk
// [4] vdec clk_en for iqidct
// [3] vdec clk_en for mc
// [2] vdec clk_en for pic_dc
// [1] vdec clk_en for psc
// [0] vdec clk_en for vld
#define P_VDEC2_GCLK_EN                            (volatile uint32_t *)0xfe32a60c
// [0]  Reserved
// [1]  Reserved
// [2]  Reset assist, mdec's CBUS
// [3]  Reset mdec's VLD
// [4]  Reset mdec's VLD
// [5]  Reset mdec's VLD
// [6]  Reset mdec's IQIDCT
// [7]  Reset mdec's MC
// [8]  Reset mdec's DBLK
// [9]  Reset mdec's PIC_DC
// [10] Reset mdec's Pscale
// [11] Reset vcpu's MCPU
// [12] Reset vcpu's CCPU
// [13] Reset mmc_pre_arb
#define P_VDEC2_MDEC_SW_RESET                      (volatile uint32_t *)0xfe32a610
// [0]      dblkmerge_bypass
// [2:1]    picture_structure
// [3]      is_mbaff_frame
// [5:4]    canvas_write_mode
// [6]      Reserved
// [7]      write_mask_redge
// [31:6]   Reserved
#define P_VDEC2_MDEC_DBLKWMERGE_CTRL0              (volatile uint32_t *)0xfe32a614
// [12:0]   dblkwmerge_pic_w
// [15:13]  Reserved
// [28:16]  dblkwmerge_pic_h
// [31:29]  Reserved
#define P_VDEC2_MDEC_DBLKWMERGE_CTRL1              (volatile uint32_t *)0xfe32a618
//DBLK last address 12'h97f
//
// Closing file:  mdec_regs.h
//
//
// Reading file:  mdec_regs.h
//
//========================================================================
//  MDEC module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_VDEC_MDEC_CBUS_BASE = 0x09
// -----------------------------------------------
#define P_HEVC_MC_CTRL_REG                         (volatile uint32_t *)0xfe32e400
#define P_HEVC_MC_MB_INFO                          (volatile uint32_t *)0xfe32e404
#define P_HEVC_MC_PIC_INFO                         (volatile uint32_t *)0xfe32e408
#define P_HEVC_MC_HALF_PEL_ONE                     (volatile uint32_t *)0xfe32e40c
#define P_HEVC_MC_HALF_PEL_TWO                     (volatile uint32_t *)0xfe32e410
#define P_HEVC_POWER_CTL_MC                        (volatile uint32_t *)0xfe32e414
#define P_HEVC_MC_CMD                              (volatile uint32_t *)0xfe32e418
#define P_HEVC_MC_CTRL0                            (volatile uint32_t *)0xfe32e41c
#define P_HEVC_MC_PIC_W_H                          (volatile uint32_t *)0xfe32e420
#define P_HEVC_MC_STATUS0                          (volatile uint32_t *)0xfe32e424
#define P_HEVC_MC_STATUS1                          (volatile uint32_t *)0xfe32e428
#define P_HEVC_MC_CTRL1                            (volatile uint32_t *)0xfe32e42c
#define P_HEVC_MC_MIX_RATIO0                       (volatile uint32_t *)0xfe32e430
#define P_HEVC_MC_MIX_RATIO1                       (volatile uint32_t *)0xfe32e434
#define P_HEVC_MC_DP_MB_XY                         (volatile uint32_t *)0xfe32e438
#define P_HEVC_MC_OM_MB_XY                         (volatile uint32_t *)0xfe32e43c
#define P_HEVC_PSCALE_RST                          (volatile uint32_t *)0xfe32e440
#define P_HEVC_PSCALE_CTRL                         (volatile uint32_t *)0xfe32e444
#define P_HEVC_PSCALE_PICI_W                       (volatile uint32_t *)0xfe32e448
#define P_HEVC_PSCALE_PICI_H                       (volatile uint32_t *)0xfe32e44c
#define P_HEVC_PSCALE_PICO_W                       (volatile uint32_t *)0xfe32e450
#define P_HEVC_PSCALE_PICO_H                       (volatile uint32_t *)0xfe32e454
#define P_HEVC_PSCALE_PICO_START_X                 (volatile uint32_t *)0xfe32e458
#define P_HEVC_PSCALE_PICO_START_Y                 (volatile uint32_t *)0xfe32e45c
#define P_HEVC_PSCALE_DUMMY                        (volatile uint32_t *)0xfe32e460
#define P_HEVC_PSCALE_FILT0_COEF0                  (volatile uint32_t *)0xfe32e464
#define P_HEVC_PSCALE_FILT0_COEF1                  (volatile uint32_t *)0xfe32e468
#define P_HEVC_PSCALE_CMD_CTRL                     (volatile uint32_t *)0xfe32e46c
#define P_HEVC_PSCALE_CMD_BLK_X                    (volatile uint32_t *)0xfe32e470
#define P_HEVC_PSCALE_CMD_BLK_Y                    (volatile uint32_t *)0xfe32e474
#define P_HEVC_PSCALE_STATUS                       (volatile uint32_t *)0xfe32e478
#define P_HEVC_PSCALE_BMEM_ADDR                    (volatile uint32_t *)0xfe32e47c
#define P_HEVC_PSCALE_BMEM_DAT                     (volatile uint32_t *)0xfe32e480
#define P_HEVC_PSCALE_DRAM_BUF_CTRL                (volatile uint32_t *)0xfe32e484
#define P_HEVC_PSCALE_MCMD_CTRL                    (volatile uint32_t *)0xfe32e488
#define P_HEVC_PSCALE_MCMD_XSIZE                   (volatile uint32_t *)0xfe32e48c
#define P_HEVC_PSCALE_MCMD_YSIZE                   (volatile uint32_t *)0xfe32e490
#define P_HEVC_PSCALE_RBUF_START_BLKX              (volatile uint32_t *)0xfe32e494
#define P_HEVC_PSCALE_RBUF_START_BLKY              (volatile uint32_t *)0xfe32e498
//`define PSCALE_RBUF_MB_WIDTH   8'h27
#define P_HEVC_PSCALE_PICO_SHIFT_XY                (volatile uint32_t *)0xfe32e4a0
#define P_HEVC_PSCALE_CTRL1                        (volatile uint32_t *)0xfe32e4a4
//Bit 15, wmask enable
//Bit 14:13, filt0 srckey_less,
//Bit 12:11, filt1 srckey_less, in the case of the interpolated data is equal distance to
//key data and normal data, 00: select normal data, 01: select right data, 10: select key data
//Bit 10:9, srckey mode, 00: equal, 01: less than or equal, 10: great than or equal
//Bit 8, src key enable
//Bit 7:0, y src key
#define P_HEVC_PSCALE_SRCKEY_CTRL0                 (volatile uint32_t *)0xfe32e4a8
//Bit 15:8, cb src key
//Bit 7:0, cr src key
#define P_HEVC_PSCALE_SRCKEY_CTRL1                 (volatile uint32_t *)0xfe32e4ac
//Bit 22:16 canvas_rd_addr2
//Bit 14:8 canvas_rd_addr1
//Bit 6:0 canvas_rd_addr1
#define P_HEVC_PSCALE_CANVAS_RD_ADDR               (volatile uint32_t *)0xfe32e4b0
//Bit 22:16 canvas_wr_addr2
//Bit 14:8 canvas_wr_addr1
//Bit 6:0 canvas_wr_addr1
#define P_HEVC_PSCALE_CANVAS_WR_ADDR               (volatile uint32_t *)0xfe32e4b4
//bit 13:8 pscale thread ID and token
//bit 7 disable write response count adding to busy bit
//bit 5:0  pscale prearbiter burst num
#define P_HEVC_PSCALE_CTRL2                        (volatile uint32_t *)0xfe32e4b8
//   31 - use_omem_mb_xy_auto
//23:16 - omem_max_mb_x
//15:8  - omem_mb_y_auto
// 7:0  - omem_mb_x_auto
#define P_HEVC_HDEC_MC_OMEM_AUTO                   (volatile uint32_t *)0xfe32e4c0
#define P_HEVC_HDEC_MC_MBRIGHT_IDX                 (volatile uint32_t *)0xfe32e4c4
#define P_HEVC_HDEC_MC_MBRIGHT_RD                  (volatile uint32_t *)0xfe32e4c8
#define P_HEVC_MC_MPORT_CTRL                       (volatile uint32_t *)0xfe32e500
#define P_HEVC_MC_MPORT_DAT                        (volatile uint32_t *)0xfe32e504
#define P_HEVC_MC_WT_PRED_CTRL                     (volatile uint32_t *)0xfe32e508
#define P_HEVC_MC_MBBOT_ST_EVEN_ADDR               (volatile uint32_t *)0xfe32e510
#define P_HEVC_MC_MBBOT_ST_ODD_ADDR                (volatile uint32_t *)0xfe32e514
#define P_HEVC_MC_DPDN_MB_XY                       (volatile uint32_t *)0xfe32e518
#define P_HEVC_MC_OMDN_MB_XY                       (volatile uint32_t *)0xfe32e51c
#define P_HEVC_MC_HCMDBUF_H                        (volatile uint32_t *)0xfe32e520
#define P_HEVC_MC_HCMDBUF_L                        (volatile uint32_t *)0xfe32e524
#define P_HEVC_MC_HCMD_H                           (volatile uint32_t *)0xfe32e528
#define P_HEVC_MC_HCMD_L                           (volatile uint32_t *)0xfe32e52c
#define P_HEVC_MC_IDCT_DAT                         (volatile uint32_t *)0xfe32e530
#define P_HEVC_MC_CTRL_GCLK_CTRL                   (volatile uint32_t *)0xfe32e534
#define P_HEVC_MC_OTHER_GCLK_CTRL                  (volatile uint32_t *)0xfe32e538
//Bit 29:24, mbbot thread ID and token
//Bit 21:16, mc read/write thread ID and token
//Bit 13:8,  mbbot pre-arbiter burst number
//Bit 5:0,   mc pre-arbiter burst number
#define P_HEVC_MC_CTRL2                            (volatile uint32_t *)0xfe32e53c
// `define DBLK_QUANT            8'h76 // ONLY for $ucode/real/amrisc/rv.s, reg value from apollo
//`define ANC1_CANVAS_ADDR      8'h80
//`define ANC2_CANVAS_ADDR      8'h81
//`define REC_CANVAS_ADDR       8'h89
//`define MDEC_PIC_W          8'h8c
//`define MDEC_PIC_H          8'h8d
// mdec_pic_dc_mux_ctrl[31]  -- mcr_hevc_mode
#define P_HEVC_MDEC_PIC_DC_MUX_CTRL                (volatile uint32_t *)0xfe32e634
#define P_HEVC_MDEC_PIC_DC_CTRL                    (volatile uint32_t *)0xfe32e638
#define P_HEVC_MDEC_PIC_DC_STATUS                  (volatile uint32_t *)0xfe32e63c
#define P_HEVC_ANC0_CANVAS_ADDR                    (volatile uint32_t *)0xfe32e640
#define P_HEVC_ANC1_CANVAS_ADDR                    (volatile uint32_t *)0xfe32e644
#define P_HEVC_ANC2_CANVAS_ADDR                    (volatile uint32_t *)0xfe32e648
#define P_HEVC_ANC3_CANVAS_ADDR                    (volatile uint32_t *)0xfe32e64c
#define P_HEVC_ANC4_CANVAS_ADDR                    (volatile uint32_t *)0xfe32e650
#define P_HEVC_ANC5_CANVAS_ADDR                    (volatile uint32_t *)0xfe32e654
#define P_HEVC_ANC6_CANVAS_ADDR                    (volatile uint32_t *)0xfe32e658
#define P_HEVC_ANC7_CANVAS_ADDR                    (volatile uint32_t *)0xfe32e65c
#define P_HEVC_ANC8_CANVAS_ADDR                    (volatile uint32_t *)0xfe32e660
#define P_HEVC_ANC9_CANVAS_ADDR                    (volatile uint32_t *)0xfe32e664
#define P_HEVC_ANC10_CANVAS_ADDR                   (volatile uint32_t *)0xfe32e668
#define P_HEVC_ANC11_CANVAS_ADDR                   (volatile uint32_t *)0xfe32e66c
#define P_HEVC_ANC12_CANVAS_ADDR                   (volatile uint32_t *)0xfe32e670
#define P_HEVC_ANC13_CANVAS_ADDR                   (volatile uint32_t *)0xfe32e674
#define P_HEVC_ANC14_CANVAS_ADDR                   (volatile uint32_t *)0xfe32e678
#define P_HEVC_ANC15_CANVAS_ADDR                   (volatile uint32_t *)0xfe32e67c
#define P_HEVC_ANC16_CANVAS_ADDR                   (volatile uint32_t *)0xfe32e680
#define P_HEVC_ANC17_CANVAS_ADDR                   (volatile uint32_t *)0xfe32e684
#define P_HEVC_ANC18_CANVAS_ADDR                   (volatile uint32_t *)0xfe32e688
#define P_HEVC_ANC19_CANVAS_ADDR                   (volatile uint32_t *)0xfe32e68c
#define P_HEVC_ANC20_CANVAS_ADDR                   (volatile uint32_t *)0xfe32e690
#define P_HEVC_ANC21_CANVAS_ADDR                   (volatile uint32_t *)0xfe32e694
#define P_HEVC_ANC22_CANVAS_ADDR                   (volatile uint32_t *)0xfe32e698
#define P_HEVC_ANC23_CANVAS_ADDR                   (volatile uint32_t *)0xfe32e69c
#define P_HEVC_ANC24_CANVAS_ADDR                   (volatile uint32_t *)0xfe32e6a0
#define P_HEVC_ANC25_CANVAS_ADDR                   (volatile uint32_t *)0xfe32e6a4
#define P_HEVC_ANC26_CANVAS_ADDR                   (volatile uint32_t *)0xfe32e6a8
#define P_HEVC_ANC27_CANVAS_ADDR                   (volatile uint32_t *)0xfe32e6ac
#define P_HEVC_ANC28_CANVAS_ADDR                   (volatile uint32_t *)0xfe32e6b0
#define P_HEVC_ANC29_CANVAS_ADDR                   (volatile uint32_t *)0xfe32e6b4
#define P_HEVC_ANC30_CANVAS_ADDR                   (volatile uint32_t *)0xfe32e6b8
#define P_HEVC_ANC31_CANVAS_ADDR                   (volatile uint32_t *)0xfe32e6bc
#define P_HEVC_DBKR_CANVAS_ADDR                    (volatile uint32_t *)0xfe32e6c0
#define P_HEVC_DBKW_CANVAS_ADDR                    (volatile uint32_t *)0xfe32e6c4
#define P_HEVC_REC_CANVAS_ADDR                     (volatile uint32_t *)0xfe32e6c8
//28:24, read/write, current canvas idx, used in h264 only now
//23:0, read only, current canvas address, 23:16, Cr canvas addr, 15:8, Cb canvas addr, 7:0, Y  canvas addr
#define P_HEVC_CURR_CANVAS_CTRL                    (volatile uint32_t *)0xfe32e6cc
#define P_HEVC_MDEC_PIC_DC_THRESH                  (volatile uint32_t *)0xfe32e6e0
#define P_HEVC_MDEC_PICR_BUF_STATUS                (volatile uint32_t *)0xfe32e6e4
#define P_HEVC_MDEC_PICW_BUF_STATUS                (volatile uint32_t *)0xfe32e6e8
#define P_HEVC_MCW_DBLK_WRRSP_CNT                  (volatile uint32_t *)0xfe32e6ec
#define P_HEVC_MC_MBBOT_WRRSP_CNT                  (volatile uint32_t *)0xfe32e6f0
#define P_HEVC_MDEC_PICW_BUF2_STATUS               (volatile uint32_t *)0xfe32e6f4
#define P_HEVC_WRRSP_FIFO_PICW_DBK                 (volatile uint32_t *)0xfe32e6f8
#define P_HEVC_WRRSP_FIFO_PICW_MC                  (volatile uint32_t *)0xfe32e6fc
#define P_HEVC_AV_SCRATCH_0                        (volatile uint32_t *)0xfe32e700
#define P_HEVC_AV_SCRATCH_1                        (volatile uint32_t *)0xfe32e704
#define P_HEVC_AV_SCRATCH_2                        (volatile uint32_t *)0xfe32e708
#define P_HEVC_AV_SCRATCH_3                        (volatile uint32_t *)0xfe32e70c
#define P_HEVC_AV_SCRATCH_4                        (volatile uint32_t *)0xfe32e710
#define P_HEVC_AV_SCRATCH_5                        (volatile uint32_t *)0xfe32e714
#define P_HEVC_AV_SCRATCH_6                        (volatile uint32_t *)0xfe32e718
#define P_HEVC_AV_SCRATCH_7                        (volatile uint32_t *)0xfe32e71c
#define P_HEVC_AV_SCRATCH_8                        (volatile uint32_t *)0xfe32e720
#define P_HEVC_AV_SCRATCH_9                        (volatile uint32_t *)0xfe32e724
#define P_HEVC_AV_SCRATCH_A                        (volatile uint32_t *)0xfe32e728
#define P_HEVC_AV_SCRATCH_B                        (volatile uint32_t *)0xfe32e72c
#define P_HEVC_AV_SCRATCH_C                        (volatile uint32_t *)0xfe32e730
#define P_HEVC_AV_SCRATCH_D                        (volatile uint32_t *)0xfe32e734
#define P_HEVC_AV_SCRATCH_E                        (volatile uint32_t *)0xfe32e738
#define P_HEVC_AV_SCRATCH_F                        (volatile uint32_t *)0xfe32e73c
#define P_HEVC_AV_SCRATCH_G                        (volatile uint32_t *)0xfe32e740
#define P_HEVC_AV_SCRATCH_H                        (volatile uint32_t *)0xfe32e744
#define P_HEVC_AV_SCRATCH_I                        (volatile uint32_t *)0xfe32e748
#define P_HEVC_AV_SCRATCH_J                        (volatile uint32_t *)0xfe32e74c
#define P_HEVC_AV_SCRATCH_K                        (volatile uint32_t *)0xfe32e750
#define P_HEVC_AV_SCRATCH_L                        (volatile uint32_t *)0xfe32e754
#define P_HEVC_AV_SCRATCH_M                        (volatile uint32_t *)0xfe32e758
#define P_HEVC_AV_SCRATCH_N                        (volatile uint32_t *)0xfe32e75c
// bit[29:24] A_brst_num_co_mb
// bit[21:16] A_id_co_mb
// bit[11:0] wrrsp_count_co_mb
#define P_HEVC_WRRSP_CO_MB                         (volatile uint32_t *)0xfe32e760
// bit[29:24] A_brst_num_dcac
// bit[21:16] A_id_dcac
// bit[11:0] wrrsp_count_dcac
#define P_HEVC_WRRSP_DCAC                          (volatile uint32_t *)0xfe32e764
// bit[11:0] wrrsp_count_vld
#define P_HEVC_WRRSP_VLD                           (volatile uint32_t *)0xfe32e768
// doublew_cfg0[0];     //       Second Channel Enable, 1:Enable 0:Disable
// doublew_cfg0[3:1];   // [2:0] Endian Control for Luma
// doublew_cfg0[5:4];   // [1:0] Pixel sel by horizontal, 0x:1/2 10:left 11:right
// doublew_cfg0[7:6];   // [1:0] Pixel sel by vertical,   0x:1/2 10:up 11:down
// doublew_cfg0[8];     //       Size by horizontal, 0:original size 1: 1/2 shrunken size
// doublew_cfg0[9];     //       Size by vertical,   0:original size 1: 1/2 shrunken size
// doublew_cfg0[10];    //       1:Round 0:Truncation
// doublew_cfg0[11];    //       DMA Urgent
// doublew_cfg0[17:12]; // [5:0] DMA Burst Number
// doublew_cfg0[23:18]; // [5:0] DMA ID
// doublew_cfg0[26:24]; // [2:0] Endian Control for Chroma
// doublew_cfg0[27];    //       Source from, 1:MCW 0:DBLK
// doublew_cfg0[29:28]; // [1:0] 0x:select both top and bottom 10:select top 11:select bottom
// doublew_cfg0[30];    //       0:no merge 1:automatic merge
// doublew_cfg0[31];    //       0:Y addr no change 1:Y addr divided to half
#define P_HEVC_MDEC_DOUBLEW_CFG0                   (volatile uint32_t *)0xfe32e76c
// doublew_cfg1[7:0];   // [7:0] DMA Canvas Address for Luma
// doublew_cfg1[15:8];  // [7:0] DMA Canvas Address for Chroma
// doublew_cfg1[16];    //       Disable 1st Write -
// doublew_cfg1[17];    //       Reverse to original version -
// doublew_cfg1[18];    //       DMA Address Mode - 0:Canvas Mode 1:Non-Canvas Mode
#define P_HEVC_MDEC_DOUBLEW_CFG1                   (volatile uint32_t *)0xfe32e770
// doublew_cfg2[11:0];  //[11:0] vertical flip initial value
// doublew_cfg2[15];    //       vertical flip enable
// doublew_cfg2[24:16]; // [8:0] horizontal flip initial value
// doublew_cfg2[31];    //       horizontal flip enable
#define P_HEVC_MDEC_DOUBLEW_CFG2                   (volatile uint32_t *)0xfe32e774
// doublew_cfg3[31:0];  //[31:0] non-canvas start address for Luma -
#define P_HEVC_MDEC_DOUBLEW_CFG3                   (volatile uint32_t *)0xfe32e778
// doublew_cfg4[31:0];  //[31:0] non-canvas start address for Chroma -
#define P_HEVC_MDEC_DOUBLEW_CFG4                   (volatile uint32_t *)0xfe32e77c
// doublew_cfg5[12:0];  //[12:0] non-canvas picture width for Luma -
// doublew_cfg5[28:16]; //[12:0] non-canvas picture width for Chroma -
#define P_HEVC_MDEC_DOUBLEW_CFG5                   (volatile uint32_t *)0xfe32e780
// doublew_cfg6: reserved
#define P_HEVC_MDEC_DOUBLEW_CFG6                   (volatile uint32_t *)0xfe32e784
// doublew_cfg7: reserved
#define P_HEVC_MDEC_DOUBLEW_CFG7                   (volatile uint32_t *)0xfe32e788
// doublew_status[11:0];//[11:0] wrrsp_count_doublew
// doublew_status[12];  //       doublew_status_busy
// doublew_status[13];  //       doublew_status_error
#define P_HEVC_MDEC_DOUBLEW_STATUS                 (volatile uint32_t *)0xfe32e78c
#define P_HEVC_MDEC_EXTIF_CFG0                     (volatile uint32_t *)0xfe32e790
#define P_HEVC_MDEC_EXTIF_CFG1                     (volatile uint32_t *)0xfe32e794
#define P_HEVC_MDEC_EXTIF_CFG2                     (volatile uint32_t *)0xfe32e798
#define P_HEVC_MDEC_EXTIF_STS0                     (volatile uint32_t *)0xfe32e79c
#define P_HEVC_MDEC_PICW_BUFDW_CFG0                (volatile uint32_t *)0xfe32e7a0
#define P_HEVC_MDEC_PICW_BUFDW_CFG1                (volatile uint32_t *)0xfe32e7a4
#define P_HEVC_MDEC_CAV_LUT_DATAL                  (volatile uint32_t *)0xfe32e7a8
#define P_HEVC_MDEC_CAV_LUT_DATAH                  (volatile uint32_t *)0xfe32e7ac
#define P_HEVC_MDEC_CAV_LUT_ADDR                   (volatile uint32_t *)0xfe32e7b0
#define P_HEVC_MDEC_CAV_CFG0                       (volatile uint32_t *)0xfe32e7b4
#define P_HEVC_MDEC_CRCW                           (volatile uint32_t *)0xfe32e7b8
#define P_HEVC_MDEC_PIC_DC_CTRL2                   (volatile uint32_t *)0xfe32e7bc
//======================================
//  MC Control Register Bits
//
//======================================
// For bits, just copy the defines...don't translate to addresses
    //`define MC_RESET	    16'h0002
//======================================
//  MB Info Register Bits
//
//======================================
//======================================
//  MB Info Register Bits
//
//======================================
//========================================================================
// DBLK Register:  12'h950 - 12'h97f
//========================================================================
#define P_HEVC_DBLK_RST                            (volatile uint32_t *)0xfe32e540
#define P_HEVC_DBLK_CTRL                           (volatile uint32_t *)0xfe32e544
#define P_HEVC_DBLK_MB_WID_HEIGHT                  (volatile uint32_t *)0xfe32e548
#define P_HEVC_DBLK_STATUS                         (volatile uint32_t *)0xfe32e54c
#define P_HEVC_DBLK_CMD_CTRL                       (volatile uint32_t *)0xfe32e550
#define P_HEVC_DBLK_MB_XY                          (volatile uint32_t *)0xfe32e554
#define P_HEVC_DBLK_QP                             (volatile uint32_t *)0xfe32e558
#define P_HEVC_DBLK_Y_BHFILT                       (volatile uint32_t *)0xfe32e55c
#define P_HEVC_DBLK_Y_BHFILT_HIGH                  (volatile uint32_t *)0xfe32e560
#define P_HEVC_DBLK_Y_BVFILT                       (volatile uint32_t *)0xfe32e564
#define P_HEVC_DBLK_CB_BFILT                       (volatile uint32_t *)0xfe32e568
#define P_HEVC_DBLK_CR_BFILT                       (volatile uint32_t *)0xfe32e56c
#define P_HEVC_DBLK_Y_HFILT                        (volatile uint32_t *)0xfe32e570
#define P_HEVC_DBLK_Y_HFILT_HIGH                   (volatile uint32_t *)0xfe32e574
#define P_HEVC_DBLK_Y_VFILT                        (volatile uint32_t *)0xfe32e578
#define P_HEVC_DBLK_CB_FILT                        (volatile uint32_t *)0xfe32e57c
#define P_HEVC_DBLK_CR_FILT                        (volatile uint32_t *)0xfe32e580
#define P_HEVC_DBLK_BETAX_QP_SEL                   (volatile uint32_t *)0xfe32e584
#define P_HEVC_DBLK_CLIP_CTRL0                     (volatile uint32_t *)0xfe32e588
#define P_HEVC_DBLK_CLIP_CTRL1                     (volatile uint32_t *)0xfe32e58c
#define P_HEVC_DBLK_CLIP_CTRL2                     (volatile uint32_t *)0xfe32e590
#define P_HEVC_DBLK_CLIP_CTRL3                     (volatile uint32_t *)0xfe32e594
#define P_HEVC_DBLK_CLIP_CTRL4                     (volatile uint32_t *)0xfe32e598
#define P_HEVC_DBLK_CLIP_CTRL5                     (volatile uint32_t *)0xfe32e59c
#define P_HEVC_DBLK_CLIP_CTRL6                     (volatile uint32_t *)0xfe32e5a0
#define P_HEVC_DBLK_CLIP_CTRL7                     (volatile uint32_t *)0xfe32e5a4
#define P_HEVC_DBLK_CLIP_CTRL8                     (volatile uint32_t *)0xfe32e5a8
#define P_HEVC_DBLK_STATUS1                        (volatile uint32_t *)0xfe32e5ac
#define P_HEVC_DBLK_GCLK_FREE                      (volatile uint32_t *)0xfe32e5b0
#define P_HEVC_DBLK_GCLK_OFF                       (volatile uint32_t *)0xfe32e5b4
#define P_HEVC_DBLK_AVSFLAGS                       (volatile uint32_t *)0xfe32e5b8
// bit 15:0
#define P_HEVC_DBLK_CBPY                           (volatile uint32_t *)0xfe32e5c0
// bit 11:8 -- deblk_cbpy_bottom
// bit 7:4 -- deblk_cbpy_left
// bit 3:0 -- deblk_cbpy_top
#define P_HEVC_DBLK_CBPY_ADJ                       (volatile uint32_t *)0xfe32e5c4
// bit 7:0 -- deblk_cbpc
#define P_HEVC_DBLK_CBPC                           (volatile uint32_t *)0xfe32e5c8
// bit 15 -- bottom_mb
// bit 14 -- left_mb
// bit 13 -- top_mb
// bit 12 -- reserved
// bit 11:8 -- deblk_cbpc_bottom
// bit 7:4 -- deblk_cbpc_left
// bit 3:0 -- deblk_cbpc_top
#define P_HEVC_DBLK_CBPC_ADJ                       (volatile uint32_t *)0xfe32e5cc
// bit 15:8 -- deblk_hmvd   -- {left_1, left_0, below_1, below_0, block3-0}
// bit 7:0 -- deblk_vmvd    -- {top_1, top_0, below_1, below_0, block3-0}
#define P_HEVC_DBLK_VHMVD                          (volatile uint32_t *)0xfe32e5d0
// bit 13:12 -- right_vmvd
// bit 11 -- right_above_vmvd
// bit 10 -- left_below_hmvd
// bit 9 -- disable_dblk_luma
// bit 8 -- disable_dblk_chroma
// bit 7 -- bBelowRefDiff
// bit 6 -- bLeftRefDiff
// bit 5 -- bAboveRefDiff
// bit 4 -- reserved
// bit 3 -- s_below
// bit 2 -- s_left
// bit 1 -- s_above
// bit 0 -- s
#define P_HEVC_DBLK_STRONG                         (volatile uint32_t *)0xfe32e5d4
// bit 14:10 -- PQUANT
// bit 9:5 -- left_PQUANT
// bit 4:0 -- top_PQUANT
#define P_HEVC_DBLK_RV8_QUANT                      (volatile uint32_t *)0xfe32e5d8
#define P_HEVC_DBLK_CBUS_HCMD2                     (volatile uint32_t *)0xfe32e5dc
#define P_HEVC_DBLK_CBUS_HCMD1                     (volatile uint32_t *)0xfe32e5e0
#define P_HEVC_DBLK_CBUS_HCMD0                     (volatile uint32_t *)0xfe32e5e4
#define P_HEVC_DBLK_VLD_HCMD2                      (volatile uint32_t *)0xfe32e5e8
#define P_HEVC_DBLK_VLD_HCMD1                      (volatile uint32_t *)0xfe32e5ec
#define P_HEVC_DBLK_VLD_HCMD0                      (volatile uint32_t *)0xfe32e5f0
#define P_HEVC_DBLK_OST_YBASE                      (volatile uint32_t *)0xfe32e5f4
#define P_HEVC_DBLK_OST_CBCRDIFF                   (volatile uint32_t *)0xfe32e5f8
//13:8 dblk thread ID and token
//5:0  dblk prearbiter burst num
#define P_HEVC_DBLK_CTRL1                          (volatile uint32_t *)0xfe32e5fc
// MCRCC_CTL1
// 31:3  <reserved[23:0]>
// 2     <cfg_field_pic>
// 1     <sw_rst>
// 0     <bypass_en>
#define P_HEVC_MCRCC_CTL1                          (volatile uint32_t *)0xfe32e600
// MCRCC_CTL2
// 31:24    <cfg_cache_anc01_c[7:0]>
// 23:16    <cfg_cache_anc01_y[7:0]>
// 15:8     <cfg_cache_anc00_c[7:0]>
// 7:0      <cfg_cache_anc00_y[7:0]>
#define P_HEVC_MCRCC_CTL2                          (volatile uint32_t *)0xfe32e604
// MCRCC_CTL3
// 31:24    <cfg_cache_anc11_c[7:0]>
// 23:16    <cfg_cache_anc11_y[7:0]>
// 15:8     <cfg_cache_anc10_c[7:0]>
// 7:0      <cfg_cache_anc10_y[7:0]>
#define P_HEVC_MCRCC_CTL3                          (volatile uint32_t *)0xfe32e608
// bit[31:10] reserved
// bit[9:0] sw_clock_gating control
// [9] vdec clk_en for assist and cbus.
// [8] vdec clk_en for ddr
// [7] vdec clk_en for vcpu
// [6] vdec clk_en for assist
// [5] vdec clk_en for dblk
// [4] vdec clk_en for iqidct
// [3] vdec clk_en for mc
// [2] vdec clk_en for pic_dc
// [1] vdec clk_en for psc
// [0] vdec clk_en for vld
#define P_HEVC_GCLK_EN                             (volatile uint32_t *)0xfe32e60c
// [0]  Reserved
// [1]  Reserved
// [2]  Reset assist, mdec's CBUS
// [3]  Reset mdec's VLD
// [4]  Reset mdec's VLD
// [5]  Reset mdec's VLD
// [6]  Reset mdec's IQIDCT
// [7]  Reset mdec's MC
// [8]  Reset mdec's DBLK
// [9]  Reset mdec's PIC_DC
// [10] Reset mdec's Pscale
// [11] Reset vcpu's MCPU
// [12] Reset vcpu's CCPU
// [13] Reset mmc_pre_arb
#define P_HEVC_MDEC_SW_RESET                       (volatile uint32_t *)0xfe32e610
// [0]      dblkmerge_bypass
// [2:1]    picture_structure
// [3]      is_mbaff_frame
// [5:4]    canvas_write_mode
// [6]      Reserved
// [7]      write_mask_redge
// [31:6]   Reserved
#define P_HEVC_MDEC_DBLKWMERGE_CTRL0               (volatile uint32_t *)0xfe32e614
// [12:0]   dblkwmerge_pic_w
// [15:13]  Reserved
// [28:16]  dblkwmerge_pic_h
// [31:29]  Reserved
#define P_HEVC_MDEC_DBLKWMERGE_CTRL1               (volatile uint32_t *)0xfe32e618
//DBLK last address 12'h97f
//
// Closing file:  mdec_regs.h
//
//
// Reading file:  vld_regs.h
//
//========================================================================
//  VLD module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_VDEC_VLD_CBUS_BASE = 0x0c
// -----------------------------------------------
#define P_HCODEC_VLD_STATUS_CTRL                   (volatile uint32_t *)0xfe327000
//
// bit 15 -- use_separate_c_path
// bit 14 -- reserved
// bit 13 -- h264_co_mb_wr_busy
// bit 12 -- vld_error_protect
// bit 11 -- m4_mv_qpixel
// bit 10 -- use_old_shift_en
// bit 9 -- output_mv_not_pmv
// bit 8:5 -- force_zigzag
// bit 4 -- force_zigzag_en
// bit 3 -- disable_viff_anempty_int
// bit 2 -- disable_m2_ac_coeff_one_cycle
// bit 1 -- forced_reset  force reset pmv
// bit 0 -- mpeg_type  0:mpeg1 1: mpeg2
#define P_HCODEC_MPEG1_2_REG                       (volatile uint32_t *)0xfe327004
#define P_HCODEC_F_CODE_REG                        (volatile uint32_t *)0xfe327008
#define P_HCODEC_PIC_HEAD_INFO                     (volatile uint32_t *)0xfe32700c
#define P_HCODEC_SLICE_VER_POS_PIC_TYPE            (volatile uint32_t *)0xfe327010
#define P_HCODEC_QP_VALUE_REG                      (volatile uint32_t *)0xfe327014
#define P_HCODEC_MBA_INC                           (volatile uint32_t *)0xfe327018
#define P_HCODEC_MB_MOTION_MODE                    (volatile uint32_t *)0xfe32701c
//`define PACKET_BYTE_COUNT   8'h08
// bit 15 -- force_search_startcode_en
// bit 14 -- int_cpu_when_error (before do anything)
// bit 13 -- vld_error_reset
// bit 12 -- return_on_slice_header
// bit 6 -- jpeg_ff00_en
// bit 5:0 -- vld_power_ctl
#define P_HCODEC_POWER_CTL_VLD                     (volatile uint32_t *)0xfe327020
#define P_HCODEC_MB_WIDTH                          (volatile uint32_t *)0xfe327024
#define P_HCODEC_SLICE_QP                          (volatile uint32_t *)0xfe327028
// `define MB_X_MB_Y           8'h0b   /* current MBX and MBY                  */
#define P_HCODEC_PRE_START_CODE                    (volatile uint32_t *)0xfe32702c
#define P_HCODEC_SLICE_START_BYTE_01               (volatile uint32_t *)0xfe327030
#define P_HCODEC_SLICE_START_BYTE_23               (volatile uint32_t *)0xfe327034
#define P_HCODEC_RESYNC_MARKER_LENGTH              (volatile uint32_t *)0xfe327038
// bit[6:5] - frame/field info, 01 - top, 10 - bottom, 11 - frame
// bit[4:0] - buffer ID
// L0_BUFF_ID_0, L0_BUFF_ID_1, L1_BUFF_ID_0, L1_BUFF_ID_1
#define P_HCODEC_DECODER_BUFFER_INFO               (volatile uint32_t *)0xfe32703c
#define P_HCODEC_FST_FOR_MV_X                      (volatile uint32_t *)0xfe327040
#define P_HCODEC_FST_FOR_MV_Y                      (volatile uint32_t *)0xfe327044
#define P_HCODEC_SCD_FOR_MV_X                      (volatile uint32_t *)0xfe327048
#define P_HCODEC_SCD_FOR_MV_Y                      (volatile uint32_t *)0xfe32704c
#define P_HCODEC_FST_BAK_MV_X                      (volatile uint32_t *)0xfe327050
#define P_HCODEC_FST_BAK_MV_Y                      (volatile uint32_t *)0xfe327054
#define P_HCODEC_SCD_BAK_MV_X                      (volatile uint32_t *)0xfe327058
#define P_HCODEC_SCD_BAK_MV_Y                      (volatile uint32_t *)0xfe32705c
// Bit 31 -- h264_non_intra_set_IntraType_need (READ Only)
// Bit[30:27] -- Reserved
// Bit 27 -- disable_one_cycle_vld_data_finished_fix
// Bit 26 -- int_wait_non_intra_set_finish
// Bit 25 -- IntraTypeLeft_use_vcw2f
// Bit 24 -- spatial_scale_no_update_when_f_invalid
// Bit 23 -- spatial_scale_no_update_when_f_zero
// Bit 22 -- pure_jpeg_hw_en
// Bit 21 -- auto_read_AC_COEFF
// Bit 20 -- fast_jpeg_hw_en
// Bit 19 -- vld_swap_reset
// Bit 18 -- set_vld_state
// Bit 17:12 -- set_vld_state_data
// Bit 11 -- set_stcode_state
// Bit 10:9 -- set_stcode_state_data
// Bit 8 -- decoder_parameter_reset
// Bit 7:4 -- read_buffer_interlace  0-progressive, 1-interlace, used in VC1
// bit 3 -- disable_new_stcode_search_fix // From GXM
// bit 2 -- weighting_prediction
// bit 1 -- mb_weighting_flag
// bit 0 -- slice_weighting_flag
#define P_HCODEC_VLD_DECODE_CONTROL                (volatile uint32_t *)0xfe327060
// bit[15:0] - vld_jpeg_tab_addr
#define P_HCODEC_VLD_JPEG_TAB_ADDR                 (volatile uint32_t *)0xfe327064
#define P_HCODEC_VIFF_BIT_CNT                      (volatile uint32_t *)0xfe327068
#define P_HCODEC_BYTE_ALIGN_PEAK_HI                (volatile uint32_t *)0xfe32706c
#define P_HCODEC_BYTE_ALIGN_PEAK_LO                (volatile uint32_t *)0xfe327070
#define P_HCODEC_NEXT_ALIGN_PEAK                   (volatile uint32_t *)0xfe327074
// bit 31    : byte_aligned_zero_23_from_org // From GXM
// bit 30    : force_shift_out_drop_flag_zero // From GXM
// bit 29    : en_st_protect_from_org // From GXM
// bit 28    : enable_halt_decode_start_voff
// bit 27    : disable_C_pred_check
// bit 26    : disable_I4_pred_check
// bit 25    : disable_I16_pred_check
// bit 24    : check_avs_1st_drop
// bit 23    : enable_cabac_protect // From GXM
// bit 22    : enable_avs_drop_more
// bit 21    : reset_avs_drop_ptr
// bit 20    : reset_cabac_use_next_at_end_req
// bit 19    : vc1_inv_intra_co_mb_ref_rd
// bit 18    : vc1_inv_co_mb_ref_rd
// bit 17    : vc1_inv_intra_co_mb_ref_wr
// bit 16    : vc1_inv_co_mb_ref_wr
// bit 15    : disable_mv_cal_begin_only
// bit 14    : avs_drop_enable
// bit 13:12 : avs_drop_ptr
// bit 11:8  : avs_demu_ctl_reg
// bit 7 : avs_enable
// bit 6 : disable_dblk_hcmd
// bit 5 : disable_mc_hcmd
// bit 4 : first_mode3_set enable
// bit 3 : first_mode3
// bit 2:1 : vc1_profile  0-SP, 1-MP, 2-reserved, 3-AP
// bit 0   : vc1_enable
#define P_HCODEC_VC1_CONTROL_REG                   (volatile uint32_t *)0xfe327078
#define P_HCODEC_PMV1_X                            (volatile uint32_t *)0xfe327080
#define P_HCODEC_PMV1_Y                            (volatile uint32_t *)0xfe327084
#define P_HCODEC_PMV2_X                            (volatile uint32_t *)0xfe327088
#define P_HCODEC_PMV2_Y                            (volatile uint32_t *)0xfe32708c
#define P_HCODEC_PMV3_X                            (volatile uint32_t *)0xfe327090
#define P_HCODEC_PMV3_Y                            (volatile uint32_t *)0xfe327094
#define P_HCODEC_PMV4_X                            (volatile uint32_t *)0xfe327098
#define P_HCODEC_PMV4_Y                            (volatile uint32_t *)0xfe32709c
// Can't use the same address for different defines
// Therefore, create a single define that covers both
// Only appears to be used in micro-code since the VLD hardware is
// hard coded.
// `define M4_TABLE_SELECT     8'h28  // Does this exist in HW ? Added from register_mp2.h
// `define M4_TABLE_OUTPUT     8'h28  // Does this exist in HW ? Added from register_mp2.h
#define P_HCODEC_M4_TABLE_SELECT                   (volatile uint32_t *)0xfe3270a0
#define P_HCODEC_M4_CONTROL_REG                    (volatile uint32_t *)0xfe3270a4
#define P_HCODEC_BLOCK_NUM                         (volatile uint32_t *)0xfe3270a8
#define P_HCODEC_PATTERN_CODE                      (volatile uint32_t *)0xfe3270ac
#define P_HCODEC_MB_INFO                           (volatile uint32_t *)0xfe3270b0
#define P_HCODEC_VLD_DC_PRED                       (volatile uint32_t *)0xfe3270b4
#define P_HCODEC_VLD_ERROR_MASK                    (volatile uint32_t *)0xfe3270b8
#define P_HCODEC_VLD_DC_PRED_C                     (volatile uint32_t *)0xfe3270bc
#define P_HCODEC_LAST_SLICE_MV_ADDR                (volatile uint32_t *)0xfe3270c0
#define P_HCODEC_LAST_MVX                          (volatile uint32_t *)0xfe3270c4
#define P_HCODEC_LAST_MVY                          (volatile uint32_t *)0xfe3270c8
#define P_HCODEC_VLD_C38                           (volatile uint32_t *)0xfe3270e0
#define P_HCODEC_VLD_C39                           (volatile uint32_t *)0xfe3270e4
#define P_HCODEC_VLD_STATUS                        (volatile uint32_t *)0xfe3270e8
#define P_HCODEC_VLD_SHIFT_STATUS                  (volatile uint32_t *)0xfe3270ec
// `define VLD_SHIFT_INFO      8'h3b  // Does this exist in HW ? used in $ucode/mpeg4
#define P_HCODEC_VOFF_STATUS                       (volatile uint32_t *)0xfe3270f0
#define P_HCODEC_VLD_C3D                           (volatile uint32_t *)0xfe3270f4
#define P_HCODEC_VLD_DBG_INDEX                     (volatile uint32_t *)0xfe3270f8
// vld_buff_info -- (index == 0)
// Bit11]    halt_decode_start_voff
// Bit10]    C_pred_error
// Bit[9]    I4_pred_error
// Bit[8]    I16_pred_error
// Bit[7:6]  mv_UR_ready_cnt;
// Bit[5]  vld_wr_idx
// Bit[4]  iq_rd_idx
// Bit[3]  vld_vi_block_rdy_1
// Bit[2]  vld_vi_block_rdy_2
// Bit[1]  voff_empty_1
// Bit[0]  voff_empty_2
// cabac_buff_info_0 -- (index == 1)
// Bit[31] shift_data_ready
// Bit[30:29] Reserved
// Bit[28:24] cabac_buffer_ptr
// Bit[23:0] cabac_buffer
// cabac_buff_info_1 -- (index == 2)
// Bit[31:29] Reserved
// Bit[28:20] Drange
// Bit[19:16] bin_count_4
// Bit[15:13] Reserved
// Bit[12:6] context_mem_do
// Bit[5:3] coeff_state
// Bit[2:0] mvd_state
// h264_mv_present -- (index == 3)
// Bit[31:16] mv_present_l0
// Bit[15:0] mv_present_l1
// h264_mv_cal_info_0 -- (index == 4)
// [31:28] mv_cal_state
// [27:24] direct_spatial_cnt
// Bit[23:21] Reserved
// Bit[20] mv_UR_ready_for_mv_cal
// Bit[19] co_mb_mem_ready_for_mv_cal
// Bit[18] mc_dblk_cmd_if_busy
// Bit[17] h264_co_mb_wr_busy
// Bit[16] H264_cbp_blk_ready
// Bit[15] mc_hcmd_rrdy
// Bit[14] mc_hcmd_srdy
// Bit[13] mc_cmd_if_ready
// Bit[12] mc_hcmd_mv_available
// Bit[11:8] mc_cmd_if_state
// Bit[7] dblk_hcmd_rrdy
// Bit[6] dblk_hcmd_srdy
// Bit[5] dblk_cmd_if_ready
// Bit[4] dblk_hcmd_mv_available
// Bit[3:0] dblk_cmd_if_state
// h264_mv_cal_info_1 -- (index == 5)
//  Bit[31:29] Reserved
//  Bit[28:24] total_mvd_num_l0
//  Bit[23:21] Reserved
//  Bit[20:16] mv_cal_ptr_l0
//  Bit[15:13] Reserved
//  Bit[12:8] mc_hcmd_ptr_l0
//  Bit[7:5] Reserved
//  Bit[4:0] dblk_hcmd_ptr_l0
// h264_mv_cal_info_2 -- (index == 6)
//  Bit[31:29] Reserved
//  Bit[28:24] total_mvd_num_l1
//  Bit[23:21] Reserved
//  Bit[20:16] mv_cal_ptr_l1
//  Bit[15:13] Reserved
//  Bit[12:8] mc_hcmd_ptr_l1
//  Bit[7:5] Reserved
//  Bit[4:0] dblk_hcmd_ptr_l1
// h264_co_mb_info -- (index == 7)
// Bit[31:26] Reserved
// Bit[25] mv_scale_cal_busy
// Bit[24:20] co_mv_count
// Bit[19:16] co_mv_process_state
// Bit[15] h264_co_mb_rd_busy
// Bit[15] h264_co_mb_rd_ready
// Bit[13:12] co_mv_transfer_block_cnt
// Bit[11:8] co_mv_transfer_ptr
// Bit[7] co_mv_POC_l1_busy
// Bit[6] h264_weight_scale_cal_en
// Bit[5] weight_cal_busy
// Bit[4] weight_cal_not_finished
// Bit[3:0] weight_process_state
#define P_HCODEC_VLD_DBG_DATA                      (volatile uint32_t *)0xfe3270fc
// --------------------------------------------
// VIFIFO DDR Interface
// --------------------------------------------
// The VIFIFO start pointer into DDR memory is a 32-bit number
// The Start pointer will automatically be truncated to land on
// an 8-byte boundary.  That is, bits [2:0] = 0;
#define P_HCODEC_VLD_MEM_VIFIFO_START_PTR          (volatile uint32_t *)0xfe327100
// The current pointer points so some location between the START and END
// pointers.  The current pointer is a BYTE pointer.  That is, you can
// point to any BYTE address within the START/END range
#define P_HCODEC_VLD_MEM_VIFIFO_CURR_PTR           (volatile uint32_t *)0xfe327104
#define P_HCODEC_VLD_MEM_VIFIFO_END_PTR            (volatile uint32_t *)0xfe327108
// bit[31]    viff_halt_int_en
// bit[30]    viff_halt_read_enable
// bit[29:26] reserved
// bit[25:16] viff_halt_int_bytes
// bit[15:10] reserved
// bit[9:0]   bytes_available
#define P_HCODEC_VLD_MEM_VIFIFO_BYTES_AVAIL        (volatile uint32_t *)0xfe32710c
// VIFIFO FIFO Control
// bit  [31:24] viff_empty_int_enable_cpu[7:0]
// bit  [23:16] viff_empty_int_enable_amrisc[7:0]
//   -bit 23 Video BUFFER < 0x400 Bytes
//   -bit 22 Video BUFFER < 0x200 Bytes
//   -bit 21 Video BUFFER < 0x100 Bytes
//   -bit 20 Video BUFFER < 0x80 Bytes
//   -bit 19 Video BUFFER < 0x40 Bytes
//   -bit 18 Video BUFFER < 0x20 Bytes
//   -bit 17 vififo  < 16 double words
//   -bit 16 vififo  < 8 double words
// bit  [15:13] unused
// bit  [12]    A_urgent
// bit  [11]    transfer_length 0 - 32x64 Bits per request, 1 - 16x64 Bits per request
// bit  [10]    use_level       Set this bit to 1 to enable filling of the FIFO controlled by the buffer
//                              level control.  If this bit is 0, then use bit[1] to control the enabling of filling
// bit  [9]     Data Ready.     This bit is set when data can be popped
// bit  [8]     fill busy       This bit will be high when we're fetching data from the DDR memory
//                              To reset this module, set cntl_enable = 0, and then wait for busy = 0.
//                              After that you can pulse cntl_init to start over
// bit  [7]     init_with_cntl_init
// bit  [6]     reserved
// bits [5:3]   endian:         see $lib/rtl/ddr_endian.v
// bit  [2]     cntl_empty_en   Set to 1 to enable reading the DDR memory FIFO
//                              Set cntl_empty_en = cntl_fill_en = 0 when pulsing cntl_init
// bit  [1]     cntl_fill_en    Set to 1 to enable reading data from DDR memory
// bit  [0]     cntl_init:      After setting the read pointers, sizes, channel masks
//                              and read masks, set this bit to 1 and then to 0
//                              NOTE:  You don't need to pulse cntl_init if only the start address is
//                              being changed
#define P_HCODEC_VLD_MEM_VIFIFO_CONTROL            (volatile uint32_t *)0xfe327110
// --------------------------------------------
// VIFIFO Buffer Level Manager
// --------------------------------------------
#define P_HCODEC_VLD_MEM_VIFIFO_WP                 (volatile uint32_t *)0xfe327114
#define P_HCODEC_VLD_MEM_VIFIFO_RP                 (volatile uint32_t *)0xfe327118
#define P_HCODEC_VLD_MEM_VIFIFO_LEVEL              (volatile uint32_t *)0xfe32711c
//
// bit  [8]     use_parser_video2_wp
// bit  [7]     vbuf2_out_manual
// bit  [6]     vbuf_out_manual
// bit  [5]     empty (ReadOnly)
// bit  [4]     full (ReadOnly)
// bit  [3:2]   reserved
// bit  [1]     manual mode     Set to 1 for manual write pointer mode
// bit  [0]     Init            Set high then low after everything has been initialized
#define P_HCODEC_VLD_MEM_VIFIFO_BUF_CNTL           (volatile uint32_t *)0xfe327120
// bit 31:16 -- drop_bytes
// bit 15:14 -- drop_status (Read-Only)
// bit 13:12 -- sync_match_position (Read-Only)
// bit 11:6 -- reserved
// bit 5:4 -- TIME_STAMP_NUMBER, 0-32bits, 1-64bits, 2-96bits, 3-128bits
// bit 3 -- stamp_soft_reset
// bit 2 -- TIME_STAMP_length_enable
// bit 1 -- TIME_STAMP_sync64_enable
// bit 0 -- TIME_STAMP_enable
#define P_HCODEC_VLD_TIME_STAMP_CNTL               (volatile uint32_t *)0xfe327124
// bit 31:0 -- TIME_STAMP_SYNC_CODE_0
#define P_HCODEC_VLD_TIME_STAMP_SYNC_0             (volatile uint32_t *)0xfe327128
// bit 31:0 -- TIME_STAMP_SYNC_CODE_1
#define P_HCODEC_VLD_TIME_STAMP_SYNC_1             (volatile uint32_t *)0xfe32712c
// bit 31:0 TIME_STAMP_0
#define P_HCODEC_VLD_TIME_STAMP_0                  (volatile uint32_t *)0xfe327130
// bit 31:0 TIME_STAMP_1
#define P_HCODEC_VLD_TIME_STAMP_1                  (volatile uint32_t *)0xfe327134
// bit 31:0 TIME_STAMP_2
#define P_HCODEC_VLD_TIME_STAMP_2                  (volatile uint32_t *)0xfe327138
// bit 31:0 TIME_STAMP_3
#define P_HCODEC_VLD_TIME_STAMP_3                  (volatile uint32_t *)0xfe32713c
// bit 31:0 TIME_STAMP_LENGTH
#define P_HCODEC_VLD_TIME_STAMP_LENGTH             (volatile uint32_t *)0xfe327140
// bit 15:0 vififo_rd_count
#define P_HCODEC_VLD_MEM_VIFIFO_WRAP_COUNT         (volatile uint32_t *)0xfe327144
// bit 29:24 A_brst_num
// bit 21:16 A_id
// bit 15:0 level_hold
#define P_HCODEC_VLD_MEM_VIFIFO_MEM_CTL            (volatile uint32_t *)0xfe327148
#define P_HCODEC_VLD_MEM_VBUF_RD_PTR               (volatile uint32_t *)0xfe32714c
#define P_HCODEC_VLD_MEM_VBUF2_RD_PTR              (volatile uint32_t *)0xfe327150
#define P_HCODEC_VLD_MEM_SWAP_ADDR                 (volatile uint32_t *)0xfe327154
// bit[23:16] - swap_d_count (Read Only)
// bit[15:8]  - swap_a_count (Read Only)
// bit [7] - swap busy (Read Only)
// bit [6:2] - reserved
// bit [1] - 1 - STORE to Memory, 0 - LOAD from Memory
// bit [0] - swap active
#define P_HCODEC_VLD_MEM_SWAP_CTL                  (volatile uint32_t *)0xfe327158
// bit[12]  -- zero_use_cbp_blk
// bit[11]  -- mv_use_abs (only calculate abs)
// bit[10]  -- mv_use_simple_mode (every size count has same weight)
// bit[9]   -- use_simple_mode (every size count has same weight)
// bit[8]   -- reset_all_count // write only
// bit[7:5] Reserved
// bit[4:0] pic_quality_rd_idx
#define P_HCODEC_VDEC_PIC_QUALITY_CTRL             (volatile uint32_t *)0xfe32715c
// idx  -- read out
//   0  -- blk88_y_count // 4k will use 20 bits
//   1  -- qp_y_sum // 4k use 27 bits
//   2  -- intra_y_count // 4k use 20 bits
//   3  -- skipped_y_count // 4k use 20 bits
//   4  -- coeff_non_zero_y_count // 4k use 20 bits
//   5  -- blk66_c_count // 4k will use 20 bits
//   6  -- qp_c_sum // 4k use 26 bits
//   7  -- intra_c_count // 4k use 20 bits
//   8  -- skipped_cu_c_count // 4k use 20 bits
//   9  -- coeff_non_zero_c_count // 4k use 20 bits
//  10  -- { 1'h0, qp_c_max[6:0], 1'h0, qp_c_min[6:0], 1'h0, qp_y_max[6:0], 1'h0, qp_y_min[6:0]}
//  11  -- blk22_mv_count
//  12  -- {mvy_L1_count[39:32], mvx_L1_count[39:32], mvy_L0_count[39:32], mvx_L0_count[39:32]}
//  13  -- mvx_L0_count[31:0]
//  14  -- mvy_L0_count[31:0]
//  15  -- mvx_L1_count[31:0]
//  16  -- mvy_L1_count[31:0]
//  17  -- {mvx_L0_max, mvx_L0_min} // format : {sign, abs[14:0]}
//  18  -- {mvy_L0_max, mvy_L0_min}
//  19  -- {mvx_L1_max, mvx_L1_min}
//  20  -- {mvy_L1_max, mvy_L1_min}
#define P_HCODEC_VDEC_PIC_QUALITY_DATA             (volatile uint32_t *)0xfe327160
// 31:0 vdec_stream_crc
#define P_HCODEC_VDEC_STREAM_CRC                   (volatile uint32_t *)0xfe327164
// 31:0  h264_buff_start_addr
#define P_HCODEC_VDEC_H264_TOP_BUFF_START          (volatile uint32_t *)0xfe327168
// 31:24 top_read_hole ( *16 bytes)
// 23    h264_top_urgent
// 22    read_has_priority
// 21    read_wait_wrrsp (For tiny frame size)
// 20:18 reserved
// 17    h264_top_mode    // 0:16bytes, 1:32bytes
// 16    h264_hw_top_enable
// 15:0  h264_buff_size
#define P_HCODEC_VDEC_H264_TOP_CFG                 (volatile uint32_t *)0xfe32716c
// 31:16 h264_top_rd_offset
// 15:0  h264_top_wr_offset
#define P_HCODEC_VDEC_H264_TOP_OFFSET              (volatile uint32_t *)0xfe327170
// 31:24 h264_top_wrrsp
// 23:16 top_pop_mb_count
// 15:7  reserved
// 6     h264_top_load_pending_2   (ReadOnly)
// 5     h264_top_load_pending_1   (ReadOnly)
// 4     h264_top_store_pending   (ReadOnly)
// 3     need_write   (ReadOnly)
// 2     need_read    (ReadOnly)
// 1     A_write      (ReadOnly)
// 0     A_req (busy) (ReadOnly)
#define P_HCODEC_VDEC_H264_TOP_CTRL                (volatile uint32_t *)0xfe327174
//
// Closing file:  vld_regs.h
//
//
// Reading file:  vld_regs.h
//
//========================================================================
//  VLD module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_VDEC_VLD_CBUS_BASE = 0x0c
// -----------------------------------------------
#define P_VDEC2_VLD_STATUS_CTRL                    (volatile uint32_t *)0xfe32b000
//
// bit 15 -- use_separate_c_path
// bit 14 -- reserved
// bit 13 -- h264_co_mb_wr_busy
// bit 12 -- vld_error_protect
// bit 11 -- m4_mv_qpixel
// bit 10 -- use_old_shift_en
// bit 9 -- output_mv_not_pmv
// bit 8:5 -- force_zigzag
// bit 4 -- force_zigzag_en
// bit 3 -- disable_viff_anempty_int
// bit 2 -- disable_m2_ac_coeff_one_cycle
// bit 1 -- forced_reset  force reset pmv
// bit 0 -- mpeg_type  0:mpeg1 1: mpeg2
#define P_VDEC2_MPEG1_2_REG                        (volatile uint32_t *)0xfe32b004
#define P_VDEC2_F_CODE_REG                         (volatile uint32_t *)0xfe32b008
#define P_VDEC2_PIC_HEAD_INFO                      (volatile uint32_t *)0xfe32b00c
#define P_VDEC2_SLICE_VER_POS_PIC_TYPE             (volatile uint32_t *)0xfe32b010
#define P_VDEC2_QP_VALUE_REG                       (volatile uint32_t *)0xfe32b014
#define P_VDEC2_MBA_INC                            (volatile uint32_t *)0xfe32b018
#define P_VDEC2_MB_MOTION_MODE                     (volatile uint32_t *)0xfe32b01c
//`define PACKET_BYTE_COUNT   8'h08
// bit 15 -- force_search_startcode_en
// bit 14 -- int_cpu_when_error (before do anything)
// bit 13 -- vld_error_reset
// bit 12 -- return_on_slice_header
// bit 6 -- jpeg_ff00_en
// bit 5:0 -- vld_power_ctl
#define P_VDEC2_POWER_CTL_VLD                      (volatile uint32_t *)0xfe32b020
#define P_VDEC2_MB_WIDTH                           (volatile uint32_t *)0xfe32b024
#define P_VDEC2_SLICE_QP                           (volatile uint32_t *)0xfe32b028
// `define MB_X_MB_Y           8'h0b   /* current MBX and MBY                  */
#define P_VDEC2_PRE_START_CODE                     (volatile uint32_t *)0xfe32b02c
#define P_VDEC2_SLICE_START_BYTE_01                (volatile uint32_t *)0xfe32b030
#define P_VDEC2_SLICE_START_BYTE_23                (volatile uint32_t *)0xfe32b034
#define P_VDEC2_RESYNC_MARKER_LENGTH               (volatile uint32_t *)0xfe32b038
// bit[6:5] - frame/field info, 01 - top, 10 - bottom, 11 - frame
// bit[4:0] - buffer ID
// L0_BUFF_ID_0, L0_BUFF_ID_1, L1_BUFF_ID_0, L1_BUFF_ID_1
#define P_VDEC2_DECODER_BUFFER_INFO                (volatile uint32_t *)0xfe32b03c
#define P_VDEC2_FST_FOR_MV_X                       (volatile uint32_t *)0xfe32b040
#define P_VDEC2_FST_FOR_MV_Y                       (volatile uint32_t *)0xfe32b044
#define P_VDEC2_SCD_FOR_MV_X                       (volatile uint32_t *)0xfe32b048
#define P_VDEC2_SCD_FOR_MV_Y                       (volatile uint32_t *)0xfe32b04c
#define P_VDEC2_FST_BAK_MV_X                       (volatile uint32_t *)0xfe32b050
#define P_VDEC2_FST_BAK_MV_Y                       (volatile uint32_t *)0xfe32b054
#define P_VDEC2_SCD_BAK_MV_X                       (volatile uint32_t *)0xfe32b058
#define P_VDEC2_SCD_BAK_MV_Y                       (volatile uint32_t *)0xfe32b05c
// Bit 31 -- h264_non_intra_set_IntraType_need (READ Only)
// Bit[30:27] -- Reserved
// Bit 27 -- disable_one_cycle_vld_data_finished_fix
// Bit 26 -- int_wait_non_intra_set_finish
// Bit 25 -- IntraTypeLeft_use_vcw2f
// Bit 24 -- spatial_scale_no_update_when_f_invalid
// Bit 23 -- spatial_scale_no_update_when_f_zero
// Bit 22 -- pure_jpeg_hw_en
// Bit 21 -- auto_read_AC_COEFF
// Bit 20 -- fast_jpeg_hw_en
// Bit 19 -- vld_swap_reset
// Bit 18 -- set_vld_state
// Bit 17:12 -- set_vld_state_data
// Bit 11 -- set_stcode_state
// Bit 10:9 -- set_stcode_state_data
// Bit 8 -- decoder_parameter_reset
// Bit 7:4 -- read_buffer_interlace  0-progressive, 1-interlace, used in VC1
// bit 3 -- disable_new_stcode_search_fix // From GXM
// bit 2 -- weighting_prediction
// bit 1 -- mb_weighting_flag
// bit 0 -- slice_weighting_flag
#define P_VDEC2_VLD_DECODE_CONTROL                 (volatile uint32_t *)0xfe32b060
// bit[15:0] - vld_jpeg_tab_addr
#define P_VDEC2_VLD_JPEG_TAB_ADDR                  (volatile uint32_t *)0xfe32b064
#define P_VDEC2_VIFF_BIT_CNT                       (volatile uint32_t *)0xfe32b068
#define P_VDEC2_BYTE_ALIGN_PEAK_HI                 (volatile uint32_t *)0xfe32b06c
#define P_VDEC2_BYTE_ALIGN_PEAK_LO                 (volatile uint32_t *)0xfe32b070
#define P_VDEC2_NEXT_ALIGN_PEAK                    (volatile uint32_t *)0xfe32b074
// bit 31    : byte_aligned_zero_23_from_org // From GXM
// bit 30    : force_shift_out_drop_flag_zero // From GXM
// bit 29    : en_st_protect_from_org // From GXM
// bit 28    : enable_halt_decode_start_voff
// bit 27    : disable_C_pred_check
// bit 26    : disable_I4_pred_check
// bit 25    : disable_I16_pred_check
// bit 24    : check_avs_1st_drop
// bit 23    : enable_cabac_protect // From GXM
// bit 22    : enable_avs_drop_more
// bit 21    : reset_avs_drop_ptr
// bit 20    : reset_cabac_use_next_at_end_req
// bit 19    : vc1_inv_intra_co_mb_ref_rd
// bit 18    : vc1_inv_co_mb_ref_rd
// bit 17    : vc1_inv_intra_co_mb_ref_wr
// bit 16    : vc1_inv_co_mb_ref_wr
// bit 15    : disable_mv_cal_begin_only
// bit 14    : avs_drop_enable
// bit 13:12 : avs_drop_ptr
// bit 11:8  : avs_demu_ctl_reg
// bit 7 : avs_enable
// bit 6 : disable_dblk_hcmd
// bit 5 : disable_mc_hcmd
// bit 4 : first_mode3_set enable
// bit 3 : first_mode3
// bit 2:1 : vc1_profile  0-SP, 1-MP, 2-reserved, 3-AP
// bit 0   : vc1_enable
#define P_VDEC2_VC1_CONTROL_REG                    (volatile uint32_t *)0xfe32b078
#define P_VDEC2_PMV1_X                             (volatile uint32_t *)0xfe32b080
#define P_VDEC2_PMV1_Y                             (volatile uint32_t *)0xfe32b084
#define P_VDEC2_PMV2_X                             (volatile uint32_t *)0xfe32b088
#define P_VDEC2_PMV2_Y                             (volatile uint32_t *)0xfe32b08c
#define P_VDEC2_PMV3_X                             (volatile uint32_t *)0xfe32b090
#define P_VDEC2_PMV3_Y                             (volatile uint32_t *)0xfe32b094
#define P_VDEC2_PMV4_X                             (volatile uint32_t *)0xfe32b098
#define P_VDEC2_PMV4_Y                             (volatile uint32_t *)0xfe32b09c
// Can't use the same address for different defines
// Therefore, create a single define that covers both
// Only appears to be used in micro-code since the VLD hardware is
// hard coded.
// `define M4_TABLE_SELECT     8'h28  // Does this exist in HW ? Added from register_mp2.h
// `define M4_TABLE_OUTPUT     8'h28  // Does this exist in HW ? Added from register_mp2.h
#define P_VDEC2_M4_TABLE_SELECT                    (volatile uint32_t *)0xfe32b0a0
#define P_VDEC2_M4_CONTROL_REG                     (volatile uint32_t *)0xfe32b0a4
#define P_VDEC2_BLOCK_NUM                          (volatile uint32_t *)0xfe32b0a8
#define P_VDEC2_PATTERN_CODE                       (volatile uint32_t *)0xfe32b0ac
#define P_VDEC2_MB_INFO                            (volatile uint32_t *)0xfe32b0b0
#define P_VDEC2_VLD_DC_PRED                        (volatile uint32_t *)0xfe32b0b4
#define P_VDEC2_VLD_ERROR_MASK                     (volatile uint32_t *)0xfe32b0b8
#define P_VDEC2_VLD_DC_PRED_C                      (volatile uint32_t *)0xfe32b0bc
#define P_VDEC2_LAST_SLICE_MV_ADDR                 (volatile uint32_t *)0xfe32b0c0
#define P_VDEC2_LAST_MVX                           (volatile uint32_t *)0xfe32b0c4
#define P_VDEC2_LAST_MVY                           (volatile uint32_t *)0xfe32b0c8
#define P_VDEC2_VLD_C38                            (volatile uint32_t *)0xfe32b0e0
#define P_VDEC2_VLD_C39                            (volatile uint32_t *)0xfe32b0e4
#define P_VDEC2_VLD_STATUS                         (volatile uint32_t *)0xfe32b0e8
#define P_VDEC2_VLD_SHIFT_STATUS                   (volatile uint32_t *)0xfe32b0ec
// `define VLD_SHIFT_INFO      8'h3b  // Does this exist in HW ? used in $ucode/mpeg4
#define P_VDEC2_VOFF_STATUS                        (volatile uint32_t *)0xfe32b0f0
#define P_VDEC2_VLD_C3D                            (volatile uint32_t *)0xfe32b0f4
#define P_VDEC2_VLD_DBG_INDEX                      (volatile uint32_t *)0xfe32b0f8
// vld_buff_info -- (index == 0)
// Bit11]    halt_decode_start_voff
// Bit10]    C_pred_error
// Bit[9]    I4_pred_error
// Bit[8]    I16_pred_error
// Bit[7:6]  mv_UR_ready_cnt;
// Bit[5]  vld_wr_idx
// Bit[4]  iq_rd_idx
// Bit[3]  vld_vi_block_rdy_1
// Bit[2]  vld_vi_block_rdy_2
// Bit[1]  voff_empty_1
// Bit[0]  voff_empty_2
// cabac_buff_info_0 -- (index == 1)
// Bit[31] shift_data_ready
// Bit[30:29] Reserved
// Bit[28:24] cabac_buffer_ptr
// Bit[23:0] cabac_buffer
// cabac_buff_info_1 -- (index == 2)
// Bit[31:29] Reserved
// Bit[28:20] Drange
// Bit[19:16] bin_count_4
// Bit[15:13] Reserved
// Bit[12:6] context_mem_do
// Bit[5:3] coeff_state
// Bit[2:0] mvd_state
// h264_mv_present -- (index == 3)
// Bit[31:16] mv_present_l0
// Bit[15:0] mv_present_l1
// h264_mv_cal_info_0 -- (index == 4)
// [31:28] mv_cal_state
// [27:24] direct_spatial_cnt
// Bit[23:21] Reserved
// Bit[20] mv_UR_ready_for_mv_cal
// Bit[19] co_mb_mem_ready_for_mv_cal
// Bit[18] mc_dblk_cmd_if_busy
// Bit[17] h264_co_mb_wr_busy
// Bit[16] H264_cbp_blk_ready
// Bit[15] mc_hcmd_rrdy
// Bit[14] mc_hcmd_srdy
// Bit[13] mc_cmd_if_ready
// Bit[12] mc_hcmd_mv_available
// Bit[11:8] mc_cmd_if_state
// Bit[7] dblk_hcmd_rrdy
// Bit[6] dblk_hcmd_srdy
// Bit[5] dblk_cmd_if_ready
// Bit[4] dblk_hcmd_mv_available
// Bit[3:0] dblk_cmd_if_state
// h264_mv_cal_info_1 -- (index == 5)
//  Bit[31:29] Reserved
//  Bit[28:24] total_mvd_num_l0
//  Bit[23:21] Reserved
//  Bit[20:16] mv_cal_ptr_l0
//  Bit[15:13] Reserved
//  Bit[12:8] mc_hcmd_ptr_l0
//  Bit[7:5] Reserved
//  Bit[4:0] dblk_hcmd_ptr_l0
// h264_mv_cal_info_2 -- (index == 6)
//  Bit[31:29] Reserved
//  Bit[28:24] total_mvd_num_l1
//  Bit[23:21] Reserved
//  Bit[20:16] mv_cal_ptr_l1
//  Bit[15:13] Reserved
//  Bit[12:8] mc_hcmd_ptr_l1
//  Bit[7:5] Reserved
//  Bit[4:0] dblk_hcmd_ptr_l1
// h264_co_mb_info -- (index == 7)
// Bit[31:26] Reserved
// Bit[25] mv_scale_cal_busy
// Bit[24:20] co_mv_count
// Bit[19:16] co_mv_process_state
// Bit[15] h264_co_mb_rd_busy
// Bit[15] h264_co_mb_rd_ready
// Bit[13:12] co_mv_transfer_block_cnt
// Bit[11:8] co_mv_transfer_ptr
// Bit[7] co_mv_POC_l1_busy
// Bit[6] h264_weight_scale_cal_en
// Bit[5] weight_cal_busy
// Bit[4] weight_cal_not_finished
// Bit[3:0] weight_process_state
#define P_VDEC2_VLD_DBG_DATA                       (volatile uint32_t *)0xfe32b0fc
// --------------------------------------------
// VIFIFO DDR Interface
// --------------------------------------------
// The VIFIFO start pointer into DDR memory is a 32-bit number
// The Start pointer will automatically be truncated to land on
// an 8-byte boundary.  That is, bits [2:0] = 0;
#define P_VDEC2_VLD_MEM_VIFIFO_START_PTR           (volatile uint32_t *)0xfe32b100
// The current pointer points so some location between the START and END
// pointers.  The current pointer is a BYTE pointer.  That is, you can
// point to any BYTE address within the START/END range
#define P_VDEC2_VLD_MEM_VIFIFO_CURR_PTR            (volatile uint32_t *)0xfe32b104
#define P_VDEC2_VLD_MEM_VIFIFO_END_PTR             (volatile uint32_t *)0xfe32b108
// bit[31]    viff_halt_int_en
// bit[30]    viff_halt_read_enable
// bit[29:26] reserved
// bit[25:16] viff_halt_int_bytes
// bit[15:10] reserved
// bit[9:0]   bytes_available
#define P_VDEC2_VLD_MEM_VIFIFO_BYTES_AVAIL         (volatile uint32_t *)0xfe32b10c
// VIFIFO FIFO Control
// bit  [31:24] viff_empty_int_enable_cpu[7:0]
// bit  [23:16] viff_empty_int_enable_amrisc[7:0]
//   -bit 23 Video BUFFER < 0x400 Bytes
//   -bit 22 Video BUFFER < 0x200 Bytes
//   -bit 21 Video BUFFER < 0x100 Bytes
//   -bit 20 Video BUFFER < 0x80 Bytes
//   -bit 19 Video BUFFER < 0x40 Bytes
//   -bit 18 Video BUFFER < 0x20 Bytes
//   -bit 17 vififo  < 16 double words
//   -bit 16 vififo  < 8 double words
// bit  [15:13] unused
// bit  [12]    A_urgent
// bit  [11]    transfer_length 0 - 32x64 Bits per request, 1 - 16x64 Bits per request
// bit  [10]    use_level       Set this bit to 1 to enable filling of the FIFO controlled by the buffer
//                              level control.  If this bit is 0, then use bit[1] to control the enabling of filling
// bit  [9]     Data Ready.     This bit is set when data can be popped
// bit  [8]     fill busy       This bit will be high when we're fetching data from the DDR memory
//                              To reset this module, set cntl_enable = 0, and then wait for busy = 0.
//                              After that you can pulse cntl_init to start over
// bit  [7]     init_with_cntl_init
// bit  [6]     reserved
// bits [5:3]   endian:         see $lib/rtl/ddr_endian.v
// bit  [2]     cntl_empty_en   Set to 1 to enable reading the DDR memory FIFO
//                              Set cntl_empty_en = cntl_fill_en = 0 when pulsing cntl_init
// bit  [1]     cntl_fill_en    Set to 1 to enable reading data from DDR memory
// bit  [0]     cntl_init:      After setting the read pointers, sizes, channel masks
//                              and read masks, set this bit to 1 and then to 0
//                              NOTE:  You don't need to pulse cntl_init if only the start address is
//                              being changed
#define P_VDEC2_VLD_MEM_VIFIFO_CONTROL             (volatile uint32_t *)0xfe32b110
// --------------------------------------------
// VIFIFO Buffer Level Manager
// --------------------------------------------
#define P_VDEC2_VLD_MEM_VIFIFO_WP                  (volatile uint32_t *)0xfe32b114
#define P_VDEC2_VLD_MEM_VIFIFO_RP                  (volatile uint32_t *)0xfe32b118
#define P_VDEC2_VLD_MEM_VIFIFO_LEVEL               (volatile uint32_t *)0xfe32b11c
//
// bit  [8]     use_parser_video2_wp
// bit  [7]     vbuf2_out_manual
// bit  [6]     vbuf_out_manual
// bit  [5]     empty (ReadOnly)
// bit  [4]     full (ReadOnly)
// bit  [3:2]   reserved
// bit  [1]     manual mode     Set to 1 for manual write pointer mode
// bit  [0]     Init            Set high then low after everything has been initialized
#define P_VDEC2_VLD_MEM_VIFIFO_BUF_CNTL            (volatile uint32_t *)0xfe32b120
// bit 31:16 -- drop_bytes
// bit 15:14 -- drop_status (Read-Only)
// bit 13:12 -- sync_match_position (Read-Only)
// bit 11:6 -- reserved
// bit 5:4 -- TIME_STAMP_NUMBER, 0-32bits, 1-64bits, 2-96bits, 3-128bits
// bit 3 -- stamp_soft_reset
// bit 2 -- TIME_STAMP_length_enable
// bit 1 -- TIME_STAMP_sync64_enable
// bit 0 -- TIME_STAMP_enable
#define P_VDEC2_VLD_TIME_STAMP_CNTL                (volatile uint32_t *)0xfe32b124
// bit 31:0 -- TIME_STAMP_SYNC_CODE_0
#define P_VDEC2_VLD_TIME_STAMP_SYNC_0              (volatile uint32_t *)0xfe32b128
// bit 31:0 -- TIME_STAMP_SYNC_CODE_1
#define P_VDEC2_VLD_TIME_STAMP_SYNC_1              (volatile uint32_t *)0xfe32b12c
// bit 31:0 TIME_STAMP_0
#define P_VDEC2_VLD_TIME_STAMP_0                   (volatile uint32_t *)0xfe32b130
// bit 31:0 TIME_STAMP_1
#define P_VDEC2_VLD_TIME_STAMP_1                   (volatile uint32_t *)0xfe32b134
// bit 31:0 TIME_STAMP_2
#define P_VDEC2_VLD_TIME_STAMP_2                   (volatile uint32_t *)0xfe32b138
// bit 31:0 TIME_STAMP_3
#define P_VDEC2_VLD_TIME_STAMP_3                   (volatile uint32_t *)0xfe32b13c
// bit 31:0 TIME_STAMP_LENGTH
#define P_VDEC2_VLD_TIME_STAMP_LENGTH              (volatile uint32_t *)0xfe32b140
// bit 15:0 vififo_rd_count
#define P_VDEC2_VLD_MEM_VIFIFO_WRAP_COUNT          (volatile uint32_t *)0xfe32b144
// bit 29:24 A_brst_num
// bit 21:16 A_id
// bit 15:0 level_hold
#define P_VDEC2_VLD_MEM_VIFIFO_MEM_CTL             (volatile uint32_t *)0xfe32b148
#define P_VDEC2_VLD_MEM_VBUF_RD_PTR                (volatile uint32_t *)0xfe32b14c
#define P_VDEC2_VLD_MEM_VBUF2_RD_PTR               (volatile uint32_t *)0xfe32b150
#define P_VDEC2_VLD_MEM_SWAP_ADDR                  (volatile uint32_t *)0xfe32b154
// bit[23:16] - swap_d_count (Read Only)
// bit[15:8]  - swap_a_count (Read Only)
// bit [7] - swap busy (Read Only)
// bit [6:2] - reserved
// bit [1] - 1 - STORE to Memory, 0 - LOAD from Memory
// bit [0] - swap active
#define P_VDEC2_VLD_MEM_SWAP_CTL                   (volatile uint32_t *)0xfe32b158
// bit[12]  -- zero_use_cbp_blk
// bit[11]  -- mv_use_abs (only calculate abs)
// bit[10]  -- mv_use_simple_mode (every size count has same weight)
// bit[9]   -- use_simple_mode (every size count has same weight)
// bit[8]   -- reset_all_count // write only
// bit[7:5] Reserved
// bit[4:0] pic_quality_rd_idx
#define P_VDEC2_VDEC_PIC_QUALITY_CTRL              (volatile uint32_t *)0xfe32b15c
// idx  -- read out
//   0  -- blk88_y_count // 4k will use 20 bits
//   1  -- qp_y_sum // 4k use 27 bits
//   2  -- intra_y_count // 4k use 20 bits
//   3  -- skipped_y_count // 4k use 20 bits
//   4  -- coeff_non_zero_y_count // 4k use 20 bits
//   5  -- blk66_c_count // 4k will use 20 bits
//   6  -- qp_c_sum // 4k use 26 bits
//   7  -- intra_c_count // 4k use 20 bits
//   8  -- skipped_cu_c_count // 4k use 20 bits
//   9  -- coeff_non_zero_c_count // 4k use 20 bits
//  10  -- { 1'h0, qp_c_max[6:0], 1'h0, qp_c_min[6:0], 1'h0, qp_y_max[6:0], 1'h0, qp_y_min[6:0]}
//  11  -- blk22_mv_count
//  12  -- {mvy_L1_count[39:32], mvx_L1_count[39:32], mvy_L0_count[39:32], mvx_L0_count[39:32]}
//  13  -- mvx_L0_count[31:0]
//  14  -- mvy_L0_count[31:0]
//  15  -- mvx_L1_count[31:0]
//  16  -- mvy_L1_count[31:0]
//  17  -- {mvx_L0_max, mvx_L0_min} // format : {sign, abs[14:0]}
//  18  -- {mvy_L0_max, mvy_L0_min}
//  19  -- {mvx_L1_max, mvx_L1_min}
//  20  -- {mvy_L1_max, mvy_L1_min}
#define P_VDEC2_VDEC_PIC_QUALITY_DATA              (volatile uint32_t *)0xfe32b160
// 31:0 vdec_stream_crc
#define P_VDEC2_VDEC_STREAM_CRC                    (volatile uint32_t *)0xfe32b164
// 31:0  h264_buff_start_addr
#define P_VDEC2_VDEC_H264_TOP_BUFF_START           (volatile uint32_t *)0xfe32b168
// 31:24 top_read_hole ( *16 bytes)
// 23    h264_top_urgent
// 22    read_has_priority
// 21    read_wait_wrrsp (For tiny frame size)
// 20:18 reserved
// 17    h264_top_mode    // 0:16bytes, 1:32bytes
// 16    h264_hw_top_enable
// 15:0  h264_buff_size
#define P_VDEC2_VDEC_H264_TOP_CFG                  (volatile uint32_t *)0xfe32b16c
// 31:16 h264_top_rd_offset
// 15:0  h264_top_wr_offset
#define P_VDEC2_VDEC_H264_TOP_OFFSET               (volatile uint32_t *)0xfe32b170
// 31:24 h264_top_wrrsp
// 23:16 top_pop_mb_count
// 15:7  reserved
// 6     h264_top_load_pending_2   (ReadOnly)
// 5     h264_top_load_pending_1   (ReadOnly)
// 4     h264_top_store_pending   (ReadOnly)
// 3     need_write   (ReadOnly)
// 2     need_read    (ReadOnly)
// 1     A_write      (ReadOnly)
// 0     A_req (busy) (ReadOnly)
#define P_VDEC2_VDEC_H264_TOP_CTRL                 (volatile uint32_t *)0xfe32b174
//
// Closing file:  vld_regs.h
//
//
// Reading file:  vld_regs.h
//
//========================================================================
//  VLD module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_VDEC_VLD_CBUS_BASE = 0x0c
// -----------------------------------------------
#define P_HEVC_VLD_STATUS_CTRL                     (volatile uint32_t *)0xfe32f000
//
// bit 15 -- use_separate_c_path
// bit 14 -- reserved
// bit 13 -- h264_co_mb_wr_busy
// bit 12 -- vld_error_protect
// bit 11 -- m4_mv_qpixel
// bit 10 -- use_old_shift_en
// bit 9 -- output_mv_not_pmv
// bit 8:5 -- force_zigzag
// bit 4 -- force_zigzag_en
// bit 3 -- disable_viff_anempty_int
// bit 2 -- disable_m2_ac_coeff_one_cycle
// bit 1 -- forced_reset  force reset pmv
// bit 0 -- mpeg_type  0:mpeg1 1: mpeg2
#define P_HEVC_MPEG1_2_REG                         (volatile uint32_t *)0xfe32f004
#define P_HEVC_F_CODE_REG                          (volatile uint32_t *)0xfe32f008
#define P_HEVC_PIC_HEAD_INFO                       (volatile uint32_t *)0xfe32f00c
#define P_HEVC_SLICE_VER_POS_PIC_TYPE              (volatile uint32_t *)0xfe32f010
#define P_HEVC_QP_VALUE_REG                        (volatile uint32_t *)0xfe32f014
#define P_HEVC_MBA_INC                             (volatile uint32_t *)0xfe32f018
#define P_HEVC_MB_MOTION_MODE                      (volatile uint32_t *)0xfe32f01c
//`define PACKET_BYTE_COUNT   8'h08
// bit 15 -- force_search_startcode_en
// bit 14 -- int_cpu_when_error (before do anything)
// bit 13 -- vld_error_reset
// bit 12 -- return_on_slice_header
// bit 6 -- jpeg_ff00_en
// bit 5:0 -- vld_power_ctl
#define P_HEVC_POWER_CTL_VLD                       (volatile uint32_t *)0xfe32f020
#define P_HEVC_MB_WIDTH                            (volatile uint32_t *)0xfe32f024
#define P_HEVC_SLICE_QP                            (volatile uint32_t *)0xfe32f028
// `define MB_X_MB_Y           8'h0b   /* current MBX and MBY                  */
#define P_HEVC_PRE_START_CODE                      (volatile uint32_t *)0xfe32f02c
#define P_HEVC_SLICE_START_BYTE_01                 (volatile uint32_t *)0xfe32f030
#define P_HEVC_SLICE_START_BYTE_23                 (volatile uint32_t *)0xfe32f034
#define P_HEVC_RESYNC_MARKER_LENGTH                (volatile uint32_t *)0xfe32f038
// bit[6:5] - frame/field info, 01 - top, 10 - bottom, 11 - frame
// bit[4:0] - buffer ID
// L0_BUFF_ID_0, L0_BUFF_ID_1, L1_BUFF_ID_0, L1_BUFF_ID_1
#define P_HEVC_DECODER_BUFFER_INFO                 (volatile uint32_t *)0xfe32f03c
#define P_HEVC_FST_FOR_MV_X                        (volatile uint32_t *)0xfe32f040
#define P_HEVC_FST_FOR_MV_Y                        (volatile uint32_t *)0xfe32f044
#define P_HEVC_SCD_FOR_MV_X                        (volatile uint32_t *)0xfe32f048
#define P_HEVC_SCD_FOR_MV_Y                        (volatile uint32_t *)0xfe32f04c
#define P_HEVC_FST_BAK_MV_X                        (volatile uint32_t *)0xfe32f050
#define P_HEVC_FST_BAK_MV_Y                        (volatile uint32_t *)0xfe32f054
#define P_HEVC_SCD_BAK_MV_X                        (volatile uint32_t *)0xfe32f058
#define P_HEVC_SCD_BAK_MV_Y                        (volatile uint32_t *)0xfe32f05c
// Bit 31 -- h264_non_intra_set_IntraType_need (READ Only)
// Bit[30:27] -- Reserved
// Bit 27 -- disable_one_cycle_vld_data_finished_fix
// Bit 26 -- int_wait_non_intra_set_finish
// Bit 25 -- IntraTypeLeft_use_vcw2f
// Bit 24 -- spatial_scale_no_update_when_f_invalid
// Bit 23 -- spatial_scale_no_update_when_f_zero
// Bit 22 -- pure_jpeg_hw_en
// Bit 21 -- auto_read_AC_COEFF
// Bit 20 -- fast_jpeg_hw_en
// Bit 19 -- vld_swap_reset
// Bit 18 -- set_vld_state
// Bit 17:12 -- set_vld_state_data
// Bit 11 -- set_stcode_state
// Bit 10:9 -- set_stcode_state_data
// Bit 8 -- decoder_parameter_reset
// Bit 7:4 -- read_buffer_interlace  0-progressive, 1-interlace, used in VC1
// bit 3 -- disable_new_stcode_search_fix // From GXM
// bit 2 -- weighting_prediction
// bit 1 -- mb_weighting_flag
// bit 0 -- slice_weighting_flag
#define P_HEVC_VLD_DECODE_CONTROL                  (volatile uint32_t *)0xfe32f060
// bit[15:0] - vld_jpeg_tab_addr
#define P_HEVC_VLD_JPEG_TAB_ADDR                   (volatile uint32_t *)0xfe32f064
#define P_HEVC_VIFF_BIT_CNT                        (volatile uint32_t *)0xfe32f068
#define P_HEVC_BYTE_ALIGN_PEAK_HI                  (volatile uint32_t *)0xfe32f06c
#define P_HEVC_BYTE_ALIGN_PEAK_LO                  (volatile uint32_t *)0xfe32f070
#define P_HEVC_NEXT_ALIGN_PEAK                     (volatile uint32_t *)0xfe32f074
// bit 31    : byte_aligned_zero_23_from_org // From GXM
// bit 30    : force_shift_out_drop_flag_zero // From GXM
// bit 29    : en_st_protect_from_org // From GXM
// bit 28    : enable_halt_decode_start_voff
// bit 27    : disable_C_pred_check
// bit 26    : disable_I4_pred_check
// bit 25    : disable_I16_pred_check
// bit 24    : check_avs_1st_drop
// bit 23    : enable_cabac_protect // From GXM
// bit 22    : enable_avs_drop_more
// bit 21    : reset_avs_drop_ptr
// bit 20    : reset_cabac_use_next_at_end_req
// bit 19    : vc1_inv_intra_co_mb_ref_rd
// bit 18    : vc1_inv_co_mb_ref_rd
// bit 17    : vc1_inv_intra_co_mb_ref_wr
// bit 16    : vc1_inv_co_mb_ref_wr
// bit 15    : disable_mv_cal_begin_only
// bit 14    : avs_drop_enable
// bit 13:12 : avs_drop_ptr
// bit 11:8  : avs_demu_ctl_reg
// bit 7 : avs_enable
// bit 6 : disable_dblk_hcmd
// bit 5 : disable_mc_hcmd
// bit 4 : first_mode3_set enable
// bit 3 : first_mode3
// bit 2:1 : vc1_profile  0-SP, 1-MP, 2-reserved, 3-AP
// bit 0   : vc1_enable
#define P_HEVC_VC1_CONTROL_REG                     (volatile uint32_t *)0xfe32f078
#define P_HEVC_PMV1_X                              (volatile uint32_t *)0xfe32f080
#define P_HEVC_PMV1_Y                              (volatile uint32_t *)0xfe32f084
#define P_HEVC_PMV2_X                              (volatile uint32_t *)0xfe32f088
#define P_HEVC_PMV2_Y                              (volatile uint32_t *)0xfe32f08c
#define P_HEVC_PMV3_X                              (volatile uint32_t *)0xfe32f090
#define P_HEVC_PMV3_Y                              (volatile uint32_t *)0xfe32f094
#define P_HEVC_PMV4_X                              (volatile uint32_t *)0xfe32f098
#define P_HEVC_PMV4_Y                              (volatile uint32_t *)0xfe32f09c
// Can't use the same address for different defines
// Therefore, create a single define that covers both
// Only appears to be used in micro-code since the VLD hardware is
// hard coded.
// `define M4_TABLE_SELECT     8'h28  // Does this exist in HW ? Added from register_mp2.h
// `define M4_TABLE_OUTPUT     8'h28  // Does this exist in HW ? Added from register_mp2.h
#define P_HEVC_M4_TABLE_SELECT                     (volatile uint32_t *)0xfe32f0a0
#define P_HEVC_M4_CONTROL_REG                      (volatile uint32_t *)0xfe32f0a4
#define P_HEVC_BLOCK_NUM                           (volatile uint32_t *)0xfe32f0a8
#define P_HEVC_PATTERN_CODE                        (volatile uint32_t *)0xfe32f0ac
#define P_HEVC_MB_INFO                             (volatile uint32_t *)0xfe32f0b0
#define P_HEVC_VLD_DC_PRED                         (volatile uint32_t *)0xfe32f0b4
#define P_HEVC_VLD_ERROR_MASK                      (volatile uint32_t *)0xfe32f0b8
#define P_HEVC_VLD_DC_PRED_C                       (volatile uint32_t *)0xfe32f0bc
#define P_HEVC_LAST_SLICE_MV_ADDR                  (volatile uint32_t *)0xfe32f0c0
#define P_HEVC_LAST_MVX                            (volatile uint32_t *)0xfe32f0c4
#define P_HEVC_LAST_MVY                            (volatile uint32_t *)0xfe32f0c8
#define P_HEVC_VLD_C38                             (volatile uint32_t *)0xfe32f0e0
#define P_HEVC_VLD_C39                             (volatile uint32_t *)0xfe32f0e4
#define P_HEVC_VLD_STATUS                          (volatile uint32_t *)0xfe32f0e8
#define P_HEVC_VLD_SHIFT_STATUS                    (volatile uint32_t *)0xfe32f0ec
// `define VLD_SHIFT_INFO      8'h3b  // Does this exist in HW ? used in $ucode/mpeg4
#define P_HEVC_VOFF_STATUS                         (volatile uint32_t *)0xfe32f0f0
#define P_HEVC_VLD_C3D                             (volatile uint32_t *)0xfe32f0f4
#define P_HEVC_VLD_DBG_INDEX                       (volatile uint32_t *)0xfe32f0f8
// vld_buff_info -- (index == 0)
// Bit11]    halt_decode_start_voff
// Bit10]    C_pred_error
// Bit[9]    I4_pred_error
// Bit[8]    I16_pred_error
// Bit[7:6]  mv_UR_ready_cnt;
// Bit[5]  vld_wr_idx
// Bit[4]  iq_rd_idx
// Bit[3]  vld_vi_block_rdy_1
// Bit[2]  vld_vi_block_rdy_2
// Bit[1]  voff_empty_1
// Bit[0]  voff_empty_2
// cabac_buff_info_0 -- (index == 1)
// Bit[31] shift_data_ready
// Bit[30:29] Reserved
// Bit[28:24] cabac_buffer_ptr
// Bit[23:0] cabac_buffer
// cabac_buff_info_1 -- (index == 2)
// Bit[31:29] Reserved
// Bit[28:20] Drange
// Bit[19:16] bin_count_4
// Bit[15:13] Reserved
// Bit[12:6] context_mem_do
// Bit[5:3] coeff_state
// Bit[2:0] mvd_state
// h264_mv_present -- (index == 3)
// Bit[31:16] mv_present_l0
// Bit[15:0] mv_present_l1
// h264_mv_cal_info_0 -- (index == 4)
// [31:28] mv_cal_state
// [27:24] direct_spatial_cnt
// Bit[23:21] Reserved
// Bit[20] mv_UR_ready_for_mv_cal
// Bit[19] co_mb_mem_ready_for_mv_cal
// Bit[18] mc_dblk_cmd_if_busy
// Bit[17] h264_co_mb_wr_busy
// Bit[16] H264_cbp_blk_ready
// Bit[15] mc_hcmd_rrdy
// Bit[14] mc_hcmd_srdy
// Bit[13] mc_cmd_if_ready
// Bit[12] mc_hcmd_mv_available
// Bit[11:8] mc_cmd_if_state
// Bit[7] dblk_hcmd_rrdy
// Bit[6] dblk_hcmd_srdy
// Bit[5] dblk_cmd_if_ready
// Bit[4] dblk_hcmd_mv_available
// Bit[3:0] dblk_cmd_if_state
// h264_mv_cal_info_1 -- (index == 5)
//  Bit[31:29] Reserved
//  Bit[28:24] total_mvd_num_l0
//  Bit[23:21] Reserved
//  Bit[20:16] mv_cal_ptr_l0
//  Bit[15:13] Reserved
//  Bit[12:8] mc_hcmd_ptr_l0
//  Bit[7:5] Reserved
//  Bit[4:0] dblk_hcmd_ptr_l0
// h264_mv_cal_info_2 -- (index == 6)
//  Bit[31:29] Reserved
//  Bit[28:24] total_mvd_num_l1
//  Bit[23:21] Reserved
//  Bit[20:16] mv_cal_ptr_l1
//  Bit[15:13] Reserved
//  Bit[12:8] mc_hcmd_ptr_l1
//  Bit[7:5] Reserved
//  Bit[4:0] dblk_hcmd_ptr_l1
// h264_co_mb_info -- (index == 7)
// Bit[31:26] Reserved
// Bit[25] mv_scale_cal_busy
// Bit[24:20] co_mv_count
// Bit[19:16] co_mv_process_state
// Bit[15] h264_co_mb_rd_busy
// Bit[15] h264_co_mb_rd_ready
// Bit[13:12] co_mv_transfer_block_cnt
// Bit[11:8] co_mv_transfer_ptr
// Bit[7] co_mv_POC_l1_busy
// Bit[6] h264_weight_scale_cal_en
// Bit[5] weight_cal_busy
// Bit[4] weight_cal_not_finished
// Bit[3:0] weight_process_state
#define P_HEVC_VLD_DBG_DATA                        (volatile uint32_t *)0xfe32f0fc
// --------------------------------------------
// VIFIFO DDR Interface
// --------------------------------------------
// The VIFIFO start pointer into DDR memory is a 32-bit number
// The Start pointer will automatically be truncated to land on
// an 8-byte boundary.  That is, bits [2:0] = 0;
#define P_HEVC_VLD_MEM_VIFIFO_START_PTR            (volatile uint32_t *)0xfe32f100
// The current pointer points so some location between the START and END
// pointers.  The current pointer is a BYTE pointer.  That is, you can
// point to any BYTE address within the START/END range
#define P_HEVC_VLD_MEM_VIFIFO_CURR_PTR             (volatile uint32_t *)0xfe32f104
#define P_HEVC_VLD_MEM_VIFIFO_END_PTR              (volatile uint32_t *)0xfe32f108
// bit[31]    viff_halt_int_en
// bit[30]    viff_halt_read_enable
// bit[29:26] reserved
// bit[25:16] viff_halt_int_bytes
// bit[15:10] reserved
// bit[9:0]   bytes_available
#define P_HEVC_VLD_MEM_VIFIFO_BYTES_AVAIL          (volatile uint32_t *)0xfe32f10c
// VIFIFO FIFO Control
// bit  [31:24] viff_empty_int_enable_cpu[7:0]
// bit  [23:16] viff_empty_int_enable_amrisc[7:0]
//   -bit 23 Video BUFFER < 0x400 Bytes
//   -bit 22 Video BUFFER < 0x200 Bytes
//   -bit 21 Video BUFFER < 0x100 Bytes
//   -bit 20 Video BUFFER < 0x80 Bytes
//   -bit 19 Video BUFFER < 0x40 Bytes
//   -bit 18 Video BUFFER < 0x20 Bytes
//   -bit 17 vififo  < 16 double words
//   -bit 16 vififo  < 8 double words
// bit  [15:13] unused
// bit  [12]    A_urgent
// bit  [11]    transfer_length 0 - 32x64 Bits per request, 1 - 16x64 Bits per request
// bit  [10]    use_level       Set this bit to 1 to enable filling of the FIFO controlled by the buffer
//                              level control.  If this bit is 0, then use bit[1] to control the enabling of filling
// bit  [9]     Data Ready.     This bit is set when data can be popped
// bit  [8]     fill busy       This bit will be high when we're fetching data from the DDR memory
//                              To reset this module, set cntl_enable = 0, and then wait for busy = 0.
//                              After that you can pulse cntl_init to start over
// bit  [7]     init_with_cntl_init
// bit  [6]     reserved
// bits [5:3]   endian:         see $lib/rtl/ddr_endian.v
// bit  [2]     cntl_empty_en   Set to 1 to enable reading the DDR memory FIFO
//                              Set cntl_empty_en = cntl_fill_en = 0 when pulsing cntl_init
// bit  [1]     cntl_fill_en    Set to 1 to enable reading data from DDR memory
// bit  [0]     cntl_init:      After setting the read pointers, sizes, channel masks
//                              and read masks, set this bit to 1 and then to 0
//                              NOTE:  You don't need to pulse cntl_init if only the start address is
//                              being changed
#define P_HEVC_VLD_MEM_VIFIFO_CONTROL              (volatile uint32_t *)0xfe32f110
// --------------------------------------------
// VIFIFO Buffer Level Manager
// --------------------------------------------
#define P_HEVC_VLD_MEM_VIFIFO_WP                   (volatile uint32_t *)0xfe32f114
#define P_HEVC_VLD_MEM_VIFIFO_RP                   (volatile uint32_t *)0xfe32f118
#define P_HEVC_VLD_MEM_VIFIFO_LEVEL                (volatile uint32_t *)0xfe32f11c
//
// bit  [8]     use_parser_video2_wp
// bit  [7]     vbuf2_out_manual
// bit  [6]     vbuf_out_manual
// bit  [5]     empty (ReadOnly)
// bit  [4]     full (ReadOnly)
// bit  [3:2]   reserved
// bit  [1]     manual mode     Set to 1 for manual write pointer mode
// bit  [0]     Init            Set high then low after everything has been initialized
#define P_HEVC_VLD_MEM_VIFIFO_BUF_CNTL             (volatile uint32_t *)0xfe32f120
// bit 31:16 -- drop_bytes
// bit 15:14 -- drop_status (Read-Only)
// bit 13:12 -- sync_match_position (Read-Only)
// bit 11:6 -- reserved
// bit 5:4 -- TIME_STAMP_NUMBER, 0-32bits, 1-64bits, 2-96bits, 3-128bits
// bit 3 -- stamp_soft_reset
// bit 2 -- TIME_STAMP_length_enable
// bit 1 -- TIME_STAMP_sync64_enable
// bit 0 -- TIME_STAMP_enable
#define P_HEVC_VLD_TIME_STAMP_CNTL                 (volatile uint32_t *)0xfe32f124
// bit 31:0 -- TIME_STAMP_SYNC_CODE_0
#define P_HEVC_VLD_TIME_STAMP_SYNC_0               (volatile uint32_t *)0xfe32f128
// bit 31:0 -- TIME_STAMP_SYNC_CODE_1
#define P_HEVC_VLD_TIME_STAMP_SYNC_1               (volatile uint32_t *)0xfe32f12c
// bit 31:0 TIME_STAMP_0
#define P_HEVC_VLD_TIME_STAMP_0                    (volatile uint32_t *)0xfe32f130
// bit 31:0 TIME_STAMP_1
#define P_HEVC_VLD_TIME_STAMP_1                    (volatile uint32_t *)0xfe32f134
// bit 31:0 TIME_STAMP_2
#define P_HEVC_VLD_TIME_STAMP_2                    (volatile uint32_t *)0xfe32f138
// bit 31:0 TIME_STAMP_3
#define P_HEVC_VLD_TIME_STAMP_3                    (volatile uint32_t *)0xfe32f13c
// bit 31:0 TIME_STAMP_LENGTH
#define P_HEVC_VLD_TIME_STAMP_LENGTH               (volatile uint32_t *)0xfe32f140
// bit 15:0 vififo_rd_count
#define P_HEVC_VLD_MEM_VIFIFO_WRAP_COUNT           (volatile uint32_t *)0xfe32f144
// bit 29:24 A_brst_num
// bit 21:16 A_id
// bit 15:0 level_hold
#define P_HEVC_VLD_MEM_VIFIFO_MEM_CTL              (volatile uint32_t *)0xfe32f148
#define P_HEVC_VLD_MEM_VBUF_RD_PTR                 (volatile uint32_t *)0xfe32f14c
#define P_HEVC_VLD_MEM_VBUF2_RD_PTR                (volatile uint32_t *)0xfe32f150
#define P_HEVC_VLD_MEM_SWAP_ADDR                   (volatile uint32_t *)0xfe32f154
// bit[23:16] - swap_d_count (Read Only)
// bit[15:8]  - swap_a_count (Read Only)
// bit [7] - swap busy (Read Only)
// bit [6:2] - reserved
// bit [1] - 1 - STORE to Memory, 0 - LOAD from Memory
// bit [0] - swap active
#define P_HEVC_VLD_MEM_SWAP_CTL                    (volatile uint32_t *)0xfe32f158
// bit[12]  -- zero_use_cbp_blk
// bit[11]  -- mv_use_abs (only calculate abs)
// bit[10]  -- mv_use_simple_mode (every size count has same weight)
// bit[9]   -- use_simple_mode (every size count has same weight)
// bit[8]   -- reset_all_count // write only
// bit[7:5] Reserved
// bit[4:0] pic_quality_rd_idx
#define P_HEVC_VDEC_PIC_QUALITY_CTRL               (volatile uint32_t *)0xfe32f15c
// idx  -- read out
//   0  -- blk88_y_count // 4k will use 20 bits
//   1  -- qp_y_sum // 4k use 27 bits
//   2  -- intra_y_count // 4k use 20 bits
//   3  -- skipped_y_count // 4k use 20 bits
//   4  -- coeff_non_zero_y_count // 4k use 20 bits
//   5  -- blk66_c_count // 4k will use 20 bits
//   6  -- qp_c_sum // 4k use 26 bits
//   7  -- intra_c_count // 4k use 20 bits
//   8  -- skipped_cu_c_count // 4k use 20 bits
//   9  -- coeff_non_zero_c_count // 4k use 20 bits
//  10  -- { 1'h0, qp_c_max[6:0], 1'h0, qp_c_min[6:0], 1'h0, qp_y_max[6:0], 1'h0, qp_y_min[6:0]}
//  11  -- blk22_mv_count
//  12  -- {mvy_L1_count[39:32], mvx_L1_count[39:32], mvy_L0_count[39:32], mvx_L0_count[39:32]}
//  13  -- mvx_L0_count[31:0]
//  14  -- mvy_L0_count[31:0]
//  15  -- mvx_L1_count[31:0]
//  16  -- mvy_L1_count[31:0]
//  17  -- {mvx_L0_max, mvx_L0_min} // format : {sign, abs[14:0]}
//  18  -- {mvy_L0_max, mvy_L0_min}
//  19  -- {mvx_L1_max, mvx_L1_min}
//  20  -- {mvy_L1_max, mvy_L1_min}
#define P_HEVC_VDEC_PIC_QUALITY_DATA               (volatile uint32_t *)0xfe32f160
// 31:0 vdec_stream_crc
#define P_HEVC_VDEC_STREAM_CRC                     (volatile uint32_t *)0xfe32f164
// 31:0  h264_buff_start_addr
#define P_HEVC_VDEC_H264_TOP_BUFF_START            (volatile uint32_t *)0xfe32f168
// 31:24 top_read_hole ( *16 bytes)
// 23    h264_top_urgent
// 22    read_has_priority
// 21    read_wait_wrrsp (For tiny frame size)
// 20:18 reserved
// 17    h264_top_mode    // 0:16bytes, 1:32bytes
// 16    h264_hw_top_enable
// 15:0  h264_buff_size
#define P_HEVC_VDEC_H264_TOP_CFG                   (volatile uint32_t *)0xfe32f16c
// 31:16 h264_top_rd_offset
// 15:0  h264_top_wr_offset
#define P_HEVC_VDEC_H264_TOP_OFFSET                (volatile uint32_t *)0xfe32f170
// 31:24 h264_top_wrrsp
// 23:16 top_pop_mb_count
// 15:7  reserved
// 6     h264_top_load_pending_2   (ReadOnly)
// 5     h264_top_load_pending_1   (ReadOnly)
// 4     h264_top_store_pending   (ReadOnly)
// 3     need_write   (ReadOnly)
// 2     need_read    (ReadOnly)
// 1     A_write      (ReadOnly)
// 0     A_req (busy) (ReadOnly)
#define P_HEVC_VDEC_H264_TOP_CTRL                  (volatile uint32_t *)0xfe32f174
//
// Closing file:  vld_regs.h
//
//
// Reading file:  iqidct_regs.h
//
//========================================================================
//  IQ/IDCT module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_VDEC_IQIDCT_CBUS_BASE = 0x0e
// -----------------------------------------------
#define P_HCODEC_VCOP_CTRL_REG                     (volatile uint32_t *)0xfe327800
#define P_HCODEC_QP_CTRL_REG                       (volatile uint32_t *)0xfe327804
#define P_HCODEC_INTRA_QUANT_MATRIX                (volatile uint32_t *)0xfe327808
#define P_HCODEC_NON_I_QUANT_MATRIX                (volatile uint32_t *)0xfe32780c
#define P_HCODEC_DC_SCALER                         (volatile uint32_t *)0xfe327810
#define P_HCODEC_DC_AC_CTRL                        (volatile uint32_t *)0xfe327814
// `define RV_AI_CTRL          8'h05  // ONLY for $ucode/real/amrisc/rv.s reg value from apollo
#define P_HCODEC_DC_AC_SCALE_MUL                   (volatile uint32_t *)0xfe327818
#define P_HCODEC_DC_AC_SCALE_DIV                   (volatile uint32_t *)0xfe32781c
// `define DC_AC_SCALE_RESULT  8'h06
// `define RESERVED_E07        8'h07
#define P_HCODEC_POWER_CTL_IQIDCT                  (volatile uint32_t *)0xfe327820
#define P_HCODEC_RV_AI_Y_X                         (volatile uint32_t *)0xfe327824
#define P_HCODEC_RV_AI_U_X                         (volatile uint32_t *)0xfe327828
#define P_HCODEC_RV_AI_V_X                         (volatile uint32_t *)0xfe32782c
// bit 15:0 will count up when rv_ai_mb finished when non zero
// and rv_ai_mb_finished_int will be generate when this is not zero
#define P_HCODEC_RV_AI_MB_COUNT                    (volatile uint32_t *)0xfe327830
// For H264 I in PB picture Use -- dma type : h264_next_intra_dma
#define P_HCODEC_NEXT_INTRA_DMA_ADDRESS            (volatile uint32_t *)0xfe327834
// Bit 18 -- neighbor_intra_dcac_do_not_use_reg
// Bit 17 -- neighbor_intra_idct_use_reg
// Bit 16 -- dcac_dma_read_cache_disable
// Bit 15 -- dcac_dma_urgent
// Bit 14 -- nv21_swap
// Bit 13 -- nv21_top_dma
// Bit 12 -- reset_rv_ai_wait_rd_data
// Bit 11 -- set_rv_ai_wait_rd_data [12:11] = 3 means only dec 1 (For Skipped MB of MBAFF)
// Bit 10 -- rv_ai_wait_rd_data (Read Only)
// Bit 9 -- enable_rv_ai_wait_rd_data
// Bit 8 -- disable_vc1_mv_update
// Bit 7 -- pred_dc_signed
// Bit 6 -- inc_vld_ready_count
// Bit 5 -- dec_vld_ready_count
// Bit 4 -- disable_ref_bidir_fix
// Bit 3 -- disable_MV_UL_l1_bot_fix
// Bit 2 -- disable_mb_aff_fix
// Bit 1 -- canvas_addr_7
// Bit 0 -- constrained_intra_pred_flag for H264
#define P_HCODEC_IQIDCT_CONTROL                    (volatile uint32_t *)0xfe327838
// Bit[31:19] Reserved
// Bit[18] iq_waiting
// Bit[17] iq_om_wr_idx
// Bit[16] iq_om_rd_idx
// Bit[15] iq_om_busy
// Bit[14] iq_om_2_busy
// Bit[13] idx_fifo_0
// Bit[12] idx_fifo_1
// Bit[11] idx_fifo_2
// Bit[10] idx_fifo_3
// Bit[9] idx_fifo_4
// Bit[8] idx_fifo_5
// Bit[7] idx_fifo_6
// Bit[6] idx_fifo_7
// Bit[5:3] idx_fifo_wp
// Bit[2:0] idx_fifo_rp
#define P_HCODEC_IQIDCT_DEBUG_INFO_0               (volatile uint32_t *)0xfe32783c
// For RTL Simulation Only
#define P_HCODEC_DEBLK_CMD                         (volatile uint32_t *)0xfe327840
// Bit[15+16] ds_mc_valid_2
// Bit[14+16] new_idct1_rd_idx_2
// Bit[13+16] new_idct1_wr_idx_2
// Bit[12+16] idct1_buff0_busy_2
// Bit[11+16] idct1_buff1_busy_2
// Bit[10+16] new_idct1_busy_2
// Bit[9+16] iq_om_8val_2
// Bit[8+16] idct1_pipe_busy_2
// Bit[7+16] wait_mb_left_finish_hold_2
// Bit[6+16] new_idct2_rd_idx_2
// Bit[5+16] new_idct2_wr_idx_2
// Bit[4+16] idct2_buff0_busy_2
// Bit[3+16] idct2_buff1_busy_2
// Bit[2+16] idct2_en_2
// Bit[1+16] new_idct2_busy_2
// Bit[0+16] new_idct1_ready_2
// Bit[15] ds_mc_valid_1
// Bit[14] new_idct1_rd_idx_1
// Bit[13] new_idct1_wr_idx_1
// Bit[12] idct1_buff0_busy_1
// Bit[11] idct1_buff1_busy_1
// Bit[10] new_idct1_busy_1
// Bit[9] iq_om_8val_1
// Bit[8] idct1_pipe_busy_1
// Bit[7] wait_mb_left_finish_hold_1
// Bit[6] new_idct2_rd_idx_1
// Bit[5] new_idct2_wr_idx_1
// Bit[4] idct2_buff0_busy_1
// Bit[3] idct2_buff1_busy_1
// Bit[2] idct2_en_1
// Bit[1] new_idct2_busy_1
// Bit[0] new_idct1_ready_1
#define P_HCODEC_IQIDCT_DEBUG_IDCT                 (volatile uint32_t *)0xfe327844
// bit 31 -- convas_enable
// bit 30:24 -- convas_x_count ( 8 pixels / 64 bits )
// bit 23:16 -- convas_y_count
// bit 17 -- I_in_P_prefetch_active
// bit 16 -- force_byte64_bypass
// bit 15   -- dcac_dma_busy
// bit 14   -- dcac_dma_read_cache_active
// bit 13:8 -- dcac_dma_count
// bit 7    -- dcac_dma_rw
// bit 6    -- dcac_skip_read_mode
// bit 5:0  -- dcac_dma_offset
#define P_HCODEC_DCAC_DMA_CTRL                     (volatile uint32_t *)0xfe327848
// when (convas_enable == 0 )
//   bit 31:0 dcac_dma_addr
// when (convas_enable == 1 )
//   bit 31:25 canvas_addr (7 bits)
//   bit 24:12 convas_y_start ( 13 btis )
//   bit 11:0  convas_x_start ( 12 btis )
#define P_HCODEC_DCAC_DMA_ADDRESS                  (volatile uint32_t *)0xfe32784c
// bit 7:0 -- dcac_cpu_addr
#define P_HCODEC_DCAC_CPU_ADDRESS                  (volatile uint32_t *)0xfe327850
// bit 31:0 -- dcac_cpu_data
#define P_HCODEC_DCAC_CPU_DATA                     (volatile uint32_t *)0xfe327854
// bit 31:19 -- reserved
// bit 18:16 -- block_num_reg -- Read-Only
// bit 15:0 -- dcac_mb_count
#define P_HCODEC_DCAC_MB_COUNT                     (volatile uint32_t *)0xfe327858
// bit 31:19 -- reserved
//   bit 18 -- iq 3fifo bypass en
// For H264 :
//   bit 17:2 -- h264_quant
//   bit 11:6 -- h264_quant_c
//   bit  5:0 -- h264_quant_c
// For VC1 :
//   bit    17 -- qindex_GT_8
//   bit    16 -- HalfQPStep
//   bit 15:12 -- eQuantMode
//   bit 11:6  -- AltPQuant
//   bit  5:0  -- PQuant
//
#define P_HCODEC_IQ_QUANT                          (volatile uint32_t *)0xfe32785c
// bit 31:24  -- bitplane_width
// bit 23:16  -- bitplane_height
// bit 15:14  -- bitplane_start_x
// bit 13:12  -- bitplane_start_y
// bit 11:4   -- reserved
// bit 3:1    -- bitplane_type
// bit 0      -- bitplane_busy
#define P_HCODEC_VC1_BITPLANE_CTL                  (volatile uint32_t *)0xfe327860
// bit 24:16  -- wq_param1
// bit  8: 0  -- wq_param0
#define P_HCODEC_AVSP_IQ_WQ_PARAM_01               (volatile uint32_t *)0xfe327864
// bit 24:16  -- wq_param3
// bit  8: 0  -- wq_param2
#define P_HCODEC_AVSP_IQ_WQ_PARAM_23               (volatile uint32_t *)0xfe327868
// bit 24:16  -- wq_param5
// bit  8: 0  -- wq_param4
#define P_HCODEC_AVSP_IQ_WQ_PARAM_45               (volatile uint32_t *)0xfe32786c
// bit    31  -- weight_quant_en
// bit 17:16  -- current_scene_model
// bit 12: 8  -- chroma_qp_delta_cr
// bit  4: 0  -- chroma_qp_delta_cb
#define P_HCODEC_AVSP_IQ_CTL                       (volatile uint32_t *)0xfe327870
// bit 30:28 - rd_buf_wr_addr // Read Only
// bit 27    - Reserved
// bit 26:24 - rd_buf_rd_addr // Read Only
// bit 23:20 - rd_data_pending // Read Only
// bit 19:16 - rd_cache_valid_cnt // Read Only
// bit 15    - Reserved
// bit 14:12 - ddr_byte64_rd_status // READ Only
// bit 11    - Reserved
// bit 10:8  - wr_buf_rd_ptr  // Read Only
// bit  7:4  - wr_buf_cnt     // Read Only
// bit  3:2  - rd_start_mode - 0:64Bytes, 1:32Bytes, 2:pass_through 3:invalid_cache
// bit  1:0  - wr_start_mode - 0:64Bytes, 1:32Bytes, 2:pass_through 3:flush
#define P_HCODEC_DCAC_DDR_BYTE64_CTL               (volatile uint32_t *)0xfe327874
#define P_HCODEC_DCAC_DMA_MIN_ADDR                 (volatile uint32_t *)0xfe327878
#define P_HCODEC_DCAC_DMA_MAX_ADDR                 (volatile uint32_t *)0xfe32787c
// bit[31:28] - RV_AI_BUFF_INC  // 6 for normal 12 for MBAFF
// bit[27] - dcac_dma_hw_enable
// bit[26] - dcac_dma_int_use_state
// bit[18] - I_in_P_prefetch_active_disable
// bit[17] - force_top_intra_mv_bypass_disable
// bit[16] - dcac_dma_limit_enable
// bit[15:12] - max_wrrsp // 0 small size, otherwise use RV_AI_BUFF_INC
// bit[11:8] - max_wr_buf_rd_ptr // 0
// bit[7:4] - max_wr_buf_cnt // 7
// bit[3] dcac_dma_comp_busy_wrrsp_en
// bit[2] dcac_dma_comp_busy_wr_buf_rd_ptr_en
// bit[1] dcac_dma_comp_busy_wr_buf_cnt_en
// bit[0] dcac_dma_comp_busy_dma_busy_en
#define P_HCODEC_DCAC_DMA_HW_CTL_CFG               (volatile uint32_t *)0xfe327880
// bit[31] - inc_pic_mb_count
// bit[30] - dec_pic_mb_count
// bit[15:0] i_pic_mb_count (when not inc_pic_mb_count)
#define P_HCODEC_I_PIC_MB_COUNT_HW                 (volatile uint32_t *)0xfe327884
// bit[9]   dec_mv_cal_ready  // work_with set_mv_cal_ready together
// bit[8]   mb_aff_added_dma
// bit[7]   set_mv_cal_ready  // need to send H264_SET_CLEAR_MV_CAL_READY
// bit[6]   DCAC_PREVIOUS_mb_type_eq_0
// bit[5:4] ai_dma_buffer
// bit[3:2] need_read_top_info
// bit[1:0] read_top_info_state
#define P_HCODEC_DCAC_DMA_HW_INFO                  (volatile uint32_t *)0xfe327888
// bit[31:16] ai_read_offset
// bit[15:0]  ai_write_offset
#define P_HCODEC_DCAC_DMA_HW_OFFSET                (volatile uint32_t *)0xfe32788c
// bit[23:16] mb_width
// bit[15:0] RV_AI_BUFF_START
#define P_HCODEC_DCAC_DMA_HW_BUFF_START            (volatile uint32_t *)0xfe327890
// bit[31:0] NEXT_INTRA_READ_ADDR
#define P_HCODEC_NEXT_INTRA_READ_ADDR_HW           (volatile uint32_t *)0xfe327894
// bit[31] dcac_dma_comp_busy (Read Only)
// bit[30] ai_read_start_update_enable (Write Only) wr_buf_cnt_busy(Read)
// bit[29] ai_write_start_update_enable(Write Only) wr_buf_rd_ptr_busy(Read)
// bit[28] rv_ai_status_update_enable (Write Only) wrrsp_busy(Read)
// bit[27:16] ai_read_start
// bit[15:4]  ai_write_start
// bit[3:0]   rv_ai_status
#define P_HCODEC_DCAC_DMA_HW_CTL                   (volatile uint32_t *)0xfe327898
// bit[31:0] mbbot_addr
#define P_HCODEC_DCAC_DMA_HW_MBBOT_ADDR            (volatile uint32_t *)0xfe32789c
// bit[31:16] total_mby
// bit[15:0] DCAC_MBX
#define P_HCODEC_DCAC_DMA_HW_MBXY                  (volatile uint32_t *)0xfe3278a0
// bit[27:16] - MBX
// bit[15:0]  - slice_mb_count
#define P_HCODEC_SET_HW_TLR                        (volatile uint32_t *)0xfe3278a4
//======================================
//  VCOP Control Register Bits
//
//======================================
    //`define IQIDCT_RESET	    16'h0001	    // Bit 0
//======================================
//  QP Control Register Bits
//
//======================================
// Duplicate Address:  When actually used
// please move to a different address
// `define FLD_DCT_TYPE	    16'h0100	    // Bit 8	0 = Frame DCT; 1 = field DCT
//
// Closing file:  iqidct_regs.h
//
//
// Reading file:  iqidct_regs.h
//
//========================================================================
//  IQ/IDCT module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_VDEC_IQIDCT_CBUS_BASE = 0x0e
// -----------------------------------------------
#define P_VDEC2_VCOP_CTRL_REG                      (volatile uint32_t *)0xfe32b800
#define P_VDEC2_QP_CTRL_REG                        (volatile uint32_t *)0xfe32b804
#define P_VDEC2_INTRA_QUANT_MATRIX                 (volatile uint32_t *)0xfe32b808
#define P_VDEC2_NON_I_QUANT_MATRIX                 (volatile uint32_t *)0xfe32b80c
#define P_VDEC2_DC_SCALER                          (volatile uint32_t *)0xfe32b810
#define P_VDEC2_DC_AC_CTRL                         (volatile uint32_t *)0xfe32b814
// `define RV_AI_CTRL          8'h05  // ONLY for $ucode/real/amrisc/rv.s reg value from apollo
#define P_VDEC2_DC_AC_SCALE_MUL                    (volatile uint32_t *)0xfe32b818
#define P_VDEC2_DC_AC_SCALE_DIV                    (volatile uint32_t *)0xfe32b81c
// `define DC_AC_SCALE_RESULT  8'h06
// `define RESERVED_E07        8'h07
#define P_VDEC2_POWER_CTL_IQIDCT                   (volatile uint32_t *)0xfe32b820
#define P_VDEC2_RV_AI_Y_X                          (volatile uint32_t *)0xfe32b824
#define P_VDEC2_RV_AI_U_X                          (volatile uint32_t *)0xfe32b828
#define P_VDEC2_RV_AI_V_X                          (volatile uint32_t *)0xfe32b82c
// bit 15:0 will count up when rv_ai_mb finished when non zero
// and rv_ai_mb_finished_int will be generate when this is not zero
#define P_VDEC2_RV_AI_MB_COUNT                     (volatile uint32_t *)0xfe32b830
// For H264 I in PB picture Use -- dma type : h264_next_intra_dma
#define P_VDEC2_NEXT_INTRA_DMA_ADDRESS             (volatile uint32_t *)0xfe32b834
// Bit 18 -- neighbor_intra_dcac_do_not_use_reg
// Bit 17 -- neighbor_intra_idct_use_reg
// Bit 16 -- dcac_dma_read_cache_disable
// Bit 15 -- dcac_dma_urgent
// Bit 14 -- nv21_swap
// Bit 13 -- nv21_top_dma
// Bit 12 -- reset_rv_ai_wait_rd_data
// Bit 11 -- set_rv_ai_wait_rd_data [12:11] = 3 means only dec 1 (For Skipped MB of MBAFF)
// Bit 10 -- rv_ai_wait_rd_data (Read Only)
// Bit 9 -- enable_rv_ai_wait_rd_data
// Bit 8 -- disable_vc1_mv_update
// Bit 7 -- pred_dc_signed
// Bit 6 -- inc_vld_ready_count
// Bit 5 -- dec_vld_ready_count
// Bit 4 -- disable_ref_bidir_fix
// Bit 3 -- disable_MV_UL_l1_bot_fix
// Bit 2 -- disable_mb_aff_fix
// Bit 1 -- canvas_addr_7
// Bit 0 -- constrained_intra_pred_flag for H264
#define P_VDEC2_IQIDCT_CONTROL                     (volatile uint32_t *)0xfe32b838
// Bit[31:19] Reserved
// Bit[18] iq_waiting
// Bit[17] iq_om_wr_idx
// Bit[16] iq_om_rd_idx
// Bit[15] iq_om_busy
// Bit[14] iq_om_2_busy
// Bit[13] idx_fifo_0
// Bit[12] idx_fifo_1
// Bit[11] idx_fifo_2
// Bit[10] idx_fifo_3
// Bit[9] idx_fifo_4
// Bit[8] idx_fifo_5
// Bit[7] idx_fifo_6
// Bit[6] idx_fifo_7
// Bit[5:3] idx_fifo_wp
// Bit[2:0] idx_fifo_rp
#define P_VDEC2_IQIDCT_DEBUG_INFO_0                (volatile uint32_t *)0xfe32b83c
// For RTL Simulation Only
#define P_VDEC2_DEBLK_CMD                          (volatile uint32_t *)0xfe32b840
// Bit[15+16] ds_mc_valid_2
// Bit[14+16] new_idct1_rd_idx_2
// Bit[13+16] new_idct1_wr_idx_2
// Bit[12+16] idct1_buff0_busy_2
// Bit[11+16] idct1_buff1_busy_2
// Bit[10+16] new_idct1_busy_2
// Bit[9+16] iq_om_8val_2
// Bit[8+16] idct1_pipe_busy_2
// Bit[7+16] wait_mb_left_finish_hold_2
// Bit[6+16] new_idct2_rd_idx_2
// Bit[5+16] new_idct2_wr_idx_2
// Bit[4+16] idct2_buff0_busy_2
// Bit[3+16] idct2_buff1_busy_2
// Bit[2+16] idct2_en_2
// Bit[1+16] new_idct2_busy_2
// Bit[0+16] new_idct1_ready_2
// Bit[15] ds_mc_valid_1
// Bit[14] new_idct1_rd_idx_1
// Bit[13] new_idct1_wr_idx_1
// Bit[12] idct1_buff0_busy_1
// Bit[11] idct1_buff1_busy_1
// Bit[10] new_idct1_busy_1
// Bit[9] iq_om_8val_1
// Bit[8] idct1_pipe_busy_1
// Bit[7] wait_mb_left_finish_hold_1
// Bit[6] new_idct2_rd_idx_1
// Bit[5] new_idct2_wr_idx_1
// Bit[4] idct2_buff0_busy_1
// Bit[3] idct2_buff1_busy_1
// Bit[2] idct2_en_1
// Bit[1] new_idct2_busy_1
// Bit[0] new_idct1_ready_1
#define P_VDEC2_IQIDCT_DEBUG_IDCT                  (volatile uint32_t *)0xfe32b844
// bit 31 -- convas_enable
// bit 30:24 -- convas_x_count ( 8 pixels / 64 bits )
// bit 23:16 -- convas_y_count
// bit 17 -- I_in_P_prefetch_active
// bit 16 -- force_byte64_bypass
// bit 15   -- dcac_dma_busy
// bit 14   -- dcac_dma_read_cache_active
// bit 13:8 -- dcac_dma_count
// bit 7    -- dcac_dma_rw
// bit 6    -- dcac_skip_read_mode
// bit 5:0  -- dcac_dma_offset
#define P_VDEC2_DCAC_DMA_CTRL                      (volatile uint32_t *)0xfe32b848
// when (convas_enable == 0 )
//   bit 31:0 dcac_dma_addr
// when (convas_enable == 1 )
//   bit 31:25 canvas_addr (7 bits)
//   bit 24:12 convas_y_start ( 13 btis )
//   bit 11:0  convas_x_start ( 12 btis )
#define P_VDEC2_DCAC_DMA_ADDRESS                   (volatile uint32_t *)0xfe32b84c
// bit 7:0 -- dcac_cpu_addr
#define P_VDEC2_DCAC_CPU_ADDRESS                   (volatile uint32_t *)0xfe32b850
// bit 31:0 -- dcac_cpu_data
#define P_VDEC2_DCAC_CPU_DATA                      (volatile uint32_t *)0xfe32b854
// bit 31:19 -- reserved
// bit 18:16 -- block_num_reg -- Read-Only
// bit 15:0 -- dcac_mb_count
#define P_VDEC2_DCAC_MB_COUNT                      (volatile uint32_t *)0xfe32b858
// bit 31:19 -- reserved
//   bit 18 -- iq 3fifo bypass en
// For H264 :
//   bit 17:2 -- h264_quant
//   bit 11:6 -- h264_quant_c
//   bit  5:0 -- h264_quant_c
// For VC1 :
//   bit    17 -- qindex_GT_8
//   bit    16 -- HalfQPStep
//   bit 15:12 -- eQuantMode
//   bit 11:6  -- AltPQuant
//   bit  5:0  -- PQuant
//
#define P_VDEC2_IQ_QUANT                           (volatile uint32_t *)0xfe32b85c
// bit 31:24  -- bitplane_width
// bit 23:16  -- bitplane_height
// bit 15:14  -- bitplane_start_x
// bit 13:12  -- bitplane_start_y
// bit 11:4   -- reserved
// bit 3:1    -- bitplane_type
// bit 0      -- bitplane_busy
#define P_VDEC2_VC1_BITPLANE_CTL                   (volatile uint32_t *)0xfe32b860
// bit 24:16  -- wq_param1
// bit  8: 0  -- wq_param0
#define P_VDEC2_AVSP_IQ_WQ_PARAM_01                (volatile uint32_t *)0xfe32b864
// bit 24:16  -- wq_param3
// bit  8: 0  -- wq_param2
#define P_VDEC2_AVSP_IQ_WQ_PARAM_23                (volatile uint32_t *)0xfe32b868
// bit 24:16  -- wq_param5
// bit  8: 0  -- wq_param4
#define P_VDEC2_AVSP_IQ_WQ_PARAM_45                (volatile uint32_t *)0xfe32b86c
// bit    31  -- weight_quant_en
// bit 17:16  -- current_scene_model
// bit 12: 8  -- chroma_qp_delta_cr
// bit  4: 0  -- chroma_qp_delta_cb
#define P_VDEC2_AVSP_IQ_CTL                        (volatile uint32_t *)0xfe32b870
// bit 30:28 - rd_buf_wr_addr // Read Only
// bit 27    - Reserved
// bit 26:24 - rd_buf_rd_addr // Read Only
// bit 23:20 - rd_data_pending // Read Only
// bit 19:16 - rd_cache_valid_cnt // Read Only
// bit 15    - Reserved
// bit 14:12 - ddr_byte64_rd_status // READ Only
// bit 11    - Reserved
// bit 10:8  - wr_buf_rd_ptr  // Read Only
// bit  7:4  - wr_buf_cnt     // Read Only
// bit  3:2  - rd_start_mode - 0:64Bytes, 1:32Bytes, 2:pass_through 3:invalid_cache
// bit  1:0  - wr_start_mode - 0:64Bytes, 1:32Bytes, 2:pass_through 3:flush
#define P_VDEC2_DCAC_DDR_BYTE64_CTL                (volatile uint32_t *)0xfe32b874
#define P_VDEC2_DCAC_DMA_MIN_ADDR                  (volatile uint32_t *)0xfe32b878
#define P_VDEC2_DCAC_DMA_MAX_ADDR                  (volatile uint32_t *)0xfe32b87c
// bit[31:28] - RV_AI_BUFF_INC  // 6 for normal 12 for MBAFF
// bit[27] - dcac_dma_hw_enable
// bit[26] - dcac_dma_int_use_state
// bit[18] - I_in_P_prefetch_active_disable
// bit[17] - force_top_intra_mv_bypass_disable
// bit[16] - dcac_dma_limit_enable
// bit[15:12] - max_wrrsp // 0 small size, otherwise use RV_AI_BUFF_INC
// bit[11:8] - max_wr_buf_rd_ptr // 0
// bit[7:4] - max_wr_buf_cnt // 7
// bit[3] dcac_dma_comp_busy_wrrsp_en
// bit[2] dcac_dma_comp_busy_wr_buf_rd_ptr_en
// bit[1] dcac_dma_comp_busy_wr_buf_cnt_en
// bit[0] dcac_dma_comp_busy_dma_busy_en
#define P_VDEC2_DCAC_DMA_HW_CTL_CFG                (volatile uint32_t *)0xfe32b880
// bit[31] - inc_pic_mb_count
// bit[30] - dec_pic_mb_count
// bit[15:0] i_pic_mb_count (when not inc_pic_mb_count)
#define P_VDEC2_I_PIC_MB_COUNT_HW                  (volatile uint32_t *)0xfe32b884
// bit[9]   dec_mv_cal_ready  // work_with set_mv_cal_ready together
// bit[8]   mb_aff_added_dma
// bit[7]   set_mv_cal_ready  // need to send H264_SET_CLEAR_MV_CAL_READY
// bit[6]   DCAC_PREVIOUS_mb_type_eq_0
// bit[5:4] ai_dma_buffer
// bit[3:2] need_read_top_info
// bit[1:0] read_top_info_state
#define P_VDEC2_DCAC_DMA_HW_INFO                   (volatile uint32_t *)0xfe32b888
// bit[31:16] ai_read_offset
// bit[15:0]  ai_write_offset
#define P_VDEC2_DCAC_DMA_HW_OFFSET                 (volatile uint32_t *)0xfe32b88c
// bit[23:16] mb_width
// bit[15:0] RV_AI_BUFF_START
#define P_VDEC2_DCAC_DMA_HW_BUFF_START             (volatile uint32_t *)0xfe32b890
// bit[31:0] NEXT_INTRA_READ_ADDR
#define P_VDEC2_NEXT_INTRA_READ_ADDR_HW            (volatile uint32_t *)0xfe32b894
// bit[31] dcac_dma_comp_busy (Read Only)
// bit[30] ai_read_start_update_enable (Write Only) wr_buf_cnt_busy(Read)
// bit[29] ai_write_start_update_enable(Write Only) wr_buf_rd_ptr_busy(Read)
// bit[28] rv_ai_status_update_enable (Write Only) wrrsp_busy(Read)
// bit[27:16] ai_read_start
// bit[15:4]  ai_write_start
// bit[3:0]   rv_ai_status
#define P_VDEC2_DCAC_DMA_HW_CTL                    (volatile uint32_t *)0xfe32b898
// bit[31:0] mbbot_addr
#define P_VDEC2_DCAC_DMA_HW_MBBOT_ADDR             (volatile uint32_t *)0xfe32b89c
// bit[31:16] total_mby
// bit[15:0] DCAC_MBX
#define P_VDEC2_DCAC_DMA_HW_MBXY                   (volatile uint32_t *)0xfe32b8a0
// bit[27:16] - MBX
// bit[15:0]  - slice_mb_count
#define P_VDEC2_SET_HW_TLR                         (volatile uint32_t *)0xfe32b8a4
//======================================
//  VCOP Control Register Bits
//
//======================================
    //`define IQIDCT_RESET	    16'h0001	    // Bit 0
//======================================
//  QP Control Register Bits
//
//======================================
// Duplicate Address:  When actually used
// please move to a different address
// `define FLD_DCT_TYPE	    16'h0100	    // Bit 8	0 = Frame DCT; 1 = field DCT
//
// Closing file:  iqidct_regs.h
//
//
// Reading file:  iqidct_regs.h
//
//========================================================================
//  IQ/IDCT module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_VDEC_IQIDCT_CBUS_BASE = 0x0e
// -----------------------------------------------
#define P_HEVC_VCOP_CTRL_REG                       (volatile uint32_t *)0xfe32f800
#define P_HEVC_QP_CTRL_REG                         (volatile uint32_t *)0xfe32f804
#define P_HEVC_INTRA_QUANT_MATRIX                  (volatile uint32_t *)0xfe32f808
#define P_HEVC_NON_I_QUANT_MATRIX                  (volatile uint32_t *)0xfe32f80c
#define P_HEVC_DC_SCALER                           (volatile uint32_t *)0xfe32f810
#define P_HEVC_DC_AC_CTRL                          (volatile uint32_t *)0xfe32f814
// `define RV_AI_CTRL          8'h05  // ONLY for $ucode/real/amrisc/rv.s reg value from apollo
#define P_HEVC_DC_AC_SCALE_MUL                     (volatile uint32_t *)0xfe32f818
#define P_HEVC_DC_AC_SCALE_DIV                     (volatile uint32_t *)0xfe32f81c
// `define DC_AC_SCALE_RESULT  8'h06
// `define RESERVED_E07        8'h07
#define P_HEVC_POWER_CTL_IQIDCT                    (volatile uint32_t *)0xfe32f820
#define P_HEVC_RV_AI_Y_X                           (volatile uint32_t *)0xfe32f824
#define P_HEVC_RV_AI_U_X                           (volatile uint32_t *)0xfe32f828
#define P_HEVC_RV_AI_V_X                           (volatile uint32_t *)0xfe32f82c
// bit 15:0 will count up when rv_ai_mb finished when non zero
// and rv_ai_mb_finished_int will be generate when this is not zero
#define P_HEVC_RV_AI_MB_COUNT                      (volatile uint32_t *)0xfe32f830
// For H264 I in PB picture Use -- dma type : h264_next_intra_dma
#define P_HEVC_NEXT_INTRA_DMA_ADDRESS              (volatile uint32_t *)0xfe32f834
// Bit 18 -- neighbor_intra_dcac_do_not_use_reg
// Bit 17 -- neighbor_intra_idct_use_reg
// Bit 16 -- dcac_dma_read_cache_disable
// Bit 15 -- dcac_dma_urgent
// Bit 14 -- nv21_swap
// Bit 13 -- nv21_top_dma
// Bit 12 -- reset_rv_ai_wait_rd_data
// Bit 11 -- set_rv_ai_wait_rd_data [12:11] = 3 means only dec 1 (For Skipped MB of MBAFF)
// Bit 10 -- rv_ai_wait_rd_data (Read Only)
// Bit 9 -- enable_rv_ai_wait_rd_data
// Bit 8 -- disable_vc1_mv_update
// Bit 7 -- pred_dc_signed
// Bit 6 -- inc_vld_ready_count
// Bit 5 -- dec_vld_ready_count
// Bit 4 -- disable_ref_bidir_fix
// Bit 3 -- disable_MV_UL_l1_bot_fix
// Bit 2 -- disable_mb_aff_fix
// Bit 1 -- canvas_addr_7
// Bit 0 -- constrained_intra_pred_flag for H264
#define P_HEVC_IQIDCT_CONTROL                      (volatile uint32_t *)0xfe32f838
// Bit[31:19] Reserved
// Bit[18] iq_waiting
// Bit[17] iq_om_wr_idx
// Bit[16] iq_om_rd_idx
// Bit[15] iq_om_busy
// Bit[14] iq_om_2_busy
// Bit[13] idx_fifo_0
// Bit[12] idx_fifo_1
// Bit[11] idx_fifo_2
// Bit[10] idx_fifo_3
// Bit[9] idx_fifo_4
// Bit[8] idx_fifo_5
// Bit[7] idx_fifo_6
// Bit[6] idx_fifo_7
// Bit[5:3] idx_fifo_wp
// Bit[2:0] idx_fifo_rp
#define P_HEVC_IQIDCT_DEBUG_INFO_0                 (volatile uint32_t *)0xfe32f83c
// For RTL Simulation Only
#define P_HEVC_DEBLK_CMD                           (volatile uint32_t *)0xfe32f840
// Bit[15+16] ds_mc_valid_2
// Bit[14+16] new_idct1_rd_idx_2
// Bit[13+16] new_idct1_wr_idx_2
// Bit[12+16] idct1_buff0_busy_2
// Bit[11+16] idct1_buff1_busy_2
// Bit[10+16] new_idct1_busy_2
// Bit[9+16] iq_om_8val_2
// Bit[8+16] idct1_pipe_busy_2
// Bit[7+16] wait_mb_left_finish_hold_2
// Bit[6+16] new_idct2_rd_idx_2
// Bit[5+16] new_idct2_wr_idx_2
// Bit[4+16] idct2_buff0_busy_2
// Bit[3+16] idct2_buff1_busy_2
// Bit[2+16] idct2_en_2
// Bit[1+16] new_idct2_busy_2
// Bit[0+16] new_idct1_ready_2
// Bit[15] ds_mc_valid_1
// Bit[14] new_idct1_rd_idx_1
// Bit[13] new_idct1_wr_idx_1
// Bit[12] idct1_buff0_busy_1
// Bit[11] idct1_buff1_busy_1
// Bit[10] new_idct1_busy_1
// Bit[9] iq_om_8val_1
// Bit[8] idct1_pipe_busy_1
// Bit[7] wait_mb_left_finish_hold_1
// Bit[6] new_idct2_rd_idx_1
// Bit[5] new_idct2_wr_idx_1
// Bit[4] idct2_buff0_busy_1
// Bit[3] idct2_buff1_busy_1
// Bit[2] idct2_en_1
// Bit[1] new_idct2_busy_1
// Bit[0] new_idct1_ready_1
#define P_HEVC_IQIDCT_DEBUG_IDCT                   (volatile uint32_t *)0xfe32f844
// bit 31 -- convas_enable
// bit 30:24 -- convas_x_count ( 8 pixels / 64 bits )
// bit 23:16 -- convas_y_count
// bit 17 -- I_in_P_prefetch_active
// bit 16 -- force_byte64_bypass
// bit 15   -- dcac_dma_busy
// bit 14   -- dcac_dma_read_cache_active
// bit 13:8 -- dcac_dma_count
// bit 7    -- dcac_dma_rw
// bit 6    -- dcac_skip_read_mode
// bit 5:0  -- dcac_dma_offset
#define P_HEVC_DCAC_DMA_CTRL                       (volatile uint32_t *)0xfe32f848
// when (convas_enable == 0 )
//   bit 31:0 dcac_dma_addr
// when (convas_enable == 1 )
//   bit 31:25 canvas_addr (7 bits)
//   bit 24:12 convas_y_start ( 13 btis )
//   bit 11:0  convas_x_start ( 12 btis )
#define P_HEVC_DCAC_DMA_ADDRESS                    (volatile uint32_t *)0xfe32f84c
// bit 7:0 -- dcac_cpu_addr
#define P_HEVC_DCAC_CPU_ADDRESS                    (volatile uint32_t *)0xfe32f850
// bit 31:0 -- dcac_cpu_data
#define P_HEVC_DCAC_CPU_DATA                       (volatile uint32_t *)0xfe32f854
// bit 31:19 -- reserved
// bit 18:16 -- block_num_reg -- Read-Only
// bit 15:0 -- dcac_mb_count
#define P_HEVC_DCAC_MB_COUNT                       (volatile uint32_t *)0xfe32f858
// bit 31:19 -- reserved
//   bit 18 -- iq 3fifo bypass en
// For H264 :
//   bit 17:2 -- h264_quant
//   bit 11:6 -- h264_quant_c
//   bit  5:0 -- h264_quant_c
// For VC1 :
//   bit    17 -- qindex_GT_8
//   bit    16 -- HalfQPStep
//   bit 15:12 -- eQuantMode
//   bit 11:6  -- AltPQuant
//   bit  5:0  -- PQuant
//
#define P_HEVC_IQ_QUANT                            (volatile uint32_t *)0xfe32f85c
// bit 31:24  -- bitplane_width
// bit 23:16  -- bitplane_height
// bit 15:14  -- bitplane_start_x
// bit 13:12  -- bitplane_start_y
// bit 11:4   -- reserved
// bit 3:1    -- bitplane_type
// bit 0      -- bitplane_busy
#define P_HEVC_VC1_BITPLANE_CTL                    (volatile uint32_t *)0xfe32f860
// bit 24:16  -- wq_param1
// bit  8: 0  -- wq_param0
#define P_HEVC_AVSP_IQ_WQ_PARAM_01                 (volatile uint32_t *)0xfe32f864
// bit 24:16  -- wq_param3
// bit  8: 0  -- wq_param2
#define P_HEVC_AVSP_IQ_WQ_PARAM_23                 (volatile uint32_t *)0xfe32f868
// bit 24:16  -- wq_param5
// bit  8: 0  -- wq_param4
#define P_HEVC_AVSP_IQ_WQ_PARAM_45                 (volatile uint32_t *)0xfe32f86c
// bit    31  -- weight_quant_en
// bit 17:16  -- current_scene_model
// bit 12: 8  -- chroma_qp_delta_cr
// bit  4: 0  -- chroma_qp_delta_cb
#define P_HEVC_AVSP_IQ_CTL                         (volatile uint32_t *)0xfe32f870
// bit 30:28 - rd_buf_wr_addr // Read Only
// bit 27    - Reserved
// bit 26:24 - rd_buf_rd_addr // Read Only
// bit 23:20 - rd_data_pending // Read Only
// bit 19:16 - rd_cache_valid_cnt // Read Only
// bit 15    - Reserved
// bit 14:12 - ddr_byte64_rd_status // READ Only
// bit 11    - Reserved
// bit 10:8  - wr_buf_rd_ptr  // Read Only
// bit  7:4  - wr_buf_cnt     // Read Only
// bit  3:2  - rd_start_mode - 0:64Bytes, 1:32Bytes, 2:pass_through 3:invalid_cache
// bit  1:0  - wr_start_mode - 0:64Bytes, 1:32Bytes, 2:pass_through 3:flush
#define P_HEVC_DCAC_DDR_BYTE64_CTL                 (volatile uint32_t *)0xfe32f874
#define P_HEVC_DCAC_DMA_MIN_ADDR                   (volatile uint32_t *)0xfe32f878
#define P_HEVC_DCAC_DMA_MAX_ADDR                   (volatile uint32_t *)0xfe32f87c
// bit[31:28] - RV_AI_BUFF_INC  // 6 for normal 12 for MBAFF
// bit[27] - dcac_dma_hw_enable
// bit[26] - dcac_dma_int_use_state
// bit[18] - I_in_P_prefetch_active_disable
// bit[17] - force_top_intra_mv_bypass_disable
// bit[16] - dcac_dma_limit_enable
// bit[15:12] - max_wrrsp // 0 small size, otherwise use RV_AI_BUFF_INC
// bit[11:8] - max_wr_buf_rd_ptr // 0
// bit[7:4] - max_wr_buf_cnt // 7
// bit[3] dcac_dma_comp_busy_wrrsp_en
// bit[2] dcac_dma_comp_busy_wr_buf_rd_ptr_en
// bit[1] dcac_dma_comp_busy_wr_buf_cnt_en
// bit[0] dcac_dma_comp_busy_dma_busy_en
#define P_HEVC_DCAC_DMA_HW_CTL_CFG                 (volatile uint32_t *)0xfe32f880
// bit[31] - inc_pic_mb_count
// bit[30] - dec_pic_mb_count
// bit[15:0] i_pic_mb_count (when not inc_pic_mb_count)
#define P_HEVC_I_PIC_MB_COUNT_HW                   (volatile uint32_t *)0xfe32f884
// bit[9]   dec_mv_cal_ready  // work_with set_mv_cal_ready together
// bit[8]   mb_aff_added_dma
// bit[7]   set_mv_cal_ready  // need to send H264_SET_CLEAR_MV_CAL_READY
// bit[6]   DCAC_PREVIOUS_mb_type_eq_0
// bit[5:4] ai_dma_buffer
// bit[3:2] need_read_top_info
// bit[1:0] read_top_info_state
#define P_HEVC_DCAC_DMA_HW_INFO                    (volatile uint32_t *)0xfe32f888
// bit[31:16] ai_read_offset
// bit[15:0]  ai_write_offset
#define P_HEVC_DCAC_DMA_HW_OFFSET                  (volatile uint32_t *)0xfe32f88c
// bit[23:16] mb_width
// bit[15:0] RV_AI_BUFF_START
#define P_HEVC_DCAC_DMA_HW_BUFF_START              (volatile uint32_t *)0xfe32f890
// bit[31:0] NEXT_INTRA_READ_ADDR
#define P_HEVC_NEXT_INTRA_READ_ADDR_HW             (volatile uint32_t *)0xfe32f894
// bit[31] dcac_dma_comp_busy (Read Only)
// bit[30] ai_read_start_update_enable (Write Only) wr_buf_cnt_busy(Read)
// bit[29] ai_write_start_update_enable(Write Only) wr_buf_rd_ptr_busy(Read)
// bit[28] rv_ai_status_update_enable (Write Only) wrrsp_busy(Read)
// bit[27:16] ai_read_start
// bit[15:4]  ai_write_start
// bit[3:0]   rv_ai_status
#define P_HEVC_DCAC_DMA_HW_CTL                     (volatile uint32_t *)0xfe32f898
// bit[31:0] mbbot_addr
#define P_HEVC_DCAC_DMA_HW_MBBOT_ADDR              (volatile uint32_t *)0xfe32f89c
// bit[31:16] total_mby
// bit[15:0] DCAC_MBX
#define P_HEVC_DCAC_DMA_HW_MBXY                    (volatile uint32_t *)0xfe32f8a0
// bit[27:16] - MBX
// bit[15:0]  - slice_mb_count
#define P_HEVC_SET_HW_TLR                          (volatile uint32_t *)0xfe32f8a4
//======================================
//  VCOP Control Register Bits
//
//======================================
    //`define IQIDCT_RESET	    16'h0001	    // Bit 0
//======================================
//  QP Control Register Bits
//
//======================================
// Duplicate Address:  When actually used
// please move to a different address
// `define FLD_DCT_TYPE	    16'h0100	    // Bit 8	0 = Frame DCT; 1 = field DCT
//
// Closing file:  iqidct_regs.h
//
//
// Reading file:  vcpu_regs.h
//
//========================================================================
//  VCPU module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_VDEC_VCPU_CBUS_BASE = 0x03
// -----------------------------------------------
#define P_HCODEC_MSP                               (volatile uint32_t *)0xfe324c00
#define P_HCODEC_MPSR                              (volatile uint32_t *)0xfe324c04
#define P_HCODEC_MINT_VEC_BASE                     (volatile uint32_t *)0xfe324c08
#define P_HCODEC_MCPU_INTR_GRP                     (volatile uint32_t *)0xfe324c0c
#define P_HCODEC_MCPU_INTR_MSK                     (volatile uint32_t *)0xfe324c10
#define P_HCODEC_MCPU_INTR_REQ                     (volatile uint32_t *)0xfe324c14
#define P_HCODEC_MPC_P                             (volatile uint32_t *)0xfe324c18
#define P_HCODEC_MPC_D                             (volatile uint32_t *)0xfe324c1c
#define P_HCODEC_MPC_E                             (volatile uint32_t *)0xfe324c20
#define P_HCODEC_MPC_W                             (volatile uint32_t *)0xfe324c24
#define P_HCODEC_MINDEX0_REG                       (volatile uint32_t *)0xfe324c28
#define P_HCODEC_MINDEX1_REG                       (volatile uint32_t *)0xfe324c2c
#define P_HCODEC_MINDEX2_REG                       (volatile uint32_t *)0xfe324c30
#define P_HCODEC_MINDEX3_REG                       (volatile uint32_t *)0xfe324c34
#define P_HCODEC_MINDEX4_REG                       (volatile uint32_t *)0xfe324c38
#define P_HCODEC_MINDEX5_REG                       (volatile uint32_t *)0xfe324c3c
#define P_HCODEC_MINDEX6_REG                       (volatile uint32_t *)0xfe324c40
#define P_HCODEC_MINDEX7_REG                       (volatile uint32_t *)0xfe324c44
#define P_HCODEC_MMIN_REG                          (volatile uint32_t *)0xfe324c48
#define P_HCODEC_MMAX_REG                          (volatile uint32_t *)0xfe324c4c
#define P_HCODEC_MBREAK0_REG                       (volatile uint32_t *)0xfe324c50
#define P_HCODEC_MBREAK1_REG                       (volatile uint32_t *)0xfe324c54
#define P_HCODEC_MBREAK2_REG                       (volatile uint32_t *)0xfe324c58
#define P_HCODEC_MBREAK3_REG                       (volatile uint32_t *)0xfe324c5c
#define P_HCODEC_MBREAK_TYPE                       (volatile uint32_t *)0xfe324c60
#define P_HCODEC_MBREAK_CTRL                       (volatile uint32_t *)0xfe324c64
#define P_HCODEC_MBREAK_STAUTS                     (volatile uint32_t *)0xfe324c68
#define P_HCODEC_MDB_ADDR_REG                      (volatile uint32_t *)0xfe324c6c
#define P_HCODEC_MDB_DATA_REG                      (volatile uint32_t *)0xfe324c70
#define P_HCODEC_MDB_CTRL                          (volatile uint32_t *)0xfe324c74
#define P_HCODEC_MSFTINT0                          (volatile uint32_t *)0xfe324c78
#define P_HCODEC_MSFTINT1                          (volatile uint32_t *)0xfe324c7c
#define P_HCODEC_CSP                               (volatile uint32_t *)0xfe324c80
#define P_HCODEC_CPSR                              (volatile uint32_t *)0xfe324c84
#define P_HCODEC_CINT_VEC_BASE                     (volatile uint32_t *)0xfe324c88
#define P_HCODEC_CCPU_INTR_GRP                     (volatile uint32_t *)0xfe324c8c
#define P_HCODEC_CCPU_INTR_MSK                     (volatile uint32_t *)0xfe324c90
#define P_HCODEC_CCPU_INTR_REQ                     (volatile uint32_t *)0xfe324c94
#define P_HCODEC_CPC_P                             (volatile uint32_t *)0xfe324c98
#define P_HCODEC_CPC_D                             (volatile uint32_t *)0xfe324c9c
#define P_HCODEC_CPC_E                             (volatile uint32_t *)0xfe324ca0
#define P_HCODEC_CPC_W                             (volatile uint32_t *)0xfe324ca4
#define P_HCODEC_CINDEX0_REG                       (volatile uint32_t *)0xfe324ca8
#define P_HCODEC_CINDEX1_REG                       (volatile uint32_t *)0xfe324cac
#define P_HCODEC_CINDEX2_REG                       (volatile uint32_t *)0xfe324cb0
#define P_HCODEC_CINDEX3_REG                       (volatile uint32_t *)0xfe324cb4
#define P_HCODEC_CINDEX4_REG                       (volatile uint32_t *)0xfe324cb8
#define P_HCODEC_CINDEX5_REG                       (volatile uint32_t *)0xfe324cbc
#define P_HCODEC_CINDEX6_REG                       (volatile uint32_t *)0xfe324cc0
#define P_HCODEC_CINDEX7_REG                       (volatile uint32_t *)0xfe324cc4
#define P_HCODEC_CMIN_REG                          (volatile uint32_t *)0xfe324cc8
#define P_HCODEC_CMAX_REG                          (volatile uint32_t *)0xfe324ccc
#define P_HCODEC_CBREAK0_REG                       (volatile uint32_t *)0xfe324cd0
#define P_HCODEC_CBREAK1_REG                       (volatile uint32_t *)0xfe324cd4
#define P_HCODEC_CBREAK2_REG                       (volatile uint32_t *)0xfe324cd8
#define P_HCODEC_CBREAK3_REG                       (volatile uint32_t *)0xfe324cdc
#define P_HCODEC_CBREAK_TYPE                       (volatile uint32_t *)0xfe324ce0
#define P_HCODEC_CBREAK_CTRL                       (volatile uint32_t *)0xfe324ce4
#define P_HCODEC_CBREAK_STAUTS                     (volatile uint32_t *)0xfe324ce8
#define P_HCODEC_CDB_ADDR_REG                      (volatile uint32_t *)0xfe324cec
#define P_HCODEC_CDB_DATA_REG                      (volatile uint32_t *)0xfe324cf0
#define P_HCODEC_CDB_CTRL                          (volatile uint32_t *)0xfe324cf4
#define P_HCODEC_CSFTINT0                          (volatile uint32_t *)0xfe324cf8
#define P_HCODEC_CSFTINT1                          (volatile uint32_t *)0xfe324cfc
#define P_HCODEC_IMEM_DMA_CTRL                     (volatile uint32_t *)0xfe324d00
#define P_HCODEC_IMEM_DMA_ADR                      (volatile uint32_t *)0xfe324d04
#define P_HCODEC_IMEM_DMA_COUNT                    (volatile uint32_t *)0xfe324d08
// bit[29:24] A_brst_num_imem
// bit[21:16] A_id_imem
// bit[11:0] wrrsp_count_imem (reserved)
#define P_HCODEC_WRRSP_IMEM                        (volatile uint32_t *)0xfe324d0c
#define P_HCODEC_LMEM_DMA_CTRL                     (volatile uint32_t *)0xfe324d40
#define P_HCODEC_LMEM_DMA_ADR                      (volatile uint32_t *)0xfe324d44
#define P_HCODEC_LMEM_DMA_COUNT                    (volatile uint32_t *)0xfe324d48
// bit[29:24] A_brst_num_lmem
// bit[21:16] A_id_lmem
// bit[11:0] wrrsp_count_lmem
#define P_HCODEC_WRRSP_LMEM                        (volatile uint32_t *)0xfe324d4c
#define P_HCODEC_MAC_CTRL1                         (volatile uint32_t *)0xfe324d80
#define P_HCODEC_ACC0REG1                          (volatile uint32_t *)0xfe324d84
#define P_HCODEC_ACC1REG1                          (volatile uint32_t *)0xfe324d88
#define P_HCODEC_MAC_CTRL2                         (volatile uint32_t *)0xfe324dc0
#define P_HCODEC_ACC0REG2                          (volatile uint32_t *)0xfe324dc4
#define P_HCODEC_ACC1REG2                          (volatile uint32_t *)0xfe324dc8
#define P_HCODEC_CPU_TRACE                         (volatile uint32_t *)0xfe324e00
//
// Closing file:  vcpu_regs.h
//
//
// Reading file:  vcpu_regs.h
//
//========================================================================
//  VCPU module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_VDEC_VCPU_CBUS_BASE = 0x03
// -----------------------------------------------
#define P_VDEC2_MSP                                (volatile uint32_t *)0xfe328c00
#define P_VDEC2_MPSR                               (volatile uint32_t *)0xfe328c04
#define P_VDEC2_MINT_VEC_BASE                      (volatile uint32_t *)0xfe328c08
#define P_VDEC2_MCPU_INTR_GRP                      (volatile uint32_t *)0xfe328c0c
#define P_VDEC2_MCPU_INTR_MSK                      (volatile uint32_t *)0xfe328c10
#define P_VDEC2_MCPU_INTR_REQ                      (volatile uint32_t *)0xfe328c14
#define P_VDEC2_MPC_P                              (volatile uint32_t *)0xfe328c18
#define P_VDEC2_MPC_D                              (volatile uint32_t *)0xfe328c1c
#define P_VDEC2_MPC_E                              (volatile uint32_t *)0xfe328c20
#define P_VDEC2_MPC_W                              (volatile uint32_t *)0xfe328c24
#define P_VDEC2_MINDEX0_REG                        (volatile uint32_t *)0xfe328c28
#define P_VDEC2_MINDEX1_REG                        (volatile uint32_t *)0xfe328c2c
#define P_VDEC2_MINDEX2_REG                        (volatile uint32_t *)0xfe328c30
#define P_VDEC2_MINDEX3_REG                        (volatile uint32_t *)0xfe328c34
#define P_VDEC2_MINDEX4_REG                        (volatile uint32_t *)0xfe328c38
#define P_VDEC2_MINDEX5_REG                        (volatile uint32_t *)0xfe328c3c
#define P_VDEC2_MINDEX6_REG                        (volatile uint32_t *)0xfe328c40
#define P_VDEC2_MINDEX7_REG                        (volatile uint32_t *)0xfe328c44
#define P_VDEC2_MMIN_REG                           (volatile uint32_t *)0xfe328c48
#define P_VDEC2_MMAX_REG                           (volatile uint32_t *)0xfe328c4c
#define P_VDEC2_MBREAK0_REG                        (volatile uint32_t *)0xfe328c50
#define P_VDEC2_MBREAK1_REG                        (volatile uint32_t *)0xfe328c54
#define P_VDEC2_MBREAK2_REG                        (volatile uint32_t *)0xfe328c58
#define P_VDEC2_MBREAK3_REG                        (volatile uint32_t *)0xfe328c5c
#define P_VDEC2_MBREAK_TYPE                        (volatile uint32_t *)0xfe328c60
#define P_VDEC2_MBREAK_CTRL                        (volatile uint32_t *)0xfe328c64
#define P_VDEC2_MBREAK_STAUTS                      (volatile uint32_t *)0xfe328c68
#define P_VDEC2_MDB_ADDR_REG                       (volatile uint32_t *)0xfe328c6c
#define P_VDEC2_MDB_DATA_REG                       (volatile uint32_t *)0xfe328c70
#define P_VDEC2_MDB_CTRL                           (volatile uint32_t *)0xfe328c74
#define P_VDEC2_MSFTINT0                           (volatile uint32_t *)0xfe328c78
#define P_VDEC2_MSFTINT1                           (volatile uint32_t *)0xfe328c7c
#define P_VDEC2_CSP                                (volatile uint32_t *)0xfe328c80
#define P_VDEC2_CPSR                               (volatile uint32_t *)0xfe328c84
#define P_VDEC2_CINT_VEC_BASE                      (volatile uint32_t *)0xfe328c88
#define P_VDEC2_CCPU_INTR_GRP                      (volatile uint32_t *)0xfe328c8c
#define P_VDEC2_CCPU_INTR_MSK                      (volatile uint32_t *)0xfe328c90
#define P_VDEC2_CCPU_INTR_REQ                      (volatile uint32_t *)0xfe328c94
#define P_VDEC2_CPC_P                              (volatile uint32_t *)0xfe328c98
#define P_VDEC2_CPC_D                              (volatile uint32_t *)0xfe328c9c
#define P_VDEC2_CPC_E                              (volatile uint32_t *)0xfe328ca0
#define P_VDEC2_CPC_W                              (volatile uint32_t *)0xfe328ca4
#define P_VDEC2_CINDEX0_REG                        (volatile uint32_t *)0xfe328ca8
#define P_VDEC2_CINDEX1_REG                        (volatile uint32_t *)0xfe328cac
#define P_VDEC2_CINDEX2_REG                        (volatile uint32_t *)0xfe328cb0
#define P_VDEC2_CINDEX3_REG                        (volatile uint32_t *)0xfe328cb4
#define P_VDEC2_CINDEX4_REG                        (volatile uint32_t *)0xfe328cb8
#define P_VDEC2_CINDEX5_REG                        (volatile uint32_t *)0xfe328cbc
#define P_VDEC2_CINDEX6_REG                        (volatile uint32_t *)0xfe328cc0
#define P_VDEC2_CINDEX7_REG                        (volatile uint32_t *)0xfe328cc4
#define P_VDEC2_CMIN_REG                           (volatile uint32_t *)0xfe328cc8
#define P_VDEC2_CMAX_REG                           (volatile uint32_t *)0xfe328ccc
#define P_VDEC2_CBREAK0_REG                        (volatile uint32_t *)0xfe328cd0
#define P_VDEC2_CBREAK1_REG                        (volatile uint32_t *)0xfe328cd4
#define P_VDEC2_CBREAK2_REG                        (volatile uint32_t *)0xfe328cd8
#define P_VDEC2_CBREAK3_REG                        (volatile uint32_t *)0xfe328cdc
#define P_VDEC2_CBREAK_TYPE                        (volatile uint32_t *)0xfe328ce0
#define P_VDEC2_CBREAK_CTRL                        (volatile uint32_t *)0xfe328ce4
#define P_VDEC2_CBREAK_STAUTS                      (volatile uint32_t *)0xfe328ce8
#define P_VDEC2_CDB_ADDR_REG                       (volatile uint32_t *)0xfe328cec
#define P_VDEC2_CDB_DATA_REG                       (volatile uint32_t *)0xfe328cf0
#define P_VDEC2_CDB_CTRL                           (volatile uint32_t *)0xfe328cf4
#define P_VDEC2_CSFTINT0                           (volatile uint32_t *)0xfe328cf8
#define P_VDEC2_CSFTINT1                           (volatile uint32_t *)0xfe328cfc
#define P_VDEC2_IMEM_DMA_CTRL                      (volatile uint32_t *)0xfe328d00
#define P_VDEC2_IMEM_DMA_ADR                       (volatile uint32_t *)0xfe328d04
#define P_VDEC2_IMEM_DMA_COUNT                     (volatile uint32_t *)0xfe328d08
// bit[29:24] A_brst_num_imem
// bit[21:16] A_id_imem
// bit[11:0] wrrsp_count_imem (reserved)
#define P_VDEC2_WRRSP_IMEM                         (volatile uint32_t *)0xfe328d0c
#define P_VDEC2_LMEM_DMA_CTRL                      (volatile uint32_t *)0xfe328d40
#define P_VDEC2_LMEM_DMA_ADR                       (volatile uint32_t *)0xfe328d44
#define P_VDEC2_LMEM_DMA_COUNT                     (volatile uint32_t *)0xfe328d48
// bit[29:24] A_brst_num_lmem
// bit[21:16] A_id_lmem
// bit[11:0] wrrsp_count_lmem
#define P_VDEC2_WRRSP_LMEM                         (volatile uint32_t *)0xfe328d4c
#define P_VDEC2_MAC_CTRL1                          (volatile uint32_t *)0xfe328d80
#define P_VDEC2_ACC0REG1                           (volatile uint32_t *)0xfe328d84
#define P_VDEC2_ACC1REG1                           (volatile uint32_t *)0xfe328d88
#define P_VDEC2_MAC_CTRL2                          (volatile uint32_t *)0xfe328dc0
#define P_VDEC2_ACC0REG2                           (volatile uint32_t *)0xfe328dc4
#define P_VDEC2_ACC1REG2                           (volatile uint32_t *)0xfe328dc8
#define P_VDEC2_CPU_TRACE                          (volatile uint32_t *)0xfe328e00
//
// Closing file:  vcpu_regs.h
//
//
// Reading file:  vcpu_regs.h
//
//========================================================================
//  VCPU module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_VDEC_VCPU_CBUS_BASE = 0x03
// -----------------------------------------------
#define P_HEVC_MSP                                 (volatile uint32_t *)0xfe32cc00
#define P_HEVC_MPSR                                (volatile uint32_t *)0xfe32cc04
#define P_HEVC_MINT_VEC_BASE                       (volatile uint32_t *)0xfe32cc08
#define P_HEVC_MCPU_INTR_GRP                       (volatile uint32_t *)0xfe32cc0c
#define P_HEVC_MCPU_INTR_MSK                       (volatile uint32_t *)0xfe32cc10
#define P_HEVC_MCPU_INTR_REQ                       (volatile uint32_t *)0xfe32cc14
#define P_HEVC_MPC_P                               (volatile uint32_t *)0xfe32cc18
#define P_HEVC_MPC_D                               (volatile uint32_t *)0xfe32cc1c
#define P_HEVC_MPC_E                               (volatile uint32_t *)0xfe32cc20
#define P_HEVC_MPC_W                               (volatile uint32_t *)0xfe32cc24
#define P_HEVC_MINDEX0_REG                         (volatile uint32_t *)0xfe32cc28
#define P_HEVC_MINDEX1_REG                         (volatile uint32_t *)0xfe32cc2c
#define P_HEVC_MINDEX2_REG                         (volatile uint32_t *)0xfe32cc30
#define P_HEVC_MINDEX3_REG                         (volatile uint32_t *)0xfe32cc34
#define P_HEVC_MINDEX4_REG                         (volatile uint32_t *)0xfe32cc38
#define P_HEVC_MINDEX5_REG                         (volatile uint32_t *)0xfe32cc3c
#define P_HEVC_MINDEX6_REG                         (volatile uint32_t *)0xfe32cc40
#define P_HEVC_MINDEX7_REG                         (volatile uint32_t *)0xfe32cc44
#define P_HEVC_MMIN_REG                            (volatile uint32_t *)0xfe32cc48
#define P_HEVC_MMAX_REG                            (volatile uint32_t *)0xfe32cc4c
#define P_HEVC_MBREAK0_REG                         (volatile uint32_t *)0xfe32cc50
#define P_HEVC_MBREAK1_REG                         (volatile uint32_t *)0xfe32cc54
#define P_HEVC_MBREAK2_REG                         (volatile uint32_t *)0xfe32cc58
#define P_HEVC_MBREAK3_REG                         (volatile uint32_t *)0xfe32cc5c
#define P_HEVC_MBREAK_TYPE                         (volatile uint32_t *)0xfe32cc60
#define P_HEVC_MBREAK_CTRL                         (volatile uint32_t *)0xfe32cc64
#define P_HEVC_MBREAK_STAUTS                       (volatile uint32_t *)0xfe32cc68
#define P_HEVC_MDB_ADDR_REG                        (volatile uint32_t *)0xfe32cc6c
#define P_HEVC_MDB_DATA_REG                        (volatile uint32_t *)0xfe32cc70
#define P_HEVC_MDB_CTRL                            (volatile uint32_t *)0xfe32cc74
#define P_HEVC_MSFTINT0                            (volatile uint32_t *)0xfe32cc78
#define P_HEVC_MSFTINT1                            (volatile uint32_t *)0xfe32cc7c
#define P_HEVC_CSP                                 (volatile uint32_t *)0xfe32cc80
#define P_HEVC_CPSR                                (volatile uint32_t *)0xfe32cc84
#define P_HEVC_CINT_VEC_BASE                       (volatile uint32_t *)0xfe32cc88
#define P_HEVC_CCPU_INTR_GRP                       (volatile uint32_t *)0xfe32cc8c
#define P_HEVC_CCPU_INTR_MSK                       (volatile uint32_t *)0xfe32cc90
#define P_HEVC_CCPU_INTR_REQ                       (volatile uint32_t *)0xfe32cc94
#define P_HEVC_CPC_P                               (volatile uint32_t *)0xfe32cc98
#define P_HEVC_CPC_D                               (volatile uint32_t *)0xfe32cc9c
#define P_HEVC_CPC_E                               (volatile uint32_t *)0xfe32cca0
#define P_HEVC_CPC_W                               (volatile uint32_t *)0xfe32cca4
#define P_HEVC_CINDEX0_REG                         (volatile uint32_t *)0xfe32cca8
#define P_HEVC_CINDEX1_REG                         (volatile uint32_t *)0xfe32ccac
#define P_HEVC_CINDEX2_REG                         (volatile uint32_t *)0xfe32ccb0
#define P_HEVC_CINDEX3_REG                         (volatile uint32_t *)0xfe32ccb4
#define P_HEVC_CINDEX4_REG                         (volatile uint32_t *)0xfe32ccb8
#define P_HEVC_CINDEX5_REG                         (volatile uint32_t *)0xfe32ccbc
#define P_HEVC_CINDEX6_REG                         (volatile uint32_t *)0xfe32ccc0
#define P_HEVC_CINDEX7_REG                         (volatile uint32_t *)0xfe32ccc4
#define P_HEVC_CMIN_REG                            (volatile uint32_t *)0xfe32ccc8
#define P_HEVC_CMAX_REG                            (volatile uint32_t *)0xfe32cccc
#define P_HEVC_CBREAK0_REG                         (volatile uint32_t *)0xfe32ccd0
#define P_HEVC_CBREAK1_REG                         (volatile uint32_t *)0xfe32ccd4
#define P_HEVC_CBREAK2_REG                         (volatile uint32_t *)0xfe32ccd8
#define P_HEVC_CBREAK3_REG                         (volatile uint32_t *)0xfe32ccdc
#define P_HEVC_CBREAK_TYPE                         (volatile uint32_t *)0xfe32cce0
#define P_HEVC_CBREAK_CTRL                         (volatile uint32_t *)0xfe32cce4
#define P_HEVC_CBREAK_STAUTS                       (volatile uint32_t *)0xfe32cce8
#define P_HEVC_CDB_ADDR_REG                        (volatile uint32_t *)0xfe32ccec
#define P_HEVC_CDB_DATA_REG                        (volatile uint32_t *)0xfe32ccf0
#define P_HEVC_CDB_CTRL                            (volatile uint32_t *)0xfe32ccf4
#define P_HEVC_CSFTINT0                            (volatile uint32_t *)0xfe32ccf8
#define P_HEVC_CSFTINT1                            (volatile uint32_t *)0xfe32ccfc
#define P_HEVC_IMEM_DMA_CTRL                       (volatile uint32_t *)0xfe32cd00
#define P_HEVC_IMEM_DMA_ADR                        (volatile uint32_t *)0xfe32cd04
#define P_HEVC_IMEM_DMA_COUNT                      (volatile uint32_t *)0xfe32cd08
// bit[29:24] A_brst_num_imem
// bit[21:16] A_id_imem
// bit[11:0] wrrsp_count_imem (reserved)
#define P_HEVC_WRRSP_IMEM                          (volatile uint32_t *)0xfe32cd0c
#define P_HEVC_LMEM_DMA_CTRL                       (volatile uint32_t *)0xfe32cd40
#define P_HEVC_LMEM_DMA_ADR                        (volatile uint32_t *)0xfe32cd44
#define P_HEVC_LMEM_DMA_COUNT                      (volatile uint32_t *)0xfe32cd48
// bit[29:24] A_brst_num_lmem
// bit[21:16] A_id_lmem
// bit[11:0] wrrsp_count_lmem
#define P_HEVC_WRRSP_LMEM                          (volatile uint32_t *)0xfe32cd4c
#define P_HEVC_MAC_CTRL1                           (volatile uint32_t *)0xfe32cd80
#define P_HEVC_ACC0REG1                            (volatile uint32_t *)0xfe32cd84
#define P_HEVC_ACC1REG1                            (volatile uint32_t *)0xfe32cd88
#define P_HEVC_MAC_CTRL2                           (volatile uint32_t *)0xfe32cdc0
#define P_HEVC_ACC0REG2                            (volatile uint32_t *)0xfe32cdc4
#define P_HEVC_ACC1REG2                            (volatile uint32_t *)0xfe32cdc8
#define P_HEVC_CPU_TRACE                           (volatile uint32_t *)0xfe32ce00
//
// Closing file:  vcpu_regs.h
//
//
// Reading file:  henc_regs.h
//
//========================================================================
//  MDEC module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_HCODEC_HENC_CBUS_BASE = 0x0a
// -----------------------------------------------
#define P_HCODEC_HENC_SCRATCH_0                    (volatile uint32_t *)0xfe326b00
#define P_HCODEC_HENC_SCRATCH_1                    (volatile uint32_t *)0xfe326b04
#define P_HCODEC_HENC_SCRATCH_2                    (volatile uint32_t *)0xfe326b08
#define P_HCODEC_HENC_SCRATCH_3                    (volatile uint32_t *)0xfe326b0c
#define P_HCODEC_HENC_SCRATCH_4                    (volatile uint32_t *)0xfe326b10
#define P_HCODEC_HENC_SCRATCH_5                    (volatile uint32_t *)0xfe326b14
#define P_HCODEC_HENC_SCRATCH_6                    (volatile uint32_t *)0xfe326b18
#define P_HCODEC_HENC_SCRATCH_7                    (volatile uint32_t *)0xfe326b1c
#define P_HCODEC_HENC_SCRATCH_8                    (volatile uint32_t *)0xfe326b20
#define P_HCODEC_HENC_SCRATCH_9                    (volatile uint32_t *)0xfe326b24
#define P_HCODEC_HENC_SCRATCH_A                    (volatile uint32_t *)0xfe326b28
#define P_HCODEC_HENC_SCRATCH_B                    (volatile uint32_t *)0xfe326b2c
#define P_HCODEC_HENC_SCRATCH_C                    (volatile uint32_t *)0xfe326b30
#define P_HCODEC_HENC_SCRATCH_D                    (volatile uint32_t *)0xfe326b34
#define P_HCODEC_HENC_SCRATCH_E                    (volatile uint32_t *)0xfe326b38
#define P_HCODEC_HENC_SCRATCH_F                    (volatile uint32_t *)0xfe326b3c
#define P_HCODEC_HENC_SCRATCH_G                    (volatile uint32_t *)0xfe326b40
#define P_HCODEC_HENC_SCRATCH_H                    (volatile uint32_t *)0xfe326b44
#define P_HCODEC_HENC_SCRATCH_I                    (volatile uint32_t *)0xfe326b48
#define P_HCODEC_HENC_SCRATCH_J                    (volatile uint32_t *)0xfe326b4c
#define P_HCODEC_HENC_SCRATCH_K                    (volatile uint32_t *)0xfe326b50
#define P_HCODEC_HENC_SCRATCH_L                    (volatile uint32_t *)0xfe326b54
#define P_HCODEC_HENC_SCRATCH_M                    (volatile uint32_t *)0xfe326b58
#define P_HCODEC_HENC_SCRATCH_N                    (volatile uint32_t *)0xfe326b5c
// bit [7:0] data_feed_buff_id
#define P_HCODEC_IE_DATA_FEED_BUFF_INFO            (volatile uint32_t *)0xfe326b60
//
// Closing file:  henc_regs.h
//
//
// Reading file:  vlc_regs.h
//
//========================================================================
//  VLC module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_HCODEC_VLC_CBUS_BASE = 0x0d
// -----------------------------------------------
// Bit[31:28] - henc_status
// Bit[27:9] - reserved
// Bit[8]    disable_UVLC_SKIP_fix
// Bit[7]    mc_hcmd_buff_enable
// Bit[6]    mc_hcmd_use_mc_hcmd_buff
// Bit[5]    mc_hcmd_use_mc_hcmd_hw_start
// Bit[4]    no_mc_out_null_non_skipped_mb
// Bit[3]    mc_out_even_skipped_mb
// Bit[2] - hcmd_enable
// Bit[1] - vlc_control_enable (0 will treat as soft_reset)
// Bit[0] - vlc_input_enable (enable input interface)
#define P_HCODEC_VLC_STATUS_CTRL                   (volatile uint32_t *)0xfe327400
// Bit [31]  - small_luma_ignore_chroma
// Bit[30:16] - Reserved
// Bit [15]  - enable_free_clk_mc_hcmd_buff
// Bit [14]  - enable_free_clk_reg
// Bit [13]  - enable_free_clk_stream
// Bit [12]  - enable_free_clk_pre_buff
// Bit [11]  - enable_free_clk_vb_buff
// Bit [10]  - enable_free_clk_dc_input
// Bit [9]   - enable_free_clk_input
// Bit [8]   - enable_free_clk_mv_cal
// Bit [7]   - enable_free_clk_status
// Bit [6]   - enable_free_clk_mc_dblk_cmd_if
// Bit [5]   - disable_mvd_enc_finished
// Bit [4]   - I16MB_share_ipred_mode_with_I4MB
// Bit [3]   - fixed_picture_qp
// Bit [2]   - use_set_b8_mode ( not used now)
// Bit [1]   - use_set_mb_skip_run
// Bit [0]   - pop_coeff_even_all_zero
#define P_HCODEC_VLC_CONFIG                        (volatile uint32_t *)0xfe327404
// --------------------------------------------
// Bitstream DDR Interface
// --------------------------------------------
#define P_HCODEC_VLC_VB_START_PTR                  (volatile uint32_t *)0xfe327440
#define P_HCODEC_VLC_VB_END_PTR                    (volatile uint32_t *)0xfe327444
#define P_HCODEC_VLC_VB_WR_PTR                     (volatile uint32_t *)0xfe327448
// Read Only, VLC_VB_SW_RD_PTR or VLC_VB_HW_RD_PTR
#define P_HCODEC_VLC_VB_RD_PTR                     (volatile uint32_t *)0xfe32744c
#define P_HCODEC_VLC_VB_SW_RD_PTR                  (volatile uint32_t *)0xfe327450
// Read Only
#define P_HCODEC_VLC_VB_LEFT                       (volatile uint32_t *)0xfe327454
// VB FIFO Control
// bit  [31:24] vb_full_int_enable_cpu[7:0]
// bit  [23:16] vb_full_int_enable_amrisc[7:0]
//   -bit 23 Video BUFFER LEFT < 0x400 Bytes
//   -bit 22 Video BUFFER LEFT < 0x200 Bytes
//   -bit 21 Video BUFFER LEFT < 0x100 Bytes
//   -bit 20 Video BUFFER LEFT < 0x80 Bytes
//   -bit 19 Video BUFFER LEFT < 0x40 Bytes
//   -bit 18 Video BUFFER LEFT < 0x20 Bytes
//   -bit 17 vbfifo left  < 16 double words (8x64bits)
//   -bit 16 vbfifo left  < 8 double words (4x64bits)
// bit  [15]    wr_ptr_int_enable_cpu
// bit  [14]    wr_ptr_int_enable_amrisc
// bit  [13]    wr_ptr_int (Read Only, write 1 will clear)
// bit  [12]    vb_full_int_enable_cpu(Read Only)
// bit  [11]    vb_full_int_enable_amrisc(Read Only)
// bit  [10]    reserved
// bit  [9]     use_vb_hw_rd_ptr
// bit  [8]     vb_always_ready Set to 1 to ignore vb_level blocking DDR write
// bit  [7]     vb_ready_for_transfer (Read Only)
// bit  [6]     data_ready_for_transfer (Read Only)
// bits [5:3]   vb_endian       Set VB Endian inside DDR memory
// bit  [2]     vb_write_busy   Read Only - indicate DDR write busy
// bit  [1]     vb_write_en     Set to 1 to enable writing data to DDR memory
// bit  [0]     vb_soft_reset   Soft reset
#define P_HCODEC_VLC_VB_CONTROL                    (volatile uint32_t *)0xfe327458
// bit 31    transfer_length 0 - 32x64 Bits per request, 1 - 16x64 Bits per request  // default : 0
// bit 30    A_urgent  // default : 0
// bit 29:24 A_brst_num // default : 0x3f
// bit 23:22 reserved
// bit 21:16 A_id  // default : 0x20
// bit 15:0  vb_left_hold // default : 0
#define P_HCODEC_VLC_VB_MEM_CTL                    (volatile uint32_t *)0xfe32745c
// vb_wr_ptr address to generate interrupt
#define P_HCODEC_VLC_VB_INT_PTR                    (volatile uint32_t *)0xfe327460
// bit[31:12] reserved
// bit[11:0] vlc_wrrsp_count
#define P_HCODEC_VLC_WRRSP                         (volatile uint32_t *)0xfe327464
#define P_HCODEC_VLC_TOTAL_BYTES                   (volatile uint32_t *)0xfe327468
// bit  [31:26] reserved
// bit  [25]    vb_flush
// bit  [24]    vb_reg_ready
// bit  [23:16] vb_buff_left     -- Read only
// bit  [15:8]  vb_buff_wr_point -- RW
// bit  [7:0]   vb_buff_rd_point -- RW
#define P_HCODEC_VLC_VB_BUFF                       (volatile uint32_t *)0xfe32746c
// bit[31]    flush_vlc_pre_buff
// bit[30:27] reserved
// bit[26:24] vb_pre_buff_level
// bit[23:0]  vb_pre_buff_data[55:32]
#define P_HCODEC_VLC_VB_PRE_BUFF_HI                (volatile uint32_t *)0xfe327470
// bit[31:0] vb_pre_buff_data[31:0]
#define P_HCODEC_VLC_VB_PRE_BUFF_LOW               (volatile uint32_t *)0xfe327474
// bit[31]    stream_encap_enable  // 0x0000(00-03) will be changed to 0x000003(00-03) if enabled
// bit[30:29] stream_encap_delay   // delay bytes for encap used
// bit[28:24] stream_buff_point
// bit[23:0]  stream_buff_data
#define P_HCODEC_VLC_STREAM_BUFF                   (volatile uint32_t *)0xfe327478
// bit[31]    push_stream_block - Read Only (Will set if vb_buff full)
// bit[30]    push_stream_busy  - Read Only (busy when output one byte from stream_buf (max 2 clocks for 8 bits push)
// bit[29:28] stream_encap_status - Read Only
// bit[27:21] reserved
// Long Mode : (Amrisc need movilo and mvihi high to set stream_info)
//   bit[20:16] push_stream_long_length (0 or 31 : Mid or Short mode)
//   bit[15:0]  push_stream_data
// Mid Mode : (Amrisc need movi to set stream_info)
//   bit[15:12]] push_stream_mid_length (1-12 : mid mode active, 0-short mode, 15 - byte align)
//   bit[11:0]  push_stream_data
// Short Mode : (Amrisc can use mtspi to push stream directly)
//   bit[7:5] push_stream_short_length (0-5 : short length, else - invalid)
//   bit[4:0]  push_stream_data
#define P_HCODEC_VLC_PUSH_STREAM                   (volatile uint32_t *)0xfe32747c
// bit[15:8] ELEMENT_LENGTH
// bit[7:1]  reserved
// bit[0]  Write - push start, Read - Push Busy
#define P_HCODEC_VLC_PUSH_ELEMENT                  (volatile uint32_t *)0xfe327480
#define P_HCODEC_VLC_ELEMENT_DATA                  (volatile uint32_t *)0xfe327484
// bit[9] reset_last_dquant_ne_zero
// bit[8] set_last_dquant_ne_zero
// bit[7] hcmd_intra_use_sw_info
// bit[6] hcmd_use_sw_info
// bit[5] always_use_info_0_cbp_blk
// bit[4] always_update_info_0_cbp_blk
// bit[3] reset_left_mb_wr
// bit[2] reset_top_mb_wr
// bit[1] set_left_mb_wr
// bit[0] set_top_mb_wr
#define P_HCODEC_VLC_SPECIAL_CTL                   (volatile uint32_t *)0xfe327488
// bit[28]    left_intra
// bit[27:22] left_quant
// bit[21:16] left_quant_c
// bit[12]    top_intra
// bit[11:6]  top_quant
// bit[5:0]   top_quant_c
#define P_HCODEC_VLC_HCMD_T_L_INFO                 (volatile uint32_t *)0xfe32748c
// bit[12]    cur_intra
// bit[11:6]  cur_quant
// bit[5:0]   cur_quant_c
#define P_HCODEC_VLC_HCMD_CUR_INFO                 (volatile uint32_t *)0xfe327490
// bit[13]    top_left_info_in_data_mv_cal
// bit[12]    only_use_info_0_top_left_in_I
// bit[11]    top_left_info_in_data
// bit[10]    early_mix_mc_hcmd
// bit[9]     update_top_left_mix
// bit[8]     p_top_left_mix
// bit[7]     mv_cal_mixed_type
// bit[6]     mc_hcmd_mixed_type
// bit[5]     use_separate_int_control
// bit[4]     hcmd_intra_use_q_info
// bit[3]     hcmd_left_use_prev_info
// bit[2]     hcmd_use_q_info
// bit[1]     use_q_delta_quant
// bit[0]     detect_I16_from_I4
#define P_HCODEC_VLC_ADV_CONFIG                    (volatile uint32_t *)0xfe327494
//   31 - use_hcmd_mb_xy_auto
//23:16 - hcmd_max_mb_x
//15:8  - hcmd_mb_y_auto
// 7:0  - hcmd_mb_x_auto
#define P_HCODEC_VLC_HCMD_MBXY_AUTO                (volatile uint32_t *)0xfe327498
// bit[31:0] vlc_int_control_inter -- will be used when use_separate_int_control is set
#define P_HCODEC_VLC_INT_CONTROL_INTER             (volatile uint32_t *)0xfe3274bc
// --------------------------------------------
// Picture VLC
// --------------------------------------------
// (&(int|(~AND_enable))|(|(int&OR_enable)))
// bit[31]    OR interrupt Enable Reserved
// bit[30]    OR interrupt Enable for mv_busy
// bit[29]    OR interrupt Enable for b8_mode_busy
// bit[28]    OR interrupt Enable for mb_skip_run_busy
// bit[27]    OR interrupt Enable for cbp_busy
// bit[26]    OR interrupt Enable for Reserved
// bit[25]    OR interrupt Enable for Reserved
// bit[24]    OR interrupt Enable for mb_info_busy
// bit[23]    AND interrupt Enable Reserved
// bit[22]    AND interrupt Enable for mv_busy
// bit[21]    AND interrupt Enable for b8_mode_busy
// bit[20]    AND interrupt Enable for mb_skip_run_busy
// bit[19]    AND interrupt Enable for cbp_busy
// bit[18]    AND interrupt Enable for Reserved
// bit[17]    AND interrupt Enable for Reserved
// bit[16]    AND interrupt Enable for mb_info_busy
// bit[15]    OR interrupt Enable Reserved
// bit[14]    OR interrupt Enable for mvd
// bit[13]    OR interrupt Enable for b8_mode
// bit[12]    OR interrupt Enable for mb_skip_run
// bit[11]    OR interrupt Enable for cbp_ready
// bit[10]    OR interrupt Enable for c_ipred_mode_ready
// bit[9]     OR interrupt Enable for ipred_mode_ready
// bit[8]     OR interrupt Enable for mb_info_ready
// bit[7]     AND interrupt Enable Reserved
// bit[6]     AND interrupt Enable for mvd
// bit[5]     AND interrupt Enable for b8_mode
// bit[4]     AND interrupt Enable for mb_skip_run
// bit[3]     AND interrupt Enable for cbp_ready
// bit[2]     AND interrupt Enable for c_ipred_mode_ready
// bit[1]     AND interrupt Enable for ipred_mode_ready
// bit[0]     AND interrupt Enable for mb_info_ready
#define P_HCODEC_VLC_INT_CONTROL                   (volatile uint32_t *)0xfe3274c0
// Bit[31:16] picture_height
// Bit[15:0]  picture_width
#define P_HCODEC_VLC_PIC_SIZE                      (volatile uint32_t *)0xfe3274c4
// [31:16] Reserved
// [15:3] pic_width_in_mbs_minus1
// [2:0]  picture_type
#define P_HCODEC_VLC_PIC_INFO                      (volatile uint32_t *)0xfe3274c8
// Bit[31:16] MB_NR
// Bit[15:8] MBY
// Bit[7:0] MBX
#define P_HCODEC_VLC_PIC_POSITION                  (volatile uint32_t *)0xfe3274cc
// Bit[31] MV_busy
// Bit[30:6] Reserved
// Bit[15] Reserved
// Bit[14] vlc_input_MV_busy
// Bit[13] vlc_input_b8_mode_busy
// Bit[12] vlc_input_mb_skip_run_busy
// Bit[11] vlc_input_cbp_busy
// Bit[10] Reserved
// Bit[9]  Reserved
// Bit[8] vlc_input_mb_info_busy
// Bit[7] Reserved
// Bit[6] mvd
// Bit[5] b8_mode
// Bit[4] mb_skip_run
// Bit[3] cbp
// Bit[2] c_ipred_mode
// Bit[1] ipred_mode
// Bit[0] mb_info ( mb_type, mb_x, mb_y)
#define P_HCODEC_VLC_INPUT_STATUS                  (volatile uint32_t *)0xfe3274d0
// Bit[31:28] detected_mb_type
// Bit[27:16] mb_y
// Bit[15:4]  mb_x
// Bit[3:0]   mb_type
#define P_HCODEC_VLC_MB_INFO                       (volatile uint32_t *)0xfe3274d4
// command 0 -- no pending
// normal command + 1 is pending command
//
// bit 31:28 -- pending command 7
// bit 27:24 -- pending command 6
// bit 23:20 -- pending command 5
// bit 19:16 -- pending command 4
// bit 15:12 -- pending command 3
// bit 11:8  -- pending command 2
// bit  7:4  -- pending command 1
// bit  3:0  -- pending command 0
#define P_HCODEC_VLC_ENC_PEND_CMD                  (volatile uint32_t *)0xfe3274d8
// For I Slice
// Bit[31:16] Reserved
// Bit[15:0] IntraType
#define P_HCODEC_HENC_TOP_INFO_0                   (volatile uint32_t *)0xfe3274dc
#define P_HCODEC_HENC_LEFT_INFO_0                  (volatile uint32_t *)0xfe3274e0
// For I Slice
// Bit[31:24] V_nnz
// Bit[23:16] U_nnz
// Bit[15:0]  Y_nnz
#define P_HCODEC_HENC_TOP_INFO_1                   (volatile uint32_t *)0xfe3274e4
#define P_HCODEC_HENC_LEFT_INFO_1                  (volatile uint32_t *)0xfe3274e8
// bit[63:0] ipred_mode
#define P_HCODEC_VLC_IPRED_MODE_HI                 (volatile uint32_t *)0xfe3274ec
#define P_HCODEC_VLC_IPRED_MODE_LO                 (volatile uint32_t *)0xfe3274f0
// bit[15:8] SE delta quant
// bit[7:0]  UE delta quant
#define P_HCODEC_VLC_DELTA_QP                      (volatile uint32_t *)0xfe3274f4
// bit[31:16] Reserved
// bit[15:12] Reserved
// bit[11:8] c_ipred_mode
// bit[7:0] cbp
#define P_HCODEC_VLC_MB_HEADER_INFO                (volatile uint32_t *)0xfe3274f8
// bit[31:16] mb_skip_run
// bit[15:0]  b8_mode
#define P_HCODEC_VLC_P_MB_HEADER_INFO              (volatile uint32_t *)0xfe3274fc
// bit[31]    write_ptr_update
// bit[30]    read_ptr_update
// bit[29:20] coeff_buf_level
// bit[19:10] coeff_buf_write_ptr
// bit[9:0]   coeff_buf_read_ptr
#define P_HCODEC_VLC_COEFF_BUF_STATUS              (volatile uint32_t *)0xfe327500
// bit[31:10] Reserved
// bit[9:0] read_req_addr
#define P_HCODEC_VLC_COEFF_RD_REQ                  (volatile uint32_t *)0xfe327504
// bit[20]   - coeff_buf_read_finished
// bit[19]   - coeff_first
// bit[18:4] - coeff_level
// bit[3:0]  - coeff_run
#define P_HCODEC_VLC_COEFF                         (volatile uint32_t *)0xfe327508
// bit[31]    - coeff_info_ready
// bit[30:25] - Reserved
// bit[24:15] - block_begin_addr
// bit[14:11] - trailing_one_sign
// bit[10:6]  - total_coeff
// bit[5:4]   - trailing_ones
// bit[3:0]   - total_zeros
#define P_HCODEC_VLC_COEFF_INFO                    (volatile uint32_t *)0xfe32750c
// bit[31]    write_ptr_update
// bit[30]    read_ptr_update
// bit[29:25] Reserved
// bit[24:20] dc_buf_level -- 0-16
// bit[19:15] Reserved
// bit[14:10] dc_buf_write_ptr
// bit[9:5]   Reserved
// bit[4:0]   dc_buf_read_ptr
#define P_HCODEC_VLC_DC_BUF_STATUS                 (volatile uint32_t *)0xfe327510
// bit[31:10] Reserved
// bit[9:4]   Reserved
// bit[3:0]   read_req_addr
#define P_HCODEC_VLC_DC_RD_REQ                     (volatile uint32_t *)0xfe327514
// bit[31:17] - Reserved
// bit[16]   - dc_first
// bit[15:1] - dc_level
// bit[0]    - dc_type  0 - CDC, 1 - LDC
#define P_HCODEC_VLC_DC                            (volatile uint32_t *)0xfe327518
// bit[31]    - dc_info_ready
// bit[30:25] - Reserved
// bit[24:20] - Reserved
// bit[19:15] - dc_idx_begin_addr
// bit[14:11] - dc_trailing_one_sign
// bit[10:6]  - dc_total_coeff
// bit[5:4]   - dc_trailing_ones
// bit[3:0]   - dc_total_zeros
#define P_HCODEC_VLC_DC_INFO                       (volatile uint32_t *)0xfe32751c
// bit[31:4]  - Reserved
// bit[3:0]   - mv_rw_idx  (auto increment when read/write VLC_MV)
#define P_HCODEC_VLC_MV_INDEX                      (volatile uint32_t *)0xfe327520
// bit[31:16] - MVY
// bit[15:0]  - MVX
#define P_HCODEC_VLC_MV                            (volatile uint32_t *)0xfe327524
// bit[31:16] - MVY
// bitp15:0]  - MVX
// Write to HENC_TOP_MV_0 will cause previous U->UL, UR->U, and UR write
// Read will read U MV only
#define P_HCODEC_HENC_TOP_MV_0                     (volatile uint32_t *)0xfe327528
#define P_HCODEC_HENC_TOP_MV_1                     (volatile uint32_t *)0xfe32752c
#define P_HCODEC_HENC_TOP_MV_2                     (volatile uint32_t *)0xfe327530
#define P_HCODEC_HENC_TOP_MV_3                     (volatile uint32_t *)0xfe327534
#define P_HCODEC_HENC_LEFT_MV_0                    (volatile uint32_t *)0xfe327538
#define P_HCODEC_HENC_LEFT_MV_1                    (volatile uint32_t *)0xfe32753c
#define P_HCODEC_HENC_LEFT_MV_2                    (volatile uint32_t *)0xfe327540
#define P_HCODEC_HENC_LEFT_MV_3                    (volatile uint32_t *)0xfe327544
// Bit[31:1] Reserved
// Bit[0] top_left_mv_ready
#define P_HCODEC_TOP_LEFT_READY                    (volatile uint32_t *)0xfe327548
// Bit[31:16] Reserved
// Bit[15:0] mb_skip_run
#define P_HCODEC_MB_SKIP_RUN                       (volatile uint32_t *)0xfe32754c
// Bit[31:16] Reserved
// Bit[15]    Reserved
// Bit[14:13] rd_struct // 00 - frame, 10 - top field, 11 - bottom field
// Bit[12:11] wr_struct // 00 - frame, 10 - top field, 11 - bottom field
// Bit[10:5]  mv_buff_id
// Bit[4:0]   mv_ref
#define P_HCODEC_VLC_HCMD_CONFIG                   (volatile uint32_t *)0xfe327550
// Bit[9:0] h264_dblk_info
#define P_HCODEC_VLC_HCMD_DBLK_INFO                (volatile uint32_t *)0xfe327554
// Bit[3:0] vlc_dbg_idx
#define P_HCODEC_VLC_DBG_IDX                       (volatile uint32_t *)0xfe327558
// Read Only
#define P_HCODEC_VLC_DBG_READ                      (volatile uint32_t *)0xfe32755c
// [   29] RW jpeg_comp2_ac_table_sel.                                                      Default 0.
// [   28] RW jpeg_comp2_dc_table_sel.                                                      Default 0.
// [26:25] RW jpeg_comp2_cnt_max.                                                           Default 0.
// [   24] RW jpeg_comp2_en. Set 1 if the scan will include component 2 (Cr).               Default 0.
// [   21] RW jpeg_comp1_ac_table_sel.                                                      Default 0.
// [   20] RW jpeg_comp1_dc_table_sel.                                                      Default 0.
// [18:17] RW jpeg_comp1_cnt_max.                                                           Default 0.
// [   16] RW jpeg_comp1_en. Set 1 if the scan will include component 1 (Cb).               Default 0.
// [   13] RW jpeg_comp0_ac_table_sel.                                                      Default 0.
// [   12] RW jpeg_comp0_dc_table_sel.                                                      Default 0.
// [10: 9] RW jpeg_comp0_cnt_max.                                                           Default 0.
// [    8] RW jpeg_comp0_en. Set 1 if the scan will include component 0 (Y).                Default 0.
// [    1] W  jpeg_coeff_init. Write 1 to this bit to initialize JPEG run length encoder.
// [    0] RW jpeg_en. 0=Disable JPEG encoder; 1=Enable JPEG encoder.                       Default 0.
#define P_HCODEC_VLC_JPEG_CTRL                     (volatile uint32_t *)0xfe327560
// [   13] RW jpeg_coeff_buf_overfl. Write this bit to 1 to clear overfl.
// [   12] RW jpeg_coeff_buf_undrfl. Write this bit to 1 to clear undrfl.
// [   11] R  jpeg_coeff_buf_full.
// [   10] R  jpeg_coeff_buf_empty.
// [ 8: 0] R  jpeg_coeff_buf_level.
#define P_HCODEC_VLC_JPEG_COEFF_BUF_STAT           (volatile uint32_t *)0xfe327564
// [   16] RW JPEG HUFFMAN table access mode. 0=Write; 1=Read.  Default 1.
// [ 8: 0] RW JPEG HUFFMAN table addr.                          Default 0.
#define P_HCODEC_VLC_HUFFMAN_ADDR                  (volatile uint32_t *)0xfe327568
// [19: 0] RW JPEG HUFFMAN table data.
#define P_HCODEC_VLC_HUFFMAN_DATA                  (volatile uint32_t *)0xfe32756c
// bit[31:0] enc_mv_bits - including b8_mode and mvd
#define P_HCODEC_VLC_ENC_MV_BITS                   (volatile uint32_t *)0xfe327570
// bit[31:0] enc_coeff_bits - including cbp, token, trailing_sign, coeff_enc, h264_totzeros, h264_run
#define P_HCODEC_VLC_ENC_COEFF_BITS                (volatile uint32_t *)0xfe327574
#define P_HCODEC_VLC_RESERVED_5E                   (volatile uint32_t *)0xfe327578
#define P_HCODEC_VLC_RESERVED_5F                   (volatile uint32_t *)0xfe32757c
// ----------------------------------------------------------
// CABAC
// ----------------------------------------------------------
// [15]     h264_biari_init
// [14]     h264_cabac_init
// [13:12]  reserved
// [11:10]  picture_ty
// [9:8]    cabac_init_idc  // should be 0 for  I_SLICE
// [7]      reserved
// [6]      cabac_en
// [5:0]    slice_quant
#define P_HCODEC_VLC_SLICE_QP                      (volatile uint32_t *)0xfe327580
// For save mvd[12:0] {mvd_y[6:0], mvd_x[5:0]}
#define P_HCODEC_HENC_TOP_INFO_2                   (volatile uint32_t *)0xfe327584
#define P_HCODEC_HENC_LEFT_INFO_2                  (volatile uint32_t *)0xfe327588
#define P_HCODEC_HENC_TOP_INFO_3                   (volatile uint32_t *)0xfe32758c
#define P_HCODEC_HENC_LEFT_INFO_3                  (volatile uint32_t *)0xfe327590
//
// Closing file:  vlc_regs.h
//
//
// Reading file:  qdct_regs.h
//
//========================================================================
//  QDCT module level register offset
//========================================================================
// -----------------------------------------------
// CBUS_BASE:  DOS_HCODEC_QDCT_CBUS_BASE = 0x0f
// -----------------------------------------------
// bit[31:28] - mb_info_state
#define P_HCODEC_QDCT_STATUS_CTRL                  (volatile uint32_t *)0xfe327c00
// bit[18]    - enable_free_clk_sad_top
// bit[17]    - enable_free_clk_ie_top
// bit[16]    - enable_free_clk_ie_sub
// bit[15]    - enable_free_clk_mc_out
// bit[14]    - enable_free_clk_i_pred_top
// bit[13]    - enable_free_clk_idct_top
// bit[12]    - enable_free_clk_iq_top
// bit[11]    - enable_free_clk_q_top
// bit[10]    - enable_free_clk_dc_buff_8
// bit[9]     - enable_free_clk_dct_top
// bit[8]     - enable_free_clk_mb_info
// bit[7]     - enable_free_clk_mb_buff
// bit[6]     - enable_free_clk_reg
// bit[5]     - ignore_1_include_2nd_half_c
// bit[4]     - ignore_1_include_2nd_half
// bit[3]     - ignore_t_p8x8
// bit[2]     - not_ignore_dc
// bit[1]     - ignore_small_lac_intra
// bit[0]     - disable_fast_zero_block
#define P_HCODEC_QDCT_CONFIG                       (volatile uint32_t *)0xfe327c04
// bit[31]    - ignore_lac_coeff_en
// bit[30:26] - ignore_lac_coeff_else
// bit[25:21] - ignore_lac_coeff_2
// bit[20:16] - ignore_lac_coeff_1
// bit[15]    - ignore_cac_coeff_en
// bit[14:10] - ignore_cac_coeff_else
// bit[9:5]   - ignore_cac_coeff_2
// bit[4:0]   - ignore_cac_coeff_1
#define P_HCODEC_IGNORE_CONFIG                     (volatile uint32_t *)0xfe327c08
// bit[31]    - ignore_t_lac_coeff_en
// bit[30:26] - ignore_t_lac_coeff_else
// bit[25:21] - ignore_t_lac_coeff_2
// bit[20:16] - ignore_t_lac_coeff_1
// bit[15]    - ignore_cdc_coeff_en
// bit[14]    - ignore_t_lac_coeff_else_le_3
// bit[13]    - ignore_t_lac_coeff_else_le_4
// bit[12]    - ignore_cdc_only_when_empty_cac_inter
// bit[11]    - ignore_cdc_only_when_one_empty_inter
// bit[10:9]  - ignore_cdc_range_max_inter // 0-0, 1-1, 2,-2, 3-3
// bit[8:7]   - ignore_cdc_abs_max_inter // 0-1, 1-2, 2,-3, 3-4
// bit[6]     - reserved
// bit[5]     - ignore_cdc_only_when_empty_cac_intra
// bit[4]     - ignore_cdc_only_when_one_empty_intra
// bit[3:2]   - ignore_cdc_range_max_intra // 0-0, 1-1, 2,-2, 3-3
// bit[1:0]   - ignore_cdc_abs_max_intra // 0-1, 1-2, 2,-3, 3-4
#define P_HCODEC_IGNORE_CONFIG_2                   (volatile uint32_t *)0xfe327c0c
// --------------------------------------------
// MB DATA DDR Interface
// --------------------------------------------
#define P_HCODEC_QDCT_MB_START_PTR                 (volatile uint32_t *)0xfe327c40
#define P_HCODEC_QDCT_MB_END_PTR                   (volatile uint32_t *)0xfe327c44
#define P_HCODEC_QDCT_MB_WR_PTR                    (volatile uint32_t *)0xfe327c48
#define P_HCODEC_QDCT_MB_RD_PTR                    (volatile uint32_t *)0xfe327c4c
#define P_HCODEC_QDCT_MB_LEVEL                     (volatile uint32_t *)0xfe327c50
// bit  [31]    disable_mbxy_ie_save
// bit  [30]    no_wait_after_q_cdc
// bit  [29]    ie_start_int_enable
// bit  [28]    ignore_t_p8x8
// bit  [27]    zero_mc_out_null_non_skipped_mb
// bit  [26]    no_mc_out_null_non_skipped_mb
// bit  [25]    mc_out_even_skipped_mb
// bit  [24]    mc_out_wait_cbp_ready
// bit  [23]    mc_out_wait_mb_type_ready
// bit  [22]    i_pred_int_enable
// bit  [21]    intra_sat8_enable
// bit  [20]    ie_sub_enable
// bit  [19]    i_pred_enable
// bit  [18]    iq_enable
// bit  [17]    idct_enable
// bit  [16]    no_zero_coeff_mb
// bit  [15]    add_zero_coeff_block
// bit  [14]    mb_pause_enable
// bit  [13]    q_enable
// bit  [12]    dct_enable
// bit  [11]    ignore_magic_word
// bit  [10]    mb_info_en
// bit  [9]     mb_info_soft_reset
// bit  [8]     mb_always_ready Set to 1 to ignore mb_level blocking DDR read
// bit  [7]     mb_ready_for_transfer (Read Only)
// bit  [6]     data_ready_for_transfer (Read Only)
// bits [5:3]   mb_endian       Set MB Endian inside DDR memory
// bit  [2]     mb_read_busy   Read Only - indicate DDR read busy
// bit  [1]     mb_read_en     Set to 1 to enable reading data from DDR memory
// bit  [0]     mb_soft_reset   Soft reset
#define P_HCODEC_QDCT_MB_CONTROL                   (volatile uint32_t *)0xfe327c54
// bit 31    transfer_length 0 - 32x64 Bits per request, 1 - 16x64 Bits per request  // default : 0
// bit 30    A_urgent  // default : 0
// bit 29:24 A_brst_num // default : 0x3f
// bit 23    reserved
// bit 22    read_till_zero
// bit 21:16 A_id  // default : 0x21
// bit 15:0  mb_level_hold // default : 0
#define P_HCODEC_QDCT_MB_MEM_CTL                   (volatile uint32_t *)0xfe327c58
// bit  [31:24] reserved
// bit  [23:16] vb_buff_level     -- Read only
// bit  [15:8]  vb_buff_wr_point -- RW
// bit  [7:0]   vb_buff_rd_point -- RW
#define P_HCODEC_QDCT_MB_BUFF                      (volatile uint32_t *)0xfe327c5c
// bit [31:0] mb infor data begin magic word - default : 0xa55aaa55
#define P_HCODEC_QDCT_MB_MAGIC_WORD                (volatile uint32_t *)0xfe327c60
// Read Only Register
// bit[19]   dct_ready_1
// bit[18]   dct_ready_0
// bit[17]   dct_rd_idx
// bit[16]   dct_wr_idx
// bit[15]   dct_srdy
// bit[14]   dct_rrdy
// bit[13]   Reserved
// bit[12:8] dct_block_number
// bit[7:4]  dct_rw_addr
// bit[3:0]  dct_status
#define P_HCODEC_QDCT_DCT_STATUS                   (volatile uint32_t *)0xfe327c64
// bit[24:23]  vlc_quant_count
// bit[22:16]  vlc_delta_quant_data
// bit[15:10]  vlc_quant_data
// bit[9:4]    vlc_prev_quant_data
// bit[3:0]    q_status
#define P_HCODEC_QDCT_Q_STATUS                     (volatile uint32_t *)0xfe327c68
// bit[31:3] Reserved
// bit[2:0]  picture_type
#define P_HCODEC_QDCT_PIC_INFO                     (volatile uint32_t *)0xfe327c6c
// bit[31:28] Reserved
// bit[27:22] I_pic_quant_c
// bit[21:16] I_pic_quant
// bit[15]    reserved
// bit[14:12] quant_rem_c
// bit[11:8]  quant_per_c
// bit[7]     reserved
// bit[6:4]   quant_rem
// bit[3:0]   quant_per
#define P_HCODEC_QDCT_Q_QUANT_I                    (volatile uint32_t *)0xfe327c70
// bit[31:28] Reserved
// bit[27:22] P_pic_quant_c
// bit[21:16] P_pic_quant
// bit[15]    reserved
// bit[14:12] quant_rem_c
// bit[11:8]  quant_per_c
// bit[7]     reserved
// bit[6:4]   quant_rem
// bit[3:0]   quant_per
#define P_HCODEC_QDCT_Q_QUANT_P                    (volatile uint32_t *)0xfe327c74
// bit[31]    mb_info_pause
// bit[30:16] pause_mby
// bit[15:0]  pause_mbx
#define P_HCODEC_QDCT_MB_PAUSE_CTL                 (volatile uint32_t *)0xfe327c78
// bit[31]   top_control_ready_i_pred
// bit[30:28]top_dma_status
// bit[27]   top_control_ready_ie
// bit[26:24]Reserved
// bit[23]   ul_mb
// bit[22]   right_mb
// bit[21]   top_mb
// bit[20]   left_mb
// bit[19:8] mb_x
// bit[7:6]  i_pred_ref_idx_L
// bit[5:4]  i_pred_ref_idx_UL
// bit[3:2]  i_pred_ref_idx_U
// bit[1:0]  i_pred_ref_idx_UR
#define P_HCODEC_QDCT_TOP_CONTROL                  (volatile uint32_t *)0xfe327c7c
// bit[31:0] top_base_addr - DDR Memory start address for save top Pixel
#define P_HCODEC_QDCT_TOP_BASE_MEM                 (volatile uint32_t *)0xfe327c80
// bit 15:13 Reserved
// bit 12    A_urgent  // default : 0
// bit 11:6  A_brst_num // default : 0x3f
// bit 5:0   A_id  // default : 0x22
#define P_HCODEC_QDCT_TOP_MEM_CTL                  (volatile uint32_t *)0xfe327c84
// bit [11:0] top_wrrsp_count
#define P_HCODEC_QDCT_TOP_WRRSP                    (volatile uint32_t *)0xfe327c88
// Bit[3:0] qdct_dbg_idx
#define P_HCODEC_QDCT_DBG_IDX                      (volatile uint32_t *)0xfe327c8c
// Read Only
#define P_HCODEC_QDCT_DBG_READ                     (volatile uint32_t *)0xfe327c90
// [19:18] RW jdct_inflow_ctrl. JPEG DCT input flow control.                                Default 0.
//            0=No halt;
//            1=DCT halts request at end of each 8x8 block;
//            2=DCT halts request at end of each MCU.
// [17:16] RW jpeg_coeff_last_sel.                                                          Default 0.
//            Select at which point to finish processing, give update to AmRISC so it can control the next step.
//            0=Mark last coeff at the end of an 8x8 block;
//            1=Mark at the end of an MCU;
//            2=Mark at the end of a scan.
// [   15] RW jpeg_quant_sel_comp2. 0=Comp2 select Quantization table 0; 1=Select table 1.  Default 0.
// [   14] RW jpeg_v_factor_comp2. Component 2's vertical sampling factor.                  Default 0.
// [   13] RW jpeg_h_factor_comp2. Component 2's horizontal sampling factor.                Default 0.
// [   12] RW jpeg_comp2_en. Set 1 if the scan will include component 2 (Cr).               Default 0.
// [   11] RW jpeg_quant_sel_comp1. 0=Comp1 select Quantization table 0; 1=Select table 1.  Default 0.
// [   10] RW jpeg_v_factor_comp1. Component 1's vertical sampling factor.                  Default 0.
// [    9] RW jpeg_h_factor_comp1. Component 1's horizontal sampling factor.                Default 0.
// [    8] RW jpeg_comp1_en. Set 1 if the scan will include component 1 (Cb).               Default 0.
// [    7] RW jpeg_quant_sel_comp0. 0=Comp0 select Quantization table 0; 1=Select table 1.  Default 0.
// [    6] RW jpeg_v_factor_comp0. Component 0's vertical sampling factor.                  Default 0.
// [    5] RW jpeg_h_factor_comp0. Component 0's horizontal sampling factor.                Default 0.
// [    4] RW jpeg_comp0_en. Set 1 if the scan will include component 0 (Y).                Default 0.
// [ 3: 1] RW jdct_intr_sel. JPEG DCT interrupt select.                                     Default 0.
//            0=Disable intr;
//            1=Intr at end of each 8x8 block of DCT input;
//            2=Intr at end of each MCU of DCT input;
//            3=Intr at end of a scan of DCT input;
//            4=Intr at end of each 8x8 block of DCT output;
//            5=Intr at end of each MCU of DCT output;
//            6=Intr at end of a scan of DCT output.
// [    0] RW jpeg_en. 0=Disable JPEG QDCT; 1=Enable JPEG QDCT.                             Default 0.
#define P_HCODEC_QDCT_JPEG_CTRL                    (volatile uint32_t *)0xfe327c94
// [29:16] RW jpeg_x_end.   Picture X end.      Default 0.
// [13: 0] RW jpeg_x_start. Picture X start.    Default 0.
#define P_HCODEC_QDCT_JPEG_X_START_END             (volatile uint32_t *)0xfe327c98
// [29:16] RW jpeg_y_end.   Picture Y end.      Default 0.
// [13: 0] RW jpeg_y_start. Picture Y start.    Default 0.
#define P_HCODEC_QDCT_JPEG_Y_START_END             (volatile uint32_t *)0xfe327c9c
// [    8] RW JPEG QUANT table access mode. 0=Write; 1=Read.    Default 1.
// [ 5: 0] RW JPEG QUANT table addr.                            Default 0.
#define P_HCODEC_QDCT_JPEG_QUANT_ADDR              (volatile uint32_t *)0xfe327ca0
// [31: 0] RW JPEG QUANT table data.
#define P_HCODEC_QDCT_JPEG_QUANT_DATA              (volatile uint32_t *)0xfe327ca4
// [    1] W  resume_jdct.
//            Write 1 to this bit will resume JPEG input engine when previously
//            it is halted by QDCT_JPEG_CTRL.jdct_inflow_ctrl.
// [    0] W  jpeg_sof.
//            Write 1 to this bit will start JPEG input engine.
#define P_HCODEC_QDCT_JPEG_SOF_RESUME              (volatile uint32_t *)0xfe327ca8
// [31:30] R  dct_st.       jdct_ctrl state. 0=IDLE; 1=WAIT; 2=DCT_REQ.
// [29:28] R  mfdin_comp.   Current component at pixel request to MFDIN.
// [27:14] R  mfdin_y.      Current Y at pixel request to MFDIN.
// [13: 0] R  mfdin_x.      Current X at pixel request to MFDIN.
#define P_HCODEC_QDCT_JPEG_DCT_STATUS0             (volatile uint32_t *)0xfe327cac
// [15:12] R  JPEG Quant read MEM select.
// [11: 8] R  JPEG DCT2 write MEM select.
// [ 7: 4] R  JPEG DCT2 read MEM select.
// [ 3: 0] R  JPEG DCT1 write MEM select.
#define P_HCODEC_QDCT_JPEG_DCT_STATUS1             (volatile uint32_t *)0xfe327cb0
// [28:16] RW jdct_coeff1.  Default 13'h1D90; // 7568 = 4096 * sqrt(2) * (cos(Pi/8) + sin(Pi/8)) // 7569
// [12: 0] RW jdct_coeff0.  Default 13'h16A1; // 5793 = 4096 * sqrt(2)
#define P_HCODEC_QDCT_JPEG_DCT_COEFF01             (volatile uint32_t *)0xfe327cb4
// [28:16] RW jdct_coeff3.  Default 13'h0C3F; // 3135 = 4096 * sqrt(2) * (cos(Pi/8) - sin(Pi/8))
// [12: 0] RW jdct_coeff2.  Default 13'h08A9; // 2217 = 4096 * sqrt(2) * sin(Pi/8) // 2215
#define P_HCODEC_QDCT_JPEG_DCT_COEFF23             (volatile uint32_t *)0xfe327cb8
// [28:16] RW jdct_coeff5.  Default 13'h046A; // 1130 = 4096 * (cos(3Pi/16) - sin(3Pi/16))
// [12: 0] RW jdct_coeff4.  Default 13'h1631; // 5681 = 4096 * (cos(3Pi/16) + sin(3Pi/16)) // 5682
#define P_HCODEC_QDCT_JPEG_DCT_COEFF45             (volatile uint32_t *)0xfe327cbc
// [28:16] RW jdct_coeff7.  Default 13'h0C92; // 3218 = 4096 * (cos(Pi/16) - sin(Pi/16))
// [12: 0] RW jdct_coeff6.  Default 13'h12D0; // 4816 = 4096 * (cos(Pi/16) + sin(Pi/16))
#define P_HCODEC_QDCT_JPEG_DCT_COEFF67             (volatile uint32_t *)0xfe327cc0
// [28:16] RW jdct_coeff9.  Default 13'h0FB1; // 4017 = 4096 * cos(Pi/16)
// [12: 0] RW jdct_coeff8.  Default 13'h0D4E; // 3406 = 4096 * cos(3Pi/16)
#define P_HCODEC_QDCT_JPEG_DCT_COEFF89             (volatile uint32_t *)0xfe327cc4
#define P_HCODEC_QDCT_I_PRED_REF_WR_IDX            (volatile uint32_t *)0xfe327cc8
#define P_HCODEC_QDCT_I_PRED_REF_WR_DATA           (volatile uint32_t *)0xfe327ccc
// bit[29]  mb_info_latch_no_I16_pred_mode
// bit[28]  ie_dma_mbxy_use_i_pred
// bit[27]  ie_dma_read_write_use_ip_idx
// bit[26]  ie_start_use_top_dma_count
// bit[25]  i_pred_top_dma_rd_mbbot
// bit[24]  i_pred_top_dma_wr_disable
// bit[23]  i_pred_mix
// bit[22]  me_ab_rd_when_intra_in_p
// bit[21]  force_mb_skip_run_when_intra
// bit[20]  mc_out_mixed_type
// bit[19]  ie_start_when_quant_not_full
// bit[18]  mb_info_state_mix
// bit[17]  mb_type_use_mix_result
// bit[16]  me_cb_ie_read_enable
// bit[15]  ie_cur_data_from_me
// bit[14]  rem_per_use_table
// bit[13]  q_latch_int_enable
// bit[12]  q_use_table
// bit[11]  q_start_wait
// bit[10]  LUMA_16_LEFT_use_cur
// bit[9]   DC_16_LEFT_SUM_use_cur
// bit[8]   c_ref_ie_sel_cur
// bit[7]   c_ipred_perfect_mode
// bit[6]   ref_ie_ul_sel 0-old, 1-use next_set
// bit[5]   mb_type_use_ie_result
// bit[4]   detect_I16_from_I4
// bit[3]   ie_not_wait_ref_busy
// bit[2]   ie_I16_enable
// bit[1:0] ie_done_sel (0, 1, 2, -1)
#define P_HCODEC_QDCT_ADV_CONFIG                   (volatile uint32_t *)0xfe327cd0
// bit [31:16] I16x16_weight
// bit [15:0]  I4x4_weight
#define P_HCODEC_IE_WEIGHT                         (volatile uint32_t *)0xfe327cd4
// bit [31]  reserved
// bit [30] q_I16MB
// bit [29]  reserved
// bit [28]  reserved
// bit [27:23] quant_table_addr I4MB:[0,7], I16MB:[8:15], INTER:[16:23], Reserved:[24:31]
// bit [22]    quant_table_addr_update(when notupdate_rem_per) (read is arb_result : q_intra)
// bit [21:19] quant_rem_c
// bit [18:16] quant_rem_y
// bit [15:12] quant_per_c
// bit [11:8]  quant_per_y
// bit [7:2] quant
// bit [1] update_rem_per
// bit [0] clear_wait_status
#define P_HCODEC_Q_QUANT_CONTROL                   (volatile uint32_t *)0xfe327cd8
#define P_HCODEC_MBBOT_EVEN_ADDR                   (volatile uint32_t *)0xfe327cdc
#define P_HCODEC_MBBOT_ODD_ADDR                    (volatile uint32_t *)0xfe327ce0
// bit [29:24] quant_table_data_3
// bit [21:16] quant_table_data_2
// bit [13:8]  quant_table_data_1
// bit [5:0]   quant_table_data_0
#define P_HCODEC_QUANT_TABLE_DATA                  (volatile uint32_t *)0xfe327ce4
// bit [31:16] ie_sad_offset_I16
// bit [15:0] ie_sad_offset_I4
#define P_HCODEC_SAD_CONTROL_0                     (volatile uint32_t *)0xfe327ce8
// bit [31]     sad_soft_reset
// bit [30:27]  reserved
// bit [26:24]  ie_sad_shift_I16
// bit [22:20]  ie_sad_shift_I4
// bit [18:16]  me_sad_shift_INTER
// bit [15:0]   me_sad_offset_INTER
#define P_HCODEC_SAD_CONTROL_1                     (volatile uint32_t *)0xfe327cec
// bit [31]     vlc_quant_rd_ptr
// bit [30]     vlc_quant_rd_ptr_update
// bit [29]     vlc_quant_wr_ptr
// bit [28]     vlc_quant_wr_ptr_update
// bit [27:26]  reserved
// bit [25:19]  vlc_delta_quant_1
// bit [18:13]  vlc_quant_1
// bit [12:6]   vlc_delta_quant_0
// bit [5:0]    vlc_quant_0
#define P_HCODEC_QDCT_VLC_QUANT_CTL_0              (volatile uint32_t *)0xfe327cf0
// bit [31:30]  me_sad_rd_idx
// bit [29]     me_sad_rd_idx_update
// bit [28:27]  me_sad_wr_idx
// bit [26]     me_sad_wr_idx_update
// bit [25:24]  ie_sad_rd_idx
// bit [23]     ie_sad_rd_idx_update
// bit [22:21]  ie_sad_wr_idx
// bit [20]     ie_sad_wr_idx_update
// bit [19:12]  Reserved
// bit [11:6]   vlc_max_delta_q_neg
// bit [5:0]    vlc_max_delta_q_pos
#define P_HCODEC_QDCT_VLC_QUANT_CTL_1              (volatile uint32_t *)0xfe327cf4
// bit[4] jdct_int
// bit[3] quant_latch
// bit[2] me_done
// bit[1] ie_start
// bit[0] i_pred_start
#define P_HCODEC_QDCT_INT_STATUS                   (volatile uint32_t *)0xfe327cf8
// bit[3]   mix_i_pred_wait_left_en
// bit[2:0] mc_pending_mb_count
#define P_HCODEC_QDCT_MIX_I_PRED_STATUS            (volatile uint32_t *)0xfe327cfc
// IE/ME share same cbus_base as QDCT
//
// bit[31]  active_ur_block
// bit[30]  active_ul_block
// bit[21]  disable_HENC_V_PRED_16
// bit[20]  disable_HENC_H_PRED_16
// bit[19]  disable_HENC_DC_PRED_16
// bit[18]  disable_HENC_HENC_HOR_UP_PRED
// bit[17]  disable_HENC_VERT_LEFT_PRED
// bit[16]  disable_HENC_HENC_HOR_DOWN_PRED
// bit[15]  disable_HENC_VERT_RIGHT_PRED
// bit[14]  disable_HENC_DIAG_DOWN_RIGHT_PRED
// bit[13]  disable_HENC_DIAG_DOWN_LEFT_PRED
// bit[12]  disable_HENC_DC_PRED
// bit[11]  disable_HENC_HOR_PRED
// bit[10]  disable_HENC_VERT_PRED
// bit[9]   ie_c_wait_ie_pause
// bit[8:4] max_ie_result_buff_count
// bit[3]   ie_wait_for_ie_result  // use for (max_ie_result_buff_count == 0) to wait every block
// bit[2]   reserved
// bit[1]   ie_enable
// bit[0]   ie_soft_reset
#define P_HCODEC_IE_CONTROL                        (volatile uint32_t *)0xfe327d00
// bit[31:12] Reserved
// bit[11:0]  mb_y
#define P_HCODEC_IE_MB_POSITION                    (volatile uint32_t *)0xfe327d04
// bit[31:16] me_skip_run
// bit[15:8]  reserved
// bit [7:4]  me_b8_mode
// bit [3:0]  ie_me_mb_type
#define P_HCODEC_IE_ME_MB_INFO                     (volatile uint32_t *)0xfe327d08
// bit[3]   ie_result_buff_enable
// bit[2]   ie_result_buff_soft_reset
// bit[1]   sad_enable
// bit[0]   ie_sad_soft_reset
#define P_HCODEC_SAD_CONTROL                       (volatile uint32_t *)0xfe327d0c
// bit[31:16] - ie_result_buff_count - read only
// bit[14:12] -current_ie_result (pred_mode) - read only
// bit[11]  top_control_data_buff_wr_ptr - rd/wr
// bit[10]  top_control_data_buff_rd_ptr - rd/wr
// bit[9:5] ie_result_buff_wr_ptr        - rd/wr
// bit[4:0] ie_result_buff_rd_ptr        - rd/wr
#define P_HCODEC_IE_RESULT_BUFFER                  (volatile uint32_t *)0xfe327d10
// bit[63:0] ie_i4_pred_mode
#define P_HCODEC_IE_I4_PRED_MODE_HI                (volatile uint32_t *)0xfe327d14
#define P_HCODEC_IE_I4_PRED_MODE_LO                (volatile uint32_t *)0xfe327d18
// bit [31:9] reserved
// bit [8:4] i_pred_block_number
// bit [3:0] ie_c_pred_mode
#define P_HCODEC_IE_C_PRED_MODE                    (volatile uint32_t *)0xfe327d1c
// 31:16 - Left, 0-select ie_pixel, 1-select mc_data_out
// 15:0  - Top,  0-select ie_pixel, 1-select mc_data_out
#define P_HCODEC_IE_CUR_REF_SEL                    (volatile uint32_t *)0xfe327d20
// bit[31]  enable_f_skip_1_step_3
// bit[30]  enable_f_skip_1_step_2
// bit[29]  enable_f_skip_1_step_1
// bit[28]  step_3_enable
// bit[27]  step_2_sub_pixel
// bit[26]  always_f_skip_step_3
// bit[25]  always_f_skip_step_2
// bit[24]  always_f_skip_step_1
// bit[23]  half_pixel_only
// bit[22:13] reserved
// bit[12]  adv_mv_enable
// bit[11]  sad_short_valid
// bit[10:9] mv_flexable_ctl 00:0x40, 01:0x80, 10:0xc0, 11 : 0x100
// bit[8]   no_md_ab_rd
// bit[7]   use_dct_state
// bit[6]   enable_free_clk_me_ctl
// bit[5]   enable_free_clk_me_ab
// bit[4]   enable_free_clk_me_cb
// bit[3]   reserved
// bit[2]   me_done_int_enable
// bit[1]   me_enable
// bit[0]   me_soft_reset
#define P_HCODEC_ME_CONTROL                        (volatile uint32_t *)0xfe327d24
// bit[31:28] Reserved
// bit[27:16] me_start_mby
// bit[15:12] Reserved
// bit[11:0]  me_start_mbx
#define P_HCODEC_ME_START_POSITION                 (volatile uint32_t *)0xfe327d28
// bit [31:28] me_status - Read only
// bit [27:24] me_cb_status  // current buffer
// bit [23:20] me_ab_status  // anc buffer
// bit [19]    Reserved
// bit [18:16] me_ab_wr_ptr  // read only
// bit [15:4]  me_last_mbx
// bit [3:1]   me_ab_rd_ptr  // read only
// bit [0]     me_action
#define P_HCODEC_ME_STATUS                         (volatile uint32_t *)0xfe327d2c
// all Read-only
// bit [31:28] Reserved
// bit [27:16] me_ab_mbx
// bit [15:14] me_cb_wr_ptr
// bit [13:12] me_cb_rd_ptr
// bit [11:0]  me_cb_mbx
#define P_HCODEC_ME_DEBUG                          (volatile uint32_t *)0xfe327d30
// bit[29:24] step_3_skip_line
// bit[23:18] step_2_skip_line
// bit[17:12] step_1_skip_line
// bit[11:6]  step_0_skip_line
// bit[5:0]   read_skip_line
#define P_HCODEC_ME_SKIP_LINE                      (volatile uint32_t *)0xfe327d34
// bit 15:13 Reserved
// bit 12    A_urgent  // default : 0
// bit 11:6  A_brst_num // default : 0x3f
// bit 5:0   A_id  // default : 0x23
#define P_HCODEC_ME_AB_MEM_CTL                     (volatile uint32_t *)0xfe327d38
// bit[31:24] anc_pic_canvas
// bit[23:12] max_me_mby_num
// bit[11:0]  max_me_mbx_num
#define P_HCODEC_ME_PIC_INFO                       (volatile uint32_t *)0xfe327d3c
// bit [23:12] me_sad_enough_1
// bit [11:0]  me_sad_enough_0
#define P_HCODEC_ME_SAD_ENOUGH_01                  (volatile uint32_t *)0xfe327d40
// bit [25:12] adv_mv_8x8_enough
// bit [11:0]  me_sad_enough_2
#define P_HCODEC_ME_SAD_ENOUGH_23                  (volatile uint32_t *)0xfe327d44
// bit [21:10] me_step0_big_sad
// bit [9:5] me_step0_close_mv_y
// bit [4:0] me_step0_close_mv_x
#define P_HCODEC_ME_STEP0_CLOSE_MV                 (volatile uint32_t *)0xfe327d48
// bit[31:24] force_skip_sad_3
// bit[23:16] force_skip_sad_2
// bit[15:08] force_skip_sad_1
// bit[07:00] force_skip_sad_0
#define P_HCODEC_ME_F_SKIP_SAD                     (volatile uint32_t *)0xfe327d4c
// bit[31:24] force_skip_weight_3
// bit[23:16] force_skip_weight_2
// bit[15:08] force_skip_weight_1
// bit[07:00] force_skip_weight_0
#define P_HCODEC_ME_F_SKIP_WEIGHT                  (volatile uint32_t *)0xfe327d50
// Merge when (
//              (flex & me_merge_flex_en) |
//              (big_sad & me_merge_sad_en)|
//              ((~me_merge_flex_en)&(~me_merge_sad_en))
//            ) &
//            ( small_mv_diff |(~me_merge_small_mv_en))
//            & (me_merge_flex_en | me_merge_sad_en | me_merge_small_mv_en)
// bit[31]   me_merge_mv_en_16
// bit[30]   me_merge_small_mv_en_16
// bit[29]   me_merge_flex_en_16
// bit[28]   me_merge_sad_en_16
// bit[27]   me_merge_mv_en_8
// bit[26]   me_merge_small_mv_en_8
// bit[25]   me_merge_flex_en_8
// bit[24]   me_merge_sad_en_8
// bit[23:18] me_merge_mv_diff_16
// bit[17:12] me_merge_mv_diff_8
// bit[11:0] me_merge_min_sad
#define P_HCODEC_ME_MV_MERGE_CTL                   (volatile uint32_t *)0xfe327d54
// bit[31:24] mv_step_weight_1
// bit[23:16] mv_pre_weight_1
// bit [15:0] mv_step_weight_0
// bit[7:0]   mv_pre_weight_0
#define P_HCODEC_ME_MV_WEIGHT_01                   (volatile uint32_t *)0xfe327d58
// bit[31:24] mv_step_weight_3 (mv_step_weight_1_2nd)
// bit[23:16] mv_pre_weight_3 (mv_pre_weight_1_2nd)
// bit[15:8]  mv_step_weight_2
// bit[7:0]   mv_pre_weight_2
#define P_HCODEC_ME_MV_WEIGHT_23                   (volatile uint32_t *)0xfe327d5c
// bit[31:24] me_sad_range_inc_3
// bit[23:16] me_sad_range_inc_2
// bit[15:8] me_sad_range_inc_1
// bit[7:0] me_sad_range_inc_0
#define P_HCODEC_ME_SAD_RANGE_INC                  (volatile uint32_t *)0xfe327d60
// bit[31:19]  reserved
// bit[18]     sub_relative_any_1_en
// bit[17]     sub_relative_any_2_en
// bit[16]     sub_relative_any_3_en
// bit[15]     sub_relative_any_4_en
// bit[14]     sub_relative_any_h_en
// bit[13]     sub_make_non_flex_fix
// bit[12]     sub_make_big_non_flex_fix
// bit[11:8]   sub_normal_mv_diff_16
// bit[7:4]    sub_normal_mv_diff_8
// bit[3:2]    Reserved
// bit[1]      sub_merge_enable_16
// bit[0]      sub_merge_enable_8
#define P_HCODEC_ME_SUB_MERGE_CTL                  (volatile uint32_t *)0xfe327d64
// bit[31:28]  sub_ref_mv_diff_near
// bit[27:24]  sub_ref_mv_diff_near_flex
// bit[23:20]  sub_ref_mv_diff
// bit[19:16]  sub_ref_mv_diff_flex
// bit[15:8]   sub_ref_mv_near_weight
// bit[7:0]    sub_ref_mv_weight
#define P_HCODEC_ME_SUB_REF_MV_CTL                 (volatile uint32_t *)0xfe327d68
// bit[31:24]  sub_weight_max_sad
// bit[23:16]  sub_any_range_sad
// bit[15:8]   sub_any_min_sad
// bit[7:0]    sub_any_max_sad
#define P_HCODEC_ME_SUB_ANY_WEIGHT_SAD             (volatile uint32_t *)0xfe327d6c
// bit[31:24]  sub_fix_sad
// bit[23:16]  sub_fix_diff_sad
// bit[15:8]   sub_sad_flex_adj
// bit[7:0]    sub_big_non_flex_fix_sad
#define P_HCODEC_ME_SUB_FIX_SAD                    (volatile uint32_t *)0xfe327d70
// bit[31:24]  sub_fix_min_sad
// bit[23:16]  sub_fix_min_diff_sad
// bit[15:8]   sub_fix_min_sad_2
// bit[7:0]    sub_fix_min_diff_sad_2
#define P_HCODEC_ME_SUB_FIX_MIN_SAD                (volatile uint32_t *)0xfe327d74
// bit[31:24]  sub_snap_to_ref_max_sad
// bit[23]     sub_snap_to_ref_non_flex
// bit[22:16]  sub_snap_to_ref_mv_diff
// bit[15:4]   sub_glitch_mv_sad
// bit[3:0]    sub_glitch_mv_diff
#define P_HCODEC_ME_SUB_SNAP_GLITCH                (volatile uint32_t *)0xfe327d78
// bit[31:20]  sad_act_limit
// bit[19:8]   s_a_any_sad
// bit[7]      Reserved
// bit[6:5]    sub_merge_method
// bit[4]      use_sub_act_result
// bit[3]      s_a_rnd
// bit[2]      Reserved
// bit[1]      sub_act_en_16
// bit[0]      sub_act_en
#define P_HCODEC_ME_SUB_ACT_CTL                    (volatile uint32_t *)0xfe327d7c
// bit[31:16]  reserved
// bit[15:0]   me_weight
#define P_HCODEC_ME_WEIGHT                         (volatile uint32_t *)0xfe327d80
// bit[31]  ready_update
// bit[30]  data_update
// bit[29:28] reserved
// bit[27:22] me_quant_0
// bit[21]  ie_sad_ready_0
// bit[20:18]  Reserved
// bit[17:16]  me_sad_mv_type_0
// bit[15:0] me_sad_0
#define P_HCODEC_ME_SAD_0                          (volatile uint32_t *)0xfe327d84
// bit[31]  ready_update
// bit[30]  data_update
// bit[29:28] reserved
// bit[27:22] me_quant_1
// bit[21]  me_sad_ready_1
// bit[20:18]  Reserved
// bit[17:16]  me_sad_mv_type_1
// bit[15:0] me_sad_1
#define P_HCODEC_ME_SAD_1                          (volatile uint32_t *)0xfe327d88
// bit[31]  ready_update
// bit[30]  data_update
// bit[29:28] reserved
// bit[27:22] me_quant_2
// bit[21]  me_sad_ready_2
// bit[20:18]  Reserved
// bit[17:16]  me_sad_mv_type_2
// bit[15:0] me_sad_2
#define P_HCODEC_ME_SAD_2                          (volatile uint32_t *)0xfe327d8c
// bit[31]  ready_update
// bit[30]  data_update
// bit[29:28] reserved
// bit[27:22] me_quant_3
// bit[21]  me_sad_ready_3
// bit[20:18]  Reserved
// bit[17:16]  me_sad_mv_type_3
// bit[15:0] me_sad_3
#define P_HCODEC_ME_SAD_3                          (volatile uint32_t *)0xfe327d90
// bit[31]  ready_update
// bit[30]  data_update
// bit[29:28] reserved
// bit[27:22] ie_quant_0
// bit[21]  ie_sad_ready_0
// bit[20]   I4/I16 (0-I4MB, 1-I16MB)
// bit[19:0] ie_sad_0
#define P_HCODEC_IE_SAD_0                          (volatile uint32_t *)0xfe327d94
// bit[31]  ready_update
// bit[30]  data_update
// bit[29:28] reserved
// bit[27:22] ie_quant_1
// bit[21]  ie_sad_ready_1
// bit[20]   I4/I16 (0-I4MB, 1-I16MB)
// bit[19:0] ie_sad_1
#define P_HCODEC_IE_SAD_1                          (volatile uint32_t *)0xfe327d98
// bit[31]  ready_update
// bit[30]  data_update
// bit[29:28] reserved
// bit[27:22] ie_quant_2
// bit[21]  ie_sad_ready_2
// bit[20]   I4/I16 (0-I4MB, 1-I16MB)
// bit[19:0] ie_sad_2
#define P_HCODEC_IE_SAD_2                          (volatile uint32_t *)0xfe327d9c
// bit[31]  ready_update
// bit[30]  data_update
// bit[29:28] reserved
// bit[27:22] ie_quant_3
// bit[21]  ie_sad_ready_3
// bit[20]   I4/I16 (0-I4MB, 1-I16MB)
// bit[19:0] ie_sad_3
#define P_HCODEC_IE_SAD_3                          (volatile uint32_t *)0xfe327da0
// bit[31]   enable_large_diff_16x8
// bit[30]   enable_large_diff_8x16
// bit[29:16] adv_mv_8x8_weight
// bit[15:14] reserved
// bit[13:0] adv_mv_4x4x4_weight
#define P_HCODEC_ADV_MV_CTL0                       (volatile uint32_t *)0xfe327da4
// bit[31:16] adv_mv_16x16_weight
// bit[15]   enable_large_diff_16x16
// bit[14:0] adv_mv_16_8_weight
#define P_HCODEC_ADV_MV_CTL1                       (volatile uint32_t *)0xfe327da8
#define P_HCODEC_ADV_MV_CTL2                       (volatile uint32_t *)0xfe327dac
// bit[31]    v3_skip_enable
// bit[30]    v3_step_1_weight_enable // for step1, will only use pre_weight for block0, only step_weight for block 1,2,3
// bit[29]    v3_l2_skip_only_use_l2_sad // set to 1 may allow l1 maybe not skip
// bit[28]    v3_mv_sad_weight_enable
// bit[27]    v3_ipred_type_enable
// bit[25:12] force_skip_sad_1
// bit[11:0]  force_skip_sad_0
#define P_HCODEC_V3_SKIP_CONTROL                   (volatile uint32_t *)0xfe327db0
// bit[18:16] top_ipred_type_count
// bit[15:14] Reserved
// bit[13:12] top_ipred_type_rd_idx
// bit[11:10] top_ipred_type_wr_idx
// bit[9]   left_ipred_type_ready
// bit[8]   top_ipred_type_ready
// bit[7:6] left_mv_idx
// bit[5:4] top_mv_idx
// bit[3] - left_mv_ready
// bit[2:0] top_mv_ready
#define P_HCODEC_V3_TOP_LEFT_CTL                   (volatile uint32_t *)0xfe327db4
#define P_HCODEC_V3_TOP_MV                         (volatile uint32_t *)0xfe327db8
#define P_HCODEC_V3_LEFT_MV                        (volatile uint32_t *)0xfe327dbc
// bit[31:30] reserved
// bit[29:16] v3_skip_weight_1
// bit[15:12] reserved
// bit[11:0]  v3_skip_weight_0
#define P_HCODEC_V3_SKIP_WEIGHT                    (volatile uint32_t *)0xfe327dc0
// bit[31:28] reserved
// bit[27:16] v3_l1_f_skip_max_sad
// bit[15:12] reserved
// bit[11:0]  v3_l1_skip_max_sad
#define P_HCODEC_V3_L1_SKIP_MAX_SAD                (volatile uint32_t *)0xfe327dc4
// bit[31:16] force_skip_sad_2
// bit[15:0]  v3_skip_weight_2
#define P_HCODEC_V3_L2_SKIP_WEIGHT                 (volatile uint32_t *)0xfe327dc8
// bit[21:16] v3_mv_sad_table_addr 0-15 table_step_0
// bit[11:0]  v3_mv_sad
#define P_HCODEC_V3_MV_SAD_TABLE                   (volatile uint32_t *)0xfe327dcc
// [31:16] v3_ie_f_zero_sad_i16
// [15:0]  v3_ie_f_zero_sad_i4
#define P_HCODEC_V3_F_ZERO_CTL_0                   (volatile uint32_t *)0xfe327dd0
// [25]    v3_no_ver_when_top_zero_en
// [24]    v3_no_hor_when_left_zero_en
// [23:16] v3_max_I16_H_num    // 0 means no break
// [15:0]  v3_me_f_zero_sad
#define P_HCODEC_V3_F_ZERO_CTL_1                   (volatile uint32_t *)0xfe327dd4
#define P_HCODEC_V3_TOP_INTRA_INFO                 (volatile uint32_t *)0xfe327dd8
#define P_HCODEC_V3_LEFT_INTRA_INFO                (volatile uint32_t *)0xfe327ddc
// [31:24]  C_ipred_weight_H
// [23:16]  C_ipred_weight_V
// [15:8]   I4_ipred_weight_else
// [7:0]    I4_ipred_weight_most
#define P_HCODEC_V3_IPRED_TYPE_WEIGHT_0            (volatile uint32_t *)0xfe327de0
// [31:24]  I16_ipred_weight_DC
// [23:16]  I16_ipred_weight_H
// [15:8]   I16_ipred_weight_V
// [7:0]    C_ipred_weight_DC
#define P_HCODEC_V3_IPRED_TYPE_WEIGHT_1            (volatile uint32_t *)0xfe327de4
// [31:16]  v3_left_small_max_me_sad
// [15:0]   v3_left_small_max_ie_sad
#define P_HCODEC_V3_LEFT_SMALL_MAX_SAD             (volatile uint32_t *)0xfe327de8
// (qr==7) & (qp==15) means force zero block
// [31:26]  v4_force_q_r_intra
// [25:20]  v4_force_q_r_inter
// [19]     v4_force_q_y_enable
// [18:16]  v4_force_qr_y
// [15:12]  v4_force_qp_y
// [11:0]   v4_force_skip_sad
#define P_HCODEC_V4_FORCE_SKIP_CFG                 (volatile uint32_t *)0xfe327dec
// v5 Complexity // Y(256 pixel per MB) and C(128 pixel per MB)
// For every 4x4 block, calculate average and Add abs(pixel-average) together
// bit[31:16] v5_diff_sum_C
// bit[15:0]  v5_diff_sum_Y
#define P_HCODEC_V5_MB_DIFF_SUM                    (volatile uint32_t *)0xfe327df0
// bit[31:24] v5_small_diff_cnt_C
// bit[23:16] v5_small_diff_C
// bit[15:8]  v5_small_diff_cnt_Y
// bit[7:0]   v5_small_diff_Y
#define P_HCODEC_V5_SMALL_DIFF_CNT                 (volatile uint32_t *)0xfe327df4
// bit[31:29] Reserved
// bit[28:24] v5_simple_block_cnt // 0 -15 Y 16-23 C
// bit[23:20] v5_simple_pixel_cnt
// bit[19:18] v5_simple_dq_wr_ptr
// bit[17:16] v5_simple_dq_rd_ptr
// bit[15:12] v5_simple_dq (Read Only)
// bit[11:8]  v5_simple_me_weight(Read Only)
// bit[7] v5_use_small_diff_cnt
// bit[6] v5_simple_mb_inter_all_en
// bit[5] v5_simple_mb_inter_8x8_en
// bit[4] v5_simple_mb_inter_16_8_en
// bit[3] v5_simple_mb_inter_16x16_en
// bit[2] v5_simple_mb_intra_en
// bit[1] v5_simple_mb_C_en
// bit[0] v5_simple_mb_Y_en
#define P_HCODEC_V5_SIMPLE_MB_CTL                  (volatile uint32_t *)0xfe327df8
// bit[31:28] v5_simple_dq_shift
// bit[27:24] v5_simple_dq_6(-7 to +7)
// bit[23:20] v5_simple_dq_5(-7 to +7)
// bit[19:16] v5_simple_dq_4(-7 to +7)
// bit[15:12] v5_simple_dq_3(-7 to +7)
// bit[11:08] v5_simple_dq_2(-7 to +7)
// bit[07:04] v5_simple_dq_1(-7 to +7)
// bit[03:00] v5_simple_dq_0(-7 to +7)
#define P_HCODEC_V5_SIMPLE_MB_DQUANT               (volatile uint32_t *)0xfe327dfc
// bit[31:28] v5_simple_me_weight_shift
// bit[27:24] v5_simple_me_weight_6(-7 to +7)
// bit[23:20] v5_simple_me_weight_5(-7 to +7)
// bit[19:16] v5_simple_me_weight_4(-7 to +7)
// bit[15:12] v5_simple_me_weight_3(-7 to +7)
// bit[11:08] v5_simple_me_weight_2(-7 to +7)
// bit[07:04] v5_simple_me_weight_1(-7 to +7)
// bit[03:00] v5_simple_me_weight_0(-7 to +7)
#define P_HCODEC_V5_SIMPLE_MB_ME_WEIGHT            (volatile uint32_t *)0xfe327e00
//
// Closing file:  qdct_regs.h
//
//
// Reading file:  ./dos_param.h
//
//------------------------------------------------------------------------------
// Define all modules' base address under DOS
// APB allocation from 32'hd0050000
//------------------------------------------------------------------------------
// Define base address for VDEC module under DOS:
//  DOS_VDEC_ASSIST_BASE_ADDR       14'h0000
//  DOS_VDEC_MDEC_BASE_ADDR         14'h0900
//  DOS_VDEC_VLD_BASE_ADDR          14'h0c00
//  DOS_VDEC_IQIDCT_BASE_ADDR       14'h0e00
//  DOS_VDEC_VCPU_BASE_ADDR         14'h0300
//  DOS_VDEC_RESERVED_BASE_ADDR     14'h0f00 // Do not use this offset
// Define base address for DOS top-level register module:
//  DOS_TOP_BASE_ADDR               14'h3f00
//------------------------------------------------------------------------------
// VDEC_ASSIST module level register offset
//------------------------------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_VDEC_ASSIST_CBUS_BASE = 0x00
// -----------------------------------------------
#define P_VDEC2_VDEC_ASSIST_MMC_CTRL0              (volatile uint32_t *)0xfe328004
#define P_VDEC2_VDEC_ASSIST_MMC_CTRL1              (volatile uint32_t *)0xfe328008
#define P_VDEC2_VDEC_ASSIST_MMC_CTRL2              (volatile uint32_t *)0xfe32800c
#define P_VDEC2_VDEC_ASSIST_MMC_CTRL3              (volatile uint32_t *)0xfe328010
// bit[11]  canvas_blk32_wr
// bit[10]  canvas_blk32
// bit[9]   Reserved
// bit[8]   canvas_index_wr
// bit[7:0] canvas_index
#define P_VDEC2_VDEC_ASSIST_CANVAS_BLK32           (volatile uint32_t *)0xfe328014
#define P_VDEC2_VDEC_ASSIST_AMR1_INT0              (volatile uint32_t *)0xfe328094
#define P_VDEC2_VDEC_ASSIST_AMR1_INT1              (volatile uint32_t *)0xfe328098
#define P_VDEC2_VDEC_ASSIST_AMR1_INT2              (volatile uint32_t *)0xfe32809c
#define P_VDEC2_VDEC_ASSIST_AMR1_INT3              (volatile uint32_t *)0xfe3280a0
#define P_VDEC2_VDEC_ASSIST_AMR1_INT4              (volatile uint32_t *)0xfe3280a4
#define P_VDEC2_VDEC_ASSIST_AMR1_INT5              (volatile uint32_t *)0xfe3280a8
#define P_VDEC2_VDEC_ASSIST_AMR1_INT6              (volatile uint32_t *)0xfe3280ac
#define P_VDEC2_VDEC_ASSIST_AMR1_INT7              (volatile uint32_t *)0xfe3280b0
#define P_VDEC2_VDEC_ASSIST_AMR1_INT8              (volatile uint32_t *)0xfe3280b4
#define P_VDEC2_VDEC_ASSIST_AMR1_INT9              (volatile uint32_t *)0xfe3280b8
#define P_VDEC2_VDEC_ASSIST_AMR1_INTA              (volatile uint32_t *)0xfe3280bc
#define P_VDEC2_VDEC_ASSIST_AMR1_INTB              (volatile uint32_t *)0xfe3280c0
#define P_VDEC2_VDEC_ASSIST_AMR1_INTC              (volatile uint32_t *)0xfe3280c4
#define P_VDEC2_VDEC_ASSIST_AMR1_INTD              (volatile uint32_t *)0xfe3280c8
#define P_VDEC2_VDEC_ASSIST_AMR1_INTE              (volatile uint32_t *)0xfe3280cc
#define P_VDEC2_VDEC_ASSIST_AMR1_INTF              (volatile uint32_t *)0xfe3280d0
#define P_VDEC2_VDEC_ASSIST_AMR2_INT0              (volatile uint32_t *)0xfe3280d4
#define P_VDEC2_VDEC_ASSIST_AMR2_INT1              (volatile uint32_t *)0xfe3280d8
#define P_VDEC2_VDEC_ASSIST_AMR2_INT2              (volatile uint32_t *)0xfe3280dc
#define P_VDEC2_VDEC_ASSIST_AMR2_INT3              (volatile uint32_t *)0xfe3280e0
#define P_VDEC2_VDEC_ASSIST_AMR2_INT4              (volatile uint32_t *)0xfe3280e4
#define P_VDEC2_VDEC_ASSIST_AMR2_INT5              (volatile uint32_t *)0xfe3280e8
#define P_VDEC2_VDEC_ASSIST_AMR2_INT6              (volatile uint32_t *)0xfe3280ec
#define P_VDEC2_VDEC_ASSIST_AMR2_INT7              (volatile uint32_t *)0xfe3280f0
#define P_VDEC2_VDEC_ASSIST_AMR2_INT8              (volatile uint32_t *)0xfe3280f4
#define P_VDEC2_VDEC_ASSIST_AMR2_INT9              (volatile uint32_t *)0xfe3280f8
#define P_VDEC2_VDEC_ASSIST_AMR2_INTA              (volatile uint32_t *)0xfe3280fc
#define P_VDEC2_VDEC_ASSIST_AMR2_INTB              (volatile uint32_t *)0xfe328100
#define P_VDEC2_VDEC_ASSIST_AMR2_INTC              (volatile uint32_t *)0xfe328104
#define P_VDEC2_VDEC_ASSIST_AMR2_INTD              (volatile uint32_t *)0xfe328108
#define P_VDEC2_VDEC_ASSIST_AMR2_INTE              (volatile uint32_t *)0xfe32810c
#define P_VDEC2_VDEC_ASSIST_AMR2_INTF              (volatile uint32_t *)0xfe328110
#define P_VDEC2_VDEC_ASSIST_MBX_SSEL               (volatile uint32_t *)0xfe328114
// write - request disable to each of 16 channels
// read  - disable status of each of 16 channels ( 1 - disabled)
#define P_VDEC2_VDEC_ASSIST_DBUS_DISABLE           (volatile uint32_t *)0xfe328118
// support up to 15 configurable high 2-bits according to id
// 8 bits for one set - {high-bits[1:0], id[5:0]}
// bit[7:0] of VDEC_AXI34_CONFIG_0 is special for default and rw control
// bit[7:6] default wr high 2bits ( For no match found id)
// bit[5:4] default rd high 2bits ( For no match found id)
// bit[3:2] config[3:2] if write only
// bit[1:0] config[1:0] if read only
#define P_VDEC2_VDEC_AXI34_CONFIG_0                (volatile uint32_t *)0xfe328140
#define P_VDEC2_VDEC_AXI34_CONFIG_1                (volatile uint32_t *)0xfe328144
#define P_VDEC2_VDEC_AXI34_CONFIG_2                (volatile uint32_t *)0xfe328148
#define P_VDEC2_VDEC_AXI34_CONFIG_3                (volatile uint32_t *)0xfe32814c
#define P_VDEC2_VDEC_AXI34_CONFIG_4                (volatile uint32_t *)0xfe328150
#define P_VDEC2_VDEC_AXI34_CONFIG_5                (volatile uint32_t *)0xfe328154
#define P_VDEC2_VDEC_AXI34_CONFIG_6                (volatile uint32_t *)0xfe328158
#define P_VDEC2_VDEC_AXI34_CONFIG_7                (volatile uint32_t *)0xfe32815c
#define P_VDEC2_VDEC_ASSIST_TIMER0_LO              (volatile uint32_t *)0xfe328180
#define P_VDEC2_VDEC_ASSIST_TIMER0_HI              (volatile uint32_t *)0xfe328184
#define P_VDEC2_VDEC_ASSIST_TIMER1_LO              (volatile uint32_t *)0xfe328188
#define P_VDEC2_VDEC_ASSIST_TIMER1_HI              (volatile uint32_t *)0xfe32818c
#define P_VDEC2_VDEC_ASSIST_DMA_INT                (volatile uint32_t *)0xfe328190
#define P_VDEC2_VDEC_ASSIST_DMA_INT_MSK            (volatile uint32_t *)0xfe328194
#define P_VDEC2_VDEC_ASSIST_DMA_INT2               (volatile uint32_t *)0xfe328198
#define P_VDEC2_VDEC_ASSIST_DMA_INT_MSK2           (volatile uint32_t *)0xfe32819c
#define P_VDEC2_VDEC_ASSIST_MBOX0_IRQ_REG          (volatile uint32_t *)0xfe3281c0
#define P_VDEC2_VDEC_ASSIST_MBOX0_CLR_REG          (volatile uint32_t *)0xfe3281c4
#define P_VDEC2_VDEC_ASSIST_MBOX0_MASK             (volatile uint32_t *)0xfe3281c8
#define P_VDEC2_VDEC_ASSIST_MBOX0_FIQ_SEL          (volatile uint32_t *)0xfe3281cc
#define P_VDEC2_VDEC_ASSIST_MBOX1_IRQ_REG          (volatile uint32_t *)0xfe3281d0
#define P_VDEC2_VDEC_ASSIST_MBOX1_CLR_REG          (volatile uint32_t *)0xfe3281d4
#define P_VDEC2_VDEC_ASSIST_MBOX1_MASK             (volatile uint32_t *)0xfe3281d8
#define P_VDEC2_VDEC_ASSIST_MBOX1_FIQ_SEL          (volatile uint32_t *)0xfe3281dc
#define P_VDEC2_VDEC_ASSIST_MBOX2_IRQ_REG          (volatile uint32_t *)0xfe3281e0
#define P_VDEC2_VDEC_ASSIST_MBOX2_CLR_REG          (volatile uint32_t *)0xfe3281e4
#define P_VDEC2_VDEC_ASSIST_MBOX2_MASK             (volatile uint32_t *)0xfe3281e8
#define P_VDEC2_VDEC_ASSIST_MBOX2_FIQ_SEL          (volatile uint32_t *)0xfe3281ec
//------------------------------------------------------------------------------
// VDEC2_ASSIST module level register offset
//------------------------------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_VDEC2_ASSIST_CBUS_BASE = 0x00
// -----------------------------------------------
#define P_VDEC2_VDEC2_ASSIST_MMC_CTRL0             (volatile uint32_t *)0xfe328004
#define P_VDEC2_VDEC2_ASSIST_MMC_CTRL1             (volatile uint32_t *)0xfe328008
#define P_VDEC2_VDEC2_ASSIST_AMR1_INT0             (volatile uint32_t *)0xfe328094
#define P_VDEC2_VDEC2_ASSIST_AMR1_INT1             (volatile uint32_t *)0xfe328098
#define P_VDEC2_VDEC2_ASSIST_AMR1_INT2             (volatile uint32_t *)0xfe32809c
#define P_VDEC2_VDEC2_ASSIST_AMR1_INT3             (volatile uint32_t *)0xfe3280a0
#define P_VDEC2_VDEC2_ASSIST_AMR1_INT4             (volatile uint32_t *)0xfe3280a4
#define P_VDEC2_VDEC2_ASSIST_AMR1_INT5             (volatile uint32_t *)0xfe3280a8
#define P_VDEC2_VDEC2_ASSIST_AMR1_INT6             (volatile uint32_t *)0xfe3280ac
#define P_VDEC2_VDEC2_ASSIST_AMR1_INT7             (volatile uint32_t *)0xfe3280b0
#define P_VDEC2_VDEC2_ASSIST_AMR1_INT8             (volatile uint32_t *)0xfe3280b4
#define P_VDEC2_VDEC2_ASSIST_AMR1_INT9             (volatile uint32_t *)0xfe3280b8
#define P_VDEC2_VDEC2_ASSIST_AMR1_INTA             (volatile uint32_t *)0xfe3280bc
#define P_VDEC2_VDEC2_ASSIST_AMR1_INTB             (volatile uint32_t *)0xfe3280c0
#define P_VDEC2_VDEC2_ASSIST_AMR1_INTC             (volatile uint32_t *)0xfe3280c4
#define P_VDEC2_VDEC2_ASSIST_AMR1_INTD             (volatile uint32_t *)0xfe3280c8
#define P_VDEC2_VDEC2_ASSIST_AMR1_INTE             (volatile uint32_t *)0xfe3280cc
#define P_VDEC2_VDEC2_ASSIST_AMR1_INTF             (volatile uint32_t *)0xfe3280d0
#define P_VDEC2_VDEC2_ASSIST_AMR2_INT0             (volatile uint32_t *)0xfe3280d4
#define P_VDEC2_VDEC2_ASSIST_AMR2_INT1             (volatile uint32_t *)0xfe3280d8
#define P_VDEC2_VDEC2_ASSIST_AMR2_INT2             (volatile uint32_t *)0xfe3280dc
#define P_VDEC2_VDEC2_ASSIST_AMR2_INT3             (volatile uint32_t *)0xfe3280e0
#define P_VDEC2_VDEC2_ASSIST_AMR2_INT4             (volatile uint32_t *)0xfe3280e4
#define P_VDEC2_VDEC2_ASSIST_AMR2_INT5             (volatile uint32_t *)0xfe3280e8
#define P_VDEC2_VDEC2_ASSIST_AMR2_INT6             (volatile uint32_t *)0xfe3280ec
#define P_VDEC2_VDEC2_ASSIST_AMR2_INT7             (volatile uint32_t *)0xfe3280f0
#define P_VDEC2_VDEC2_ASSIST_AMR2_INT8             (volatile uint32_t *)0xfe3280f4
#define P_VDEC2_VDEC2_ASSIST_AMR2_INT9             (volatile uint32_t *)0xfe3280f8
#define P_VDEC2_VDEC2_ASSIST_AMR2_INTA             (volatile uint32_t *)0xfe3280fc
#define P_VDEC2_VDEC2_ASSIST_AMR2_INTB             (volatile uint32_t *)0xfe328100
#define P_VDEC2_VDEC2_ASSIST_AMR2_INTC             (volatile uint32_t *)0xfe328104
#define P_VDEC2_VDEC2_ASSIST_AMR2_INTD             (volatile uint32_t *)0xfe328108
#define P_VDEC2_VDEC2_ASSIST_AMR2_INTE             (volatile uint32_t *)0xfe32810c
#define P_VDEC2_VDEC2_ASSIST_AMR2_INTF             (volatile uint32_t *)0xfe328110
#define P_VDEC2_VDEC2_ASSIST_MBX_SSEL              (volatile uint32_t *)0xfe328114
#define P_VDEC2_VDEC2_ASSIST_TIMER0_LO             (volatile uint32_t *)0xfe328180
#define P_VDEC2_VDEC2_ASSIST_TIMER0_HI             (volatile uint32_t *)0xfe328184
#define P_VDEC2_VDEC2_ASSIST_TIMER1_LO             (volatile uint32_t *)0xfe328188
#define P_VDEC2_VDEC2_ASSIST_TIMER1_HI             (volatile uint32_t *)0xfe32818c
#define P_VDEC2_VDEC2_ASSIST_DMA_INT               (volatile uint32_t *)0xfe328190
#define P_VDEC2_VDEC2_ASSIST_DMA_INT_MSK           (volatile uint32_t *)0xfe328194
#define P_VDEC2_VDEC2_ASSIST_DMA_INT2              (volatile uint32_t *)0xfe328198
#define P_VDEC2_VDEC2_ASSIST_DMA_INT_MSK2          (volatile uint32_t *)0xfe32819c
#define P_VDEC2_VDEC2_ASSIST_MBOX0_IRQ_REG         (volatile uint32_t *)0xfe3281c0
#define P_VDEC2_VDEC2_ASSIST_MBOX0_CLR_REG         (volatile uint32_t *)0xfe3281c4
#define P_VDEC2_VDEC2_ASSIST_MBOX0_MASK            (volatile uint32_t *)0xfe3281c8
#define P_VDEC2_VDEC2_ASSIST_MBOX0_FIQ_SEL         (volatile uint32_t *)0xfe3281cc
#define P_VDEC2_VDEC2_ASSIST_MBOX1_IRQ_REG         (volatile uint32_t *)0xfe3281d0
#define P_VDEC2_VDEC2_ASSIST_MBOX1_CLR_REG         (volatile uint32_t *)0xfe3281d4
#define P_VDEC2_VDEC2_ASSIST_MBOX1_MASK            (volatile uint32_t *)0xfe3281d8
#define P_VDEC2_VDEC2_ASSIST_MBOX1_FIQ_SEL         (volatile uint32_t *)0xfe3281dc
#define P_VDEC2_VDEC2_ASSIST_MBOX2_IRQ_REG         (volatile uint32_t *)0xfe3281e0
#define P_VDEC2_VDEC2_ASSIST_MBOX2_CLR_REG         (volatile uint32_t *)0xfe3281e4
#define P_VDEC2_VDEC2_ASSIST_MBOX2_MASK            (volatile uint32_t *)0xfe3281e8
#define P_VDEC2_VDEC2_ASSIST_MBOX2_FIQ_SEL         (volatile uint32_t *)0xfe3281ec
//------------------------------------------------------------------------------
// HCODEC_ASSIST module level register offset
//------------------------------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_HCODEC_ASSIST_CBUS_BASE = 0x00
// -----------------------------------------------
#define P_VDEC2_HCODEC_ASSIST_MMC_CTRL0            (volatile uint32_t *)0xfe328004
#define P_VDEC2_HCODEC_ASSIST_MMC_CTRL1            (volatile uint32_t *)0xfe328008
#define P_VDEC2_HCODEC_ASSIST_MMC_CTRL2            (volatile uint32_t *)0xfe32800c
#define P_VDEC2_HCODEC_ASSIST_MMC_CTRL3            (volatile uint32_t *)0xfe328010
// bit[11]  canvas_blk32_wr
// bit[10]  canvas_blk32
// bit[9]   Reserved
// bit[8]   canvas_index_wr
// bit[7:0] canvas_index
#define P_VDEC2_HCODEC_ASSIST_CANVAS_BLK32         (volatile uint32_t *)0xfe328014
//cfg_soft_rst = mfdin_reg0_crst[0]; // Soft Reset
//cfg_cg_cfe   = mfdin_reg0_crst[1]; // Clock Gating Forcing Enable
//cfg_dbuf_rst = mfdin_reg0_crst[2]; // Reset DBUF information
#define P_VDEC2_HCODEC_MFDIN_REG0_CRST             (volatile uint32_t *)0xfe328020
//cfg_iformat       = mfdin_reg1_ctrl[3:0]; // Data In Format: 0 :CANVAS 422 YCbCr<-one canvas,
                                                     //        1 :CANVAS 444 YCbCr(or RGB)<-one canvas,
                                                     //        2 :CANVAS 420 Y<-one CrCb<-one (NV21)
                                                     //        3 :CANVAS 420 Y<-one CbCr<-one (NV12)
                                                     //        4 :CANVAS 420 Y<-one Cb<-one Cr<-one
                                                     //        5 :CANVAS 444 Y<-one Cb<-one Cr<-one
                                                     //        6 : Reserved for other canvas mode
                                                     //        7 : should combine with cfg_ifmt_extra, for 10-12bits
                                                     //        8 :LINEAR RGB888 (24bit)
                                                     //        9 :LINEAR RGB565 (16bit)
                                                     //        10:LINEAR YUV422
                                                     //        11:LINEAR YUV420 (Note:Legacy mode not supported)
                                                     //        12~15: Reserved for other linear mode
//cfg_oformat       = mfdin_reg1_ctrl[5:4];  // Data Out Format: 0:420 1:422 2:444 3:reserved
//cfg_dsample_enable= mfdin_reg1_ctrl[6];    // Downsample Enable
//cfg_dsample_trunc = mfdin_reg1_ctrl[7];    // Downsample Addition Option: 0:Round 1:Truncated
//cfg_block_ysize   = mfdin_reg1_ctrl[8];    // 0:block-y-size=16, 1:block-y-size=8(for JPEG's efficiency)
//cfg_interp_enable = mfdin_reg1_ctrl[9];    // Chroma Interpolation Enable
//cfg_interp_mode   = mfdin_reg1_ctrl[11:10];// 0:average round 1:average truncated 2:repeat left 3:repeat right
//cfg_r2y_enable    = mfdin_reg1_ctrl[12];   // RGb->YUV Enable
//cfg_r2y_mode      = mfdin_reg1_ctrl[14:13];// RGb->YUV Mode
//cfg_rgb565_mode   = mfdin_reg1_ctrl[15];   // RGB565 mode: 0:fill zero in tail 1:fill zero in head
//cfg_ifmt_extra    = mfdin_reg1_ctrl[17:16];// when cfg_iformat==7,
                                             //        0: CANVAS 12bit 422, YCbCr<-one canvas{...Y1[11:0],C1[11:0],Y0[11:0],C0[11:0]}
                                             //        1: CANVAS 10bit 444, YCbCr<-one canvas{...2'b0,Y0[9:0],U0[9:0],V0[9:0]}
                                             //        2: CANVAS 10bit 422, YCbCr<-one canvas{...Y1[9:0],C1[9:0],Y0[9:0],C0[9:0]}
//cfg_reserved1     = mfdin_reg1_ctrl[18];   // Reserved
//cfg_nr_enable     = mfdin_reg1_ctrl[19];   // Noise Reduction Enable
//cfg_outofpic      = mfdin_reg1_ctrl[28:20];// Out Of Picture Control: [8]mode:0:extend 1:fixed, [7:0]fixed value
//cfg_rd_blktype    = mfdin_reg1_ctrl[30:29];// Block Type: 0:H264_I_PIC_ALL_4x4, 1:H264_P_PIC_Y_16x16_C_8x8, 2:JPEG_ALL_8x8, 3:Reserved
//cfg_rd_nonycintl  = mfdin_reg1_ctrl[31];   // 0:YC interleaved 1:YC non-interleaved(for JPEG)
#define P_VDEC2_HCODEC_MFDIN_REG1_CTRL             (volatile uint32_t *)0xfe328024
//mfdin_reg2: DEBUG Only Status
#define P_VDEC2_HCODEC_MFDIN_REG2_STAT             (volatile uint32_t *)0xfe328028
//cfg_canvas_index0  = mfdin_reg3_canv[7:0];  //canvas index 0
//cfg_canvas_index1  = mfdin_reg3_canv[15:8]; //canvas index 1
//cfg_canvas_index2  = mfdin_reg3_canv[23:16];//canvas index 2
//cfg_canv_idx0_bppx = mfdin_reg3_canv[25:24];//canvas bytes per pixel in x direction for index0, 0:half 1:1 2:2 3:3
//cfg_canv_idx1_bppx = mfdin_reg3_canv[27:26];//canvas bytes per pixel in x direction for index1, 0:half 1:1 2:2 3:3
//cfg_canv_idx0_bppy = mfdin_reg3_canv[29:28];//canvas bytes per pixel in y direction for index0, 0:half 1:1 2:2 3:3
//cfg_canv_idx1_bppy = mfdin_reg3_canv[31:30];//canvas bytes per pixel in y direction for index1, 0:half 1:1 2:2 3:3
#define P_VDEC2_HCODEC_MFDIN_REG3_CANV             (volatile uint32_t *)0xfe32802c
//cfg_bytes_per_line  = mfdin_reg4_lnr0[15:0];  //linear Bytes per line
//cfg_linear_bytes4p  = mfdin_reg4_lnr0[17:16]; //linear (Bytes per pixel) - 1
//cfg_linear_dbl2line = mfdin_reg4_lnr0[18];    //linear double size for odd line
#define P_VDEC2_HCODEC_MFDIN_REG4_LNR0             (volatile uint32_t *)0xfe328030
//cfg_base_address    = mfdin_reg5_lnr1[31:0];  //linear base address
#define P_VDEC2_HCODEC_MFDIN_REG5_LNR1             (volatile uint32_t *)0xfe328034
//assign cfg_r2y_trunc     = mfdin_reg6_dcfg[9];   //RGb->YUV Addition Option: 0:Round 1:Truncated
//assign cfg_dma_ugt       = mfdin_reg6_dcfg[8];   //DMA Urgent
//assign cfg_dma_thread_id = mfdin_reg6_dcfg[7:6]; //DMA Thread ID
//assign cfg_dma_burst_num = mfdin_reg6_dcfg[5:0]; //DMA Burst Number
#define P_VDEC2_HCODEC_MFDIN_REG6_DCFG             (volatile uint32_t *)0xfe328038
//cfg_soft_cmd = mfdin_reg7_scmd; // Soft Command [28]selfcleared start,[27:14]dmb_x,[13:0]dmb_y
#define P_VDEC2_HCODEC_MFDIN_REG7_SCMD             (volatile uint32_t *)0xfe32803c
//cfg_pic_xsize = mfdin_reg8_dmbl[23:12]; //pixel (x,y) at the beginning of last dmb in the picture, picture x size
//cfg_pic_ysize = mfdin_reg8_dmbl[11:0];  //picture y size
#define P_VDEC2_HCODEC_MFDIN_REG8_DMBL             (volatile uint32_t *)0xfe328040
//cfg_endian = mfdin_reg9_endn; //Endian Control
#define P_VDEC2_HCODEC_MFDIN_REG9_ENDN             (volatile uint32_t *)0xfe328044
//cfg_canv_biasx = mfdin_rega_cav1[23:12]; //canvas bias address x
//cfg_canv_biasy = mfdin_rega_cav1[11:0];  //canvas bias address y
#define P_VDEC2_HCODEC_MFDIN_REGA_CAV1             (volatile uint32_t *)0xfe328048
//cfg_amp_en = mfdin_regb_ampc[24];      //Amplitude Enable
//cfg_amp_cy = mfdin_regb_ampc[23:16];   //Amplitude Coeff Y
//cfg_amp_cu = mfdin_regb_ampc[15:8];    //Amplitude Coeff U
//cfg_amp_cv = mfdin_regb_ampc[7:0];     //Amplitude Coeff V
#define P_VDEC2_HCODEC_MFDIN_REGB_AMPC             (volatile uint32_t *)0xfe32804c
//cfg_mb_end = mfdin_regc_mblp; // Soft Command [28]mb end enable,[27:14]dmb_x,[13:0]dmb_y
#define P_VDEC2_HCODEC_MFDIN_REGC_MBLP             (volatile uint32_t *)0xfe328050
//       cfg_y_snr_en               = mfdin_reg0d[0];
//       cfg_y_snr_err_norm         = mfdin_reg0d[1];
// [3:0] cfg_y_snr_gau_bld_core     = mfdin_reg0d[5:2];
// [7:0] cfg_y_snr_gau_bld_ofst     = mfdin_reg0d[13:6];
// [5:0] cfg_y_snr_gau_bld_rate     = mfdin_reg0d[19:14];
// [5:0] cfg_y_snr_gau_alp0_min     = mfdin_reg0d[25:20];
// [5:0] cfg_y_snr_gau_alp0_max     = mfdin_reg0d[31:26];
#define P_VDEC2_HCODEC_MFDIN_REG0D                 (volatile uint32_t *)0xfe328054
//       cfg_y_tnr_en               = mfdin_reg0e[0];
//       cfg_y_tnr_mc_en            = mfdin_reg0e[1];
//       cfg_y_tnr_txt_mode         = mfdin_reg0e[2];
// [3:0] cfg_y_tnr_mot_sad_margin   = mfdin_reg0e[6:3];
// [5:0] cfg_y_tnr_alpha_min        = mfdin_reg0e[12:7];
// [5:0] cfg_y_tnr_alpha_max        = mfdin_reg0e[18:13];
// [5:0] cfg_y_tnr_deghost_os       = mfdin_reg0e[24:19];
#define P_VDEC2_HCODEC_MFDIN_REG0E                 (volatile uint32_t *)0xfe328058
// [3:0] cfg_y_tnr_mot_cortxt_rate  = mfdin_reg0f[3:0];
// [7:0] cfg_y_tnr_mot_distxt_ofst  = mfdin_reg0f[15:8];
// [3:0] cfg_y_tnr_mot_distxt_rate  = mfdin_reg0f[7:4];
// [7:0] cfg_y_tnr_mot_dismot_ofst  = mfdin_reg0f[23:16];
// [7:0] cfg_y_tnr_mot_frcsad_lock  = mfdin_reg0f[31:24];
#define P_VDEC2_HCODEC_MFDIN_REG0F                 (volatile uint32_t *)0xfe32805c
// [7:0] cfg_y_tnr_mot2alp_frc_gain = mfdin_reg10[7:0];
// [7:0] cfg_y_tnr_mot2alp_nrm_gain = mfdin_reg10[15:8];
// [7:0] cfg_y_tnr_mot2alp_dis_gain = mfdin_reg10[23:16];
// [5:0] cfg_y_tnr_mot2alp_dis_ofst = mfdin_reg10[29:24];
#define P_VDEC2_HCODEC_MFDIN_REG10                 (volatile uint32_t *)0xfe328060
// [7:0] cfg_y_bld_beta2alp_rate    = mfdin_reg11[7:0];
// [5:0] cfg_y_bld_beta_min         = mfdin_reg11[13:8];
// [5:0] cfg_y_bld_beta_max         = mfdin_reg11[19:14];
#define P_VDEC2_HCODEC_MFDIN_REG11                 (volatile uint32_t *)0xfe328064
// REG12~16 for Chroma, same as Luma
#define P_VDEC2_HCODEC_MFDIN_REG12                 (volatile uint32_t *)0xfe328068
#define P_VDEC2_HCODEC_MFDIN_REG13                 (volatile uint32_t *)0xfe32806c
#define P_VDEC2_HCODEC_MFDIN_REG14                 (volatile uint32_t *)0xfe328070
#define P_VDEC2_HCODEC_MFDIN_REG15                 (volatile uint32_t *)0xfe328074
#define P_VDEC2_HCODEC_MFDIN_REG16                 (volatile uint32_t *)0xfe328078
#define P_VDEC2_HCODEC_MFDIN_REG17                 (volatile uint32_t *)0xfe32807c
#define P_VDEC2_HCODEC_MFDIN_REG18                 (volatile uint32_t *)0xfe328080
#define P_VDEC2_HCODEC_MFDIN_REG19                 (volatile uint32_t *)0xfe328084
#define P_VDEC2_HCODEC_ASSIST_AMR1_INT0            (volatile uint32_t *)0xfe328094
#define P_VDEC2_HCODEC_ASSIST_AMR1_INT1            (volatile uint32_t *)0xfe328098
#define P_VDEC2_HCODEC_ASSIST_AMR1_INT2            (volatile uint32_t *)0xfe32809c
#define P_VDEC2_HCODEC_ASSIST_AMR1_INT3            (volatile uint32_t *)0xfe3280a0
#define P_VDEC2_HCODEC_ASSIST_AMR1_INT4            (volatile uint32_t *)0xfe3280a4
#define P_VDEC2_HCODEC_ASSIST_AMR1_INT5            (volatile uint32_t *)0xfe3280a8
#define P_VDEC2_HCODEC_ASSIST_AMR1_INT6            (volatile uint32_t *)0xfe3280ac
#define P_VDEC2_HCODEC_ASSIST_AMR1_INT7            (volatile uint32_t *)0xfe3280b0
#define P_VDEC2_HCODEC_ASSIST_AMR1_INT8            (volatile uint32_t *)0xfe3280b4
#define P_VDEC2_HCODEC_ASSIST_AMR1_INT9            (volatile uint32_t *)0xfe3280b8
#define P_VDEC2_HCODEC_ASSIST_AMR1_INTA            (volatile uint32_t *)0xfe3280bc
#define P_VDEC2_HCODEC_ASSIST_AMR1_INTB            (volatile uint32_t *)0xfe3280c0
#define P_VDEC2_HCODEC_ASSIST_AMR1_INTC            (volatile uint32_t *)0xfe3280c4
#define P_VDEC2_HCODEC_ASSIST_AMR1_INTD            (volatile uint32_t *)0xfe3280c8
#define P_VDEC2_HCODEC_ASSIST_AMR1_INTE            (volatile uint32_t *)0xfe3280cc
#define P_VDEC2_HCODEC_ASSIST_AMR1_INTF            (volatile uint32_t *)0xfe3280d0
#define P_VDEC2_HCODEC_ASSIST_AMR2_INT0            (volatile uint32_t *)0xfe3280d4
#define P_VDEC2_HCODEC_ASSIST_AMR2_INT1            (volatile uint32_t *)0xfe3280d8
#define P_VDEC2_HCODEC_ASSIST_AMR2_INT2            (volatile uint32_t *)0xfe3280dc
#define P_VDEC2_HCODEC_ASSIST_AMR2_INT3            (volatile uint32_t *)0xfe3280e0
#define P_VDEC2_HCODEC_ASSIST_AMR2_INT4            (volatile uint32_t *)0xfe3280e4
#define P_VDEC2_HCODEC_ASSIST_AMR2_INT5            (volatile uint32_t *)0xfe3280e8
#define P_VDEC2_HCODEC_ASSIST_AMR2_INT6            (volatile uint32_t *)0xfe3280ec
#define P_VDEC2_HCODEC_ASSIST_AMR2_INT7            (volatile uint32_t *)0xfe3280f0
#define P_VDEC2_HCODEC_ASSIST_AMR2_INT8            (volatile uint32_t *)0xfe3280f4
#define P_VDEC2_HCODEC_ASSIST_AMR2_INT9            (volatile uint32_t *)0xfe3280f8
#define P_VDEC2_HCODEC_ASSIST_AMR2_INTA            (volatile uint32_t *)0xfe3280fc
#define P_VDEC2_HCODEC_ASSIST_AMR2_INTB            (volatile uint32_t *)0xfe328100
#define P_VDEC2_HCODEC_ASSIST_AMR2_INTC            (volatile uint32_t *)0xfe328104
#define P_VDEC2_HCODEC_ASSIST_AMR2_INTD            (volatile uint32_t *)0xfe328108
#define P_VDEC2_HCODEC_ASSIST_AMR2_INTE            (volatile uint32_t *)0xfe32810c
#define P_VDEC2_HCODEC_ASSIST_AMR2_INTF            (volatile uint32_t *)0xfe328110
#define P_VDEC2_HCODEC_ASSIST_MBX_SSEL             (volatile uint32_t *)0xfe328114
#define P_VDEC2_HCODEC_ASSIST_TIMER0_LO            (volatile uint32_t *)0xfe328180
#define P_VDEC2_HCODEC_ASSIST_TIMER0_HI            (volatile uint32_t *)0xfe328184
#define P_VDEC2_HCODEC_ASSIST_TIMER1_LO            (volatile uint32_t *)0xfe328188
#define P_VDEC2_HCODEC_ASSIST_TIMER1_HI            (volatile uint32_t *)0xfe32818c
#define P_VDEC2_HCODEC_ASSIST_DMA_INT              (volatile uint32_t *)0xfe328190
#define P_VDEC2_HCODEC_ASSIST_DMA_INT_MSK          (volatile uint32_t *)0xfe328194
#define P_VDEC2_HCODEC_ASSIST_DMA_INT2             (volatile uint32_t *)0xfe328198
#define P_VDEC2_HCODEC_ASSIST_DMA_INT_MSK2         (volatile uint32_t *)0xfe32819c
// bit[7:6]   awaddr_axi_vlc_prefix
// bit[5:4]   araddr_axi_mfdin_prefix
// bit[3:2]   vcpu_lmem_dma_prefix
// bit[1:0]   vcpu_imem_dma_prefix
#define P_VDEC2_HCODEC_AXI34_CONFIG_0              (volatile uint32_t *)0xfe3281a0
#define P_VDEC2_HCODEC_AXI34_CONFIG_1              (volatile uint32_t *)0xfe3281a4
#define P_VDEC2_HCODEC_AXI34_CONFIG_2              (volatile uint32_t *)0xfe3281a8
#define P_VDEC2_HCODEC_AXI34_CONFIG_3              (volatile uint32_t *)0xfe3281ac
#define P_VDEC2_HCODEC_AXI34_CONFIG_4              (volatile uint32_t *)0xfe3281b0
#define P_VDEC2_HCODEC_AXI34_CONFIG_5              (volatile uint32_t *)0xfe3281b4
#define P_VDEC2_HCODEC_ASSIST_AXIADDR_PREFIX       (volatile uint32_t *)0xfe3281b8
#define P_VDEC2_HCODEC_ASSIST_MBOX0_IRQ_REG        (volatile uint32_t *)0xfe3281c0
#define P_VDEC2_HCODEC_ASSIST_MBOX0_CLR_REG        (volatile uint32_t *)0xfe3281c4
#define P_VDEC2_HCODEC_ASSIST_MBOX0_MASK           (volatile uint32_t *)0xfe3281c8
#define P_VDEC2_HCODEC_ASSIST_MBOX0_FIQ_SEL        (volatile uint32_t *)0xfe3281cc
#define P_VDEC2_HCODEC_ASSIST_MBOX1_IRQ_REG        (volatile uint32_t *)0xfe3281d0
#define P_VDEC2_HCODEC_ASSIST_MBOX1_CLR_REG        (volatile uint32_t *)0xfe3281d4
#define P_VDEC2_HCODEC_ASSIST_MBOX1_MASK           (volatile uint32_t *)0xfe3281d8
#define P_VDEC2_HCODEC_ASSIST_MBOX1_FIQ_SEL        (volatile uint32_t *)0xfe3281dc
#define P_VDEC2_HCODEC_ASSIST_MBOX2_IRQ_REG        (volatile uint32_t *)0xfe3281e0
#define P_VDEC2_HCODEC_ASSIST_MBOX2_CLR_REG        (volatile uint32_t *)0xfe3281e4
#define P_VDEC2_HCODEC_ASSIST_MBOX2_MASK           (volatile uint32_t *)0xfe3281e8
#define P_VDEC2_HCODEC_ASSIST_MBOX2_FIQ_SEL        (volatile uint32_t *)0xfe3281ec
#define P_VDEC2_HCODEC_ASSIST_AXI_CTRL             (volatile uint32_t *)0xfe3281f0
#define P_VDEC2_HCODEC_ASSIST_AXI_STATUS           (volatile uint32_t *)0xfe3281f4
#define P_VDEC2_HCODEC_ASSIST_AXI_SETTING_VLC      (volatile uint32_t *)0xfe3281f8
//------------------------------------------------------------------------------
// MDEC module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// VLD module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// IQ/IDCT module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// VCPU module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// HENC module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// VLC module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// QDCT module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// HCODEC MDEC module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// HCODEC VLD module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// HCODEC IQIDCT module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// HCODEC IQIDCT module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// HEVC_ASSIST module level register offset
//------------------------------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_ASSIST_CBUS_BASE = 0x00
// -----------------------------------------------
#define P_VDEC2_HEVC_ASSIST_AFIFO_CTRL             (volatile uint32_t *)0xfe328004
#define P_VDEC2_HEVC_ASSIST_AFIFO_CTRL1            (volatile uint32_t *)0xfe328008
#define P_VDEC2_HEVC_ASSIST_AUTO_CG_DISABLE        (volatile uint32_t *)0xfe32800c
#define P_VDEC2_HEVC_ASSIST_SW_RESET               (volatile uint32_t *)0xfe328010
#define P_VDEC2_HEVC_ASSIST_AFIFO_CTRL2            (volatile uint32_t *)0xfe328014
// bit[31:28] - hed_wr_id (Write Only)
// bit[31:16] - hed_fb_wr_total_page_num (Read Only)
// bit[15:12] - hed_wr_map_addr_id
// bit[11]    - hed_wr_flush
// bit[10:8]  - hed_wr_map_addr_endian
// bit[7]     - hed_wr_map_addr_active(Read Only)
// bit[6:2]   - wr_entry_pending_num(Read Only)
// bit[1]     - hed_fb_wr_addr_auto_rd
// bit[0]     - hed_fb_wr_en
#define P_VDEC2_HEVC_ASSIST_HED_FB_W_CTL           (volatile uint32_t *)0xfe328018
// bit[31:28] - hed_rd_id (Write Only)
// bit[27:16] - hed_rd_map_auto_halt_num (Write Only)
// bit[31:16] - hed_fb_rd_total_page_num (Read Only)
// bit[15:12] - hed_rd_map_addr_id
// bit[11]    - hed_rd_map_auto_halt_en
// bit[10:8]  - hed_rd_map_addr_endian
// bit[7]     - hed_rd_map_addr_active(Read Only)
// bit[6:2]   - rd_entry_pending_num
// bit[1]     - hed_fb_rd_addr_auto_rd
// bit[0]     - hed_fb_rd_en
#define P_VDEC2_HEVC_ASSIST_HED_FB_R_CTL           (volatile uint32_t *)0xfe32801c
// WRITE
// bit[31] - heb_fb_page_addr_target 0-wr_addr, 1-rd_addr
// bit[30:20] - Reserved
// bit[19:0] - heb_fb_page_addr (4k page)
// READ:
// bit[31]   - srdy_hed_fb_wr_addr
// bit[30]   - rrdy_hed_fb_wr_addr
// bit[29]   - srdy_hed_fb_rd_addr
// bit[28]   - rrdy_hed_fb_rd_addr
// bit[27]   - hed_fb_read_halt
// bit[26]   - hed_wrrsp_count[7]
// bit[25:21] - fb_rd_status
// bit[20] -    EOS_sent
// bit[19:16] - EOS_cnt
// bit[15:14] - hed_fb_write_status
// bit[13:7] - hed_rdrsp_count
// bit[6:0]  - hed_wrrsp_count
#define P_VDEC2_HEVC_ASSIST_HED_FB_ADDR            (volatile uint32_t *)0xfe328020
#define P_VDEC2_HEVC_ASSIST_MMU_MAP_ADDR           (volatile uint32_t *)0xfe328024
#define P_VDEC2_HEVC_ASSIST_FB_MMU_MAP_ADDR        (volatile uint32_t *)0xfe328028
#define P_VDEC2_HEVC_ASSIST_FBD_MMU_MAP_ADDR       (volatile uint32_t *)0xfe32802c
// bit[31:20] -- fb_read_lcu_y // READ only
// bit[19:8]  -- fb_read_lcu_x // READ only
// bit[7]     -- fb_read_lcu_latch
// bit[6:5]   -- reserved
// bit[4]  -- fb_disable_wr_iqit_buf
// bit[3]  -- fb_read_avs2_enable
// bit[2]  -- fb_read_vp9_enable
// bit[1]  -- fb_avs2_enable
// bit[0]  -- fb_vp9_enable
#define P_VDEC2_HEVC_ASSIST_HED_FB_CTL             (volatile uint32_t *)0xfe328030
// [31:16] height
// [15:0] width
#define P_VDEC2_HEVC_ASSIST_PIC_SIZE_FB_READ       (volatile uint32_t *)0xfe328034
#define P_VDEC2_HEVC_ASSIST_MMU_MAP_ADDR2          (volatile uint32_t *)0xfe328038
// bit[21:20] ipp_intralbuf_axiaddr_prefix
// bit[19:18] awaddr_axi_dma_prefix
// bit[17:16] araddr_axi_dma_prefix
// bit[15:14] awaddr_axi_stream_prefix
// bit[13:12] araddr_axi_stream_prefix
// bit[11:10] awaddr_axi_fb_prefix
// bit[9:8]   araddr_axi_fb_prefix
// bit[7:6]   vcpu_lmem_dma_prefix
// bit[5:4]   vcpu_imem_dma_prefix
// bit[3:2]   fb_wr_mmu_map_addr_prefix
// bit[1:0]   fb_rd_mmu_map_addr_prefix
#define P_VDEC2_HEVC_ASSIST_AXIADDR_PREFIX         (volatile uint32_t *)0xfe32803c
// bit[31]- parser_iqit_buff_clk_force_on
// bit[1] - parser_iqit_buff_bypass
// bit[0] - parser_iqit_buff_sw_rst
#define P_VDEC2_HEVC_PARSER_IQIT_BUFF_CTL          (volatile uint32_t *)0xfe328040
#define P_VDEC2_HEVC_PARSER_IQIT_BUFF_STATUS       (volatile uint32_t *)0xfe328044
#define P_VDEC2_HEVC_ASSIST_MMU_MAP_ADDR_DBE1      (volatile uint32_t *)0xfe328048
#define P_VDEC2_HEVC_ASSIST_GCLK_EN_DISABLE        (volatile uint32_t *)0xfe32804c
#define P_VDEC2_HEVC_ASSIST_AMR1_INT0              (volatile uint32_t *)0xfe328054
#define P_VDEC2_HEVC_ASSIST_AMR1_INT1              (volatile uint32_t *)0xfe328058
#define P_VDEC2_HEVC_ASSIST_AMR1_INT2              (volatile uint32_t *)0xfe32805c
#define P_VDEC2_HEVC_ASSIST_AMR1_INT3              (volatile uint32_t *)0xfe328060
#define P_VDEC2_HEVC_ASSIST_AMR1_INT4              (volatile uint32_t *)0xfe328064
#define P_VDEC2_HEVC_ASSIST_AMR1_INT5              (volatile uint32_t *)0xfe328068
#define P_VDEC2_HEVC_ASSIST_AMR1_INT6              (volatile uint32_t *)0xfe32806c
#define P_VDEC2_HEVC_ASSIST_AMR1_INT7              (volatile uint32_t *)0xfe328070
#define P_VDEC2_HEVC_ASSIST_AMR1_INT8              (volatile uint32_t *)0xfe328074
#define P_VDEC2_HEVC_ASSIST_AMR1_INT9              (volatile uint32_t *)0xfe328078
#define P_VDEC2_HEVC_ASSIST_AMR1_INTA              (volatile uint32_t *)0xfe32807c
#define P_VDEC2_HEVC_ASSIST_AMR1_INTB              (volatile uint32_t *)0xfe328080
#define P_VDEC2_HEVC_ASSIST_AMR1_INTC              (volatile uint32_t *)0xfe328084
#define P_VDEC2_HEVC_ASSIST_AMR1_INTD              (volatile uint32_t *)0xfe328088
#define P_VDEC2_HEVC_ASSIST_AMR1_INTE              (volatile uint32_t *)0xfe32808c
#define P_VDEC2_HEVC_ASSIST_AMR1_INTF              (volatile uint32_t *)0xfe328090
#define P_VDEC2_HEVC_ASSIST_AMR2_INT0              (volatile uint32_t *)0xfe328094
#define P_VDEC2_HEVC_ASSIST_AMR2_INT1              (volatile uint32_t *)0xfe328098
#define P_VDEC2_HEVC_ASSIST_AMR2_INT2              (volatile uint32_t *)0xfe32809c
#define P_VDEC2_HEVC_ASSIST_AMR2_INT3              (volatile uint32_t *)0xfe3280a0
#define P_VDEC2_HEVC_ASSIST_AMR2_INT4              (volatile uint32_t *)0xfe3280a4
#define P_VDEC2_HEVC_ASSIST_AMR2_INT5              (volatile uint32_t *)0xfe3280a8
#define P_VDEC2_HEVC_ASSIST_AMR2_INT6              (volatile uint32_t *)0xfe3280ac
#define P_VDEC2_HEVC_ASSIST_AMR2_INT7              (volatile uint32_t *)0xfe3280b0
#define P_VDEC2_HEVC_ASSIST_AMR2_INT8              (volatile uint32_t *)0xfe3280b4
#define P_VDEC2_HEVC_ASSIST_AMR2_INT9              (volatile uint32_t *)0xfe3280b8
#define P_VDEC2_HEVC_ASSIST_AMR2_INTA              (volatile uint32_t *)0xfe3280bc
#define P_VDEC2_HEVC_ASSIST_AMR2_INTB              (volatile uint32_t *)0xfe3280c0
#define P_VDEC2_HEVC_ASSIST_AMR2_INTC              (volatile uint32_t *)0xfe3280c4
#define P_VDEC2_HEVC_ASSIST_AMR2_INTD              (volatile uint32_t *)0xfe3280c8
#define P_VDEC2_HEVC_ASSIST_AMR2_INTE              (volatile uint32_t *)0xfe3280cc
#define P_VDEC2_HEVC_ASSIST_AMR2_INTF              (volatile uint32_t *)0xfe3280d0
#define P_VDEC2_HEVC_ASSIST_MBX_SSEL               (volatile uint32_t *)0xfe3280d4
#define P_VDEC2_HEVC_ASSIST_TIMER0_LO              (volatile uint32_t *)0xfe3280d8
#define P_VDEC2_HEVC_ASSIST_TIMER0_HI              (volatile uint32_t *)0xfe3280dc
#define P_VDEC2_HEVC_ASSIST_TIMER1_LO              (volatile uint32_t *)0xfe3280e0
#define P_VDEC2_HEVC_ASSIST_TIMER1_HI              (volatile uint32_t *)0xfe3280e4
#define P_VDEC2_HEVC_ASSIST_DMA_INT                (volatile uint32_t *)0xfe3280e8
#define P_VDEC2_HEVC_ASSIST_DMA_INT_MSK            (volatile uint32_t *)0xfe3280ec
#define P_VDEC2_HEVC_ASSIST_DMA_INT2               (volatile uint32_t *)0xfe3280f0
#define P_VDEC2_HEVC_ASSIST_DMA_INT_MSK2           (volatile uint32_t *)0xfe3280f4
#define P_VDEC2_HEVC_ASSIST_MBOX0_IRQ_REG          (volatile uint32_t *)0xfe328100
#define P_VDEC2_HEVC_ASSIST_MBOX0_CLR_REG          (volatile uint32_t *)0xfe328104
#define P_VDEC2_HEVC_ASSIST_MBOX0_MASK             (volatile uint32_t *)0xfe328108
#define P_VDEC2_HEVC_ASSIST_MBOX0_FIQ_SEL          (volatile uint32_t *)0xfe32810c
#define P_VDEC2_HEVC_ASSIST_MBOX1_IRQ_REG          (volatile uint32_t *)0xfe328110
#define P_VDEC2_HEVC_ASSIST_MBOX1_CLR_REG          (volatile uint32_t *)0xfe328114
#define P_VDEC2_HEVC_ASSIST_MBOX1_MASK             (volatile uint32_t *)0xfe328118
#define P_VDEC2_HEVC_ASSIST_MBOX1_FIQ_SEL          (volatile uint32_t *)0xfe32811c
#define P_VDEC2_HEVC_ASSIST_MBOX2_IRQ_REG          (volatile uint32_t *)0xfe328120
#define P_VDEC2_HEVC_ASSIST_MBOX2_CLR_REG          (volatile uint32_t *)0xfe328124
#define P_VDEC2_HEVC_ASSIST_MBOX2_MASK             (volatile uint32_t *)0xfe328128
#define P_VDEC2_HEVC_ASSIST_MBOX2_FIQ_SEL          (volatile uint32_t *)0xfe32812c
// bit[31:24] - read request
// bit[23:16] - write request
// bit[15] - disable_aml_axi_clk_gating_b
// bit[14] - disable_arb_b
// bit[13:12] - Reserved
// bit[11:8] - arb_switch_cnt_b
// bit[7] - disable_aml_axi_clk_gating
// bit[6] - disable_arb
// bit[5] - aw_urgent_out_en
// bit[4] - ar_urgent_out_en
// bit[3:0] - arb_switch_cnt
#define P_VDEC2_HEVC_ASSIST_AXI_CTRL               (volatile uint32_t *)0xfe328130
// bit[31:24] - read arb result
// bit[23:16] - write arb result
// bit[15:12] - read_ar_cnt
// bit[11:8] - write_aw_cnt
// bit[7] - arvalid_axi_s0
// bit[6] - arready_axi_s0
// bit[5] - awvalid_axi_s0
// bit[4] - awready_axi_s0
// bit[3:0] - write_fifo_cnt
#define P_VDEC2_HEVC_ASSIST_AXI_STATUS             (volatile uint32_t *)0xfe328134
// bit[31:24] - read request b
// bit[23:16] - write request b
// bit[15:0] - Reserved
#define P_VDEC2_HEVC_ASSIST_AXI_STATUS2_HI         (volatile uint32_t *)0xfe328138
// bit[31:24] - read arb result b
// bit[23:16] - write arb result b
// bit[15:12] - read_ar_cnt b
// bit[11:8] - write_aw_cnt b
// bit[7] - arvalid_axi_s0 b
// bit[6] - arready_axi_s0 b
// bit[5] - awvalid_axi_s0 b
// bit[4] - awready_axi_s0 b
// bit[3:0] - write_fifo_cnt b
#define P_VDEC2_HEVC_ASSIST_AXI_STATUS2_LO         (volatile uint32_t *)0xfe32813c
// bit[7:4] - FB read AXI ID
// bit[3:0] - FB write AXI ID, MSB 3 bits
#define P_VDEC2_HEVC_ASSIST_FB_CTL                 (volatile uint32_t *)0xfe328140
#define P_VDEC2_HEVC_ASSIST_FB_W_CTL               (volatile uint32_t *)0xfe328144
#define P_VDEC2_HEVC_ASSIST_FB_W_CTL1              (volatile uint32_t *)0xfe328148
#define P_VDEC2_HEVC_ASSIST_FB_WID                 (volatile uint32_t *)0xfe32814c
#define P_VDEC2_HEVC_ASSIST_FB_R_CTL               (volatile uint32_t *)0xfe328150
#define P_VDEC2_HEVC_ASSIST_FB_R_CTL1              (volatile uint32_t *)0xfe328154
#define P_VDEC2_HEVC_ASSIST_FB_RID                 (volatile uint32_t *)0xfe328158
#define P_VDEC2_HEVC_ASSIST_PIC_SIZE_FB_READ1      (volatile uint32_t *)0xfe32815c
#define P_VDEC2_HEVC_ASSIST_FB_PIC_CLR             (volatile uint32_t *)0xfe328160
#define P_VDEC2_HEVC_ASSIST_BACKCORE_INT_STATUS    (volatile uint32_t *)0xfe328164
#define P_VDEC2_HEVC_ASSIST_SCRATCH_0              (volatile uint32_t *)0xfe3282c0
#define P_VDEC2_HEVC_ASSIST_SCRATCH_1              (volatile uint32_t *)0xfe3282c4
#define P_VDEC2_HEVC_ASSIST_SCRATCH_2              (volatile uint32_t *)0xfe3282c8
#define P_VDEC2_HEVC_ASSIST_SCRATCH_3              (volatile uint32_t *)0xfe3282cc
#define P_VDEC2_HEVC_ASSIST_SCRATCH_4              (volatile uint32_t *)0xfe3282d0
#define P_VDEC2_HEVC_ASSIST_SCRATCH_5              (volatile uint32_t *)0xfe3282d4
#define P_VDEC2_HEVC_ASSIST_SCRATCH_6              (volatile uint32_t *)0xfe3282d8
#define P_VDEC2_HEVC_ASSIST_SCRATCH_7              (volatile uint32_t *)0xfe3282dc
#define P_VDEC2_HEVC_ASSIST_SCRATCH_8              (volatile uint32_t *)0xfe3282e0
#define P_VDEC2_HEVC_ASSIST_SCRATCH_9              (volatile uint32_t *)0xfe3282e4
#define P_VDEC2_HEVC_ASSIST_SCRATCH_A              (volatile uint32_t *)0xfe3282e8
#define P_VDEC2_HEVC_ASSIST_SCRATCH_B              (volatile uint32_t *)0xfe3282ec
#define P_VDEC2_HEVC_ASSIST_SCRATCH_C              (volatile uint32_t *)0xfe3282f0
#define P_VDEC2_HEVC_ASSIST_SCRATCH_D              (volatile uint32_t *)0xfe3282f4
#define P_VDEC2_HEVC_ASSIST_SCRATCH_E              (volatile uint32_t *)0xfe3282f8
#define P_VDEC2_HEVC_ASSIST_SCRATCH_F              (volatile uint32_t *)0xfe3282fc
#define P_VDEC2_HEVC_ASSIST_SCRATCH_G              (volatile uint32_t *)0xfe328300
#define P_VDEC2_HEVC_ASSIST_SCRATCH_H              (volatile uint32_t *)0xfe328304
#define P_VDEC2_HEVC_ASSIST_SCRATCH_I              (volatile uint32_t *)0xfe328308
#define P_VDEC2_HEVC_ASSIST_SCRATCH_J              (volatile uint32_t *)0xfe32830c
#define P_VDEC2_HEVC_ASSIST_SCRATCH_K              (volatile uint32_t *)0xfe328310
#define P_VDEC2_HEVC_ASSIST_SCRATCH_L              (volatile uint32_t *)0xfe328314
#define P_VDEC2_HEVC_ASSIST_SCRATCH_M              (volatile uint32_t *)0xfe328318
#define P_VDEC2_HEVC_ASSIST_SCRATCH_N              (volatile uint32_t *)0xfe32831c
#define P_VDEC2_HEVC_ASSIST_SCRATCH_O              (volatile uint32_t *)0xfe328320
#define P_VDEC2_HEVC_ASSIST_SCRATCH_P              (volatile uint32_t *)0xfe328324
#define P_VDEC2_HEVC_ASSIST_SCRATCH_Q              (volatile uint32_t *)0xfe328328
#define P_VDEC2_HEVC_ASSIST_SCRATCH_R              (volatile uint32_t *)0xfe32832c
#define P_VDEC2_HEVC_ASSIST_SCRATCH_S              (volatile uint32_t *)0xfe328330
#define P_VDEC2_HEVC_ASSIST_SCRATCH_T              (volatile uint32_t *)0xfe328334
#define P_VDEC2_HEVC_ASSIST_SCRATCH_U              (volatile uint32_t *)0xfe328338
#define P_VDEC2_HEVC_ASSIST_SCRATCH_V              (volatile uint32_t *)0xfe32833c
#define P_VDEC2_HEVC_ASSIST_SCRATCH_W              (volatile uint32_t *)0xfe328340
#define P_VDEC2_HEVC_ASSIST_SCRATCH_X              (volatile uint32_t *)0xfe328344
#define P_VDEC2_HEVC_ASSIST_SCRATCH_Y              (volatile uint32_t *)0xfe328348
#define P_VDEC2_HEVC_ASSIST_SCRATCH_Z              (volatile uint32_t *)0xfe32834c
#define P_VDEC2_HEVC_ASSIST_SCRATCH_10             (volatile uint32_t *)0xfe328350
#define P_VDEC2_HEVC_ASSIST_SCRATCH_11             (volatile uint32_t *)0xfe328354
#define P_VDEC2_HEVC_ASSIST_SCRATCH_12             (volatile uint32_t *)0xfe328358
#define P_VDEC2_HEVC_ASSIST_SCRATCH_13             (volatile uint32_t *)0xfe32835c
#define P_VDEC2_HEVC_ASSIST_SCRATCH_14             (volatile uint32_t *)0xfe328360
#define P_VDEC2_HEVC_ASSIST_SCRATCH_15             (volatile uint32_t *)0xfe328364
#define P_VDEC2_HEVC_ASSIST_SCRATCH_16             (volatile uint32_t *)0xfe328368
#define P_VDEC2_HEVC_ASSIST_SCRATCH_17             (volatile uint32_t *)0xfe32836c
#define P_VDEC2_HEVC_ASSIST_SCRATCH_18             (volatile uint32_t *)0xfe328370
#define P_VDEC2_HEVC_ASSIST_SCRATCH_19             (volatile uint32_t *)0xfe328374
#define P_VDEC2_HEVC_ASSIST_DEBUG_0                (volatile uint32_t *)0xfe328380
#define P_VDEC2_HEVC_ASSIST_DEBUG_1                (volatile uint32_t *)0xfe328384
#define P_VDEC2_HEVC_ASSIST_DEBUG_2                (volatile uint32_t *)0xfe328388
#define P_VDEC2_HEVC_ASSIST_DEBUG_3                (volatile uint32_t *)0xfe32838c
#define P_VDEC2_HEVC_ASSIST_DEBUG_4                (volatile uint32_t *)0xfe328390
#define P_VDEC2_HEVC_ASSIST_DEBUG_5                (volatile uint32_t *)0xfe328394
#define P_VDEC2_HEVC_ASSIST_DEBUG_6                (volatile uint32_t *)0xfe328398
#define P_VDEC2_HEVC_ASSIST_DEBUG_7                (volatile uint32_t *)0xfe32839c
#define P_VDEC2_HEVC_ASSIST_DEBUG_8                (volatile uint32_t *)0xfe3283a0
#define P_VDEC2_HEVC_ASSIST_DEBUG_9                (volatile uint32_t *)0xfe3283a4
#define P_VDEC2_HEVC_ASSIST_DEBUG_A                (volatile uint32_t *)0xfe3283a8
#define P_VDEC2_HEVC_ASSIST_DEBUG_B                (volatile uint32_t *)0xfe3283ac
#define P_VDEC2_HEVC_ASSIST_DEBUG_C                (volatile uint32_t *)0xfe3283b0
#define P_VDEC2_HEVC_ASSIST_MIRROR_CONFIG          (volatile uint32_t *)0xfe3283b4
#define P_VDEC2_HEVC_ASSIST_CRC_INDEX              (volatile uint32_t *)0xfe3283b8
#define P_VDEC2_HEVC_ASSIST_CRC_VALUE              (volatile uint32_t *)0xfe3283bc
//------------------------------------------------------------------------------
// HEVC_ASSIST module level register offset
// Same as VDEC/HCODEC to avoid confusing software guy
//------------------------------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_VCPU_CBUS_BASE = 0x03
// -----------------------------------------------
//------------------------------------------------------------------------------
// HEVC_PARSER module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// HEVC_MPRED module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// HEVC_IPP module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// HEVC_DBLK module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// HEVC_SAO module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// HEVC_IQIT module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//  DOS top-level register offset
//------------------------------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_TOP_CBUS_BASE = 0x3f
// -----------------------------------------------
// [0]  reserved
// [1]  Reset Dos top level registers, except sw_reset0/1/2 which is only reset by external reset_n.
// [2]  VDEC1 Reset assist, mdec's CBUS
// [3]  VDEC1 Reset mdec's VLD
// [4]  VDEC1 Reset mdec's VLD
// [5]  VDEC1 Reset mdec's VLD
// [6]  VDEC1 Reset mdec's IQIDCT
// [7]  VDEC1 Reset mdec's MC
// [8]  VDEC1 Reset mdec's DBLK
// [9]  VDEC1 Reset mdec's PIC_DC
// [10] VDEC1 Reset mdec's Pscale
// [11] VDEC1 Reset vcpu's MCPU
// [12] VDEC1 Reset vcpu's CCPU
// [13] VDEC1 Reset mmc_pre_arb
#define P_VDEC2_DOS_SW_RESET0                      (volatile uint32_t *)0xfe32fc00
// [31:27] reserved
// [26] hcodec clk_en for henc assist
// [25:22] reserved
// [21] hcodec clk_en for henc qdct
// [20] hcodec clk_en for henc vlc
// [19] hcodec clk_en for assist and cbus
// [18] hcodec clk_en for ddr
// [17] hcodec clk_en for vcpu
// [16] hcodec clk_en for hdec assist
// [15] hcodec clk_en for hdec dblk
// [14] reserved
// [13] hcodec clk_en for hdec mc
// [12] hcodec clk_en for hdec pic_dc
// [11:10] reserved
// [9] vdec clk_en for vdec assist and cbus
// [8] vdec clk_en for ddr
// [7] vdec clk_en for vcpu
// [6] vdec clk_en for mdec vld
// [5] vdec clk_en for mdec psc
// [4] vdec clk_en for mdec pic_dc
// [3] vdec clk_en for mdec mc
// [2] vdec clk_en for mdec iqidct
// [1] vdec clk_en for mdec dblk
// [0] vdec clk_en for mdec assist
#define P_VDEC2_DOS_GCLK_EN0                       (volatile uint32_t *)0xfe32fc04
#define P_VDEC2_DOS_GEN_CTRL0                      (volatile uint32_t *)0xfe32fc08
#define P_VDEC2_DOS_APB_ERR_CTRL                   (volatile uint32_t *)0xfe32fc0c
#define P_VDEC2_DOS_APB_ERR_STAT                   (volatile uint32_t *)0xfe32fc10
#define P_VDEC2_DOS_VDEC_INT_EN                    (volatile uint32_t *)0xfe32fc14
#define P_VDEC2_DOS_HCODEC_INT_EN                  (volatile uint32_t *)0xfe32fc18
// [0]  Reserved
// [1]  Reserved
// [2]  HCODEC Reset assist, hdec's CBUS
// [3]  HCODEC Reset hdec's VLD
// [4]  HCODEC Reset hdec's VLD
// [5]  HCODEC Reset hdec's VLD
// [6]  HCODEC Reset hdec's IQIDCT
// [7]  HCODEC Reset hdec's MC
// [8]  HCODEC Reset hdec's DBLK
// [9]  HCODEC Reset hdec's PIC_DC
// [10] HCODEC Reset hdec's Pscale
// [11] HCODEC Reset vcpu's MCPU
// [12] HCODEC Reset vcpu's CCPU
// [13] HCODEC Reset mmc_pre_arb
// [14] HCODEC Reserved
// [15] HCODEC Reserved
// [16] HCODEC Reset henc's VLC
#define P_VDEC2_DOS_SW_RESET1                      (volatile uint32_t *)0xfe32fc1c
// [0]  Reserved
// [1]  Reserved
// [2]  VDEC2 Reset assist, mdec's CBUS
// [3]  VDEC2 Reset mdec's VLD
// [4]  VDEC2 Reset mdec's VLD
// [5]  VDEC2 Reset mdec's VLD
// [6]  VDEC2 Reset mdec's IQIDCT
// [7]  VDEC2 Reset mdec's MC
// [8]  VDEC2 Reset mdec's DBLK
// [9]  VDEC2 Reset mdec's PIC_DC
// [10] VDEC2 Reset mdec's Pscale
// [11] VDEC2 Reset vcpu's MCPU
// [12] VDEC2 Reset vcpu's CCPU
// [13] VDEC2 Reset mmc_pre_arb
#define P_VDEC2_DOS_SW_RESET2                      (volatile uint32_t *)0xfe32fc20
// [31:10] Reserved
// [9] vdec2 clk_en for assist and cbus.
// [8] vdec2 clk_en for ddr;
// [7] vdec2 clk_en for vcpu;
// [6] vdec2 clk_en for mdec vld
// [5] vdec2 clk_en for mdec psc
// [4] vdec2 clk_en for mdec pic_dc
// [3] vdec2 clk_en for mdec mc
// [2] vdec2 clk_en for mdec iqidct
// [1] vdec2 clk_en for mdec dblk
// [0] vdec2 clk_en for mdec assist
#define P_VDEC2_DOS_GCLK_EN1                       (volatile uint32_t *)0xfe32fc24
#define P_VDEC2_DOS_VDEC2_INT_EN                   (volatile uint32_t *)0xfe32fc28
#define P_VDEC2_DOS_VDIN_LCNT                      (volatile uint32_t *)0xfe32fc2c
#define P_VDEC2_DOS_VDIN_FCNT                      (volatile uint32_t *)0xfe32fc30
#define P_VDEC2_DOS_VDIN_CCTL                      (volatile uint32_t *)0xfe32fc34
#define P_VDEC2_DOS_SCRATCH0                       (volatile uint32_t *)0xfe32fc40
#define P_VDEC2_DOS_SCRATCH1                       (volatile uint32_t *)0xfe32fc44
#define P_VDEC2_DOS_SCRATCH2                       (volatile uint32_t *)0xfe32fc48
#define P_VDEC2_DOS_SCRATCH3                       (volatile uint32_t *)0xfe32fc4c
#define P_VDEC2_DOS_SCRATCH4                       (volatile uint32_t *)0xfe32fc50
#define P_VDEC2_DOS_SCRATCH5                       (volatile uint32_t *)0xfe32fc54
#define P_VDEC2_DOS_SCRATCH6                       (volatile uint32_t *)0xfe32fc58
#define P_VDEC2_DOS_SCRATCH7                       (volatile uint32_t *)0xfe32fc5c
#define P_VDEC2_DOS_SCRATCH8                       (volatile uint32_t *)0xfe32fc60
#define P_VDEC2_DOS_SCRATCH9                       (volatile uint32_t *)0xfe32fc64
#define P_VDEC2_DOS_SCRATCH10                      (volatile uint32_t *)0xfe32fc68
#define P_VDEC2_DOS_SCRATCH11                      (volatile uint32_t *)0xfe32fc6c
#define P_VDEC2_DOS_SCRATCH12                      (volatile uint32_t *)0xfe32fc70
#define P_VDEC2_DOS_SCRATCH13                      (volatile uint32_t *)0xfe32fc74
#define P_VDEC2_DOS_SCRATCH14                      (volatile uint32_t *)0xfe32fc78
#define P_VDEC2_DOS_SCRATCH15                      (volatile uint32_t *)0xfe32fc7c
#define P_VDEC2_DOS_SCRATCH16                      (volatile uint32_t *)0xfe32fc80
#define P_VDEC2_DOS_SCRATCH17                      (volatile uint32_t *)0xfe32fc84
#define P_VDEC2_DOS_SCRATCH18                      (volatile uint32_t *)0xfe32fc88
#define P_VDEC2_DOS_SCRATCH19                      (volatile uint32_t *)0xfe32fc8c
#define P_VDEC2_DOS_SCRATCH20                      (volatile uint32_t *)0xfe32fc90
#define P_VDEC2_DOS_SCRATCH21                      (volatile uint32_t *)0xfe32fc94
#define P_VDEC2_DOS_SCRATCH22                      (volatile uint32_t *)0xfe32fc98
#define P_VDEC2_DOS_SCRATCH23                      (volatile uint32_t *)0xfe32fc9c
#define P_VDEC2_DOS_SCRATCH24                      (volatile uint32_t *)0xfe32fca0
#define P_VDEC2_DOS_SCRATCH25                      (volatile uint32_t *)0xfe32fca4
#define P_VDEC2_DOS_SCRATCH26                      (volatile uint32_t *)0xfe32fca8
#define P_VDEC2_DOS_SCRATCH27                      (volatile uint32_t *)0xfe32fcac
#define P_VDEC2_DOS_SCRATCH28                      (volatile uint32_t *)0xfe32fcb0
#define P_VDEC2_DOS_SCRATCH29                      (volatile uint32_t *)0xfe32fcb4
#define P_VDEC2_DOS_SCRATCH30                      (volatile uint32_t *)0xfe32fcb8
#define P_VDEC2_DOS_SCRATCH31                      (volatile uint32_t *)0xfe32fcbc
#define P_VDEC2_DOS_MEM_PD_VDEC                    (volatile uint32_t *)0xfe32fcc0
#define P_VDEC2_DOS_MEM_PD_VDEC2                   (volatile uint32_t *)0xfe32fcc4
#define P_VDEC2_DOS_MEM_PD_HCODEC                  (volatile uint32_t *)0xfe32fcc8
#define P_VDEC2_DOS_MEM_PD_HEVC                    (volatile uint32_t *)0xfe32fccc
#define P_VDEC2_DOS_MEM_PD_HEVC_DBE                (volatile uint32_t *)0xfe32fcec
#define P_VDEC2_DOS_SW_RESET3                      (volatile uint32_t *)0xfe32fcd0
#define P_VDEC2_DOS_GCLK_EN3                       (volatile uint32_t *)0xfe32fcd4
#define P_VDEC2_DOS_HEVC_INT_EN                    (volatile uint32_t *)0xfe32fcd8
#define P_VDEC2_DOS_SW_RESET4                      (volatile uint32_t *)0xfe32fcdc
#define P_VDEC2_DOS_GCLK_EN4                       (volatile uint32_t *)0xfe32fce0
#define P_VDEC2_DOS_MEM_PD_WAVE420L                (volatile uint32_t *)0xfe32fce4
#define P_VDEC2_DOS_WAVE420L_CNTL_STAT             (volatile uint32_t *)0xfe32fce8
// bit[31]    mcrcc_stall_en
// bit[30:28] Reserved
// bit[27:20] target_canvas
// bit[19:10] target_mby
// bit[ 9: 0] target_mbx
#define P_VDEC2_DOS_VDEC_MCRCC_STALL_CTRL          (volatile uint32_t *)0xfe32fd00
#define P_VDEC2_DOS_VDEC_MCRCC_STALL2_CTRL         (volatile uint32_t *)0xfe32fd08
#define P_VDEC2_DOS_VDEC2_MCRCC_STALL_CTRL         (volatile uint32_t *)0xfe32fd04
#define P_VDEC2_DOS_VDEC2_MCRCC_STALL2_CTRL        (volatile uint32_t *)0xfe32fd0c
#define P_VDEC2_DOS_MEM_PD_HEVC2                   (volatile uint32_t *)0xfe32fd10
#define P_VDEC2_DOS_HEVC2_INT_EN                   (volatile uint32_t *)0xfe32fd14
// bit[1] s_clk off
// bit[0] m_clk off
#define P_VDEC2_DOS_CFG_CMPIF_BRIDGE               (volatile uint32_t *)0xfe32fd20
// bit[31]    cfg_stall_en
// bit[30]    co_mv_stall_en
// bit[29]    cfg_stall_force
// bit[28:24] reserved
// bit[23:12] cfg_stall_tilestrt_ctb_y
// bit[11: 0] cfg_stall_tilestrt_ctb_x
#define P_VDEC2_DOS_HEVC_STALL_START               (volatile uint32_t *)0xfe32fd40
// bit[31:24] cfg_stall_canvas
// bit[23:12] cfg_stall_tileend_ctb_y
// bit[11: 0] cfg_stall_tileend_ctb_x
#define P_VDEC2_DOS_HEVC_STALL_END                 (volatile uint32_t *)0xfe32fd44
// bit[31:24] reserved
// bit[23:12] cfg_stall_ctb_y
// bit[11: 0] cfg_stall_ctb_x
#define P_VDEC2_DOS_HEVC_STALL_POSITION            (volatile uint32_t *)0xfe32fd48
// bit[31]    cfg_stall_en
// bit[30]    co_mv_stall_en
// bit[29]    cfg_stall_force
// bit[28:24] reserved
// bit[23:12] cfg_stall_tilestrt_ctb_y
// bit[11: 0] cfg_stall_tilestrt_ctb_x
#define P_VDEC2_DOS_HEVC2_STALL_START              (volatile uint32_t *)0xfe32fd4c
// bit[31:24] cfg_stall_canvas
// bit[23:12] cfg_stall_tileend_ctb_y
// bit[11: 0] cfg_stall_tileend_ctb_x
#define P_VDEC2_DOS_HEVC2_STALL_END                (volatile uint32_t *)0xfe32fd50
// bit[31:24] reserved
// bit[23:12] cfg_stall_ctb_y
// bit[11: 0] cfg_stall_ctb_x
#define P_VDEC2_DOS_HEVC2_STALL_POSITION           (volatile uint32_t *)0xfe32fd54
#define P_VDEC2_DOS_SECURE_CTL_INDEX               (volatile uint32_t *)0xfe32fe00
#define P_VDEC2_DOS_SECURE_CTL_DATA                (volatile uint32_t *)0xfe32fe04
#define P_VDEC2_DOS_SECURE_REG_NULL                (volatile uint32_t *)0xfe32fe08
//bit[31] - Enable
//bit[30:16] - max height
//bit[15:0] - max
#define P_VDEC2_DOS_VDEC_WR_MAX_SIZE_CTL           (volatile uint32_t *)0xfe32fe10
#define P_VDEC2_DOS_VDEC_DW_MAX_SIZE_CTL           (volatile uint32_t *)0xfe32fe14
#define P_VDEC2_DOS_HEVC_WR_MAX_SIZE_CTL           (volatile uint32_t *)0xfe32fe18
#define P_VDEC2_DOS_HEVC_DW_MAX_SIZE_CTL           (volatile uint32_t *)0xfe32fe1c
#define P_VDEC2_DOS_HEVC_TW_MAX_SIZE_CTL           (volatile uint32_t *)0xfe32fe20
#define P_VDEC2_DOS_HEVC_TW_MAX_SIZE_CTL1          (volatile uint32_t *)0xfe32fe24
#define P_VDEC2_DOS_HEVC_WR_MAX_SIZE_CTL1          (volatile uint32_t *)0xfe32fe28
#define P_VDEC2_DOS_HEVC_DW_MAX_SIZE_CTL1          (volatile uint32_t *)0xfe32fe2c
#define P_VDEC2_DOS_HEVC_SECURE_RESERVED           (volatile uint32_t *)0xfe32fe30
// Bit[3:0] - axi_id_map_index (auto increase when read/write)
#define P_VDEC2_DOS_AXI_ID_MAP_INDEX               (volatile uint32_t *)0xfe32fe34
// axi_id_map_index :
//   0 -  bit [7:0]   vdec_axi_id_0_rd
//        bit [15:8]  vdec_axi_id_1_rd
//        bit [23:16] vdec_axi_id_2_rd
//        bit [31:24] vdec_axi_id_3_rd
//   1 -  bit [7:0]   vdec_axi_id_4_rd
//        bit [15:8]  vdec_axi_id_5_rd
//        bit [23:16] vdec_axi_id_6_rd
//        bit [30:24] reserved
//        bit [31]    vdec_lockdown_rd
//   2 -  bit [7:0]   vdec_axi_id_0_wr
//        bit [15:8]  vdec_axi_id_1_wr
//        bit [23:16] vdec_axi_id_2_wr
//        bit [31:24] vdec_axi_id_3_wr
//   3 -  bit [7:0]   vdec_axi_id_4_wr
//        bit [15:8]  vdec_axi_id_5_wr
//        bit [23:16] vdec_axi_id_6_wr
//        bit [30:24] reserved
//        bit [31]    vdec_lockdown_wr
//   4 -  bit [7:0]   hevc_f_axi_id_0_rd (hevc_axi_id_0_rd for single AXI)
//        bit [15:8]  hevc_f_axi_id_1_rd (hevc_axi_id_1_rd for single AXI)
//        bit [23:16] hevc_f_axi_id_2_rd (hevc_axi_id_2_rd for single AXI)
//        bit [31:24] hevc_f_axi_id_3_rd (hevc_axi_id_3_rd for single AXI)
//   5 -  bit [7:0]   hevc_f_axi_id_4_rd (hevc_axi_id_4_rd for single AXI)
//        bit [15:8]  hevc_f_axi_id_5_rd (hevc_axi_id_5_rd for single AXI)
//        bit [23:16] hevc_f_axi_id_6_rd (hevc_axi_id_6_rd for single AXI)
//        bit [30:24] reserved
//        bit [31]    hevc_f_lockdown_rd
//   6 -  bit [7:0]   hevc_f_axi_id_0_wr (hevc_axi_id_0_wr for single AXI)
//        bit [15:8]  hevc_f_axi_id_1_wr (hevc_axi_id_1_wr for single AXI)
//        bit [23:16] hevc_f_axi_id_2_wr (hevc_axi_id_2_wr for single AXI)
//        bit [31:24] hevc_f_axi_id_3_wr (hevc_axi_id_3_wr for single AXI)
//   7 -  bit [7:0]   hevc_f_axi_id_4_wr (hevc_axi_id_4_wr for single AXI)
//        bit [15:8]  hevc_f_axi_id_5_wr (hevc_axi_id_5_wr for single AXI)
//        bit [23:16] hevc_f_axi_id_6_wr (hevc_axi_id_6_wr for single AXI)
//        bit [30:24] reserved
//        bit [31]    hevc_f_lockdown_wr
//   8 -  bit [7:0]   hevc_b_axi_id_0_rd (hevc_axi_id_7_rd for single AXI)
//        bit [15:8]  hevc_b_axi_id_1_rd (hevc_axi_id_8_rd for single AXI)
//        bit [23:16] hevc_b_axi_id_2_rd (hevc_axi_id_9_rd for single AXI)
//        bit [31:24] hevc_b_axi_id_3_rd (hevc_axi_id_10_rd for single AXI)
//   9 -  bit [7:0]   hevc_b_axi_id_4_rd (hevc_axi_id_11_rd for single AXI)
//        bit [15:8]  hevc_b_axi_id_5_rd (hevc_axi_id_12_rd for single AXI)
//        bit [23:16] hevc_b_axi_id_6_rd (hevc_axi_id_13_rd for single AXI)
//        bit [30:24] reserved
//        bit [31]    hevc_b_lockdown_rd
//  10 -  bit [7:0]   hevc_b_axi_id_0_wr (hevc_axi_id_7_wr for single AXI)
//        bit [15:8]  hevc_b_axi_id_1_wr (hevc_axi_id_8_wr for single AXI)
//        bit [23:16] hevc_b_axi_id_2_wr (hevc_axi_id_9_wr for single AXI)
//        bit [31:24] hevc_b_axi_id_3_wr (hevc_axi_id_10_wr for single AXI)
//  11 -  bit [7:0]   hevc_b_axi_id_4_wr (hevc_axi_id_11_wr for single AXI)
//        bit [15:8]  hevc_b_axi_id_5_wr (hevc_axi_id_12_wr for single AXI)
//        bit [23:16] hevc_b_axi_id_6_wr (hevc_axi_id_13_wr for single AXI)
//        bit [30:24] reserved
//        bit [31]    hevc_b_lockdown_wr
//  12 -  bit [7:0]   hcodec_axi_id_0_rd
//        bit [15:8]  hcodec_axi_id_1_rd
//        bit [23:16] hcodec_axi_id_2_rd
//        bit [31:24] hcodec_axi_id_3_rd
//  13 -  bit [7:0]   hcodec_axi_id_4_rd
//        bit [15:8]  hcodec_axi_id_5_rd
//        bit [23:16] hcodec_axi_id_6_rd
//        bit [30:24] reserved
//        bit [31]    hcodec_lockdown_rd
//  14 -  bit [7:0]   hcodec_axi_id_0_wr
//        bit [15:8]  hcodec_axi_id_1_wr
//        bit [23:16] hcodec_axi_id_2_wr
//        bit [31:24] hcodec_axi_id_3_wr
//  15 -  bit [7:0]   hcodec_axi_id_4_wr
//        bit [15:8]  hcodec_axi_id_5_wr
//        bit [23:16] hcodec_axi_id_6_wr
//        bit [30:24] reserved
//        bit [31]    hcodec_lockdown_wr
#define P_VDEC2_DOS_AXI_ID_MAP_DATA                (volatile uint32_t *)0xfe32fe38
#define P_VDEC2_DOS_HEVC_PATH_CTL                  (volatile uint32_t *)0xfe32fe3c
//======================================
//  CPU Assist module
//
//======================================
#define P_VDEC2_ASSIST_AMR_SCRATCH0                (volatile uint32_t *)0xfe32fd80
#define P_VDEC2_ASSIST_AMR_SCRATCH1                (volatile uint32_t *)0xfe32fd84
#define P_VDEC2_ASSIST_AMR_SCRATCH2                (volatile uint32_t *)0xfe32fd88
#define P_VDEC2_ASSIST_AMR_SCRATCH3                (volatile uint32_t *)0xfe32fd8c
#define P_VDEC2_ASSIST_SPARE16_REG1                (volatile uint32_t *)0xfe32fd90
#define P_VDEC2_ASSIST_SPARE16_REG2                (volatile uint32_t *)0xfe32fd94
#define P_VDEC2_ASSIST_SPARE8_REG1                 (volatile uint32_t *)0xfe32fd98
#define P_VDEC2_ASSIST_SPARE8_REG2                 (volatile uint32_t *)0xfe32fd9c
#define P_VDEC2_ASSIST_SPARE8_REG3                 (volatile uint32_t *)0xfe32fda0
#define P_VDEC2_AC3_CTRL_REG1                      (volatile uint32_t *)0xfe32fda4
#define P_VDEC2_AC3_CTRL_REG2                      (volatile uint32_t *)0xfe32fda8
#define P_VDEC2_AC3_CTRL_REG3                      (volatile uint32_t *)0xfe32fdac
#define P_VDEC2_AC3_CTRL_REG4                      (volatile uint32_t *)0xfe32fdb0
#define P_VDEC2_ASSIST_GEN_CNTL                    (volatile uint32_t *)0xfe32fdb4
#define P_VDEC2_EE_ASSIST_MBOX0_IRQ_REG            (volatile uint32_t *)0xfe32fdc0
#define P_VDEC2_EE_ASSIST_MBOX0_CLR_REG            (volatile uint32_t *)0xfe32fdc4
#define P_VDEC2_EE_ASSIST_MBOX0_MASK               (volatile uint32_t *)0xfe32fdc8
#define P_VDEC2_EE_ASSIST_MBOX0_FIQ_SEL            (volatile uint32_t *)0xfe32fdcc
#define P_VDEC2_EE_ASSIST_MBOX1_IRQ_REG            (volatile uint32_t *)0xfe32fdd0
#define P_VDEC2_EE_ASSIST_MBOX1_CLR_REG            (volatile uint32_t *)0xfe32fdd4
#define P_VDEC2_EE_ASSIST_MBOX1_MASK               (volatile uint32_t *)0xfe32fdd8
#define P_VDEC2_EE_ASSIST_MBOX1_FIQ_SEL            (volatile uint32_t *)0xfe32fddc
#define P_VDEC2_EE_ASSIST_MBOX2_IRQ_REG            (volatile uint32_t *)0xfe32fde0
#define P_VDEC2_EE_ASSIST_MBOX2_CLR_REG            (volatile uint32_t *)0xfe32fde4
#define P_VDEC2_EE_ASSIST_MBOX2_MASK               (volatile uint32_t *)0xfe32fde8
#define P_VDEC2_EE_ASSIST_MBOX2_FIQ_SEL            (volatile uint32_t *)0xfe32fdec
#define P_VDEC2_EE_ASSIST_MBOX3_IRQ_REG            (volatile uint32_t *)0xfe32fdf0
#define P_VDEC2_EE_ASSIST_MBOX3_CLR_REG            (volatile uint32_t *)0xfe32fdf4
#define P_VDEC2_EE_ASSIST_MBOX3_MASK               (volatile uint32_t *)0xfe32fdf8
#define P_VDEC2_EE_ASSIST_MBOX3_FIQ_SEL            (volatile uint32_t *)0xfe32fdfc
#define P_VDEC2_EE_ASSIST_MBOX_EN_0                (volatile uint32_t *)0xfe32fe40
#define P_VDEC2_EE_ASSIST_MBOX_EN_1                (volatile uint32_t *)0xfe32fe44
#define P_VDEC2_EE_ASSIST_MBOX_EN_2                (volatile uint32_t *)0xfe32fe48
#define P_VDEC2_EE_ASSIST_MBOX_EN_3                (volatile uint32_t *)0xfe32fe4c
#define P_VDEC2_DOS_SECURE_REMAP_HEVC_F_WR         (volatile uint32_t *)0xfe32fe54
#define P_VDEC2_DOS_SECURE_REMAP_HEVC_B_WR         (volatile uint32_t *)0xfe32fe58
#define P_VDEC2_DOS_SECURE_REMAP_VDEC_WR           (volatile uint32_t *)0xfe32fe5c
#define P_VDEC2_DOS_SECURE_REMAP_HCODEC_WR         (volatile uint32_t *)0xfe32fe60
#define P_VDEC2_DOS_SECURE_REMAP_HEVC_F_RD         (volatile uint32_t *)0xfe32fe64
#define P_VDEC2_DOS_SECURE_REMAP_HEVC_B_RD         (volatile uint32_t *)0xfe32fe68
#define P_VDEC2_DOS_SECURE_REMAP_VDEC_RD           (volatile uint32_t *)0xfe32fe6c
#define P_VDEC2_DOS_SECURE_REMAP_HCODEC_RD         (volatile uint32_t *)0xfe32fe70
// Just for DOS module regression
//-----------------------------------------------------------
// PARSER
//-----------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  PARSER_CBUS_BASE = 0x38
// -----------------------------------------------
//
// Closing file:  ./dos_param.h
//
//
// Reading file:  ./dos_param.h
//
//------------------------------------------------------------------------------
// Define all modules' base address under DOS
// APB allocation from 32'hd0050000
//------------------------------------------------------------------------------
// Define base address for VDEC module under DOS:
//  DOS_VDEC_ASSIST_BASE_ADDR       14'h0000
//  DOS_VDEC_MDEC_BASE_ADDR         14'h0900
//  DOS_VDEC_VLD_BASE_ADDR          14'h0c00
//  DOS_VDEC_IQIDCT_BASE_ADDR       14'h0e00
//  DOS_VDEC_VCPU_BASE_ADDR         14'h0300
//  DOS_VDEC_RESERVED_BASE_ADDR     14'h0f00 // Do not use this offset
// Define base address for DOS top-level register module:
//  DOS_TOP_BASE_ADDR               14'h3f00
//------------------------------------------------------------------------------
// VDEC_ASSIST module level register offset
//------------------------------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_VDEC_ASSIST_CBUS_BASE = 0x00
// -----------------------------------------------
#define P_VDEC2_VDEC_ASSIST_MMC_CTRL0              (volatile uint32_t *)0xfe328004
#define P_VDEC2_VDEC_ASSIST_MMC_CTRL1              (volatile uint32_t *)0xfe328008
#define P_VDEC2_VDEC_ASSIST_MMC_CTRL2              (volatile uint32_t *)0xfe32800c
#define P_VDEC2_VDEC_ASSIST_MMC_CTRL3              (volatile uint32_t *)0xfe328010
// bit[11]  canvas_blk32_wr
// bit[10]  canvas_blk32
// bit[9]   Reserved
// bit[8]   canvas_index_wr
// bit[7:0] canvas_index
#define P_VDEC2_VDEC_ASSIST_CANVAS_BLK32           (volatile uint32_t *)0xfe328014
#define P_VDEC2_VDEC_ASSIST_AMR1_INT0              (volatile uint32_t *)0xfe328094
#define P_VDEC2_VDEC_ASSIST_AMR1_INT1              (volatile uint32_t *)0xfe328098
#define P_VDEC2_VDEC_ASSIST_AMR1_INT2              (volatile uint32_t *)0xfe32809c
#define P_VDEC2_VDEC_ASSIST_AMR1_INT3              (volatile uint32_t *)0xfe3280a0
#define P_VDEC2_VDEC_ASSIST_AMR1_INT4              (volatile uint32_t *)0xfe3280a4
#define P_VDEC2_VDEC_ASSIST_AMR1_INT5              (volatile uint32_t *)0xfe3280a8
#define P_VDEC2_VDEC_ASSIST_AMR1_INT6              (volatile uint32_t *)0xfe3280ac
#define P_VDEC2_VDEC_ASSIST_AMR1_INT7              (volatile uint32_t *)0xfe3280b0
#define P_VDEC2_VDEC_ASSIST_AMR1_INT8              (volatile uint32_t *)0xfe3280b4
#define P_VDEC2_VDEC_ASSIST_AMR1_INT9              (volatile uint32_t *)0xfe3280b8
#define P_VDEC2_VDEC_ASSIST_AMR1_INTA              (volatile uint32_t *)0xfe3280bc
#define P_VDEC2_VDEC_ASSIST_AMR1_INTB              (volatile uint32_t *)0xfe3280c0
#define P_VDEC2_VDEC_ASSIST_AMR1_INTC              (volatile uint32_t *)0xfe3280c4
#define P_VDEC2_VDEC_ASSIST_AMR1_INTD              (volatile uint32_t *)0xfe3280c8
#define P_VDEC2_VDEC_ASSIST_AMR1_INTE              (volatile uint32_t *)0xfe3280cc
#define P_VDEC2_VDEC_ASSIST_AMR1_INTF              (volatile uint32_t *)0xfe3280d0
#define P_VDEC2_VDEC_ASSIST_AMR2_INT0              (volatile uint32_t *)0xfe3280d4
#define P_VDEC2_VDEC_ASSIST_AMR2_INT1              (volatile uint32_t *)0xfe3280d8
#define P_VDEC2_VDEC_ASSIST_AMR2_INT2              (volatile uint32_t *)0xfe3280dc
#define P_VDEC2_VDEC_ASSIST_AMR2_INT3              (volatile uint32_t *)0xfe3280e0
#define P_VDEC2_VDEC_ASSIST_AMR2_INT4              (volatile uint32_t *)0xfe3280e4
#define P_VDEC2_VDEC_ASSIST_AMR2_INT5              (volatile uint32_t *)0xfe3280e8
#define P_VDEC2_VDEC_ASSIST_AMR2_INT6              (volatile uint32_t *)0xfe3280ec
#define P_VDEC2_VDEC_ASSIST_AMR2_INT7              (volatile uint32_t *)0xfe3280f0
#define P_VDEC2_VDEC_ASSIST_AMR2_INT8              (volatile uint32_t *)0xfe3280f4
#define P_VDEC2_VDEC_ASSIST_AMR2_INT9              (volatile uint32_t *)0xfe3280f8
#define P_VDEC2_VDEC_ASSIST_AMR2_INTA              (volatile uint32_t *)0xfe3280fc
#define P_VDEC2_VDEC_ASSIST_AMR2_INTB              (volatile uint32_t *)0xfe328100
#define P_VDEC2_VDEC_ASSIST_AMR2_INTC              (volatile uint32_t *)0xfe328104
#define P_VDEC2_VDEC_ASSIST_AMR2_INTD              (volatile uint32_t *)0xfe328108
#define P_VDEC2_VDEC_ASSIST_AMR2_INTE              (volatile uint32_t *)0xfe32810c
#define P_VDEC2_VDEC_ASSIST_AMR2_INTF              (volatile uint32_t *)0xfe328110
#define P_VDEC2_VDEC_ASSIST_MBX_SSEL               (volatile uint32_t *)0xfe328114
// write - request disable to each of 16 channels
// read  - disable status of each of 16 channels ( 1 - disabled)
#define P_VDEC2_VDEC_ASSIST_DBUS_DISABLE           (volatile uint32_t *)0xfe328118
// support up to 15 configurable high 2-bits according to id
// 8 bits for one set - {high-bits[1:0], id[5:0]}
// bit[7:0] of VDEC_AXI34_CONFIG_0 is special for default and rw control
// bit[7:6] default wr high 2bits ( For no match found id)
// bit[5:4] default rd high 2bits ( For no match found id)
// bit[3:2] config[3:2] if write only
// bit[1:0] config[1:0] if read only
#define P_VDEC2_VDEC_AXI34_CONFIG_0                (volatile uint32_t *)0xfe328140
#define P_VDEC2_VDEC_AXI34_CONFIG_1                (volatile uint32_t *)0xfe328144
#define P_VDEC2_VDEC_AXI34_CONFIG_2                (volatile uint32_t *)0xfe328148
#define P_VDEC2_VDEC_AXI34_CONFIG_3                (volatile uint32_t *)0xfe32814c
#define P_VDEC2_VDEC_AXI34_CONFIG_4                (volatile uint32_t *)0xfe328150
#define P_VDEC2_VDEC_AXI34_CONFIG_5                (volatile uint32_t *)0xfe328154
#define P_VDEC2_VDEC_AXI34_CONFIG_6                (volatile uint32_t *)0xfe328158
#define P_VDEC2_VDEC_AXI34_CONFIG_7                (volatile uint32_t *)0xfe32815c
#define P_VDEC2_VDEC_ASSIST_TIMER0_LO              (volatile uint32_t *)0xfe328180
#define P_VDEC2_VDEC_ASSIST_TIMER0_HI              (volatile uint32_t *)0xfe328184
#define P_VDEC2_VDEC_ASSIST_TIMER1_LO              (volatile uint32_t *)0xfe328188
#define P_VDEC2_VDEC_ASSIST_TIMER1_HI              (volatile uint32_t *)0xfe32818c
#define P_VDEC2_VDEC_ASSIST_DMA_INT                (volatile uint32_t *)0xfe328190
#define P_VDEC2_VDEC_ASSIST_DMA_INT_MSK            (volatile uint32_t *)0xfe328194
#define P_VDEC2_VDEC_ASSIST_DMA_INT2               (volatile uint32_t *)0xfe328198
#define P_VDEC2_VDEC_ASSIST_DMA_INT_MSK2           (volatile uint32_t *)0xfe32819c
#define P_VDEC2_VDEC_ASSIST_MBOX0_IRQ_REG          (volatile uint32_t *)0xfe3281c0
#define P_VDEC2_VDEC_ASSIST_MBOX0_CLR_REG          (volatile uint32_t *)0xfe3281c4
#define P_VDEC2_VDEC_ASSIST_MBOX0_MASK             (volatile uint32_t *)0xfe3281c8
#define P_VDEC2_VDEC_ASSIST_MBOX0_FIQ_SEL          (volatile uint32_t *)0xfe3281cc
#define P_VDEC2_VDEC_ASSIST_MBOX1_IRQ_REG          (volatile uint32_t *)0xfe3281d0
#define P_VDEC2_VDEC_ASSIST_MBOX1_CLR_REG          (volatile uint32_t *)0xfe3281d4
#define P_VDEC2_VDEC_ASSIST_MBOX1_MASK             (volatile uint32_t *)0xfe3281d8
#define P_VDEC2_VDEC_ASSIST_MBOX1_FIQ_SEL          (volatile uint32_t *)0xfe3281dc
#define P_VDEC2_VDEC_ASSIST_MBOX2_IRQ_REG          (volatile uint32_t *)0xfe3281e0
#define P_VDEC2_VDEC_ASSIST_MBOX2_CLR_REG          (volatile uint32_t *)0xfe3281e4
#define P_VDEC2_VDEC_ASSIST_MBOX2_MASK             (volatile uint32_t *)0xfe3281e8
#define P_VDEC2_VDEC_ASSIST_MBOX2_FIQ_SEL          (volatile uint32_t *)0xfe3281ec
//------------------------------------------------------------------------------
// VDEC2_ASSIST module level register offset
//------------------------------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_VDEC2_ASSIST_CBUS_BASE = 0x00
// -----------------------------------------------
#define P_VDEC2_VDEC2_ASSIST_MMC_CTRL0             (volatile uint32_t *)0xfe328004
#define P_VDEC2_VDEC2_ASSIST_MMC_CTRL1             (volatile uint32_t *)0xfe328008
#define P_VDEC2_VDEC2_ASSIST_AMR1_INT0             (volatile uint32_t *)0xfe328094
#define P_VDEC2_VDEC2_ASSIST_AMR1_INT1             (volatile uint32_t *)0xfe328098
#define P_VDEC2_VDEC2_ASSIST_AMR1_INT2             (volatile uint32_t *)0xfe32809c
#define P_VDEC2_VDEC2_ASSIST_AMR1_INT3             (volatile uint32_t *)0xfe3280a0
#define P_VDEC2_VDEC2_ASSIST_AMR1_INT4             (volatile uint32_t *)0xfe3280a4
#define P_VDEC2_VDEC2_ASSIST_AMR1_INT5             (volatile uint32_t *)0xfe3280a8
#define P_VDEC2_VDEC2_ASSIST_AMR1_INT6             (volatile uint32_t *)0xfe3280ac
#define P_VDEC2_VDEC2_ASSIST_AMR1_INT7             (volatile uint32_t *)0xfe3280b0
#define P_VDEC2_VDEC2_ASSIST_AMR1_INT8             (volatile uint32_t *)0xfe3280b4
#define P_VDEC2_VDEC2_ASSIST_AMR1_INT9             (volatile uint32_t *)0xfe3280b8
#define P_VDEC2_VDEC2_ASSIST_AMR1_INTA             (volatile uint32_t *)0xfe3280bc
#define P_VDEC2_VDEC2_ASSIST_AMR1_INTB             (volatile uint32_t *)0xfe3280c0
#define P_VDEC2_VDEC2_ASSIST_AMR1_INTC             (volatile uint32_t *)0xfe3280c4
#define P_VDEC2_VDEC2_ASSIST_AMR1_INTD             (volatile uint32_t *)0xfe3280c8
#define P_VDEC2_VDEC2_ASSIST_AMR1_INTE             (volatile uint32_t *)0xfe3280cc
#define P_VDEC2_VDEC2_ASSIST_AMR1_INTF             (volatile uint32_t *)0xfe3280d0
#define P_VDEC2_VDEC2_ASSIST_AMR2_INT0             (volatile uint32_t *)0xfe3280d4
#define P_VDEC2_VDEC2_ASSIST_AMR2_INT1             (volatile uint32_t *)0xfe3280d8
#define P_VDEC2_VDEC2_ASSIST_AMR2_INT2             (volatile uint32_t *)0xfe3280dc
#define P_VDEC2_VDEC2_ASSIST_AMR2_INT3             (volatile uint32_t *)0xfe3280e0
#define P_VDEC2_VDEC2_ASSIST_AMR2_INT4             (volatile uint32_t *)0xfe3280e4
#define P_VDEC2_VDEC2_ASSIST_AMR2_INT5             (volatile uint32_t *)0xfe3280e8
#define P_VDEC2_VDEC2_ASSIST_AMR2_INT6             (volatile uint32_t *)0xfe3280ec
#define P_VDEC2_VDEC2_ASSIST_AMR2_INT7             (volatile uint32_t *)0xfe3280f0
#define P_VDEC2_VDEC2_ASSIST_AMR2_INT8             (volatile uint32_t *)0xfe3280f4
#define P_VDEC2_VDEC2_ASSIST_AMR2_INT9             (volatile uint32_t *)0xfe3280f8
#define P_VDEC2_VDEC2_ASSIST_AMR2_INTA             (volatile uint32_t *)0xfe3280fc
#define P_VDEC2_VDEC2_ASSIST_AMR2_INTB             (volatile uint32_t *)0xfe328100
#define P_VDEC2_VDEC2_ASSIST_AMR2_INTC             (volatile uint32_t *)0xfe328104
#define P_VDEC2_VDEC2_ASSIST_AMR2_INTD             (volatile uint32_t *)0xfe328108
#define P_VDEC2_VDEC2_ASSIST_AMR2_INTE             (volatile uint32_t *)0xfe32810c
#define P_VDEC2_VDEC2_ASSIST_AMR2_INTF             (volatile uint32_t *)0xfe328110
#define P_VDEC2_VDEC2_ASSIST_MBX_SSEL              (volatile uint32_t *)0xfe328114
#define P_VDEC2_VDEC2_ASSIST_TIMER0_LO             (volatile uint32_t *)0xfe328180
#define P_VDEC2_VDEC2_ASSIST_TIMER0_HI             (volatile uint32_t *)0xfe328184
#define P_VDEC2_VDEC2_ASSIST_TIMER1_LO             (volatile uint32_t *)0xfe328188
#define P_VDEC2_VDEC2_ASSIST_TIMER1_HI             (volatile uint32_t *)0xfe32818c
#define P_VDEC2_VDEC2_ASSIST_DMA_INT               (volatile uint32_t *)0xfe328190
#define P_VDEC2_VDEC2_ASSIST_DMA_INT_MSK           (volatile uint32_t *)0xfe328194
#define P_VDEC2_VDEC2_ASSIST_DMA_INT2              (volatile uint32_t *)0xfe328198
#define P_VDEC2_VDEC2_ASSIST_DMA_INT_MSK2          (volatile uint32_t *)0xfe32819c
#define P_VDEC2_VDEC2_ASSIST_MBOX0_IRQ_REG         (volatile uint32_t *)0xfe3281c0
#define P_VDEC2_VDEC2_ASSIST_MBOX0_CLR_REG         (volatile uint32_t *)0xfe3281c4
#define P_VDEC2_VDEC2_ASSIST_MBOX0_MASK            (volatile uint32_t *)0xfe3281c8
#define P_VDEC2_VDEC2_ASSIST_MBOX0_FIQ_SEL         (volatile uint32_t *)0xfe3281cc
#define P_VDEC2_VDEC2_ASSIST_MBOX1_IRQ_REG         (volatile uint32_t *)0xfe3281d0
#define P_VDEC2_VDEC2_ASSIST_MBOX1_CLR_REG         (volatile uint32_t *)0xfe3281d4
#define P_VDEC2_VDEC2_ASSIST_MBOX1_MASK            (volatile uint32_t *)0xfe3281d8
#define P_VDEC2_VDEC2_ASSIST_MBOX1_FIQ_SEL         (volatile uint32_t *)0xfe3281dc
#define P_VDEC2_VDEC2_ASSIST_MBOX2_IRQ_REG         (volatile uint32_t *)0xfe3281e0
#define P_VDEC2_VDEC2_ASSIST_MBOX2_CLR_REG         (volatile uint32_t *)0xfe3281e4
#define P_VDEC2_VDEC2_ASSIST_MBOX2_MASK            (volatile uint32_t *)0xfe3281e8
#define P_VDEC2_VDEC2_ASSIST_MBOX2_FIQ_SEL         (volatile uint32_t *)0xfe3281ec
//------------------------------------------------------------------------------
// HCODEC_ASSIST module level register offset
//------------------------------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_HCODEC_ASSIST_CBUS_BASE = 0x00
// -----------------------------------------------
#define P_VDEC2_HCODEC_ASSIST_MMC_CTRL0            (volatile uint32_t *)0xfe328004
#define P_VDEC2_HCODEC_ASSIST_MMC_CTRL1            (volatile uint32_t *)0xfe328008
#define P_VDEC2_HCODEC_ASSIST_MMC_CTRL2            (volatile uint32_t *)0xfe32800c
#define P_VDEC2_HCODEC_ASSIST_MMC_CTRL3            (volatile uint32_t *)0xfe328010
// bit[11]  canvas_blk32_wr
// bit[10]  canvas_blk32
// bit[9]   Reserved
// bit[8]   canvas_index_wr
// bit[7:0] canvas_index
#define P_VDEC2_HCODEC_ASSIST_CANVAS_BLK32         (volatile uint32_t *)0xfe328014
//cfg_soft_rst = mfdin_reg0_crst[0]; // Soft Reset
//cfg_cg_cfe   = mfdin_reg0_crst[1]; // Clock Gating Forcing Enable
//cfg_dbuf_rst = mfdin_reg0_crst[2]; // Reset DBUF information
#define P_VDEC2_HCODEC_MFDIN_REG0_CRST             (volatile uint32_t *)0xfe328020
//cfg_iformat       = mfdin_reg1_ctrl[3:0]; // Data In Format: 0 :CANVAS 422 YCbCr<-one canvas,
                                                     //        1 :CANVAS 444 YCbCr(or RGB)<-one canvas,
                                                     //        2 :CANVAS 420 Y<-one CrCb<-one (NV21)
                                                     //        3 :CANVAS 420 Y<-one CbCr<-one (NV12)
                                                     //        4 :CANVAS 420 Y<-one Cb<-one Cr<-one
                                                     //        5 :CANVAS 444 Y<-one Cb<-one Cr<-one
                                                     //        6 : Reserved for other canvas mode
                                                     //        7 : should combine with cfg_ifmt_extra, for 10-12bits
                                                     //        8 :LINEAR RGB888 (24bit)
                                                     //        9 :LINEAR RGB565 (16bit)
                                                     //        10:LINEAR YUV422
                                                     //        11:LINEAR YUV420 (Note:Legacy mode not supported)
                                                     //        12~15: Reserved for other linear mode
//cfg_oformat       = mfdin_reg1_ctrl[5:4];  // Data Out Format: 0:420 1:422 2:444 3:reserved
//cfg_dsample_enable= mfdin_reg1_ctrl[6];    // Downsample Enable
//cfg_dsample_trunc = mfdin_reg1_ctrl[7];    // Downsample Addition Option: 0:Round 1:Truncated
//cfg_block_ysize   = mfdin_reg1_ctrl[8];    // 0:block-y-size=16, 1:block-y-size=8(for JPEG's efficiency)
//cfg_interp_enable = mfdin_reg1_ctrl[9];    // Chroma Interpolation Enable
//cfg_interp_mode   = mfdin_reg1_ctrl[11:10];// 0:average round 1:average truncated 2:repeat left 3:repeat right
//cfg_r2y_enable    = mfdin_reg1_ctrl[12];   // RGb->YUV Enable
//cfg_r2y_mode      = mfdin_reg1_ctrl[14:13];// RGb->YUV Mode
//cfg_rgb565_mode   = mfdin_reg1_ctrl[15];   // RGB565 mode: 0:fill zero in tail 1:fill zero in head
//cfg_ifmt_extra    = mfdin_reg1_ctrl[17:16];// when cfg_iformat==7,
                                             //        0: CANVAS 12bit 422, YCbCr<-one canvas{...Y1[11:0],C1[11:0],Y0[11:0],C0[11:0]}
                                             //        1: CANVAS 10bit 444, YCbCr<-one canvas{...2'b0,Y0[9:0],U0[9:0],V0[9:0]}
                                             //        2: CANVAS 10bit 422, YCbCr<-one canvas{...Y1[9:0],C1[9:0],Y0[9:0],C0[9:0]}
//cfg_reserved1     = mfdin_reg1_ctrl[18];   // Reserved
//cfg_nr_enable     = mfdin_reg1_ctrl[19];   // Noise Reduction Enable
//cfg_outofpic      = mfdin_reg1_ctrl[28:20];// Out Of Picture Control: [8]mode:0:extend 1:fixed, [7:0]fixed value
//cfg_rd_blktype    = mfdin_reg1_ctrl[30:29];// Block Type: 0:H264_I_PIC_ALL_4x4, 1:H264_P_PIC_Y_16x16_C_8x8, 2:JPEG_ALL_8x8, 3:Reserved
//cfg_rd_nonycintl  = mfdin_reg1_ctrl[31];   // 0:YC interleaved 1:YC non-interleaved(for JPEG)
#define P_VDEC2_HCODEC_MFDIN_REG1_CTRL             (volatile uint32_t *)0xfe328024
//mfdin_reg2: DEBUG Only Status
#define P_VDEC2_HCODEC_MFDIN_REG2_STAT             (volatile uint32_t *)0xfe328028
//cfg_canvas_index0  = mfdin_reg3_canv[7:0];  //canvas index 0
//cfg_canvas_index1  = mfdin_reg3_canv[15:8]; //canvas index 1
//cfg_canvas_index2  = mfdin_reg3_canv[23:16];//canvas index 2
//cfg_canv_idx0_bppx = mfdin_reg3_canv[25:24];//canvas bytes per pixel in x direction for index0, 0:half 1:1 2:2 3:3
//cfg_canv_idx1_bppx = mfdin_reg3_canv[27:26];//canvas bytes per pixel in x direction for index1, 0:half 1:1 2:2 3:3
//cfg_canv_idx0_bppy = mfdin_reg3_canv[29:28];//canvas bytes per pixel in y direction for index0, 0:half 1:1 2:2 3:3
//cfg_canv_idx1_bppy = mfdin_reg3_canv[31:30];//canvas bytes per pixel in y direction for index1, 0:half 1:1 2:2 3:3
#define P_VDEC2_HCODEC_MFDIN_REG3_CANV             (volatile uint32_t *)0xfe32802c
//cfg_bytes_per_line  = mfdin_reg4_lnr0[15:0];  //linear Bytes per line
//cfg_linear_bytes4p  = mfdin_reg4_lnr0[17:16]; //linear (Bytes per pixel) - 1
//cfg_linear_dbl2line = mfdin_reg4_lnr0[18];    //linear double size for odd line
#define P_VDEC2_HCODEC_MFDIN_REG4_LNR0             (volatile uint32_t *)0xfe328030
//cfg_base_address    = mfdin_reg5_lnr1[31:0];  //linear base address
#define P_VDEC2_HCODEC_MFDIN_REG5_LNR1             (volatile uint32_t *)0xfe328034
//assign cfg_r2y_trunc     = mfdin_reg6_dcfg[9];   //RGb->YUV Addition Option: 0:Round 1:Truncated
//assign cfg_dma_ugt       = mfdin_reg6_dcfg[8];   //DMA Urgent
//assign cfg_dma_thread_id = mfdin_reg6_dcfg[7:6]; //DMA Thread ID
//assign cfg_dma_burst_num = mfdin_reg6_dcfg[5:0]; //DMA Burst Number
#define P_VDEC2_HCODEC_MFDIN_REG6_DCFG             (volatile uint32_t *)0xfe328038
//cfg_soft_cmd = mfdin_reg7_scmd; // Soft Command [28]selfcleared start,[27:14]dmb_x,[13:0]dmb_y
#define P_VDEC2_HCODEC_MFDIN_REG7_SCMD             (volatile uint32_t *)0xfe32803c
//cfg_pic_xsize = mfdin_reg8_dmbl[23:12]; //pixel (x,y) at the beginning of last dmb in the picture, picture x size
//cfg_pic_ysize = mfdin_reg8_dmbl[11:0];  //picture y size
#define P_VDEC2_HCODEC_MFDIN_REG8_DMBL             (volatile uint32_t *)0xfe328040
//cfg_endian = mfdin_reg9_endn; //Endian Control
#define P_VDEC2_HCODEC_MFDIN_REG9_ENDN             (volatile uint32_t *)0xfe328044
//cfg_canv_biasx = mfdin_rega_cav1[23:12]; //canvas bias address x
//cfg_canv_biasy = mfdin_rega_cav1[11:0];  //canvas bias address y
#define P_VDEC2_HCODEC_MFDIN_REGA_CAV1             (volatile uint32_t *)0xfe328048
//cfg_amp_en = mfdin_regb_ampc[24];      //Amplitude Enable
//cfg_amp_cy = mfdin_regb_ampc[23:16];   //Amplitude Coeff Y
//cfg_amp_cu = mfdin_regb_ampc[15:8];    //Amplitude Coeff U
//cfg_amp_cv = mfdin_regb_ampc[7:0];     //Amplitude Coeff V
#define P_VDEC2_HCODEC_MFDIN_REGB_AMPC             (volatile uint32_t *)0xfe32804c
//cfg_mb_end = mfdin_regc_mblp; // Soft Command [28]mb end enable,[27:14]dmb_x,[13:0]dmb_y
#define P_VDEC2_HCODEC_MFDIN_REGC_MBLP             (volatile uint32_t *)0xfe328050
//       cfg_y_snr_en               = mfdin_reg0d[0];
//       cfg_y_snr_err_norm         = mfdin_reg0d[1];
// [3:0] cfg_y_snr_gau_bld_core     = mfdin_reg0d[5:2];
// [7:0] cfg_y_snr_gau_bld_ofst     = mfdin_reg0d[13:6];
// [5:0] cfg_y_snr_gau_bld_rate     = mfdin_reg0d[19:14];
// [5:0] cfg_y_snr_gau_alp0_min     = mfdin_reg0d[25:20];
// [5:0] cfg_y_snr_gau_alp0_max     = mfdin_reg0d[31:26];
#define P_VDEC2_HCODEC_MFDIN_REG0D                 (volatile uint32_t *)0xfe328054
//       cfg_y_tnr_en               = mfdin_reg0e[0];
//       cfg_y_tnr_mc_en            = mfdin_reg0e[1];
//       cfg_y_tnr_txt_mode         = mfdin_reg0e[2];
// [3:0] cfg_y_tnr_mot_sad_margin   = mfdin_reg0e[6:3];
// [5:0] cfg_y_tnr_alpha_min        = mfdin_reg0e[12:7];
// [5:0] cfg_y_tnr_alpha_max        = mfdin_reg0e[18:13];
// [5:0] cfg_y_tnr_deghost_os       = mfdin_reg0e[24:19];
#define P_VDEC2_HCODEC_MFDIN_REG0E                 (volatile uint32_t *)0xfe328058
// [3:0] cfg_y_tnr_mot_cortxt_rate  = mfdin_reg0f[3:0];
// [7:0] cfg_y_tnr_mot_distxt_ofst  = mfdin_reg0f[15:8];
// [3:0] cfg_y_tnr_mot_distxt_rate  = mfdin_reg0f[7:4];
// [7:0] cfg_y_tnr_mot_dismot_ofst  = mfdin_reg0f[23:16];
// [7:0] cfg_y_tnr_mot_frcsad_lock  = mfdin_reg0f[31:24];
#define P_VDEC2_HCODEC_MFDIN_REG0F                 (volatile uint32_t *)0xfe32805c
// [7:0] cfg_y_tnr_mot2alp_frc_gain = mfdin_reg10[7:0];
// [7:0] cfg_y_tnr_mot2alp_nrm_gain = mfdin_reg10[15:8];
// [7:0] cfg_y_tnr_mot2alp_dis_gain = mfdin_reg10[23:16];
// [5:0] cfg_y_tnr_mot2alp_dis_ofst = mfdin_reg10[29:24];
#define P_VDEC2_HCODEC_MFDIN_REG10                 (volatile uint32_t *)0xfe328060
// [7:0] cfg_y_bld_beta2alp_rate    = mfdin_reg11[7:0];
// [5:0] cfg_y_bld_beta_min         = mfdin_reg11[13:8];
// [5:0] cfg_y_bld_beta_max         = mfdin_reg11[19:14];
#define P_VDEC2_HCODEC_MFDIN_REG11                 (volatile uint32_t *)0xfe328064
// REG12~16 for Chroma, same as Luma
#define P_VDEC2_HCODEC_MFDIN_REG12                 (volatile uint32_t *)0xfe328068
#define P_VDEC2_HCODEC_MFDIN_REG13                 (volatile uint32_t *)0xfe32806c
#define P_VDEC2_HCODEC_MFDIN_REG14                 (volatile uint32_t *)0xfe328070
#define P_VDEC2_HCODEC_MFDIN_REG15                 (volatile uint32_t *)0xfe328074
#define P_VDEC2_HCODEC_MFDIN_REG16                 (volatile uint32_t *)0xfe328078
#define P_VDEC2_HCODEC_MFDIN_REG17                 (volatile uint32_t *)0xfe32807c
#define P_VDEC2_HCODEC_MFDIN_REG18                 (volatile uint32_t *)0xfe328080
#define P_VDEC2_HCODEC_MFDIN_REG19                 (volatile uint32_t *)0xfe328084
#define P_VDEC2_HCODEC_ASSIST_AMR1_INT0            (volatile uint32_t *)0xfe328094
#define P_VDEC2_HCODEC_ASSIST_AMR1_INT1            (volatile uint32_t *)0xfe328098
#define P_VDEC2_HCODEC_ASSIST_AMR1_INT2            (volatile uint32_t *)0xfe32809c
#define P_VDEC2_HCODEC_ASSIST_AMR1_INT3            (volatile uint32_t *)0xfe3280a0
#define P_VDEC2_HCODEC_ASSIST_AMR1_INT4            (volatile uint32_t *)0xfe3280a4
#define P_VDEC2_HCODEC_ASSIST_AMR1_INT5            (volatile uint32_t *)0xfe3280a8
#define P_VDEC2_HCODEC_ASSIST_AMR1_INT6            (volatile uint32_t *)0xfe3280ac
#define P_VDEC2_HCODEC_ASSIST_AMR1_INT7            (volatile uint32_t *)0xfe3280b0
#define P_VDEC2_HCODEC_ASSIST_AMR1_INT8            (volatile uint32_t *)0xfe3280b4
#define P_VDEC2_HCODEC_ASSIST_AMR1_INT9            (volatile uint32_t *)0xfe3280b8
#define P_VDEC2_HCODEC_ASSIST_AMR1_INTA            (volatile uint32_t *)0xfe3280bc
#define P_VDEC2_HCODEC_ASSIST_AMR1_INTB            (volatile uint32_t *)0xfe3280c0
#define P_VDEC2_HCODEC_ASSIST_AMR1_INTC            (volatile uint32_t *)0xfe3280c4
#define P_VDEC2_HCODEC_ASSIST_AMR1_INTD            (volatile uint32_t *)0xfe3280c8
#define P_VDEC2_HCODEC_ASSIST_AMR1_INTE            (volatile uint32_t *)0xfe3280cc
#define P_VDEC2_HCODEC_ASSIST_AMR1_INTF            (volatile uint32_t *)0xfe3280d0
#define P_VDEC2_HCODEC_ASSIST_AMR2_INT0            (volatile uint32_t *)0xfe3280d4
#define P_VDEC2_HCODEC_ASSIST_AMR2_INT1            (volatile uint32_t *)0xfe3280d8
#define P_VDEC2_HCODEC_ASSIST_AMR2_INT2            (volatile uint32_t *)0xfe3280dc
#define P_VDEC2_HCODEC_ASSIST_AMR2_INT3            (volatile uint32_t *)0xfe3280e0
#define P_VDEC2_HCODEC_ASSIST_AMR2_INT4            (volatile uint32_t *)0xfe3280e4
#define P_VDEC2_HCODEC_ASSIST_AMR2_INT5            (volatile uint32_t *)0xfe3280e8
#define P_VDEC2_HCODEC_ASSIST_AMR2_INT6            (volatile uint32_t *)0xfe3280ec
#define P_VDEC2_HCODEC_ASSIST_AMR2_INT7            (volatile uint32_t *)0xfe3280f0
#define P_VDEC2_HCODEC_ASSIST_AMR2_INT8            (volatile uint32_t *)0xfe3280f4
#define P_VDEC2_HCODEC_ASSIST_AMR2_INT9            (volatile uint32_t *)0xfe3280f8
#define P_VDEC2_HCODEC_ASSIST_AMR2_INTA            (volatile uint32_t *)0xfe3280fc
#define P_VDEC2_HCODEC_ASSIST_AMR2_INTB            (volatile uint32_t *)0xfe328100
#define P_VDEC2_HCODEC_ASSIST_AMR2_INTC            (volatile uint32_t *)0xfe328104
#define P_VDEC2_HCODEC_ASSIST_AMR2_INTD            (volatile uint32_t *)0xfe328108
#define P_VDEC2_HCODEC_ASSIST_AMR2_INTE            (volatile uint32_t *)0xfe32810c
#define P_VDEC2_HCODEC_ASSIST_AMR2_INTF            (volatile uint32_t *)0xfe328110
#define P_VDEC2_HCODEC_ASSIST_MBX_SSEL             (volatile uint32_t *)0xfe328114
#define P_VDEC2_HCODEC_ASSIST_TIMER0_LO            (volatile uint32_t *)0xfe328180
#define P_VDEC2_HCODEC_ASSIST_TIMER0_HI            (volatile uint32_t *)0xfe328184
#define P_VDEC2_HCODEC_ASSIST_TIMER1_LO            (volatile uint32_t *)0xfe328188
#define P_VDEC2_HCODEC_ASSIST_TIMER1_HI            (volatile uint32_t *)0xfe32818c
#define P_VDEC2_HCODEC_ASSIST_DMA_INT              (volatile uint32_t *)0xfe328190
#define P_VDEC2_HCODEC_ASSIST_DMA_INT_MSK          (volatile uint32_t *)0xfe328194
#define P_VDEC2_HCODEC_ASSIST_DMA_INT2             (volatile uint32_t *)0xfe328198
#define P_VDEC2_HCODEC_ASSIST_DMA_INT_MSK2         (volatile uint32_t *)0xfe32819c
// bit[7:6]   awaddr_axi_vlc_prefix
// bit[5:4]   araddr_axi_mfdin_prefix
// bit[3:2]   vcpu_lmem_dma_prefix
// bit[1:0]   vcpu_imem_dma_prefix
#define P_VDEC2_HCODEC_AXI34_CONFIG_0              (volatile uint32_t *)0xfe3281a0
#define P_VDEC2_HCODEC_AXI34_CONFIG_1              (volatile uint32_t *)0xfe3281a4
#define P_VDEC2_HCODEC_AXI34_CONFIG_2              (volatile uint32_t *)0xfe3281a8
#define P_VDEC2_HCODEC_AXI34_CONFIG_3              (volatile uint32_t *)0xfe3281ac
#define P_VDEC2_HCODEC_AXI34_CONFIG_4              (volatile uint32_t *)0xfe3281b0
#define P_VDEC2_HCODEC_AXI34_CONFIG_5              (volatile uint32_t *)0xfe3281b4
#define P_VDEC2_HCODEC_ASSIST_AXIADDR_PREFIX       (volatile uint32_t *)0xfe3281b8
#define P_VDEC2_HCODEC_ASSIST_MBOX0_IRQ_REG        (volatile uint32_t *)0xfe3281c0
#define P_VDEC2_HCODEC_ASSIST_MBOX0_CLR_REG        (volatile uint32_t *)0xfe3281c4
#define P_VDEC2_HCODEC_ASSIST_MBOX0_MASK           (volatile uint32_t *)0xfe3281c8
#define P_VDEC2_HCODEC_ASSIST_MBOX0_FIQ_SEL        (volatile uint32_t *)0xfe3281cc
#define P_VDEC2_HCODEC_ASSIST_MBOX1_IRQ_REG        (volatile uint32_t *)0xfe3281d0
#define P_VDEC2_HCODEC_ASSIST_MBOX1_CLR_REG        (volatile uint32_t *)0xfe3281d4
#define P_VDEC2_HCODEC_ASSIST_MBOX1_MASK           (volatile uint32_t *)0xfe3281d8
#define P_VDEC2_HCODEC_ASSIST_MBOX1_FIQ_SEL        (volatile uint32_t *)0xfe3281dc
#define P_VDEC2_HCODEC_ASSIST_MBOX2_IRQ_REG        (volatile uint32_t *)0xfe3281e0
#define P_VDEC2_HCODEC_ASSIST_MBOX2_CLR_REG        (volatile uint32_t *)0xfe3281e4
#define P_VDEC2_HCODEC_ASSIST_MBOX2_MASK           (volatile uint32_t *)0xfe3281e8
#define P_VDEC2_HCODEC_ASSIST_MBOX2_FIQ_SEL        (volatile uint32_t *)0xfe3281ec
#define P_VDEC2_HCODEC_ASSIST_AXI_CTRL             (volatile uint32_t *)0xfe3281f0
#define P_VDEC2_HCODEC_ASSIST_AXI_STATUS           (volatile uint32_t *)0xfe3281f4
#define P_VDEC2_HCODEC_ASSIST_AXI_SETTING_VLC      (volatile uint32_t *)0xfe3281f8
//------------------------------------------------------------------------------
// MDEC module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// VLD module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// IQ/IDCT module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// VCPU module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// HENC module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// VLC module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// QDCT module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// HCODEC MDEC module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// HCODEC VLD module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// HCODEC IQIDCT module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// HCODEC IQIDCT module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// HEVC_ASSIST module level register offset
//------------------------------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_ASSIST_CBUS_BASE = 0x00
// -----------------------------------------------
#define P_VDEC2_HEVC_ASSIST_AFIFO_CTRL             (volatile uint32_t *)0xfe328004
#define P_VDEC2_HEVC_ASSIST_AFIFO_CTRL1            (volatile uint32_t *)0xfe328008
#define P_VDEC2_HEVC_ASSIST_AUTO_CG_DISABLE        (volatile uint32_t *)0xfe32800c
#define P_VDEC2_HEVC_ASSIST_SW_RESET               (volatile uint32_t *)0xfe328010
#define P_VDEC2_HEVC_ASSIST_AFIFO_CTRL2            (volatile uint32_t *)0xfe328014
// bit[31:28] - hed_wr_id (Write Only)
// bit[31:16] - hed_fb_wr_total_page_num (Read Only)
// bit[15:12] - hed_wr_map_addr_id
// bit[11]    - hed_wr_flush
// bit[10:8]  - hed_wr_map_addr_endian
// bit[7]     - hed_wr_map_addr_active(Read Only)
// bit[6:2]   - wr_entry_pending_num(Read Only)
// bit[1]     - hed_fb_wr_addr_auto_rd
// bit[0]     - hed_fb_wr_en
#define P_VDEC2_HEVC_ASSIST_HED_FB_W_CTL           (volatile uint32_t *)0xfe328018
// bit[31:28] - hed_rd_id (Write Only)
// bit[27:16] - hed_rd_map_auto_halt_num (Write Only)
// bit[31:16] - hed_fb_rd_total_page_num (Read Only)
// bit[15:12] - hed_rd_map_addr_id
// bit[11]    - hed_rd_map_auto_halt_en
// bit[10:8]  - hed_rd_map_addr_endian
// bit[7]     - hed_rd_map_addr_active(Read Only)
// bit[6:2]   - rd_entry_pending_num
// bit[1]     - hed_fb_rd_addr_auto_rd
// bit[0]     - hed_fb_rd_en
#define P_VDEC2_HEVC_ASSIST_HED_FB_R_CTL           (volatile uint32_t *)0xfe32801c
// WRITE
// bit[31] - heb_fb_page_addr_target 0-wr_addr, 1-rd_addr
// bit[30:20] - Reserved
// bit[19:0] - heb_fb_page_addr (4k page)
// READ:
// bit[31]   - srdy_hed_fb_wr_addr
// bit[30]   - rrdy_hed_fb_wr_addr
// bit[29]   - srdy_hed_fb_rd_addr
// bit[28]   - rrdy_hed_fb_rd_addr
// bit[27]   - hed_fb_read_halt
// bit[26]   - hed_wrrsp_count[7]
// bit[25:21] - fb_rd_status
// bit[20] -    EOS_sent
// bit[19:16] - EOS_cnt
// bit[15:14] - hed_fb_write_status
// bit[13:7] - hed_rdrsp_count
// bit[6:0]  - hed_wrrsp_count
#define P_VDEC2_HEVC_ASSIST_HED_FB_ADDR            (volatile uint32_t *)0xfe328020
#define P_VDEC2_HEVC_ASSIST_MMU_MAP_ADDR           (volatile uint32_t *)0xfe328024
#define P_VDEC2_HEVC_ASSIST_FB_MMU_MAP_ADDR        (volatile uint32_t *)0xfe328028
#define P_VDEC2_HEVC_ASSIST_FBD_MMU_MAP_ADDR       (volatile uint32_t *)0xfe32802c
// bit[31:20] -- fb_read_lcu_y // READ only
// bit[19:8]  -- fb_read_lcu_x // READ only
// bit[7]     -- fb_read_lcu_latch
// bit[6:5]   -- reserved
// bit[4]  -- fb_disable_wr_iqit_buf
// bit[3]  -- fb_read_avs2_enable
// bit[2]  -- fb_read_vp9_enable
// bit[1]  -- fb_avs2_enable
// bit[0]  -- fb_vp9_enable
#define P_VDEC2_HEVC_ASSIST_HED_FB_CTL             (volatile uint32_t *)0xfe328030
// [31:16] height
// [15:0] width
#define P_VDEC2_HEVC_ASSIST_PIC_SIZE_FB_READ       (volatile uint32_t *)0xfe328034
#define P_VDEC2_HEVC_ASSIST_MMU_MAP_ADDR2          (volatile uint32_t *)0xfe328038
// bit[21:20] ipp_intralbuf_axiaddr_prefix
// bit[19:18] awaddr_axi_dma_prefix
// bit[17:16] araddr_axi_dma_prefix
// bit[15:14] awaddr_axi_stream_prefix
// bit[13:12] araddr_axi_stream_prefix
// bit[11:10] awaddr_axi_fb_prefix
// bit[9:8]   araddr_axi_fb_prefix
// bit[7:6]   vcpu_lmem_dma_prefix
// bit[5:4]   vcpu_imem_dma_prefix
// bit[3:2]   fb_wr_mmu_map_addr_prefix
// bit[1:0]   fb_rd_mmu_map_addr_prefix
#define P_VDEC2_HEVC_ASSIST_AXIADDR_PREFIX         (volatile uint32_t *)0xfe32803c
// bit[31]- parser_iqit_buff_clk_force_on
// bit[1] - parser_iqit_buff_bypass
// bit[0] - parser_iqit_buff_sw_rst
#define P_VDEC2_HEVC_PARSER_IQIT_BUFF_CTL          (volatile uint32_t *)0xfe328040
#define P_VDEC2_HEVC_PARSER_IQIT_BUFF_STATUS       (volatile uint32_t *)0xfe328044
#define P_VDEC2_HEVC_ASSIST_MMU_MAP_ADDR_DBE1      (volatile uint32_t *)0xfe328048
#define P_VDEC2_HEVC_ASSIST_GCLK_EN_DISABLE        (volatile uint32_t *)0xfe32804c
#define P_VDEC2_HEVC_ASSIST_AMR1_INT0              (volatile uint32_t *)0xfe328054
#define P_VDEC2_HEVC_ASSIST_AMR1_INT1              (volatile uint32_t *)0xfe328058
#define P_VDEC2_HEVC_ASSIST_AMR1_INT2              (volatile uint32_t *)0xfe32805c
#define P_VDEC2_HEVC_ASSIST_AMR1_INT3              (volatile uint32_t *)0xfe328060
#define P_VDEC2_HEVC_ASSIST_AMR1_INT4              (volatile uint32_t *)0xfe328064
#define P_VDEC2_HEVC_ASSIST_AMR1_INT5              (volatile uint32_t *)0xfe328068
#define P_VDEC2_HEVC_ASSIST_AMR1_INT6              (volatile uint32_t *)0xfe32806c
#define P_VDEC2_HEVC_ASSIST_AMR1_INT7              (volatile uint32_t *)0xfe328070
#define P_VDEC2_HEVC_ASSIST_AMR1_INT8              (volatile uint32_t *)0xfe328074
#define P_VDEC2_HEVC_ASSIST_AMR1_INT9              (volatile uint32_t *)0xfe328078
#define P_VDEC2_HEVC_ASSIST_AMR1_INTA              (volatile uint32_t *)0xfe32807c
#define P_VDEC2_HEVC_ASSIST_AMR1_INTB              (volatile uint32_t *)0xfe328080
#define P_VDEC2_HEVC_ASSIST_AMR1_INTC              (volatile uint32_t *)0xfe328084
#define P_VDEC2_HEVC_ASSIST_AMR1_INTD              (volatile uint32_t *)0xfe328088
#define P_VDEC2_HEVC_ASSIST_AMR1_INTE              (volatile uint32_t *)0xfe32808c
#define P_VDEC2_HEVC_ASSIST_AMR1_INTF              (volatile uint32_t *)0xfe328090
#define P_VDEC2_HEVC_ASSIST_AMR2_INT0              (volatile uint32_t *)0xfe328094
#define P_VDEC2_HEVC_ASSIST_AMR2_INT1              (volatile uint32_t *)0xfe328098
#define P_VDEC2_HEVC_ASSIST_AMR2_INT2              (volatile uint32_t *)0xfe32809c
#define P_VDEC2_HEVC_ASSIST_AMR2_INT3              (volatile uint32_t *)0xfe3280a0
#define P_VDEC2_HEVC_ASSIST_AMR2_INT4              (volatile uint32_t *)0xfe3280a4
#define P_VDEC2_HEVC_ASSIST_AMR2_INT5              (volatile uint32_t *)0xfe3280a8
#define P_VDEC2_HEVC_ASSIST_AMR2_INT6              (volatile uint32_t *)0xfe3280ac
#define P_VDEC2_HEVC_ASSIST_AMR2_INT7              (volatile uint32_t *)0xfe3280b0
#define P_VDEC2_HEVC_ASSIST_AMR2_INT8              (volatile uint32_t *)0xfe3280b4
#define P_VDEC2_HEVC_ASSIST_AMR2_INT9              (volatile uint32_t *)0xfe3280b8
#define P_VDEC2_HEVC_ASSIST_AMR2_INTA              (volatile uint32_t *)0xfe3280bc
#define P_VDEC2_HEVC_ASSIST_AMR2_INTB              (volatile uint32_t *)0xfe3280c0
#define P_VDEC2_HEVC_ASSIST_AMR2_INTC              (volatile uint32_t *)0xfe3280c4
#define P_VDEC2_HEVC_ASSIST_AMR2_INTD              (volatile uint32_t *)0xfe3280c8
#define P_VDEC2_HEVC_ASSIST_AMR2_INTE              (volatile uint32_t *)0xfe3280cc
#define P_VDEC2_HEVC_ASSIST_AMR2_INTF              (volatile uint32_t *)0xfe3280d0
#define P_VDEC2_HEVC_ASSIST_MBX_SSEL               (volatile uint32_t *)0xfe3280d4
#define P_VDEC2_HEVC_ASSIST_TIMER0_LO              (volatile uint32_t *)0xfe3280d8
#define P_VDEC2_HEVC_ASSIST_TIMER0_HI              (volatile uint32_t *)0xfe3280dc
#define P_VDEC2_HEVC_ASSIST_TIMER1_LO              (volatile uint32_t *)0xfe3280e0
#define P_VDEC2_HEVC_ASSIST_TIMER1_HI              (volatile uint32_t *)0xfe3280e4
#define P_VDEC2_HEVC_ASSIST_DMA_INT                (volatile uint32_t *)0xfe3280e8
#define P_VDEC2_HEVC_ASSIST_DMA_INT_MSK            (volatile uint32_t *)0xfe3280ec
#define P_VDEC2_HEVC_ASSIST_DMA_INT2               (volatile uint32_t *)0xfe3280f0
#define P_VDEC2_HEVC_ASSIST_DMA_INT_MSK2           (volatile uint32_t *)0xfe3280f4
#define P_VDEC2_HEVC_ASSIST_MBOX0_IRQ_REG          (volatile uint32_t *)0xfe328100
#define P_VDEC2_HEVC_ASSIST_MBOX0_CLR_REG          (volatile uint32_t *)0xfe328104
#define P_VDEC2_HEVC_ASSIST_MBOX0_MASK             (volatile uint32_t *)0xfe328108
#define P_VDEC2_HEVC_ASSIST_MBOX0_FIQ_SEL          (volatile uint32_t *)0xfe32810c
#define P_VDEC2_HEVC_ASSIST_MBOX1_IRQ_REG          (volatile uint32_t *)0xfe328110
#define P_VDEC2_HEVC_ASSIST_MBOX1_CLR_REG          (volatile uint32_t *)0xfe328114
#define P_VDEC2_HEVC_ASSIST_MBOX1_MASK             (volatile uint32_t *)0xfe328118
#define P_VDEC2_HEVC_ASSIST_MBOX1_FIQ_SEL          (volatile uint32_t *)0xfe32811c
#define P_VDEC2_HEVC_ASSIST_MBOX2_IRQ_REG          (volatile uint32_t *)0xfe328120
#define P_VDEC2_HEVC_ASSIST_MBOX2_CLR_REG          (volatile uint32_t *)0xfe328124
#define P_VDEC2_HEVC_ASSIST_MBOX2_MASK             (volatile uint32_t *)0xfe328128
#define P_VDEC2_HEVC_ASSIST_MBOX2_FIQ_SEL          (volatile uint32_t *)0xfe32812c
// bit[31:24] - read request
// bit[23:16] - write request
// bit[15] - disable_aml_axi_clk_gating_b
// bit[14] - disable_arb_b
// bit[13:12] - Reserved
// bit[11:8] - arb_switch_cnt_b
// bit[7] - disable_aml_axi_clk_gating
// bit[6] - disable_arb
// bit[5] - aw_urgent_out_en
// bit[4] - ar_urgent_out_en
// bit[3:0] - arb_switch_cnt
#define P_VDEC2_HEVC_ASSIST_AXI_CTRL               (volatile uint32_t *)0xfe328130
// bit[31:24] - read arb result
// bit[23:16] - write arb result
// bit[15:12] - read_ar_cnt
// bit[11:8] - write_aw_cnt
// bit[7] - arvalid_axi_s0
// bit[6] - arready_axi_s0
// bit[5] - awvalid_axi_s0
// bit[4] - awready_axi_s0
// bit[3:0] - write_fifo_cnt
#define P_VDEC2_HEVC_ASSIST_AXI_STATUS             (volatile uint32_t *)0xfe328134
// bit[31:24] - read request b
// bit[23:16] - write request b
// bit[15:0] - Reserved
#define P_VDEC2_HEVC_ASSIST_AXI_STATUS2_HI         (volatile uint32_t *)0xfe328138
// bit[31:24] - read arb result b
// bit[23:16] - write arb result b
// bit[15:12] - read_ar_cnt b
// bit[11:8] - write_aw_cnt b
// bit[7] - arvalid_axi_s0 b
// bit[6] - arready_axi_s0 b
// bit[5] - awvalid_axi_s0 b
// bit[4] - awready_axi_s0 b
// bit[3:0] - write_fifo_cnt b
#define P_VDEC2_HEVC_ASSIST_AXI_STATUS2_LO         (volatile uint32_t *)0xfe32813c
// bit[7:4] - FB read AXI ID
// bit[3:0] - FB write AXI ID, MSB 3 bits
#define P_VDEC2_HEVC_ASSIST_FB_CTL                 (volatile uint32_t *)0xfe328140
#define P_VDEC2_HEVC_ASSIST_FB_W_CTL               (volatile uint32_t *)0xfe328144
#define P_VDEC2_HEVC_ASSIST_FB_W_CTL1              (volatile uint32_t *)0xfe328148
#define P_VDEC2_HEVC_ASSIST_FB_WID                 (volatile uint32_t *)0xfe32814c
#define P_VDEC2_HEVC_ASSIST_FB_R_CTL               (volatile uint32_t *)0xfe328150
#define P_VDEC2_HEVC_ASSIST_FB_R_CTL1              (volatile uint32_t *)0xfe328154
#define P_VDEC2_HEVC_ASSIST_FB_RID                 (volatile uint32_t *)0xfe328158
#define P_VDEC2_HEVC_ASSIST_PIC_SIZE_FB_READ1      (volatile uint32_t *)0xfe32815c
#define P_VDEC2_HEVC_ASSIST_FB_PIC_CLR             (volatile uint32_t *)0xfe328160
#define P_VDEC2_HEVC_ASSIST_BACKCORE_INT_STATUS    (volatile uint32_t *)0xfe328164
#define P_VDEC2_HEVC_ASSIST_SCRATCH_0              (volatile uint32_t *)0xfe3282c0
#define P_VDEC2_HEVC_ASSIST_SCRATCH_1              (volatile uint32_t *)0xfe3282c4
#define P_VDEC2_HEVC_ASSIST_SCRATCH_2              (volatile uint32_t *)0xfe3282c8
#define P_VDEC2_HEVC_ASSIST_SCRATCH_3              (volatile uint32_t *)0xfe3282cc
#define P_VDEC2_HEVC_ASSIST_SCRATCH_4              (volatile uint32_t *)0xfe3282d0
#define P_VDEC2_HEVC_ASSIST_SCRATCH_5              (volatile uint32_t *)0xfe3282d4
#define P_VDEC2_HEVC_ASSIST_SCRATCH_6              (volatile uint32_t *)0xfe3282d8
#define P_VDEC2_HEVC_ASSIST_SCRATCH_7              (volatile uint32_t *)0xfe3282dc
#define P_VDEC2_HEVC_ASSIST_SCRATCH_8              (volatile uint32_t *)0xfe3282e0
#define P_VDEC2_HEVC_ASSIST_SCRATCH_9              (volatile uint32_t *)0xfe3282e4
#define P_VDEC2_HEVC_ASSIST_SCRATCH_A              (volatile uint32_t *)0xfe3282e8
#define P_VDEC2_HEVC_ASSIST_SCRATCH_B              (volatile uint32_t *)0xfe3282ec
#define P_VDEC2_HEVC_ASSIST_SCRATCH_C              (volatile uint32_t *)0xfe3282f0
#define P_VDEC2_HEVC_ASSIST_SCRATCH_D              (volatile uint32_t *)0xfe3282f4
#define P_VDEC2_HEVC_ASSIST_SCRATCH_E              (volatile uint32_t *)0xfe3282f8
#define P_VDEC2_HEVC_ASSIST_SCRATCH_F              (volatile uint32_t *)0xfe3282fc
#define P_VDEC2_HEVC_ASSIST_SCRATCH_G              (volatile uint32_t *)0xfe328300
#define P_VDEC2_HEVC_ASSIST_SCRATCH_H              (volatile uint32_t *)0xfe328304
#define P_VDEC2_HEVC_ASSIST_SCRATCH_I              (volatile uint32_t *)0xfe328308
#define P_VDEC2_HEVC_ASSIST_SCRATCH_J              (volatile uint32_t *)0xfe32830c
#define P_VDEC2_HEVC_ASSIST_SCRATCH_K              (volatile uint32_t *)0xfe328310
#define P_VDEC2_HEVC_ASSIST_SCRATCH_L              (volatile uint32_t *)0xfe328314
#define P_VDEC2_HEVC_ASSIST_SCRATCH_M              (volatile uint32_t *)0xfe328318
#define P_VDEC2_HEVC_ASSIST_SCRATCH_N              (volatile uint32_t *)0xfe32831c
#define P_VDEC2_HEVC_ASSIST_SCRATCH_O              (volatile uint32_t *)0xfe328320
#define P_VDEC2_HEVC_ASSIST_SCRATCH_P              (volatile uint32_t *)0xfe328324
#define P_VDEC2_HEVC_ASSIST_SCRATCH_Q              (volatile uint32_t *)0xfe328328
#define P_VDEC2_HEVC_ASSIST_SCRATCH_R              (volatile uint32_t *)0xfe32832c
#define P_VDEC2_HEVC_ASSIST_SCRATCH_S              (volatile uint32_t *)0xfe328330
#define P_VDEC2_HEVC_ASSIST_SCRATCH_T              (volatile uint32_t *)0xfe328334
#define P_VDEC2_HEVC_ASSIST_SCRATCH_U              (volatile uint32_t *)0xfe328338
#define P_VDEC2_HEVC_ASSIST_SCRATCH_V              (volatile uint32_t *)0xfe32833c
#define P_VDEC2_HEVC_ASSIST_SCRATCH_W              (volatile uint32_t *)0xfe328340
#define P_VDEC2_HEVC_ASSIST_SCRATCH_X              (volatile uint32_t *)0xfe328344
#define P_VDEC2_HEVC_ASSIST_SCRATCH_Y              (volatile uint32_t *)0xfe328348
#define P_VDEC2_HEVC_ASSIST_SCRATCH_Z              (volatile uint32_t *)0xfe32834c
#define P_VDEC2_HEVC_ASSIST_SCRATCH_10             (volatile uint32_t *)0xfe328350
#define P_VDEC2_HEVC_ASSIST_SCRATCH_11             (volatile uint32_t *)0xfe328354
#define P_VDEC2_HEVC_ASSIST_SCRATCH_12             (volatile uint32_t *)0xfe328358
#define P_VDEC2_HEVC_ASSIST_SCRATCH_13             (volatile uint32_t *)0xfe32835c
#define P_VDEC2_HEVC_ASSIST_SCRATCH_14             (volatile uint32_t *)0xfe328360
#define P_VDEC2_HEVC_ASSIST_SCRATCH_15             (volatile uint32_t *)0xfe328364
#define P_VDEC2_HEVC_ASSIST_SCRATCH_16             (volatile uint32_t *)0xfe328368
#define P_VDEC2_HEVC_ASSIST_SCRATCH_17             (volatile uint32_t *)0xfe32836c
#define P_VDEC2_HEVC_ASSIST_SCRATCH_18             (volatile uint32_t *)0xfe328370
#define P_VDEC2_HEVC_ASSIST_SCRATCH_19             (volatile uint32_t *)0xfe328374
#define P_VDEC2_HEVC_ASSIST_DEBUG_0                (volatile uint32_t *)0xfe328380
#define P_VDEC2_HEVC_ASSIST_DEBUG_1                (volatile uint32_t *)0xfe328384
#define P_VDEC2_HEVC_ASSIST_DEBUG_2                (volatile uint32_t *)0xfe328388
#define P_VDEC2_HEVC_ASSIST_DEBUG_3                (volatile uint32_t *)0xfe32838c
#define P_VDEC2_HEVC_ASSIST_DEBUG_4                (volatile uint32_t *)0xfe328390
#define P_VDEC2_HEVC_ASSIST_DEBUG_5                (volatile uint32_t *)0xfe328394
#define P_VDEC2_HEVC_ASSIST_DEBUG_6                (volatile uint32_t *)0xfe328398
#define P_VDEC2_HEVC_ASSIST_DEBUG_7                (volatile uint32_t *)0xfe32839c
#define P_VDEC2_HEVC_ASSIST_DEBUG_8                (volatile uint32_t *)0xfe3283a0
#define P_VDEC2_HEVC_ASSIST_DEBUG_9                (volatile uint32_t *)0xfe3283a4
#define P_VDEC2_HEVC_ASSIST_DEBUG_A                (volatile uint32_t *)0xfe3283a8
#define P_VDEC2_HEVC_ASSIST_DEBUG_B                (volatile uint32_t *)0xfe3283ac
#define P_VDEC2_HEVC_ASSIST_DEBUG_C                (volatile uint32_t *)0xfe3283b0
#define P_VDEC2_HEVC_ASSIST_MIRROR_CONFIG          (volatile uint32_t *)0xfe3283b4
#define P_VDEC2_HEVC_ASSIST_CRC_INDEX              (volatile uint32_t *)0xfe3283b8
#define P_VDEC2_HEVC_ASSIST_CRC_VALUE              (volatile uint32_t *)0xfe3283bc
//------------------------------------------------------------------------------
// HEVC_ASSIST module level register offset
// Same as VDEC/HCODEC to avoid confusing software guy
//------------------------------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_VCPU_CBUS_BASE = 0x03
// -----------------------------------------------
//------------------------------------------------------------------------------
// HEVC_PARSER module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// HEVC_MPRED module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// HEVC_IPP module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// HEVC_DBLK module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// HEVC_SAO module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// HEVC_IQIT module level register offset
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//  DOS top-level register offset
//------------------------------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_TOP_CBUS_BASE = 0x3f
// -----------------------------------------------
// [0]  reserved
// [1]  Reset Dos top level registers, except sw_reset0/1/2 which is only reset by external reset_n.
// [2]  VDEC1 Reset assist, mdec's CBUS
// [3]  VDEC1 Reset mdec's VLD
// [4]  VDEC1 Reset mdec's VLD
// [5]  VDEC1 Reset mdec's VLD
// [6]  VDEC1 Reset mdec's IQIDCT
// [7]  VDEC1 Reset mdec's MC
// [8]  VDEC1 Reset mdec's DBLK
// [9]  VDEC1 Reset mdec's PIC_DC
// [10] VDEC1 Reset mdec's Pscale
// [11] VDEC1 Reset vcpu's MCPU
// [12] VDEC1 Reset vcpu's CCPU
// [13] VDEC1 Reset mmc_pre_arb
#define P_VDEC2_DOS_SW_RESET0                      (volatile uint32_t *)0xfe32fc00
// [31:27] reserved
// [26] hcodec clk_en for henc assist
// [25:22] reserved
// [21] hcodec clk_en for henc qdct
// [20] hcodec clk_en for henc vlc
// [19] hcodec clk_en for assist and cbus
// [18] hcodec clk_en for ddr
// [17] hcodec clk_en for vcpu
// [16] hcodec clk_en for hdec assist
// [15] hcodec clk_en for hdec dblk
// [14] reserved
// [13] hcodec clk_en for hdec mc
// [12] hcodec clk_en for hdec pic_dc
// [11:10] reserved
// [9] vdec clk_en for vdec assist and cbus
// [8] vdec clk_en for ddr
// [7] vdec clk_en for vcpu
// [6] vdec clk_en for mdec vld
// [5] vdec clk_en for mdec psc
// [4] vdec clk_en for mdec pic_dc
// [3] vdec clk_en for mdec mc
// [2] vdec clk_en for mdec iqidct
// [1] vdec clk_en for mdec dblk
// [0] vdec clk_en for mdec assist
#define P_VDEC2_DOS_GCLK_EN0                       (volatile uint32_t *)0xfe32fc04
#define P_VDEC2_DOS_GEN_CTRL0                      (volatile uint32_t *)0xfe32fc08
#define P_VDEC2_DOS_APB_ERR_CTRL                   (volatile uint32_t *)0xfe32fc0c
#define P_VDEC2_DOS_APB_ERR_STAT                   (volatile uint32_t *)0xfe32fc10
#define P_VDEC2_DOS_VDEC_INT_EN                    (volatile uint32_t *)0xfe32fc14
#define P_VDEC2_DOS_HCODEC_INT_EN                  (volatile uint32_t *)0xfe32fc18
// [0]  Reserved
// [1]  Reserved
// [2]  HCODEC Reset assist, hdec's CBUS
// [3]  HCODEC Reset hdec's VLD
// [4]  HCODEC Reset hdec's VLD
// [5]  HCODEC Reset hdec's VLD
// [6]  HCODEC Reset hdec's IQIDCT
// [7]  HCODEC Reset hdec's MC
// [8]  HCODEC Reset hdec's DBLK
// [9]  HCODEC Reset hdec's PIC_DC
// [10] HCODEC Reset hdec's Pscale
// [11] HCODEC Reset vcpu's MCPU
// [12] HCODEC Reset vcpu's CCPU
// [13] HCODEC Reset mmc_pre_arb
// [14] HCODEC Reserved
// [15] HCODEC Reserved
// [16] HCODEC Reset henc's VLC
#define P_VDEC2_DOS_SW_RESET1                      (volatile uint32_t *)0xfe32fc1c
// [0]  Reserved
// [1]  Reserved
// [2]  VDEC2 Reset assist, mdec's CBUS
// [3]  VDEC2 Reset mdec's VLD
// [4]  VDEC2 Reset mdec's VLD
// [5]  VDEC2 Reset mdec's VLD
// [6]  VDEC2 Reset mdec's IQIDCT
// [7]  VDEC2 Reset mdec's MC
// [8]  VDEC2 Reset mdec's DBLK
// [9]  VDEC2 Reset mdec's PIC_DC
// [10] VDEC2 Reset mdec's Pscale
// [11] VDEC2 Reset vcpu's MCPU
// [12] VDEC2 Reset vcpu's CCPU
// [13] VDEC2 Reset mmc_pre_arb
#define P_VDEC2_DOS_SW_RESET2                      (volatile uint32_t *)0xfe32fc20
// [31:10] Reserved
// [9] vdec2 clk_en for assist and cbus.
// [8] vdec2 clk_en for ddr;
// [7] vdec2 clk_en for vcpu;
// [6] vdec2 clk_en for mdec vld
// [5] vdec2 clk_en for mdec psc
// [4] vdec2 clk_en for mdec pic_dc
// [3] vdec2 clk_en for mdec mc
// [2] vdec2 clk_en for mdec iqidct
// [1] vdec2 clk_en for mdec dblk
// [0] vdec2 clk_en for mdec assist
#define P_VDEC2_DOS_GCLK_EN1                       (volatile uint32_t *)0xfe32fc24
#define P_VDEC2_DOS_VDEC2_INT_EN                   (volatile uint32_t *)0xfe32fc28
#define P_VDEC2_DOS_VDIN_LCNT                      (volatile uint32_t *)0xfe32fc2c
#define P_VDEC2_DOS_VDIN_FCNT                      (volatile uint32_t *)0xfe32fc30
#define P_VDEC2_DOS_VDIN_CCTL                      (volatile uint32_t *)0xfe32fc34
#define P_VDEC2_DOS_SCRATCH0                       (volatile uint32_t *)0xfe32fc40
#define P_VDEC2_DOS_SCRATCH1                       (volatile uint32_t *)0xfe32fc44
#define P_VDEC2_DOS_SCRATCH2                       (volatile uint32_t *)0xfe32fc48
#define P_VDEC2_DOS_SCRATCH3                       (volatile uint32_t *)0xfe32fc4c
#define P_VDEC2_DOS_SCRATCH4                       (volatile uint32_t *)0xfe32fc50
#define P_VDEC2_DOS_SCRATCH5                       (volatile uint32_t *)0xfe32fc54
#define P_VDEC2_DOS_SCRATCH6                       (volatile uint32_t *)0xfe32fc58
#define P_VDEC2_DOS_SCRATCH7                       (volatile uint32_t *)0xfe32fc5c
#define P_VDEC2_DOS_SCRATCH8                       (volatile uint32_t *)0xfe32fc60
#define P_VDEC2_DOS_SCRATCH9                       (volatile uint32_t *)0xfe32fc64
#define P_VDEC2_DOS_SCRATCH10                      (volatile uint32_t *)0xfe32fc68
#define P_VDEC2_DOS_SCRATCH11                      (volatile uint32_t *)0xfe32fc6c
#define P_VDEC2_DOS_SCRATCH12                      (volatile uint32_t *)0xfe32fc70
#define P_VDEC2_DOS_SCRATCH13                      (volatile uint32_t *)0xfe32fc74
#define P_VDEC2_DOS_SCRATCH14                      (volatile uint32_t *)0xfe32fc78
#define P_VDEC2_DOS_SCRATCH15                      (volatile uint32_t *)0xfe32fc7c
#define P_VDEC2_DOS_SCRATCH16                      (volatile uint32_t *)0xfe32fc80
#define P_VDEC2_DOS_SCRATCH17                      (volatile uint32_t *)0xfe32fc84
#define P_VDEC2_DOS_SCRATCH18                      (volatile uint32_t *)0xfe32fc88
#define P_VDEC2_DOS_SCRATCH19                      (volatile uint32_t *)0xfe32fc8c
#define P_VDEC2_DOS_SCRATCH20                      (volatile uint32_t *)0xfe32fc90
#define P_VDEC2_DOS_SCRATCH21                      (volatile uint32_t *)0xfe32fc94
#define P_VDEC2_DOS_SCRATCH22                      (volatile uint32_t *)0xfe32fc98
#define P_VDEC2_DOS_SCRATCH23                      (volatile uint32_t *)0xfe32fc9c
#define P_VDEC2_DOS_SCRATCH24                      (volatile uint32_t *)0xfe32fca0
#define P_VDEC2_DOS_SCRATCH25                      (volatile uint32_t *)0xfe32fca4
#define P_VDEC2_DOS_SCRATCH26                      (volatile uint32_t *)0xfe32fca8
#define P_VDEC2_DOS_SCRATCH27                      (volatile uint32_t *)0xfe32fcac
#define P_VDEC2_DOS_SCRATCH28                      (volatile uint32_t *)0xfe32fcb0
#define P_VDEC2_DOS_SCRATCH29                      (volatile uint32_t *)0xfe32fcb4
#define P_VDEC2_DOS_SCRATCH30                      (volatile uint32_t *)0xfe32fcb8
#define P_VDEC2_DOS_SCRATCH31                      (volatile uint32_t *)0xfe32fcbc
#define P_VDEC2_DOS_MEM_PD_VDEC                    (volatile uint32_t *)0xfe32fcc0
#define P_VDEC2_DOS_MEM_PD_VDEC2                   (volatile uint32_t *)0xfe32fcc4
#define P_VDEC2_DOS_MEM_PD_HCODEC                  (volatile uint32_t *)0xfe32fcc8
#define P_VDEC2_DOS_MEM_PD_HEVC                    (volatile uint32_t *)0xfe32fccc
#define P_VDEC2_DOS_MEM_PD_HEVC_DBE                (volatile uint32_t *)0xfe32fcec
#define P_VDEC2_DOS_SW_RESET3                      (volatile uint32_t *)0xfe32fcd0
#define P_VDEC2_DOS_GCLK_EN3                       (volatile uint32_t *)0xfe32fcd4
#define P_VDEC2_DOS_HEVC_INT_EN                    (volatile uint32_t *)0xfe32fcd8
#define P_VDEC2_DOS_SW_RESET4                      (volatile uint32_t *)0xfe32fcdc
#define P_VDEC2_DOS_GCLK_EN4                       (volatile uint32_t *)0xfe32fce0
#define P_VDEC2_DOS_MEM_PD_WAVE420L                (volatile uint32_t *)0xfe32fce4
#define P_VDEC2_DOS_WAVE420L_CNTL_STAT             (volatile uint32_t *)0xfe32fce8
// bit[31]    mcrcc_stall_en
// bit[30:28] Reserved
// bit[27:20] target_canvas
// bit[19:10] target_mby
// bit[ 9: 0] target_mbx
#define P_VDEC2_DOS_VDEC_MCRCC_STALL_CTRL          (volatile uint32_t *)0xfe32fd00
#define P_VDEC2_DOS_VDEC_MCRCC_STALL2_CTRL         (volatile uint32_t *)0xfe32fd08
#define P_VDEC2_DOS_VDEC2_MCRCC_STALL_CTRL         (volatile uint32_t *)0xfe32fd04
#define P_VDEC2_DOS_VDEC2_MCRCC_STALL2_CTRL        (volatile uint32_t *)0xfe32fd0c
#define P_VDEC2_DOS_MEM_PD_HEVC2                   (volatile uint32_t *)0xfe32fd10
#define P_VDEC2_DOS_HEVC2_INT_EN                   (volatile uint32_t *)0xfe32fd14
// bit[1] s_clk off
// bit[0] m_clk off
#define P_VDEC2_DOS_CFG_CMPIF_BRIDGE               (volatile uint32_t *)0xfe32fd20
// bit[31]    cfg_stall_en
// bit[30]    co_mv_stall_en
// bit[29]    cfg_stall_force
// bit[28:24] reserved
// bit[23:12] cfg_stall_tilestrt_ctb_y
// bit[11: 0] cfg_stall_tilestrt_ctb_x
#define P_VDEC2_DOS_HEVC_STALL_START               (volatile uint32_t *)0xfe32fd40
// bit[31:24] cfg_stall_canvas
// bit[23:12] cfg_stall_tileend_ctb_y
// bit[11: 0] cfg_stall_tileend_ctb_x
#define P_VDEC2_DOS_HEVC_STALL_END                 (volatile uint32_t *)0xfe32fd44
// bit[31:24] reserved
// bit[23:12] cfg_stall_ctb_y
// bit[11: 0] cfg_stall_ctb_x
#define P_VDEC2_DOS_HEVC_STALL_POSITION            (volatile uint32_t *)0xfe32fd48
// bit[31]    cfg_stall_en
// bit[30]    co_mv_stall_en
// bit[29]    cfg_stall_force
// bit[28:24] reserved
// bit[23:12] cfg_stall_tilestrt_ctb_y
// bit[11: 0] cfg_stall_tilestrt_ctb_x
#define P_VDEC2_DOS_HEVC2_STALL_START              (volatile uint32_t *)0xfe32fd4c
// bit[31:24] cfg_stall_canvas
// bit[23:12] cfg_stall_tileend_ctb_y
// bit[11: 0] cfg_stall_tileend_ctb_x
#define P_VDEC2_DOS_HEVC2_STALL_END                (volatile uint32_t *)0xfe32fd50
// bit[31:24] reserved
// bit[23:12] cfg_stall_ctb_y
// bit[11: 0] cfg_stall_ctb_x
#define P_VDEC2_DOS_HEVC2_STALL_POSITION           (volatile uint32_t *)0xfe32fd54
#define P_VDEC2_DOS_SECURE_CTL_INDEX               (volatile uint32_t *)0xfe32fe00
#define P_VDEC2_DOS_SECURE_CTL_DATA                (volatile uint32_t *)0xfe32fe04
#define P_VDEC2_DOS_SECURE_REG_NULL                (volatile uint32_t *)0xfe32fe08
//bit[31] - Enable
//bit[30:16] - max height
//bit[15:0] - max
#define P_VDEC2_DOS_VDEC_WR_MAX_SIZE_CTL           (volatile uint32_t *)0xfe32fe10
#define P_VDEC2_DOS_VDEC_DW_MAX_SIZE_CTL           (volatile uint32_t *)0xfe32fe14
#define P_VDEC2_DOS_HEVC_WR_MAX_SIZE_CTL           (volatile uint32_t *)0xfe32fe18
#define P_VDEC2_DOS_HEVC_DW_MAX_SIZE_CTL           (volatile uint32_t *)0xfe32fe1c
#define P_VDEC2_DOS_HEVC_TW_MAX_SIZE_CTL           (volatile uint32_t *)0xfe32fe20
#define P_VDEC2_DOS_HEVC_TW_MAX_SIZE_CTL1          (volatile uint32_t *)0xfe32fe24
#define P_VDEC2_DOS_HEVC_WR_MAX_SIZE_CTL1          (volatile uint32_t *)0xfe32fe28
#define P_VDEC2_DOS_HEVC_DW_MAX_SIZE_CTL1          (volatile uint32_t *)0xfe32fe2c
#define P_VDEC2_DOS_HEVC_SECURE_RESERVED           (volatile uint32_t *)0xfe32fe30
// Bit[3:0] - axi_id_map_index (auto increase when read/write)
#define P_VDEC2_DOS_AXI_ID_MAP_INDEX               (volatile uint32_t *)0xfe32fe34
// axi_id_map_index :
//   0 -  bit [7:0]   vdec_axi_id_0_rd
//        bit [15:8]  vdec_axi_id_1_rd
//        bit [23:16] vdec_axi_id_2_rd
//        bit [31:24] vdec_axi_id_3_rd
//   1 -  bit [7:0]   vdec_axi_id_4_rd
//        bit [15:8]  vdec_axi_id_5_rd
//        bit [23:16] vdec_axi_id_6_rd
//        bit [30:24] reserved
//        bit [31]    vdec_lockdown_rd
//   2 -  bit [7:0]   vdec_axi_id_0_wr
//        bit [15:8]  vdec_axi_id_1_wr
//        bit [23:16] vdec_axi_id_2_wr
//        bit [31:24] vdec_axi_id_3_wr
//   3 -  bit [7:0]   vdec_axi_id_4_wr
//        bit [15:8]  vdec_axi_id_5_wr
//        bit [23:16] vdec_axi_id_6_wr
//        bit [30:24] reserved
//        bit [31]    vdec_lockdown_wr
//   4 -  bit [7:0]   hevc_f_axi_id_0_rd (hevc_axi_id_0_rd for single AXI)
//        bit [15:8]  hevc_f_axi_id_1_rd (hevc_axi_id_1_rd for single AXI)
//        bit [23:16] hevc_f_axi_id_2_rd (hevc_axi_id_2_rd for single AXI)
//        bit [31:24] hevc_f_axi_id_3_rd (hevc_axi_id_3_rd for single AXI)
//   5 -  bit [7:0]   hevc_f_axi_id_4_rd (hevc_axi_id_4_rd for single AXI)
//        bit [15:8]  hevc_f_axi_id_5_rd (hevc_axi_id_5_rd for single AXI)
//        bit [23:16] hevc_f_axi_id_6_rd (hevc_axi_id_6_rd for single AXI)
//        bit [30:24] reserved
//        bit [31]    hevc_f_lockdown_rd
//   6 -  bit [7:0]   hevc_f_axi_id_0_wr (hevc_axi_id_0_wr for single AXI)
//        bit [15:8]  hevc_f_axi_id_1_wr (hevc_axi_id_1_wr for single AXI)
//        bit [23:16] hevc_f_axi_id_2_wr (hevc_axi_id_2_wr for single AXI)
//        bit [31:24] hevc_f_axi_id_3_wr (hevc_axi_id_3_wr for single AXI)
//   7 -  bit [7:0]   hevc_f_axi_id_4_wr (hevc_axi_id_4_wr for single AXI)
//        bit [15:8]  hevc_f_axi_id_5_wr (hevc_axi_id_5_wr for single AXI)
//        bit [23:16] hevc_f_axi_id_6_wr (hevc_axi_id_6_wr for single AXI)
//        bit [30:24] reserved
//        bit [31]    hevc_f_lockdown_wr
//   8 -  bit [7:0]   hevc_b_axi_id_0_rd (hevc_axi_id_7_rd for single AXI)
//        bit [15:8]  hevc_b_axi_id_1_rd (hevc_axi_id_8_rd for single AXI)
//        bit [23:16] hevc_b_axi_id_2_rd (hevc_axi_id_9_rd for single AXI)
//        bit [31:24] hevc_b_axi_id_3_rd (hevc_axi_id_10_rd for single AXI)
//   9 -  bit [7:0]   hevc_b_axi_id_4_rd (hevc_axi_id_11_rd for single AXI)
//        bit [15:8]  hevc_b_axi_id_5_rd (hevc_axi_id_12_rd for single AXI)
//        bit [23:16] hevc_b_axi_id_6_rd (hevc_axi_id_13_rd for single AXI)
//        bit [30:24] reserved
//        bit [31]    hevc_b_lockdown_rd
//  10 -  bit [7:0]   hevc_b_axi_id_0_wr (hevc_axi_id_7_wr for single AXI)
//        bit [15:8]  hevc_b_axi_id_1_wr (hevc_axi_id_8_wr for single AXI)
//        bit [23:16] hevc_b_axi_id_2_wr (hevc_axi_id_9_wr for single AXI)
//        bit [31:24] hevc_b_axi_id_3_wr (hevc_axi_id_10_wr for single AXI)
//  11 -  bit [7:0]   hevc_b_axi_id_4_wr (hevc_axi_id_11_wr for single AXI)
//        bit [15:8]  hevc_b_axi_id_5_wr (hevc_axi_id_12_wr for single AXI)
//        bit [23:16] hevc_b_axi_id_6_wr (hevc_axi_id_13_wr for single AXI)
//        bit [30:24] reserved
//        bit [31]    hevc_b_lockdown_wr
//  12 -  bit [7:0]   hcodec_axi_id_0_rd
//        bit [15:8]  hcodec_axi_id_1_rd
//        bit [23:16] hcodec_axi_id_2_rd
//        bit [31:24] hcodec_axi_id_3_rd
//  13 -  bit [7:0]   hcodec_axi_id_4_rd
//        bit [15:8]  hcodec_axi_id_5_rd
//        bit [23:16] hcodec_axi_id_6_rd
//        bit [30:24] reserved
//        bit [31]    hcodec_lockdown_rd
//  14 -  bit [7:0]   hcodec_axi_id_0_wr
//        bit [15:8]  hcodec_axi_id_1_wr
//        bit [23:16] hcodec_axi_id_2_wr
//        bit [31:24] hcodec_axi_id_3_wr
//  15 -  bit [7:0]   hcodec_axi_id_4_wr
//        bit [15:8]  hcodec_axi_id_5_wr
//        bit [23:16] hcodec_axi_id_6_wr
//        bit [30:24] reserved
//        bit [31]    hcodec_lockdown_wr
#define P_VDEC2_DOS_AXI_ID_MAP_DATA                (volatile uint32_t *)0xfe32fe38
#define P_VDEC2_DOS_HEVC_PATH_CTL                  (volatile uint32_t *)0xfe32fe3c
//======================================
//  CPU Assist module
//
//======================================
#define P_VDEC2_ASSIST_AMR_SCRATCH0                (volatile uint32_t *)0xfe32fd80
#define P_VDEC2_ASSIST_AMR_SCRATCH1                (volatile uint32_t *)0xfe32fd84
#define P_VDEC2_ASSIST_AMR_SCRATCH2                (volatile uint32_t *)0xfe32fd88
#define P_VDEC2_ASSIST_AMR_SCRATCH3                (volatile uint32_t *)0xfe32fd8c
#define P_VDEC2_ASSIST_SPARE16_REG1                (volatile uint32_t *)0xfe32fd90
#define P_VDEC2_ASSIST_SPARE16_REG2                (volatile uint32_t *)0xfe32fd94
#define P_VDEC2_ASSIST_SPARE8_REG1                 (volatile uint32_t *)0xfe32fd98
#define P_VDEC2_ASSIST_SPARE8_REG2                 (volatile uint32_t *)0xfe32fd9c
#define P_VDEC2_ASSIST_SPARE8_REG3                 (volatile uint32_t *)0xfe32fda0
#define P_VDEC2_AC3_CTRL_REG1                      (volatile uint32_t *)0xfe32fda4
#define P_VDEC2_AC3_CTRL_REG2                      (volatile uint32_t *)0xfe32fda8
#define P_VDEC2_AC3_CTRL_REG3                      (volatile uint32_t *)0xfe32fdac
#define P_VDEC2_AC3_CTRL_REG4                      (volatile uint32_t *)0xfe32fdb0
#define P_VDEC2_ASSIST_GEN_CNTL                    (volatile uint32_t *)0xfe32fdb4
#define P_VDEC2_EE_ASSIST_MBOX0_IRQ_REG            (volatile uint32_t *)0xfe32fdc0
#define P_VDEC2_EE_ASSIST_MBOX0_CLR_REG            (volatile uint32_t *)0xfe32fdc4
#define P_VDEC2_EE_ASSIST_MBOX0_MASK               (volatile uint32_t *)0xfe32fdc8
#define P_VDEC2_EE_ASSIST_MBOX0_FIQ_SEL            (volatile uint32_t *)0xfe32fdcc
#define P_VDEC2_EE_ASSIST_MBOX1_IRQ_REG            (volatile uint32_t *)0xfe32fdd0
#define P_VDEC2_EE_ASSIST_MBOX1_CLR_REG            (volatile uint32_t *)0xfe32fdd4
#define P_VDEC2_EE_ASSIST_MBOX1_MASK               (volatile uint32_t *)0xfe32fdd8
#define P_VDEC2_EE_ASSIST_MBOX1_FIQ_SEL            (volatile uint32_t *)0xfe32fddc
#define P_VDEC2_EE_ASSIST_MBOX2_IRQ_REG            (volatile uint32_t *)0xfe32fde0
#define P_VDEC2_EE_ASSIST_MBOX2_CLR_REG            (volatile uint32_t *)0xfe32fde4
#define P_VDEC2_EE_ASSIST_MBOX2_MASK               (volatile uint32_t *)0xfe32fde8
#define P_VDEC2_EE_ASSIST_MBOX2_FIQ_SEL            (volatile uint32_t *)0xfe32fdec
#define P_VDEC2_EE_ASSIST_MBOX3_IRQ_REG            (volatile uint32_t *)0xfe32fdf0
#define P_VDEC2_EE_ASSIST_MBOX3_CLR_REG            (volatile uint32_t *)0xfe32fdf4
#define P_VDEC2_EE_ASSIST_MBOX3_MASK               (volatile uint32_t *)0xfe32fdf8
#define P_VDEC2_EE_ASSIST_MBOX3_FIQ_SEL            (volatile uint32_t *)0xfe32fdfc
#define P_VDEC2_EE_ASSIST_MBOX_EN_0                (volatile uint32_t *)0xfe32fe40
#define P_VDEC2_EE_ASSIST_MBOX_EN_1                (volatile uint32_t *)0xfe32fe44
#define P_VDEC2_EE_ASSIST_MBOX_EN_2                (volatile uint32_t *)0xfe32fe48
#define P_VDEC2_EE_ASSIST_MBOX_EN_3                (volatile uint32_t *)0xfe32fe4c
#define P_VDEC2_DOS_SECURE_REMAP_HEVC_F_WR         (volatile uint32_t *)0xfe32fe54
#define P_VDEC2_DOS_SECURE_REMAP_HEVC_B_WR         (volatile uint32_t *)0xfe32fe58
#define P_VDEC2_DOS_SECURE_REMAP_VDEC_WR           (volatile uint32_t *)0xfe32fe5c
#define P_VDEC2_DOS_SECURE_REMAP_HCODEC_WR         (volatile uint32_t *)0xfe32fe60
#define P_VDEC2_DOS_SECURE_REMAP_HEVC_F_RD         (volatile uint32_t *)0xfe32fe64
#define P_VDEC2_DOS_SECURE_REMAP_HEVC_B_RD         (volatile uint32_t *)0xfe32fe68
#define P_VDEC2_DOS_SECURE_REMAP_VDEC_RD           (volatile uint32_t *)0xfe32fe6c
#define P_VDEC2_DOS_SECURE_REMAP_HCODEC_RD         (volatile uint32_t *)0xfe32fe70
// Just for DOS module regression
//-----------------------------------------------------------
// PARSER
//-----------------------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  PARSER_CBUS_BASE = 0x38
// -----------------------------------------------
//
// Closing file:  ./dos_param.h
//
//
// Reading file:  hevc_parser_regs.h
//
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_PARSER_CBUS_BASE = 0x01
// -----------------------------------------------
// [31:0] After reset version, can be used for test scratch register
#define P_VDEC2_HEVC_PARSER_VERSION                (volatile uint32_t *)0xfe328400
// [31:16] - axi_setting
// [15]    - disable_stream_clock_gating
// [14]    - wstrb_set
// [13]    - stream_read_pause
// [7:4]   - stream_fetch_endian
// [3]     - use_parser_vbuf_wp
// [2]     - use_parser_vbuf2_wp
// [1]     - stream_fetch_busy - Read Only
// [0]     - stream_fetch_enable
#define P_VDEC2_HEVC_STREAM_CONTROL                (volatile uint32_t *)0xfe328404
#define P_VDEC2_HEVC_STREAM_START_ADDR             (volatile uint32_t *)0xfe328408
#define P_VDEC2_HEVC_STREAM_END_ADDR               (volatile uint32_t *)0xfe32840c
// SW stream_buffer_wr_ptr
#define P_VDEC2_HEVC_STREAM_WR_PTR                 (volatile uint32_t *)0xfe328410
#define P_VDEC2_HEVC_STREAM_RD_PTR                 (volatile uint32_t *)0xfe328414
//[31:0] stream_buffer_level - read only
#define P_VDEC2_HEVC_STREAM_LEVEL                  (volatile uint32_t *)0xfe328418
// [31:29] stream_buffer_hole 256*(4^0) bytes
// [28:23] stream_fifo_hole
// [22:16] stream_fifo_level
// [15]    stream_fifo_wr_ptr_update_en
// [14:8]  stream_fifo_wr_ptr
// [7]     stream_fifo_rd_ptr_update_en
// [6:0]   stream_fifo_rd_ptr
#define P_VDEC2_HEVC_STREAM_FIFO_CTL               (volatile uint32_t *)0xfe32841c
// [31:26] - Reserved
// [25]    - data_length_protect_lt_8
// [24]    - align_to_emu_buffer // for AVS
// [23:20] - emu_push_bits
// [19]    - emu_3_enable // for AVS
// [18]    - emu_2_enable // for AVS
// [17]    - emu_1_enable // for AVS
// [16]    - emu_0_enable // For AVS
// [15]    - disable_shift_clock_gating
// [14]    - disable_start_code_protect
// [10]    - length_zero_startcode_en
// [9]     - length_valid_startcode_en
// [8:6]   - sft_valid_wr_position (default : 3 (at least 24 bits available))
// [5:4]   - emulate_code_length_sub_1(Default : 2)
// [3]     - emulation_auto_on_startcode(Default : 0)
// [2:1]   - start_code_length_sub_1(Default : 2)
// [0]     - stream_shift_enable(Default : 0)
#define P_VDEC2_HEVC_SHIFT_CONTROL                 (volatile uint32_t *)0xfe328420
// [31:0]  - max 4-bytes start code (Default : 0x00000100)
#define P_VDEC2_HEVC_SHIFT_STARTCODE               (volatile uint32_t *)0xfe328424
// [31:0]  - max 4-bytes emulate code (Default : 0x00000300)
#define P_VDEC2_HEVC_SHIFT_EMULATECODE             (volatile uint32_t *)0xfe328428
// Read
// shift_buffer_ready,  // 31
// stream_fifo_ready,   // 30
// shift_buffer_enough, // 29
// startcode_found,     // 28
// stream_fifo_rd_ptr,     // 27:25
// shift_buffer_wr_ptr,    // 24:21
// shift_buffer_rd_offset, // 20:18
// 2'h0,                  // 17:16
// shift_buffer_start_flag[7:0], // 15:8
// av1_enable ? gmc_status : shift_buffer_emulate_count, // 7:4
// start_code_protect_en, // 3
// startcode_searching, // 2
// emulation_check_on, // 1
// startcode_check_on  // 0
// Write
// [2]     - startcode_searching
// [1]     - emulation_check_on
// [0]     - startcode_check_on
#define P_VDEC2_HEVC_SHIFT_STATUS                  (volatile uint32_t *)0xfe32842c
// [31:0] hevc_shifted_data - read only
#define P_VDEC2_HEVC_SHIFTED_DATA                  (volatile uint32_t *)0xfe328430
// [31:0] shift_byte_count[31:0]
#define P_VDEC2_HEVC_SHIFT_BYTE_COUNT              (volatile uint32_t *)0xfe328434
// [31:28] - shift_byte_count[35:32] -- READ
// [27:20] - element_read_data[31:24] -- READ
// [31:16] - av1_element_n
// [15]    - Reserved
// [14]    - start_av1_gmc_params_read
// [13]    - av1_gmc_params_intra_only
// [12]    - av1_gmc_params_allow_hp
// [11]    - av1_element
// [10]    - bytealign
// [9]     - signed_element
// [8]     - start_element_read
// [7]     - shift_busy
// [6:0]   - shift_bits
#define P_VDEC2_HEVC_SHIFT_COMMAND                 (volatile uint32_t *)0xfe328438
// 31:8    - element_read_data[23:0]
//  7:2    - element_read_length
//  1:0    - element_read_state
#define P_VDEC2_HEVC_ELEMENT_RESULT                (volatile uint32_t *)0xfe32843c
// [31:16] - cabac_buffer
// [15]    - cabac_buffer_init
// [14]    - cabac_context_init
// [13]    - disable_cabac_clock_gating
// [12]    - cabac_init_flag
// AV1  --
// [3:2]   - av1_cdf_q_index
// VP9  --
// [11]    - Reserved
// [10]    - VP9_init_mv
// [9]     - VP9_init_ref_mode
// [8]     - VP9_init_if_y_mode
// [7]     - VP9_init_intra_inter
// [6]     - VP9_init_inter_mode
// [5]     - VP9_init_coef
// [4]     - VP9_init_tx_mode
// [3]     - VP9_init_skip
// [2]     - VP9_init_partition
// [1]     - VP9_key_frame
// [0]     - cabac_enable(Default : 0)
#define P_VDEC2_HEVC_CABAC_CONTROL                 (volatile uint32_t *)0xfe328440
// VVC-- When vvc_enable
// [29]    - disableSMForLFNST(ExplicitScalingListUsed & DisableScalingMatrixForLfnstBlks)
// [28]    - ExplicitScalingListUsed (sh_explicit_scaling_list_used_flag)
// [27]    - Reserved (UseCiip before)
// [26]    - UseMTS
// [25]    - UseIntraMTS
// [24]    - UseInterMTS
// [23]    - UseLFNST
// [22]    - TransformSkipEnabledFlag
// [21:19] - sps_log2_transform_skip_max_size_minus2 0-4x4
// [18:16] - VVCminCUSize 0-4x4, 1-8x8, 2-16x16, 3-32x32, 4-64x64, 5-128x128
// [15:13] - MaxCUSize 0-8x8, 1-16x16, 2-32x32, 3-64x64, 4-128x128, 7-4x4
// [12:10] - MinCUSize 0-8x8, 1-16x16, 2-32x32, 3-64x64, 4-128x128, 7-4x4
// [9]     - slice_sao_luma_flag
// [8]     - slice_sao_chroma_flag
// [7:2]   - slice_quant
// [1:0]   - slice_type
// HEVC
// [31:25] - chromaQPOffset_U
// [24:18] - chromaQPOffset_V
// [17:16] - MaxTrSize 0-4x4, 1-8x8, 2-16x16, 3-32x32
// [15:14] - MinTrSize 0-4x4, 1-8x8, 2-16x16, 3-32x32
// AVS3-- When avs3_p1
// [13:11] - MaxCUSize 0-8x8, 1-16x16, 2-32x32, 3-64x64, 4-128x128
// [10:8]  - MinCUSize 0-8x8, 1-16x16, 2-32x32, 3-64x64, 4-128x128
// HEVC
// [13:12] - MaxCUSize 0-8x8, 1-16x16, 2-32x32, 3-64x64
// [11:10] - MinCUSize 0-8x8, 1-16x16, 2-32x32, 3-64x64
// [9]     - slice_sao_luma_flag
// [8]     - slice_sao_chroma_flag
// VP9 -- When vp9_enable
// [13:11] - MaxCUSize 0-8x8, 1-16x16, 2-32x32, 3-64x64, 7-4x4
// [10:8]  - MinCUSize 0-8x8, 1-16x16, 2-32x32, 3-64x64, 7-4x4
// [7:2]   - slice_quant
// [1:0]   - slice_type
// AVS2
// [13:12] - MaxCUSize 0-8x8, 1-16x16, 2-32x32, 3-64x64
// [11:10] - MinCUSize 0-8x8, 1-16x16, 2-32x32, 3-64x64
// [9]     - avs2_use_DQP
// [8]     - slice_quant[6]
// [7:2]   - slice_quant
// [1:0]   - slice_type
#define P_VDEC2_HEVC_PARSER_SLICE_INFO             (volatile uint32_t *)0xfe328444
// bit[16]  - 0:command, 1:address(will auto increase when write command)
// bit[15:0]- command or addr
#define P_VDEC2_HEVC_PARSER_CMD_WRITE              (volatile uint32_t *)0xfe328448
// [31:16] - parser_free_clock_enable
// [15]    - disable_parser_core_clock_gating
// [14:7]  - Reserved
// [6]     - vvc_bLowDelay
// [5]     - vvc_BiDirPred
// [4]     - entropy_coding_sync_enable
// [3]     - h265_context_sync_copy_start(Write) h265_context_sync_copy_busy(Read)
// [2]     - h265_context_sync_store_en
// [1]     - h265_context_use_hi
// [0]     - parser_core_enable(Default : 0) not used now
#define P_VDEC2_HEVC_PARSER_CORE_CONTROL           (volatile uint32_t *)0xfe32844c
// [31:16] - pre_parser_cmd
// [15]    - start_cmd_fetch/fetch_busy
// [14]    - parser_cmd_ready
// [13]    - pre_parser_cmd_ready
// [12]    - do_not_wait_if_busy
// [11:8]  - cmd_fetch_status // Read-only
// [7:0]   - cmd_fetch_addr
#define P_VDEC2_HEVC_PARSER_CMD_FETCH              (volatile uint32_t *)0xfe328450
// [31:16] - parser_cmd
// [9:5]   - parser_function
// [4:0]   - cmd_status
#define P_VDEC2_HEVC_PARSER_CMD_STATUS             (volatile uint32_t *)0xfe328454
// [31]    - end_of_picture
// [30]    - uiLeft
// [39]    - uiTop
// [28]    - uiTopRight
// [27:24] - reserved
// [23:12] - uiLin
// [11:0]  - uiCol
#define P_VDEC2_HEVC_PARSER_LCU_INFO               (volatile uint32_t *)0xfe328458
// For VVC
// 31    - vvc_UseDualITree
// 30    - vvc_mono
// 29    - BDPCMEnabledFlag
// 28    - vvc_UseISP
// 27    - vvc_UseMRL
// 26    - vvc_UseMIP
// 25    - vvc_UseLMChroma
// 24    - TB_64_FLAG
// 23    - JointCbCrEnabledFlag
// For other formats
// 30    - avs3_bi_mid_ptr  // (ctx->ptr - ctx->refp[0][REFP_0].ptr == ctx->refp[0][REFP_1].ptr - ctx->ptr)
// 29:28 - min_cu_size_qp_delta
// 27    - cu_qp_delta_enabled_flag
// 26    - amp_enabled_flag
// 25:23 - max_num_merge_cand
// 22    - mvd_l1_zero_flag
// 21:16 - num_ref_idx_l1_active
// 15:10 - num_ref_idx_l0_active
// 9:7   - max_transform_hierarchy_depth_inter
// 6:4   - max_transform_hierarchy_depth_intra
// 3     - transquant_bypass_enable_flag
// 2     - constrained_intra_pred_flag
// 1     - transform_skip_enabled_flag
// 0     - sign_data_hiding_flag
#define P_VDEC2_HEVC_PARSER_HEADER_INFO            (volatile uint32_t *)0xfe32845c
#define P_VDEC2_HEVC_PARSER_RESULT_0               (volatile uint32_t *)0xfe328460
#define P_VDEC2_HEVC_PARSER_RESULT_1               (volatile uint32_t *)0xfe328464
#define P_VDEC2_HEVC_PARSER_RESULT_2               (volatile uint32_t *)0xfe328468
#define P_VDEC2_HEVC_PARSER_RESULT_3               (volatile uint32_t *)0xfe32846c
// For HEVC
// bit[31:24] - quant[47:40]
// bit[23:16] - quant[39:32]
// For VP9
// bit[31:24] - intra_flag
// bit[23:16] - SplitFlag_4
// bit[15:8]  - SkipFlag
// bit[7]     - SliceEnd|end_of_picture
// bit[6:3]   - SplitFlag_8
// bit[2:1]   - SplitFlag_16
// bit[0]     - SplitFlag_32
#define P_VDEC2_HEVC_CABAC_TOP_INFO                (volatile uint32_t *)0xfe328470
// For VVC
// Bit [31:24] - CuChromaQpOffsetSubdivInter
// Bit [23:16] - CuQpDeltaSubdivInter
// Bit [15: 8] - CuChromaQpOffsetSubdivIntra
// Bit [ 7: 0] - CuQpDeltaSubdivIntra
// For HEVC
// bit[31:0]  - quant[31:0]
// For VP9
// bit [31:24] - vp9_top_eob_v
// bit [23:16] - vp9_top_eob_u
// bit [15:0] - vp9_top_eob_y
#define P_VDEC2_HEVC_CABAC_TOP_INFO_2              (volatile uint32_t *)0xfe328474
// For HEVC
// bit[31:24] - quant[47:40]
// bit[23:16] - quant[39:32]
// For VP9
// bit[31:24] - Reserved
// bit[23:16] - SplitFlag_4
// bit[15:8]  - SkipFlag
// bit[7]     - Reserved
// bit[6:3]   - SplitFlag_8
// bit[2:1]   - SplitFlag_16
// bit[0]     - SplitFlag_32
#define P_VDEC2_HEVC_CABAC_LEFT_INFO               (volatile uint32_t *)0xfe328478
// For HEVC
// bit[31:0]  - quant[31:0]
// For VP9
// bit [31:24] - vp9_left_eob_v
// bit [23:16] - vp9_left_eob_u
// bit [15:0] - vp9_left_eob_y
#define P_VDEC2_HEVC_CABAC_LEFT_INFO_2             (volatile uint32_t *)0xfe32847c
// [31:29] - stream_buffer_empty_int_ctl (32bytes - 4k bytes) (default : 4 : 512 bytes interrupt)
// [28:26] - stream_fifo_empty_int_ctl (0 - 128)(default : 0 - 0 byte interrupt)
// [25]    - stream_buffer_empty_int_cpu_enable
// [24]    - stream_buffer_empty_int_amrisc_enable
// [23]    - stream_fifo_empty_int_cpu_enable
// [22]    - stream_fifo_empty_int_amrisc_enable
// [15]    - disable_parser_clock_gating
// [10]    - fed_fb_slice_done_int_cpu_enable
// [9]     - fed_fb_slice_done_int_amrisc_enable
// [8]     - dec_done_int_cpu_enable
// [7]     - dec_done_int_amrisc_enable
// [6]     - cmd_done_int_cpu_enable
// [5]     - cmd_done_int_amrisc_enable
// [4]     - startcode_found_int_cpu_enable
// [3]     - startcode_found_int_amrisc_enable
// [2]     - parser_int_cpu_level (default : 0(pulse))
// [1]     - parser_int_amrisc_level (default : 0(pulse))
// [0]     - parser_int_enable(Default : 0)
#define P_VDEC2_HEVC_PARSER_INT_CONTROL            (volatile uint32_t *)0xfe328480
// [7]     - stream_empty_int_cpu
// [6]     - stream_empty_int_amrisc
// [3]     - fed_fb_slice_done_int
// [2]     - dec_done_int
// [1]     - cmd_done_int
// [0]     - startcode_found_int
#define P_VDEC2_HEVC_PARSER_INT_STATUS             (volatile uint32_t *)0xfe328484
// [31]    - parser_mpred_if_busy  -- Read Only
// [12]    - alf_with_sao  -- For Dual Core fb_write
// [11]    - disable_fast_Coeff_Done
// [10]    - disable_parser_alf_if_clock_gating
// [9]     - parser_alf_if_en
// [8]     - sao_sw_pred_enable
// [7]     - sao_top_save_even_no_sao
// [6]     - disable_parser_sao_if_clock_gating
// [5]     - parser_sao_if_en
// [4]     - scaler_if_leave_one_more_space
// [3]     - disable_parser_mpred_if_clock_gating
// [2]     - parser_mpred_if_en
// [1]     - disable_parser_scaler_if_clock_gating
// [0]     - parser_scaler_if_en
#define P_VDEC2_HEVC_PARSER_IF_CONTROL             (volatile uint32_t *)0xfe328488
// [31:16] PicHeightInLumaSamples
// [15:0]  PicWidthInLumaSamples
#define P_VDEC2_HEVC_PARSER_PICTURE_SIZE           (volatile uint32_t *)0xfe32848c
// [31]    - start_lcu_mpred_cmd
// [30]    - lcu_decoding_start
// [29]    - do_not_wait_if_busy
// [23:0]  - lcu_idx
#define P_VDEC2_HEVC_PARSER_LCU_START              (volatile uint32_t *)0xfe328490
// [31:30] - bit_depth_chroma_minus8
// [29:24] - MAX_QP
// [23:20] - qpBdOffsetC
// [19:16] - qpBdOffsetY
// [15:12] - pcm_sample_bit_depth_chroma
// [11:8]  - pcm_sample_bit_depth_luma
// [7:6]   - max_pcm_luma_coding_block_size
// [5:4]   - min_pcm_luma_coding_block_size
// [3:2]   - bit_depth_luma_minus8
// [1]     - enable_negative_quant
// [0]     - pcm_enabled_flag
#define P_VDEC2_HEVC_PARSER_HEADER_INFO2           (volatile uint32_t *)0xfe328494
// Read Only
// bit[23]    - 1'b1
// bit[22]    - Reserved
// bit[21:16] - quant_V
// bit[15]    - 1'b1
// bit[14]    - Reserved
// bit[13:8]  - quant_U
// bit[7]     - 1'b1
// bit[6]     - Reserved
// bit[5:0]   - quant_Y
#define P_VDEC2_HEVC_PARSER_QUANT_READ             (volatile uint32_t *)0xfe328498
#define P_VDEC2_HEVC_PARSER_RESERVED_27            (volatile uint32_t *)0xfe32849c
// bit[15:8]  - skip_addr_SaoOffData
// bit[7:0]   - skip_addr_SaoMerge
#define P_VDEC2_HEVC_PARSER_CMD_SKIP_0             (volatile uint32_t *)0xfe3284a0
// bit[31:24] - skip_point_coding_unit_slice_type_RET
// bit[23:16] - skip_point_coding_unit_slice_type_B
// bit[15:8]  - skip_point_coding_unit_slice_type_P
// bit[7:0]   - skip_point_coding_unit_slice_type_I
#define P_VDEC2_HEVC_PARSER_CMD_SKIP_1             (volatile uint32_t *)0xfe3284a4
// bit[31:24] - reserved
// bit[23:16] - skip_point_coding_unit_pred_mode_RET
// bit[15:8]  - skip_point_coding_unit_pred_mode_INTER
// bit[7:0]   - skip_point_coding_unit_pred_mode_INTRA
#define P_VDEC2_HEVC_PARSER_CMD_SKIP_2             (volatile uint32_t *)0xfe3284a8
// Write :
// [24:16] context_addr for dec_Bin
// [15:0]  parser_cmd
// Read result:
// cabac_context_decodeBin,       // 31
// cabac_context_decodeBinEP,     // 30
// cabac_context_decodeBinTrm,    // 29
// cabac_context_decodeBinBit,    // 28
// parser_command,                // 27:22
// cabac_context_ready,           // 21
// cmd_status,                    // 20:16
// cabac_manual_data              // 15:0
//
#define P_VDEC2_HEVC_PARSER_MANUAL_CMD             (volatile uint32_t *)0xfe3284ac
// bit [12:0] - Read address :
//          address 0-255 stream_fifo (128x64)
//          address 256-319 context_mem (256x7)
//          address 512-639 parser_cmd_mem (256x16)
//          address 0x400-0xfff vp9_count_mem(768x96)
//          address 0x1000-0x11ff vp9_prob_mem(512x32)
#define P_VDEC2_HEVC_PARSER_MEM_RD_ADDR            (volatile uint32_t *)0xfe3284b0
// bit [9:0] - Write address :
//          address 0-255 stream_fifo (128x64)
//          address 512-639 parser_cmd_mem (256x16)
//          address 0x400-0xfff vp9_count_mem(768x96)
//          address 0x1000-0x11ff vp9_prob_mem(512x32)
#define P_VDEC2_HEVC_PARSER_MEM_WR_ADDR            (volatile uint32_t *)0xfe3284b4
// bit[31:0] read/write data
#define P_VDEC2_HEVC_PARSER_MEM_RW_DATA            (volatile uint32_t *)0xfe3284b8
// [31:20] sao_lcu_x
// [19:8]  sao_lcu_y
// [7] sao_lcu_xy_update
// [6:2] reserved
// [1] sao_wait_up_read
// [0] sao_wait_write
#define P_VDEC2_HEVC_SAO_IF_STATUS                 (volatile uint32_t *)0xfe3284c0
// Y_offset_3,    // 31:26
// Y_offset_2,    // 25:20
// Y_offset_1,    // 19:14
// Y_offset_0,    // 13:8
// Y_typeAuxInfo[3:0], // 7:4
// Y_typeIdc,     // 3:1 [0, 1, 2, 3]-EO, [4,5]-BO+Y_typeAuxInfo[4]
// Y_modelIdc     // 0
#define P_VDEC2_HEVC_SAO_IF_DATA_Y                 (volatile uint32_t *)0xfe3284c4
#define P_VDEC2_HEVC_SAO_IF_DATA_U                 (volatile uint32_t *)0xfe3284c8
#define P_VDEC2_HEVC_SAO_IF_DATA_V                 (volatile uint32_t *)0xfe3284cc
#define P_VDEC2_HEVC_STREAM_SWAP_ADDR              (volatile uint32_t *)0xfe3284d0
// bit[31:24] - swap_wrrsp_count
// bit[23:16] - swap_d_count (Read Only)
// bit[15:8]  - swap_a_count (Read Only) (7:0 or 9:2)
// bit [7] - swap busy (Read Only)
// bit [6:4] - swap_d_count[10:8] (Read Only)
// bit [3] - swap_a_count[10] (Read Only)
// bit [2] - swap_wrrsp_count_update
// bit [1] - 1 - STORE to Memory, 0 - LOAD from Memory
// bit [0] - swap active
#define P_VDEC2_HEVC_STREAM_SWAP_CTRL              (volatile uint32_t *)0xfe3284d4
// bit[8:4] if_monitor_rd_idx
// bit[3:2] Reserved
// bit[1]   Clear all count
// bit[0]   Enable/Disable monitor
#define P_VDEC2_HEVC_PARSER_IF_MONITOR_CTRL        (volatile uint32_t *)0xfe3284d8
// idx  -- read out
//   0  -- iqit_if_active_count
//   1  -- iqit_if_wait_count
//   2  -- mpred_if_active_count
//   3  -- mpred_if_wait_count
//   4  -- sao_if_active_count
//   5  -- sao_if_wait_count
//   6  -- alf_if_active_count
//   7  -- alf_if_wait_count
//  31  -- {
//            interface_ready[15:0],
//            interface_valid[15:0]
//         }
//interface_ready <= {
//		    12'h0,
//                  alf_rdy_parser,
//                  sao_rdy_parser,
//                  mpred_rdy_parser,
//		    TReady_scaler
//                 };
//interface_valid <= {
//		    12'h0,
//		    parser_vld_alf,
//		    parser_vld_sao,
//		    parser_valid_mpred,
//		    TValid_scaler
//                 };
#define P_VDEC2_HEVC_PARSER_IF_MONITOR_DATA        (volatile uint32_t *)0xfe3284dc
//`define HEVC_IQIT_IF_WAIT_CNT        8'h36
//`define HEVC_MPRED_IF_WAIT_CNT       8'h37
//`define HEVC_SAO_IF_WAIT_CNT         8'h38
// [31:0] packet_length_count
#define P_VDEC2_HEVC_STREAM_PACKET_LENGTH          (volatile uint32_t *)0xfe3284e4
// [31]   data_length_protect_enable
// [30]   data_protect_fill_00_enable
// [29]   data_protect_fill_ff_enable
// [28:0] data_length_protect_count
#define P_VDEC2_HEVC_SHIFT_LENGTH_PROTECT          (volatile uint32_t *)0xfe3284e8
// [31:0] skip_count_blk44 -- RW
#define P_VDEC2_HEVC_SKIP_COUNT_BLK44              (volatile uint32_t *)0xfe3284ec
// Write
// bit[8] -- clear_all_quant_count
// bit[2:0] -- read_idx
// Read
// For H265 - QUANT0-Y, QUANT1-Cb, QUANT2-Cr
// For AVS2 - QUANT0-qb
// For VP9  - QUANT0-YDC, QUANT1-YAC, QUANT3-CDC, QUANT3-CAC
// [31:0] idx 0 - blk88_count
//            1 - QUANT_1_COUNT
//            2 - QUANT_1_COUNT
//            3 - {quant_1_max, quant_1_min, quant_0_max, quant_0_min}
//            4 - QUANT_2_COUNT
//            5 - QUANT_3_COUNT
//            6 - {quant_3_max, quant_3_min, quant_2_max, quant_2_min}
#define P_VDEC2_HEVC_QUANT_COUNT_BLK44             (volatile uint32_t *)0xfe3284f0
// bit[3:0] parser_debug_idx
#define P_VDEC2_HEVC_PARSER_DEBUG_IDX              (volatile uint32_t *)0xfe3284f8
// bit[31:0] parser_debug_dat -- read only
#define P_VDEC2_HEVC_PARSER_DEBUG_DAT              (volatile uint32_t *)0xfe3284fc
// bit[31:27] - av1_status
// bit[26] - change_av1_status
// bit[25:23]  - Reserved
// bit[22]    - vp9_second_pu_use_if_busy_2
// bit[21]    - parser_mpred_if_busy_when_pu_mpred_busy
// bit[20:18]  - Reserved
// bit[17] - av1_decode_start(W)/av1_decode_busy
// bit[16] - av1_enable
// bit[15:9]  - Reserved
// bit[8]   - force_skip_1 (SEG_LVL_SKIP)
// bit[7:3] - vp9_status
// bit[2] - change_vp9_status
// bit[1] - vp9_decode_start(W)/vp9_decode_busy
// bit[0] - vp9_enable
#define P_VDEC2_VP9_CONTROL                        (volatile uint32_t *)0xfe328500
// bit[15:8]- vp9_emd_cmd_parameter
// bit[3]   - vp9_emd_cmd_busy
// bit[2:0] - vp9_emd_command (bit[7]-start/busy)
//            0 - vp9_read
//                   (
//                      input : bit[15:8] - prob,
//                              bit[7:4] - vp9_read_literal_bits(1-16 bits)
//                      output : bit[31:16] - result)
//                   )
//            1 - vp9_diff_update_prob
//                   (
//                      input : bit[7:4] - function:
// `define vp9_read_tx_mode_prob     0
// `define vp9_read_coef_prob        1
// `define vp9_read_skip_prob        2
// `define vp9_read_inter_mode_prob  3
// `define vp9_read_interp_prob      4
// `define vp9_read_intra_inter_prob 5
// `define vp9_read_comp_inter_prob  6
// `define vp9_read_comp_ref_prob    7
// `define vp9_read_single_ref_prob  8
// `define vp9_read_if_y_mode_prob   9
// `define vp9_read_partition_prob  10
// `define vp9_read_mv_prob         11
//                              bit[29:16] - total loop times
//                              bit[31:30] - probs_common
//                      output : bit[15:8] - prob)
//                   )
#define P_VDEC2_VP9_EMD_CMD                        (volatile uint32_t *)0xfe328504
// vp9_top_y_mode[31:0]
#define P_VDEC2_VP9_TOP_Y_MODE_0                   (volatile uint32_t *)0xfe328508
// vp9_top_y_mode[63:32]
#define P_VDEC2_VP9_TOP_Y_MODE_1                   (volatile uint32_t *)0xfe32850c
// vp9_left_y_mode[31:0]
#define P_VDEC2_VP9_LEFT_Y_MODE_0                  (volatile uint32_t *)0xfe328510
// vp9_left_y_mode[63:32]
#define P_VDEC2_VP9_LEFT_Y_MODE_1                  (volatile uint32_t *)0xfe328514
// bit[31] - 0:write_vp9_quant, 1:write_vp9/av1_seg_feature
// For write_vp9_seg_feature:
// bit[24:22] - seg_id
// bit[21]    - seg_q_enable
// bit[20]    - seg_q_sign
// bit[19:12] - seg_q_abs
// bit[11]    - seg_lf_enable
// bit[10]    - seg_lf_sign
// bit[9:4]   - seg_lf_abs
// bit[3]     - seg_ref_enable
// bit[2:1]   - seg_ref_abs
// bit[0]     - seg_skip_enable
// For write_av1_seg_feature:
// bit[27:25]   - last_active_segid (only for segment 0)
// bit[24:22] - seg_id
// bit[21]    - segid_preskip (only for segment 0)
// bit[20:12] - qindex
// bit[6] - av1_seg_qindex_enable
// bit[5] - av1_seg_ref_enable
// bit[4:2] - av1_seg_ref_abs
// bit[1] - av1_seg_skip_enable
// bit[0] - av1_seg_gmv_enable
// For write_vp9_quant:
// bit[19:16] - Write index : Seg_0_Y-0, Seg_0_UV-1, ... Seq_7_Y-14, Seq_7_UV-15
// bit[15:8] - AC quant
// bit[7:0]  - DC quant
#define P_VDEC2_VP9_QUANT_WR                       (volatile uint32_t *)0xfe328518
// bit [31:16] - vp9_inter_mode_top/{8'h0, vp9_seg_pred_top}
// bit [15:0] - vp9_top_tx_mode (odd/even mi has same tx_mode)
#define P_VDEC2_HEVC_CABAC_TOP_INFO_3              (volatile uint32_t *)0xfe32851c
// bit [31:16] - vp9_inter_mode_left/{8'h0, vp9_seg_pred_left}
// bit [15:0] - vp9_left_tx_mode (odd/even mi has same tx_mode)
#define P_VDEC2_HEVC_CABAC_LEFT_INFO_3             (volatile uint32_t *)0xfe328520
// bit [31:16] - ref_frame[1]
// bit [15:0]  - ref_frame[0]
#define P_VDEC2_HEVC_CABAC_TOP_INFO_4              (volatile uint32_t *)0xfe328524
// bit [31:16] - ref_frame[1]
// bit [15:0]  - ref_frame[0]
#define P_VDEC2_HEVC_CABAC_LEFT_INFO_4             (volatile uint32_t *)0xfe328528
// bit [31:16]  - interp_filter
// bit [15:8]   - Reserved
// bit [7:0]    - vp9_seg_pred_top
#define P_VDEC2_HEVC_CABAC_TOP_INFO_5              (volatile uint32_t *)0xfe32852c
// bit [31:16]  - interp_filter
// bit [15:8]   - Reserved
// bit [7:0]    - vp9_seg_pred_left
#define P_VDEC2_HEVC_CABAC_LEFT_INFO_5             (volatile uint32_t *)0xfe328530
// bit[31]    - operation start (read : busy)
// bit[30:28] - operation_endian
// bit[27:24] - Reserved
// bit[23:22] - operation_mem 00:prob_mem, 01:count_mem
// bit[21:20] - operation_cmd 0:clear, 1-store, 2-load
// bit[19:10] - operation_end_addr
// bit[9:0] - operation_start_addr
#define P_VDEC2_VP9_MEM_OPERATION                  (volatile uint32_t *)0xfe328534
// For VVC ------
// bit[31:16] - tree_info_intra_Y // Intra-Frame minQT/maxBTD/maxBTSize/maxTTSize
// bit[31:16] - tree_info_inter   // Inter-Frame minQT/maxBTD/maxBTSize/maxTTSize
// bit[15:0]  - tree_info_intra_C // minQT/maxBTD/maxBTSize/maxTTSize
// For VP9 ------
// bit[27]    - vp9_seg_pred_info_3
// bit[26]    - vp9_seg_abs_delta
// bit[25]    - vp9_seg_temporal
// bit[24]    - vp9_seg_update_map
// bit[23]    - vp9_seg_enable
// bit[22]    - vp9_lossless_use_set
// bit[21]    - vp9_lossless_set_data
// bit[20]    - vp9_swap_Y_MODE_with_INFO45
// bit[19]    - vp9_allow_hp
// bit[18:16] - vp9_interp_filter
// bit[15]    - vp9_intra_frame
// bit[14:12] - vp9_tx_mode
// bit[11:10] - vp9_ref_mode // SINGLE_REFERENCE(0), COMPOUND_REFERENCE(1), REFERENCE_MODE_SELECT(2)
// bit[9]   - VPX_BITS_10
// bit[8] - ref_frame_bias[2]
// bit[7] - ref_frame_bias[1]
// bit[6] - ref_frame_bias[0]
// [5:4] - comp_var_ref[1]
// [3:2] - comp_var_ref[0]
// [1:0] - comp_fixed_ref
// For AVS3 ------  avs3_split_param
// bit[31]    -- secondary_transform_enable_flag
// bit[30]    -- affine_enable_flag
// bit[29]    -- smvd_enable_flag
// bit[28]    -- ipcm_enable_flag
// bit[27]    -- amvr_enable_flag
// bit[26]    -- umve_enable_flag
// bit[25]    -- emvr_enable_flag
// bit[24]    -- ipf_enable_flag
// bit[23]    -- tscpm_enable_flag
// bit[22]    -- dt_intra_enable_flag
// bit[21:20] -- log2_max_dt_size_minus4
// bit[19:17] -- log2_lcu_size_minus2
// bit[16:15] -- log2_min_cu_size_minus2
// bit[14:13] -- log2_max_part_ratio_minus2
// bit[12:10] -- max_split_times_minus6
// bit[9]     -- VPX_BITS_10
// bit[8]     -- Reserved
// bit[7:5]   -- log2_min_qt_size_minus2
// bit[4:2]   -- log2_max_bt_size_minus2
// bit[1:0]   -- log2_max_eqt_size_minus3
#define P_VDEC2_VP9_DECODING_INFO                  (volatile uint32_t *)0xfe32853c
// [7]   -- segment_id_map_from_shadow
// [6]   -- segment_id_map_to_shadow
// [5]   -- shadow_rw_addr_update
// [4:0] -- shadiw_rw_addr
#define P_VDEC2_VP9_SHADOW_CTRL                    (volatile uint32_t *)0xfe328540
// [31:0] -- shadow_rw_data
#define P_VDEC2_VP9_SHADOW_DATA                    (volatile uint32_t *)0xfe328544
// bit[31:22]  - Reserved
// bit[21]    - parser_mpred_if_busy_when_pu_mpred_busy
// bit[20:13]  - Reserved
// bit[12]  - vvc_enable
// bit[11]  - avs3_p1
// bit[10]  - avs2_init_left_quant
// bit[9]   - avs2_init_delta_quant
// bit[8]   - avs2_trans_size_when_no_present
// bit[7:3] - avs2_status
// bit[2] - change_avs2_status
// bit[1] - avs2_decode_start(W)/avs2_decode_busy
// bit[0] - avs2_enable
#define P_VDEC2_AVS2_CONTROL                       (volatile uint32_t *)0xfe328548
// CASE VVC
// bit[31] - vvc_force_zero_hold_enable
// bit[30:29] - Reserved
// bit[28:26] - ChromaQpOffsetListLen
// bit[25] - UseChromaQpAdj
// bit[24] - DepQuantEnabledFlag
// bit[23] - UseDQP
// bit[22] - PLTMode
// bit[21] - IBCFlag
// bit[20:18] - MaxNumIBCMergeCand (IBC_MRG_MAX_NUM_CANDS-sps_six_minus_max_num_ibc_merge_cand)
// bit[17] - SignDataHidingEnabledFlag
// bit[16] - TSResidualCodingDisabledFlag
// bit[15:14] - ccAlfFilterCount_Cb
// bit[13:12] - ccAlfFilterCount_Cr
// bit[11] - CcAlfCbEnabledFlag
// bit[10] - CcAlfCrEnabledFlag
// bit[9] - CCALFEnabledFlag
// bit[8:6] - numAlternativesChroma_m1
// bit[5] - slice_alf_enable_Y
// bit[4] - slice_alf_enable_U
// bit[3] - slice_alf_enable_V
// bit[2:0] - NumAlfApsIdsLuma(sh_num_alf_aps_ids_luma)
// CASE AVS2
// bit[31] - reserved
// bit[30:28] - avs2_num_of_references
// bit[27] - background_pred_flag
// bit[11] multi_hypothesis_skip_enable (b_mhpskip_enabled)
// bit[10]  dual_hypothesis_prediction_enable (dhp_enabled)
// bit[9] - weighted_skip_enable (wsm_enabled)
// bit[8] - asynmetric_motion_partitions_enable (Asymmetric Motion Partitions - inter_amp_enable)
// bit[7] - useNSIP (nonsquare_intra_prediction_enable)
// bit[6] - secT_enabled (secondary_transform_enable_flag)
// bit[5] - slice_alf_enable_Y
// bit[4] - slice_alf_enable_U
// bit[3] - slice_alf_enable_V
// bit[2] - slice_sao_enable_Y
// bit[1] - slice_sao_enable_U
// bit[0] - slice_sao_enable_V
// CASE AVS3 Phase 1
// bit[31:28] - num_of_hmvp_cand
// bit[27]    - affine_subblock_size_idx
// bit[26]    - position_based_transform_enable_flag
#define P_VDEC2_AVS2_DEC_INFO                      (volatile uint32_t *)0xfe32854c
// bit[12:10] av1_CUSize
// bit[9:5]   av1_CU_Y
// bit[4:0]   av1_CU_X
#define P_VDEC2_AV1_PARSER_RESULT_0                (volatile uint32_t *)0xfe328550
#define P_VDEC2_AV1_PARSER_RESULT_1                (volatile uint32_t *)0xfe328554
#define P_VDEC2_AV1_PARSER_RESULT_2                (volatile uint32_t *)0xfe328558
#define P_VDEC2_AV1_PARSER_RESULT_3                (volatile uint32_t *)0xfe32855c
// bit[29]    - reference_mode
// bit[28]    - segmentation_temporal_update
// bit[27]    - allow_high_precision_mv
// bit[26]    - cur_frame_force_integer_mv
// bit[25]    - allow_warped_motion
// bit[24]    - switchable_motion_mode
// bit[23]    - enable_interintra_compound
// bit[22]    - reserved
// bit[21]    - segmentation_update_map
// bit[20]    - reduced_tx_set
// bit[19:18] - cdef_bits
// bit[17:16] - tx_mode
// bit[15] - enable_filter_intra
// bit[14] - allow_screen_content_tools
// bit[13] - subsampling_x
// bit[12] - subsampling_x
// bit[11] - color_range
// bit[10] - VPX_BITS_10
// bit[9] - mono_chrome
// bit[8] - allow_intrabc
// bit[7:5] - Reserved
// bit[4] - reset_av1_seg_qindex
// bit[3] - segmentation_enabled
// bit[2] - intra_only
// bit[1] - disable_cdf_update
// bit[0] - use_128x128_superblock
#define P_VDEC2_AV1_DEC_INFO                       (volatile uint32_t *)0xfe328560
// For VVC
// From slice_ph_decoding_flags_2
// bit[31]     - DisFracMMVD (ph_fpel_mmvd_enabled_flag)
// bit[30]     - MvdL1ZeroFlag (ph_mvd_l1_zero_flag)
// bit[29]     - BdofDisabledFlag (ph_bdof_disabled_flag)
// bit[28]     - DmvrDisabledFlag (ph_dmvr_disabled_flag)
// bit[27]     - ProfDisabledFlag (ph_prof_disabled_flag)
// From sps_decoding_flags_2
// bit[15]     - RPL1CopyFromRPL0Flag (sps_rpl1_same_as_rpl0_flag)
// bit[14]     - WrapAroundEnabledFlag (sps_ref_wraparound_enabled_flag)
// bit[13]     - SPSTemporalMVPEnabledFlag (sps_temporal_mvp_enabled_flag)
// bit[12]     - SbTMVPEnabledFlag (sps_sbtmvp_enabled_flag)
// bit[11]     - AMVREnabledFlag (sps_amvr_enabled_flag)
// bit[10]     - BDOFEnabledFlag (sps_bdof_enabled_flag)
// bit[9]      - BdofControlPresentInPhFlag (sps_bdof_control_present_in_ph_flag)
// bit[8]      - UseSMVD (sps_smvd_enabled_flag)
// bit[7]      - UseDMVR (sps_dmvr_enabled_flag)
// bit[6]      - DmvrControlPresentInPhFlag (sps_dmvr_control_present_in_ph_flag)
// bit[5]      - UseMMVD (sps_mmvd_enabled_flag)
// bit[4]      - FpelMmvdEnabledFlag (sps_mmvd_fullpel_only_flag)
// bit[3:1]    - MaxNumMergeCand (MRG_MAX_NUM_CANDS-sps_six_minus_max_num_merge_cand)
// bit[0]      - Reserved
// For AV1
// bit[31]    - enable_jnt_comp
// bit[30]    - enable_masked_compound
// bit[29]    - enable_dual_filter
// bit[28:26] - frame_interp_filter
// bit[25:13] - mi_rows/2
// bit[12:0]  - mi_cols/2
#define P_VDEC2_AV1_DEC_INFO_2                     (volatile uint32_t *)0xfe328564
// For VVC
// bit[15]     - UseSBT (sps_sbt_enabled_flag)
// bit[14]     - UseAffine (sps_affine_enabled_flag)
// bit[13:11]  - MaxNumAffineMergeCand (5-sps_five_minus_max_num_subblock_merge_cand)
// bit[10]     - UseAffineType (sps_affine_type_flag)
// bit[9]      - AffineAmvrEnabledFlag (sps_affine_amvr_enabled_flag)
// bit[8]      - UsePROF (sps_affine_prof_enabled_flag)
// bit[7]      - ProfControlPresentInPhFlag (sps_prof_control_present_in_ph_flag)
// bit[6]      - UseBcw (sps_bcw_enabled_flag)
// bit[5]      - UseCiip (sps_ciip_enabled_flag)
// bit[4]      - UseGeo (sps_gpm_enabled_flag)
// bit[3:1]    - MaxNumGeoCand (sps_max_num_merge_cand_minus_max_num_gpm_cand)
// bit[0]      - Reserved
// For AV1
// bit[31:10] reserved
// bit [9] skip_mode_flag
// bit [8] skip_mode_allowed // not used
// bit [7:4] ref_frame_idx_1
// bit [3:0] ref_frame_idx_0
#define P_VDEC2_AV1_DEC_INFO_3                     (volatile uint32_t *)0xfe328568
// bit[31]    - reset_delta_lf_01
// bit[30]    - reset_xqd
// bit[23]    - reserved
// bit[22:16] - y_dc_delta_q
// bit[15]    - lossless_use_current_qindex_use
// bit[14]    - delta_lf_multi
// bit[13:12] - delta_lf_res
// bit[11]    - delta_if_present
// bit[10:9]  - delta_q_res
// bit[8]     - delta_q_present
// bit[7:0]   - base_qindex
#define P_VDEC2_AV1_QUANT_Y                        (volatile uint32_t *)0xfe32856c
// bit[31]    - reset_delta_lf_23
// bit[30:24] - v_ac_delta_q
// bit[23]    - reserved
// bit[22:16] - u_ac_delta_q
// bit[15]    - reserved
// bit[14:8]  - v_dc_delta_q
// bit[7]    - reserved
// bit[6:0]   - u_dc_delta_q
#define P_VDEC2_AV1_QUANT_C                        (volatile uint32_t *)0xfe328570
// bit[31]    - coded_lossless
// bit[31]    - ref_coded_lossless
// bit[29:17]  - Reserved
// bit[16:12]  - seg_dma_last_cycle
// bit[11:8]  - daala_top_dma_last_cycle
// bit[7:0]   - current_qindex
#define P_VDEC2_AV1_DEC_PROCESS                    (volatile uint32_t *)0xfe328574
// bit[31]    - disable_top_r_wrrsp_wait
// bit[30]    - enable_reg_map_r_wrrsp_wait
// bit[29:16]    - reserved
// bit[15]    - swap_seg_idx
// bit[14]    - mem_busy
// bit[13]    - start_top_init (top_init_busy when read)
// bit[12]    - seg_cache_store_load_busy (Read Only)
// bit[11]    - update_mem_wr_busy (Read Only)
// bit[10]    - no_top_swap
// bit[9]    - set_seg_idx (top_swap_pending pending when read)
// bit[8]    - clr_seg_idx (seg_idx when read)
// bit[7]    - start_seg_map_read (seg_read busy when read)
// bit[6]    - start_seg_map_write (seg_write busy when read)
// bit[5]    - start_top_read (top_read busy when read)
// bit[4]    - start_top_write (top_write busy when read)
// bit[3]    - enable_top_swap (top_swap_hold when read)
// bit[2]    - start_seg_map_init(seg_init_busy when read)
// bit[1]    - initial_left
// bit[0]    - initial_top
#define P_VDEC2_AV1_TOP_LEFT_CTL                   (volatile uint32_t *)0xfe328578
#define P_VDEC2_AV1_DMA_ADDR                       (volatile uint32_t *)0xfe32857c
// bit[31:24] - wrrsp_count
// bit[23] - Reserved
// bit[22:16] - dma_d_count (Read) -- dma_count(Write)
// bit[15] - Reserved
// bit[14:8]  - dma_a_count (Read) -- context_offset(write)
// bit [7:6] - Reserved
// bit [5:3] - dma_id // gmc dma also share this id
// bit [2] - wrrsp_count_update
// bit [1] - 1 - STORE to Memory, 0 - LOAD from Memory
// bit [0] - dma  active
#define P_VDEC2_AV1_DMA_CTRL                       (volatile uint32_t *)0xfe328580
// bit[31:8] hevc_axi_status (Read Only)
// bit[31:24] - lcu_top_size (in 32Bytes Unit)
// bit[23:16] - lcu_seg_map_size (in 32Bytes Unit)
// bit[15]    - reserved
// bit[14:12] - top_dma_id
// bit[11]    - reserved
// bit[10:8]  - seg_dma_id
// bit[7] - disable_aml_axi_clk_gating
// bit[6] - output_axi_status
// bit[5] - aw_urgent_out_en
// bit[4] - ar_urgent_out_en
// bit[3:0] - arb_switch_cnt
#define P_VDEC2_AV1_DMA_SETTING                    (volatile uint32_t *)0xfe328584
// av1_ref_frame_idx
// 27:24 - 6
// 22:20 - 5
// 18:16 - 4
// 14:12 - 3
// 10:8 - 2
//  6:4 - 1
//  2:0 - 0
#define P_VDEC2_AV1_REF_FRAME_IDX                  (volatile uint32_t *)0xfe328588
#define P_VDEC2_AV1_TOP_W_ADDR                     (volatile uint32_t *)0xfe32858c
#define P_VDEC2_AV1_TOP_R_ADDR                     (volatile uint32_t *)0xfe328590
#define P_VDEC2_AV1_SEG_W_ADDR                     (volatile uint32_t *)0xfe328594
#define P_VDEC2_AV1_SEG_R_ADDR                     (volatile uint32_t *)0xfe328598
// [31:16] -- av1_seg_r_addr_offset
// [15:0]  -- av1_seg_w_addr_offset
#define P_VDEC2_AV1_SEG_ADDR_OFFSET                (volatile uint32_t *)0xfe32859c
#define P_VDEC2_RESTORATION_PARAMS                 (volatile uint32_t *)0xfe3285a0
// 31:24 - Row 1
// 23:16 - Col 1
// 15:8 - Row 0
//  7:0 - Col 0
#define P_VDEC2_RESTORATION_CORNER_Y               (volatile uint32_t *)0xfe3285a4
// 31:24 - Row 1
// 23:16 - Col 1
// 15:8 - Row 0
//  7:0 - Col 0
#define P_VDEC2_RESTORATION_CORNER_C               (volatile uint32_t *)0xfe3285a8
// [7:0] av1_scale_enable
#define P_VDEC2_PARSER_REF_SCALE_ENBL              (volatile uint32_t *)0xfe3285ac
// 31    - prev_segmentation_enabled
// 30    - prev_gmc_intra
// 30:29 - Reserved
// 28:24 - prev_buf_index
// 20:16 - cur_buf_index
//   8 - skip_mode_allowed
// 7:4 - ref_frame_idx_1
// 3:0 - ref_frame_idx_0
#define P_VDEC2_AV1_SKIP_MODE_INFO                 (volatile uint32_t *)0xfe3285b0
#define P_VDEC2_AV1_GMC_PARAM_BUFF_ADDR            (volatile uint32_t *)0xfe3285b4
// 31:16 - chroma
// 15: 0 - luma
#define P_VDEC2_AV1_UPSCALE_X0_QN                  (volatile uint32_t *)0xfe3285b8
#define P_VDEC2_AV1_UPSCALE_STEP_QN                (volatile uint32_t *)0xfe3285bc
// write --
// 31:16 - tile_end
//     3 -- disable_no_upscale_bypass
//     2 -- status_output(For debug)
//     1 -- keep_to_ux_8
//     0 -- start
// read --
// 31:16 - previous_ux_tiler
// 15:1  - current_ux_tiler[15:1]
//    0  - busy
#define P_VDEC2_AV1_UPSCALE_INOUT                  (volatile uint32_t *)0xfe3285c0
// bit[31:24] - av1_seg_q_en      -- Read Only
// bit[23:16] - av1_seg_q_eq_0    -- Read Only
// bit[15:8]  - av1_ref_seg_q_en      -- R/W
// bit[7:0]   - av1_ref_seg_q_eq_0    -- R/W
#define P_VDEC2_AV1_REF_SEG_INFO                   (volatile uint32_t *)0xfe3285c4
// bit[31:16] slice_lcu_count
// bit[15:0]  slice_lcu_width
#define P_VDEC2_HEVC_SLICE_DATA_CTL                (volatile uint32_t *)0xfe3285c8
// bit[31:16] vvc_wp_enable_l0_chroma
// bit[15:0]  vvc_wp_enable_l0_luma
#define P_VDEC2_VVC_WP_ENABLE_L0                   (volatile uint32_t *)0xfe3285cc
// bit[31:16] vvc_wp_enable_l1_chroma
// bit[15:0]  vvc_wp_enable_l1_luma
#define P_VDEC2_VVC_WP_ENABLE_L1                   (volatile uint32_t *)0xfe3285d0
// bit[31:0] - HEVC PARSER SHIFT CRC calculate length, 8 bytes align
#define P_VDEC2_HEVC_SHIFT_CRC_CTL                 (volatile uint32_t *)0xfe3285d4
// 31:0 hevc_shift_crc
#define P_VDEC2_HEVC_SHIFT_CRC                     (volatile uint32_t *)0xfe3285d8
#define P_VDEC2_VP9_ACP_CTRL                       (volatile uint32_t *)0xfe3285dc
// bit[31:7] reserved
// bit[6]    acp status byte: 0-idel  1-done
// bit[5]    select prob_ram ofset
// bit[4:3]  pre_fc: prev prob table index
// bit[2]    prev_kf:whether last frame is key frame
// bit[1]    cur_kf: whether cur is key or intra frame
// bit[0]    acp start crtl bit:set 1 to start process
#define P_VDEC2_PARSER_TOP_CLK_GATING_CTL          (volatile uint32_t *)0xfe3285e0
// bit[31:24] top_clk_gating_interface_delay_count
// bit[23:16] top_clk_gating_decode_delay_count
// bit[15:8]  top_clk_gating_stream_delay_count
// bit[7:4]   top_clk_gating_cbus_delay_count
// bit[3]     top_clk_gating_interface_no_delay
// bit[2]     top_clk_gating_decode_no_delay
// bit[1]     top_clk_gating_stream_no_delay
// bit[0]     top_clk_gating_cbus_no_delay
//
// Closing file:  hevc_parser_regs.h
//
//
// Reading file:  hevc_mpred_regs.h
//
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_MPRED_CBUS_BASE = 0x02
// -----------------------------------------------
#define P_VDEC2_HEVC_MPRED_VERSION                 (volatile uint32_t *)0xfe328800
//  [31:0]  reversion               default:32'h00010001
#define P_VDEC2_HEVC_MPRED_CTRL0                   (volatile uint32_t *)0xfe328804
// [1:0]    slice_type[1:0]
// [2]      new_pic
// [3]      new_tile
// [4]      SliceSegment
// [5]      TMVPFlag_en
// [6]      LDCFlag
// [7]      ColFromL0Flag
// [8]      reserved
// [9]      above_en
// [10]     mv_wr_en  :collocated MV write enable: 0=no-write,1=write;default:1'b1
// [11]     mv_rd_en
// [12]     col_isIntra
// [13]     mv_linear
// [14]     LongTerm_Curr
// [15]     LongTerm_Col
// [19:16]  lcu_size_log2[3:0]
// [23:20]  cu_size_log2[3:0]
// [26:24]  plevel[2:0]
// [31:27]  mpred_ctrl0
#define P_VDEC2_HEVC_MPRED_CTRL1                   (volatile uint32_t *)0xfe328808
//  [3:0]   MERGE_MAX_NUM_CANDS[3:0]
//  [7:4]   AMVP_MAX_NUM_CANDS[3:0]
//  [23:8]  reserved
//  [24]    clk_forceon
//  [31:25] reserved
#define P_VDEC2_HEVC_MPRED_INT_EN                  (volatile uint32_t *)0xfe32880c
//  [0]     mpred_int_enable
//  [1]     mpred_int_amrisc_level
//  [2]     mpred_int_cpu_level
//  [3]     slice_done_int_amrisc_enable
//  [4]     slice_done_int_cpu_enable
//  [15]    disable_mpred_int_clock_gating
#define P_VDEC2_HEVC_MPRED_INT_STATUS              (volatile uint32_t *)0xfe328810
//  [0]     slice_done IRQ
//  [31]    write "1"=slice start(self clear,read always return "0")
#define P_VDEC2_HEVC_MPRED_PIC_SIZE                (volatile uint32_t *)0xfe328814
//  [15:0]  pic_width[15:0]
//  [31:16] pic_height[15:0]
#define P_VDEC2_HEVC_MPRED_PIC_SIZE_LCU            (volatile uint32_t *)0xfe328818
//  [15:0]  lcu_x_num_1[15:0]   (=lcu_x_total-1)
//  [31:16] lcu_y_num_1[15:0]   (=lcu_y_total-1)
#define P_VDEC2_HEVC_MPRED_TILE_START              (volatile uint32_t *)0xfe32881c
//  [15:0]  tile_start_lcu_x[15:0]
//  [31:16] tile_start_lcu_y[15:0]
#define P_VDEC2_HEVC_MPRED_TILE_SIZE_LCU           (volatile uint32_t *)0xfe328820
//  [15:0]  tile_width_lcu[15:0]
//  [31:16] tile_height_lcu[15:0]
#define P_VDEC2_HEVC_MPRED_REF_NUM                 (volatile uint32_t *)0xfe328824
//  if vvc
//  [4:0]   refNum_L0[4:0]
//  [9:5]   refNum_L1[4:0]
//  [10]    use_affine
//  else
//  [4:0]   refNum_L0[4:0]
//  [12:8]  refNum_L1[4:0]
//  endif
//  [15:13] h265_merge_fix
//  [31:16] clk gate force on
#define P_VDEC2_HEVC_MPRED_LT_REF                  (volatile uint32_t *)0xfe328828
//  [00]    LongTerm_L0_Ref00
//  [01]    LongTerm_L0_Ref01
//  ......
//  [15]    LongTerm_L0_Ref15
//  [16]    LongTerm_L1_Ref00
//  [17]    LongTerm_L1_Ref01
//  ......
//  [31]    LongTerm_L1_Ref15
#define P_VDEC2_HEVC_MPRED_LT_COLREF               (volatile uint32_t *)0xfe32882c
//  [00]    LongTerm_Col_L0_Ref00
//  [01]    LongTerm_Col_L0_Ref01
//  ......
//  [15]    LongTerm_Col_L0_Ref15
//  [16]    LongTerm_Col_L1_Ref00
//  [17]    LongTerm_Col_L1_Ref01
//  ......
//  [31]    LongTerm_Col_L1_Ref15
#define P_VDEC2_HEVC_MPRED_REF_EN_L0               (volatile uint32_t *)0xfe328830
//  [00]    L0_ref00_en
//  [01]    L0_ref01_en
//  ......
//  [15]    L0_ref15_en
#define P_VDEC2_HEVC_MPRED_REF_EN_L1               (volatile uint32_t *)0xfe328834
//  [00]    L1_ref00_en
//  [01]    L1_ref01_en
//  ......
//  [15]    L1_ref15_en
#define P_VDEC2_HEVC_MPRED_COLREF_EN_L0            (volatile uint32_t *)0xfe328838
//  [00]    COL_L0_ref00_en
//  [01]    COL_L0_ref01_en
//  ......
//  [15]    COL_L0_ref15_en
#define P_VDEC2_HEVC_MPRED_COLREF_EN_L1            (volatile uint32_t *)0xfe32883c
//  [00]    COL_L1_ref00_en
//  [01]    COL_L1_ref01_en
//  ......
//  [15]    COL_L1_ref15_en
#define P_VDEC2_HEVC_MPRED_AXI_WCTRL               (volatile uint32_t *)0xfe328840
//  [11:8]  aw_id_set[3:0]
#define P_VDEC2_HEVC_MPRED_AXI_RCTRL               (volatile uint32_t *)0xfe328844
//  [11:8]  ar_id_set[3:0]
#define P_VDEC2_HEVC_MPRED_ABV_START_ADDR          (volatile uint32_t *)0xfe328848
#define P_VDEC2_HEVC_MPRED_MV_WR_START_ADDR        (volatile uint32_t *)0xfe32884c
#define P_VDEC2_HEVC_MPRED_MV_RD_START_ADDR        (volatile uint32_t *)0xfe328850
#define P_VDEC2_HEVC_MPRED_MV_WPTR                 (volatile uint32_t *)0xfe328854
#define P_VDEC2_HEVC_MPRED_MV_RPTR                 (volatile uint32_t *)0xfe328858
#define P_VDEC2_HEVC_MPRED_MV_WR_ROW_JUMP          (volatile uint32_t *)0xfe32885c
#define P_VDEC2_HEVC_MPRED_MV_RD_ROW_JUMP          (volatile uint32_t *)0xfe328860
#define P_VDEC2_HEVC_MPRED_CURR_LCU                (volatile uint32_t *)0xfe328864
#define P_VDEC2_HEVC_MPRED_ABV_WPTR                (volatile uint32_t *)0xfe328868
#define P_VDEC2_HEVC_MPRED_ABV_RPTR                (volatile uint32_t *)0xfe32886c
#define P_VDEC2_HEVC_MPRED_CTRL2                   (volatile uint32_t *)0xfe328870
#define P_VDEC2_HEVC_MPRED_CTRL3                   (volatile uint32_t *)0xfe328874
#define P_VDEC2_HEVC_MPRED_MV_WLCUY                (volatile uint32_t *)0xfe328878
#define P_VDEC2_HEVC_MPRED_MV_RLCUY                (volatile uint32_t *)0xfe32887c
#define P_VDEC2_HEVC_MPRED_L0_REF00_POC            (volatile uint32_t *)0xfe328880
#define P_VDEC2_HEVC_MPRED_L0_REF01_POC            (volatile uint32_t *)0xfe328884
#define P_VDEC2_HEVC_MPRED_L0_REF02_POC            (volatile uint32_t *)0xfe328888
#define P_VDEC2_HEVC_MPRED_L0_REF03_POC            (volatile uint32_t *)0xfe32888c
#define P_VDEC2_HEVC_MPRED_L0_REF04_POC            (volatile uint32_t *)0xfe328890
#define P_VDEC2_HEVC_MPRED_L0_REF05_POC            (volatile uint32_t *)0xfe328894
#define P_VDEC2_HEVC_MPRED_L0_REF06_POC            (volatile uint32_t *)0xfe328898
#define P_VDEC2_HEVC_MPRED_L0_REF07_POC            (volatile uint32_t *)0xfe32889c
#define P_VDEC2_HEVC_MPRED_L0_REF08_POC            (volatile uint32_t *)0xfe3288a0
#define P_VDEC2_HEVC_MPRED_L0_REF09_POC            (volatile uint32_t *)0xfe3288a4
#define P_VDEC2_HEVC_MPRED_L0_REF10_POC            (volatile uint32_t *)0xfe3288a8
#define P_VDEC2_HEVC_MPRED_L0_REF11_POC            (volatile uint32_t *)0xfe3288ac
#define P_VDEC2_HEVC_MPRED_L0_REF12_POC            (volatile uint32_t *)0xfe3288b0
#define P_VDEC2_HEVC_MPRED_L0_REF13_POC            (volatile uint32_t *)0xfe3288b4
#define P_VDEC2_HEVC_MPRED_L0_REF14_POC            (volatile uint32_t *)0xfe3288b8
#define P_VDEC2_HEVC_MPRED_L0_REF15_POC            (volatile uint32_t *)0xfe3288bc
#define P_VDEC2_HEVC_MPRED_L1_REF00_POC            (volatile uint32_t *)0xfe3288c0
#define P_VDEC2_HEVC_MPRED_L1_REF01_POC            (volatile uint32_t *)0xfe3288c4
#define P_VDEC2_HEVC_MPRED_L1_REF02_POC            (volatile uint32_t *)0xfe3288c8
#define P_VDEC2_HEVC_MPRED_L1_REF03_POC            (volatile uint32_t *)0xfe3288cc
#define P_VDEC2_HEVC_MPRED_L1_REF04_POC            (volatile uint32_t *)0xfe3288d0
#define P_VDEC2_HEVC_MPRED_L1_REF05_POC            (volatile uint32_t *)0xfe3288d4
#define P_VDEC2_HEVC_MPRED_L1_REF06_POC            (volatile uint32_t *)0xfe3288d8
#define P_VDEC2_HEVC_MPRED_L1_REF07_POC            (volatile uint32_t *)0xfe3288dc
#define P_VDEC2_HEVC_MPRED_L1_REF08_POC            (volatile uint32_t *)0xfe3288e0
#define P_VDEC2_HEVC_MPRED_L1_REF09_POC            (volatile uint32_t *)0xfe3288e4
#define P_VDEC2_HEVC_MPRED_L1_REF10_POC            (volatile uint32_t *)0xfe3288e8
#define P_VDEC2_HEVC_MPRED_L1_REF11_POC            (volatile uint32_t *)0xfe3288ec
#define P_VDEC2_HEVC_MPRED_L1_REF12_POC            (volatile uint32_t *)0xfe3288f0
#define P_VDEC2_HEVC_MPRED_L1_REF13_POC            (volatile uint32_t *)0xfe3288f4
#define P_VDEC2_HEVC_MPRED_L1_REF14_POC            (volatile uint32_t *)0xfe3288f8
#define P_VDEC2_HEVC_MPRED_L1_REF15_POC            (volatile uint32_t *)0xfe3288fc
#define P_VDEC2_HEVC_MPRED_PIC_SIZE_EXT            (volatile uint32_t *)0xfe328900
#define P_VDEC2_HEVC_MPRED_DBG_MODE0               (volatile uint32_t *)0xfe328904
#define P_VDEC2_HEVC_MPRED_DBG_MODE1               (volatile uint32_t *)0xfe328908
#define P_VDEC2_HEVC_MPRED_DBG2_MODE               (volatile uint32_t *)0xfe32890c
#define P_VDEC2_HEVC_MPRED_IMP_CMD0                (volatile uint32_t *)0xfe328910
#define P_VDEC2_HEVC_MPRED_IMP_CMD1                (volatile uint32_t *)0xfe328914
#define P_VDEC2_HEVC_MPRED_IMP_CMD2                (volatile uint32_t *)0xfe328918
#define P_VDEC2_HEVC_MPRED_IMP_CMD3                (volatile uint32_t *)0xfe32891c
#define P_VDEC2_HEVC_MPRED_DBG2_DATA_0             (volatile uint32_t *)0xfe328920
#define P_VDEC2_HEVC_MPRED_DBG2_DATA_1             (volatile uint32_t *)0xfe328924
#define P_VDEC2_HEVC_MPRED_DBG2_DATA_2             (volatile uint32_t *)0xfe328928
#define P_VDEC2_HEVC_MPRED_DBG2_DATA_3             (volatile uint32_t *)0xfe32892c
#define P_VDEC2_HEVC_MPRED_CTRL4                   (volatile uint32_t *)0xfe328930
//  [0]     above intermedia data compress: 0=no-compress,1=compress;default:1'b0
//  [1]     collocated MV intermedia data compress: 0=no-compress,1=compress;default:1'b0
//  [2]     vp9_mode,0=hevc_mode,1=vp9_mode,default=0
//  [6]     vp9_use_prev_frame_mvs  0=not allow vp9_use_prev_frame_mvs,1=allow vp9_use_prev_frame_mvs,default=0
//  [8]     vp9_not_allow_hp    0=vp9_allow_hp,1=vp9_not_allow_hp,default=0
//  [9]     vp9_is_compound     0=vp9_is_not_compound,1=vp9_is_compound,default=0
//  [12]    vp9_ref_sign_bias[1]        ref1(last) ref_sign_bias, default=0
//  [13]    vp9_ref_sign_bias[2]        ref2(golden) ref_sign_bias,default=0
//  [14]    vp9_ref_sign_bias[3]        ref3(altref) ref_sign_bias,default=0
//  [24]    avs2 mode
//  [25]    av1 mode
//  [26]    avs3 mode
//  [27]    vvc mode
#define P_VDEC2_HEVC_MPRED_CTRL5                   (volatile uint32_t *)0xfe328934
//  [15:0]  idle thread
//  [23:16] min_cu_width
//  [31:24] min_cu_height
#define P_VDEC2_HEVC_MPRED_POC24_CTRL0             (volatile uint32_t *)0xfe328938
#define P_VDEC2_HEVC_MPRED_POC24_CTRL1             (volatile uint32_t *)0xfe32893c
#define P_VDEC2_HEVC_MPRED_DBG_DATA_0              (volatile uint32_t *)0xfe328940
#define P_VDEC2_HEVC_MPRED_DBG_DATA_1              (volatile uint32_t *)0xfe328944
#define P_VDEC2_HEVC_MPRED_DBG_DATA_2              (volatile uint32_t *)0xfe328948
#define P_VDEC2_HEVC_MPRED_DBG_DATA_3              (volatile uint32_t *)0xfe32894c
#define P_VDEC2_HEVC_MPRED_DBG_DATA_4              (volatile uint32_t *)0xfe328950
#define P_VDEC2_HEVC_MPRED_DBG_DATA_5              (volatile uint32_t *)0xfe328954
#define P_VDEC2_HEVC_MPRED_DBG_DATA_6              (volatile uint32_t *)0xfe328958
#define P_VDEC2_HEVC_MPRED_DBG_DATA_7              (volatile uint32_t *)0xfe32895c
#define P_VDEC2_HEVC_MPRED_CTRL6                   (volatile uint32_t *)0xfe328960
#define P_VDEC2_HEVC_MPRED_CTRL7                   (volatile uint32_t *)0xfe328964
#define P_VDEC2_HEVC_MPRED_CTRL8                   (volatile uint32_t *)0xfe328968
#define P_VDEC2_HEVC_MPRED_CTRL9                   (volatile uint32_t *)0xfe32896c
// [24]  sub_treat_as_pic
#define P_VDEC2_HEVC_MPRED_CTRL10                  (volatile uint32_t *)0xfe328978
#define P_VDEC2_HEVC_MPRED_CTRL11                  (volatile uint32_t *)0xfe32897c
// [5:4] abv_prefix
// [3:2] col_prefix
// [1:0] cm_ptr_prefix
#define P_VDEC2_HEVC_MPRED_MCR_CNT_CTL             (volatile uint32_t *)0xfe328970
// [3:0] mcr_cnt_rd_ptr
// [7:4] mcr_cnt_extend_pixel_w -- default : 7
// [11:8] mcr_cnt_extend_pixel_h -- default : 7
// [14:12] - Reserved
// [15]  mcr_cnt_clear
#define P_VDEC2_HEVC_MPRED_MCR_CNT_DATA            (volatile uint32_t *)0xfe328974
// read only
#define P_VDEC2_HEVC_MPRED_CUR_POC                 (volatile uint32_t *)0xfe328980
#define P_VDEC2_HEVC_MPRED_COL_POC                 (volatile uint32_t *)0xfe328984
#define P_VDEC2_HEVC_MPRED_MV_RD_END_ADDR          (volatile uint32_t *)0xfe328988
#define P_VDEC2_HEVC_MPRED_MV_RPTR_1               (volatile uint32_t *)0xfe32898c
#define P_VDEC2_HEVC_MPRED_MV_RPTR_2               (volatile uint32_t *)0xfe328990
#define P_VDEC2_HEVC_MPRED_MV_RLCUY_1              (volatile uint32_t *)0xfe328994
#define P_VDEC2_HEVC_MPRED_MV_RLCUY_2              (volatile uint32_t *)0xfe328998
#define P_VDEC2_HEVC_MPRED_SHADOWMODE_CNTL         (volatile uint32_t *)0xfe32899c
// [0]      -- shadow_mode_enbl
// [3:1]    -- reserved
// [4]      -- shadow_armed
// [31:5]   -- reserved
//
// registers need shadowed
//   HEVC_MPRED_TILE_SIZE_LCU
//   HEVC_MPRED_TILE_START
#define P_VDEC2_HEVC_MPRED_SUBPIC_START            (volatile uint32_t *)0xfe3289a0
// [11: 0]  subpic x start in lcu
// [23:12]  subpic y start in lcu
// [25]     subpic treated as pic
#define P_VDEC2_HEVC_MPRED_SUBPIC_SIZE             (volatile uint32_t *)0xfe3289a4
// [11: 0]  subpic x size in lcu m1
// [23:12]  subpic y size in lcu m1
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_00_POC   (volatile uint32_t *)0xfe3289a8
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_01_POC   (volatile uint32_t *)0xfe3289ac
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_02_POC   (volatile uint32_t *)0xfe3289b0
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_03_POC   (volatile uint32_t *)0xfe3289b4
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_04_POC   (volatile uint32_t *)0xfe3289b8
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_05_POC   (volatile uint32_t *)0xfe3289bc
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_06_POC   (volatile uint32_t *)0xfe3289c0
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_07_POC   (volatile uint32_t *)0xfe3289c4
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_08_POC   (volatile uint32_t *)0xfe3289c8
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_09_POC   (volatile uint32_t *)0xfe3289cc
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_10_POC   (volatile uint32_t *)0xfe3289d0
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_11_POC   (volatile uint32_t *)0xfe3289d4
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_12_POC   (volatile uint32_t *)0xfe3289d8
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_13_POC   (volatile uint32_t *)0xfe3289dc
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_14_POC   (volatile uint32_t *)0xfe3289e0
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_15_POC   (volatile uint32_t *)0xfe3289e4
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_16_POC   (volatile uint32_t *)0xfe3289e8
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_17_POC   (volatile uint32_t *)0xfe3289ec
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_18_POC   (volatile uint32_t *)0xfe3289f0
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_19_POC   (volatile uint32_t *)0xfe3289f4
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_20_POC   (volatile uint32_t *)0xfe3289f8
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_21_POC   (volatile uint32_t *)0xfe3289fc
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_22_POC   (volatile uint32_t *)0xfe328a00
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_23_POC   (volatile uint32_t *)0xfe328a04
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_24_POC   (volatile uint32_t *)0xfe328a08
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_25_POC   (volatile uint32_t *)0xfe328a0c
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_26_POC   (volatile uint32_t *)0xfe328a10
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_27_POC   (volatile uint32_t *)0xfe328a14
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_28_POC   (volatile uint32_t *)0xfe328a18
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_29_POC   (volatile uint32_t *)0xfe328a1c
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_30_POC   (volatile uint32_t *)0xfe328a20
#define P_VDEC2_HEVC_MPRED_COL_REF_CANVAS_LT       (volatile uint32_t *)0xfe328a24
#define P_VDEC2_HEVC_MPRED_SLICE_START             (volatile uint32_t *)0xfe328a28
// [11: 0] slice start x in lcu
// [23:12] slice start y in lcu
// [31   ] slice in tile
#define P_VDEC2_HEVC_MPRED_SLICE_SIZE              (volatile uint32_t *)0xfe328a2c
// [11: 0] slice size x m1 in lcu
// [23:12] slice size y m1 in lcu
//
// Closing file:  hevc_mpred_regs.h
//
//
// Reading file:  hevc_ipp_regs.h
//
// John A. Thodiyil
// Register map for intra/inter/pcm pixel-prediction/reconstruction + MCRCC + DECOMP
// August 14th, 2013
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_IPP_CBUS_BASE = 0x04
// -----------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_IPP_CBUS_BASE_DBE1 = 0x09
// -----------------------------------------------
#define P_VDEC2_HEVCD_IPP_TOP_CNTL                 (volatile uint32_t *)0xfe329000
// [0]      -- software reset ipp and mpp
// [1]      -- enable ipp
// [2]      -- reserved
// [5:3]    -- codec[2:0] 000:hevc 010:vp9 100:avs2 110:av1 001:avs3 011:VVC
// [6]      -- intra_only_frame
// [7]      -- oslice_flush_enable -- needed for dual core for AV1 special Tile
// [30:8]   -- reserved
// [31]     -- mcr_intrabc_stall_disable
#define P_VDEC2_HEVCD_IPP_TOP_STATUS               (volatile uint32_t *)0xfe329004
// [0]      -- ready for next tile/frame
// [1]      -- ready for next ctb
// [2]      -- ready for next slice
// [3]      -- reserved
// [4]      -- ipp_axi_rd_idle
// [5]      -- ipp_axi_wr_idle
// [6]      -- mpp_axi_rd_idle
// [31:7]   -- reserved
#define P_VDEC2_HEVCD_IPP_TOP_FRMCONFIG            (volatile uint32_t *)0xfe329008
// [14:0]   -- frame width in luma pixels
// [30:16]  -- frame height in luma pixels
#define P_VDEC2_HEVCD_IPP_TOP_TILECONFIG1          (volatile uint32_t *)0xfe32900c
// [11:0]   -- tile_width_in_lcu
// [27:16]  -- tile_height_in_lcu
#define P_VDEC2_HEVCD_IPP_TOP_TILECONFIG2          (volatile uint32_t *)0xfe329010
// [11:0]   -- tile_offset_x_in_lcu
// [27:16]  -- tile_offset_y_in_lcu
#define P_VDEC2_HEVCD_IPP_TOP_TILECONFIG3          (volatile uint32_t *)0xfe329014
// [0]      -- tiles_enabled_flag
// [31:1]   -- reserved
#define P_VDEC2_HEVCD_IPP_TOP_LCUCONFIG            (volatile uint32_t *)0xfe329018
// [7:0]    -- lcu size in pixels
#define P_VDEC2_HEVCD_IPP_TOP_FRMCTL               (volatile uint32_t *)0xfe32901c
// [x]      -- start ipp tile decode
#define P_VDEC2_HEVCD_IPP_CONFIG                   (volatile uint32_t *)0xfe329020
// [0]      -- ipp_strong_intra_smoothing_enable_flag
// [1]      -- cfg_ipp_constrained_intra_pred_flag
// [31:2]   -- reserved
#define P_VDEC2_HEVCD_IPP_LINEBUFF_BASE            (volatile uint32_t *)0xfe329024
// [31:14]  -- intra-prediction line-buffer 16KByte axi address
//             [single-core:wr/rd multi-core:wr]
// [13:0]   -- reserved
#define P_VDEC2_HEVCD_IPP_INTR_MASK                (volatile uint32_t *)0xfe329028
// [0]      -- tile/frame ready
// [1]      -- ctb ready
// [2]      -- slice ready
// [31:3]   -- reserved
#define P_VDEC2_HEVCD_IPP_AXIIF_CONFIG             (volatile uint32_t *)0xfe32902c
// [3:0]    -- little_endian
// [5:4]    -- address_format 00:linear 01:32x32 10:64x32
// [7:6]    -- reserved
// [9:8]    -- Linear_LineAlignment 00:16byte 01:32byte 10:64byte
// [11:10]  -- reserved
// [12]     -- CbCr_byte_swap
// [31:13]  -- reserved
#define P_VDEC2_HEVCD_IPP_BITDEPTH_CONFIG          (volatile uint32_t *)0xfe329030
// [1:0]    -- bit_depth_int_luma   00:8 01:9 10:10
// [3:2]    -- bit_depth_int_chroma 00:8 01:9 10:10
// [5:4]    -- bit_depth_ext_luma   00:8 01:9 10:10
// [7:6]    -- bit_depth_ext_chroma 00:8 01:9 10:10
// [31:8]   -- reserved
#define P_VDEC2_HEVCD_IPP_RTL_CONFIG               (volatile uint32_t *)0xfe329034
// [0]      -- HEVC_ENABLE
// [1]      -- VP9_ENABLE
// [2]      -- AVS2_ENABLE
// [3]      -- VDEC_MCR_IF_ENABLE
// [31:12]  -- reserved
#define P_VDEC2_HEVCD_IPP_SHADOWMODE_CNTL          (volatile uint32_t *)0xfe329038
// [0]      -- shadow_mode_enbl
// [3:1]    -- reserved
// [4]      -- shadow_armed
// [30:5]   -- reserved
// [31]     -- shadow_mode 0:tile_mode 1:slice_mode
//
// registers need shadowed
//   HEVCD_IPP_TOP_TILECONFIG1
//   HEVCD_IPP_TOP_TILECONFIG2
//`define     HEVCD_IPP_AUTOSWIMP_CONFIG              8'h10
// [0]      -- autoswimp_enable
// [31:1]   -- reserved
//`define     HEVCD_IPP_AUTOSWIMP_STATUS              8'h11
// [0]      -- autoswimp_rdy
// [31:1]   -- reserved
//`define     HEVCD_IPP_AUTOSWIMP_CTRL0               8'h12
// [7:0]    -- autoswimp_refid
// [8]      -- autoswimp_reflist
// [30:9]   -- reserved
//`define     HEVCD_IPP_AUTOSWIMP_CTRL1               8'h13
// [15:0]   -- autoswimp_mvx
// [31:16]  -- autoswimp_mvy
//`define     HEVCD_IPP_AUTOSWIMP_CTRL2               8'h14
// [10:0]   -- autoswimp_ctb_start_x
// [15:11]  -- reserved
// [26:16]  -- autoswimp_ctb_start_y
// [31:27]  -- reserved
//`define     HEVCD_IPP_AUTOSWIMP_CTRL3               8'h15
// [10:0]   -- autoswimp_ctb_width
// [15:11]  -- reserved
// [26:16]  -- autoswimp_ctb_height
// [31:27]  -- reserved
//          -- starts autoswimp hw if ready on writing
//          -- this register
#define P_VDEC2_HEVCD_IPP_AXIADDR_PREFIX           (volatile uint32_t *)0xfe329060
// [1:0]    -- intra-prediction line-buffer prefix
// [3:2]    -- reserved
// [5:4]    -- nv21-data-buffer prefix
// [7:6]    -- reserved
// [9:8]    -- compress-header-buffer prefix
// [11:9]   -- reserved
// [31:12]  -- reserved
#define P_VDEC2_AV1D_IPP_DIR_CFG                   (volatile uint32_t *)0xfe329064
// [0]      -- edge_filter_enable
// [31:1]   -- reserved
#define P_VDEC2_HEVCD_IPP_DYNCLKGATE_CONFIG        (volatile uint32_t *)0xfe329080
// [0]      -- mpp_wpredict_clkgate_disbl
// [1]      -- mpp_ref_fetch_clkgate_disbl
// [2]      -- mpp_interpol_top_clkgate_disbl
// [3]      -- mpp_4x4mcr_clkgate_disbl
// [4]      -- mpp_ref_pack_clkgate_disbl
// [5]      -- mpp_mdec_if_clkgate_disbl
// [7:6]    -- reserved
// [8]      -- ipp_res_fetch_clkgate_disbl
// [9]      -- ipp_iqitIf_clkgate_disbl
// [10]     -- ipp_dblkCmdIf_clkgate_disbl
// [11]     -- ipp_dblkIf_clkgate_disbl
// [12]     -- ipp_cntl_clkgate_disbl
// [13]     -- ipp_nsamples_proc_clkgate_disbl
// [14]     -- ipp_refroute_clkgate_disbl
// [15]     -- ipp_spread_clkgate_disbl
// [16]     -- ipp_reg_clkgate_disbl
// [17]     -- ipp_recon_clkgate_disbl
// [19:18]  -- reserved
// [20]     -- decomp_cntl_clkgate_disbl
// [21]     -- decomp_axiIf_clkgate_disbl
// [22]     -- decomp_dcache_clkgate_disbl
// [23]     -- decomp_hcache_clkgate_disbl
// [24]     -- decomp_gearup_clkgate_disbl
// [25]     -- decomp_cores_clkgate_disbl
// [26]     -- decomp_rdroute_clkgate_disbl
// [27]     -- reserved
// [28]     -- master_decomp_clkgate_disbl
// [29]     -- master_mpp_clkgate_disbl
// [30]     -- master_ipp_clkgate_disbl
// [31]     -- master_ipp_mpp_decomp_clkgate_disbl
#define P_VDEC2_HEVCD_IPP_DYNCLKGATE_STATUS        (volatile uint32_t *)0xfe329084
// [0]      -- mpp_wpredict_clkgate
// [1]      -- mpp_ref_fetch_clkgate
// [2]      -- mpp_interpol_top_clkgate
// [3]      -- mpp_4x4mcr_clkgate
// [4]      -- mpp_ref_pack_clkgate
// [5]      -- mpp_mdec_if_clkgate
// [7:6]    -- reserved
// [8]      -- ipp_res_fetch_clkgate
// [9]      -- ipp_iqitIf_clkgate
// [10]     -- ipp_dblkCmdIf_clkgate
// [11]     -- ipp_dblkIf_clkgate
// [12]     -- ipp_cntl_clkgate
// [13]     -- ipp_nsamples_proc_clkgate
// [14]     -- ipp_refroute_clkgate
// [15]     -- ipp_spread_clkgate
// [16]     -- ipp_reg_clkgate
// [17]     -- ipp_recon_clkgate
// [19:18]  -- reserved
// [20]     -- decomp_cntl_clkgate
// [21]     -- decomp_axiIf_clkgate
// [22]     -- decomp_dcache_clkgate
// [23]     -- decomp_hcache_clkgate
// [24]     -- decomp_gearup_clkgate
// [25]     -- decomp_cores_clkgate
// [26]     -- decomp_rdroute_clkgate
// [27]     -- reserved
// [30:28]  -- reserved
// [31]     -- mcrcc_axi_clkgate
//
#define P_VDEC2_HEVCD_MPP_DYNCLKGATE_CONFIG        (volatile uint32_t *)0xfe329088
// [0]      -- mpp_regfifo_clkgate_disbl
// [1]      -- mpp_av1_compound_clkgate_disbl
// [2]      -- mpp_interintra_buff_clkgate_disbl
// [3]      -- mpp_gpm_mvcal_clkgate_disbl
// [4]      -- mpp_comv_data_clkgate_disbl
// [5]      -- mpp_comv_wr_clkgate_disbl
// [6]      -- mpp_merge_split_clkgate_disbl
// [7]      -- mpp_prof_clkgate_disbl
// [8]      -- mpp_wrap_data_pipe_clkgate_disbl
#define P_VDEC2_HEVCD_MPP_DYNCLKGATE_STATUS        (volatile uint32_t *)0xfe32908c
// [0]      -- mpp_regfifo_clkgate
// [1]      -- mpp_av1_compound_clkgate
// [2]      -- mpp_interintra_buff_clkgate
// [3]      -- mpp_gpm_mvcal_clkgate
// [4]      -- mpp_comv_data_clkgate
// [5]      -- mpp_comv_wr_clkgate
// [6]      -- mpp_merge_split_clkgate
// [7]      -- mpp_prof_clkgate
// [8]      -- mpp_wrap_data_pipe_clkgate
#define P_VDEC2_HEVCD_IPP_DBG_SEL                  (volatile uint32_t *)0xfe3290c0
// [3:0]    -- module_level_sel
// [7:4]    -- mpp_ipp_top_level
// [8]      -- ipp_sel
// [31:9]   -- reserved
#define P_VDEC2_HEVCD_IPP_DBG_DATA                 (volatile uint32_t *)0xfe3290c4
// [31:0]   -- Debug information
#define P_VDEC2_HEVCD_IPP_LMCS_DELTA_CW_INDEX      (volatile uint32_t *)0xfe3290c8
// [4:0]    -- cfg_lmcs_delta_cw_index
#define P_VDEC2_HEVCD_IPP_LMCS_DELTA_CW_DATA       (volatile uint32_t *)0xfe3290cc
// [15:0]   -- cfg_lmcs_delta_cw[cfg_lmcs_delta_cw_index]
#define P_VDEC2_HEVCD_IPP_LMCS_DELTA_CRS           (volatile uint32_t *)0xfe3290d0
// [3:0]    -- cfg_lmcs_delta_crs
#define P_VDEC2_HEVCD_IPP_VVC_CTL                  (volatile uint32_t *)0xfe3290d4
//////////////////////////////////////////////////////////////////////////////
///// MPP Registers                                       ////////////////////
//////////////////////////////////////////////////////////////////////////////
// Canvas Anchor to Axi-Address translation table
#define P_VDEC2_HEVCD_MPP_ANC2AXI_TBL_CONF_ADDR    (volatile uint32_t *)0xfe329180
// [0]      -- anc2axi canvas address translation table switch 0:sw 1:hw
// [1]      -- access type 1:wr 0:rd
// [2]      -- auto index increment
// [7:3]    -- reserved
// [15:8]   -- start index
// [31:16]  -- reserved
#define P_VDEC2_HEVCD_MPP_ANC2AXI_TBL_DATA         (volatile uint32_t *)0xfe329190
// [26:0]   -- anc2axi address r/w  32byte aligned
// [31:27]  -- reserved
#define P_VDEC2_HEVCD_MPP_WEIGHTPRED_CNTL_ADDR     (volatile uint32_t *)0xfe3291ec
// [0]      -- weighted_pred_flag
#define P_VDEC2_HEVCD_MPP_L0_WEIGHT_FLAG_ADDR      (volatile uint32_t *)0xfe3291f0
// [15:0]   -- luma_weght_flag0[15:0], indexed by refidx0
// [31:16]  -- chroma_weght_flag0[15:0], indexed by refidx0
// NOTE: For VVC, refidx0 is on MSB
#define P_VDEC2_HEVCD_MPP_L1_WEIGHT_FLAG_ADDR      (volatile uint32_t *)0xfe3291f4
// [15:0]   -- luma_weght_flag1[15:0], indexed by refidx1
// [31:16]  -- chroma_weght_flag1[15:0], indexed by refidx1
// NOTE: For VVC, refidx0 is on MSB
#define P_VDEC2_HEVCD_MPP_YLOG2WGHTDENOM_ADDR      (volatile uint32_t *)0xfe3291f8
// [3:0]    -- luma_log2_weight_denom
#define P_VDEC2_HEVCD_MPP_DELTACLOG2WGHTDENOM_ADDR (volatile uint32_t *)0xfe3291fc
// [4:0]    -- delta_chroma_log2_weight_denom
#define P_VDEC2_HEVCD_MPP_WEIGHT_ADDR              (volatile uint32_t *)0xfe329200
// [5:0]    -- weight_rw_addr
// [0]      -- DELTA_WEIGHT0
// [1]      -- OFFSET0
// [2]      -- DELTA_WEIGHT1
// [3]      -- OFFSET1
// ......
// [62]     -- DELTA_WEIGHT31
// [63]     -- OFFSET31
#define P_VDEC2_HEVCD_MPP_WEIGHT_DATA              (volatile uint32_t *)0xfe329204
// For DELTA_WEIGHT :
// [7:0]    -- delta_y_weight for refidx0:0
// [15:8]   -- delta_cb_weight for refidx0:0
// [23:16]  -- delta_cr_weight for refidx0:0
// For OFFSET :
// [7:0]    -- luma_offset for refidx0:0
// [17:8]   -- delta_cb_offset for refidx0:0
// [27:18]  -- delta_cr_offset for refidx0:0
// VVC does NOT need to config HEVCD_MPP_WEIGHT_ADDR
// [31]     -- refList0/1
// [25:24]  -- Y/Cb/Cr
// [23:20]  -- refIdx
// [17:8]   -- chroma_delta_offset(10bit) or luma_offset(8bit)
// [7:0]    -- delta_weight
// ID to Anchor-Canvas-Address table
// [31:13]  reserved
// [12:8]   access_index
// [7:2]    reserved
// [1]      auto_inc_read
// [0]      auto_inc_write
#define P_VDEC2_HEVCD_MPP_ANC_CANVAS_ACCCONFIG_ADDR (volatile uint32_t *)0xfe329300
// Id[4:0]  --> {orderhint[7:0],AnchorAddrCr[7:0],AnchorAddrCb[7:0],AnchorAddrY[7:0]}
#define P_VDEC2_HEVCD_MPP_ANC_CANVAS_DATA_ADDR     (volatile uint32_t *)0xfe329304
// [0]       -- decomp_nocompress
// [1]       -- decomp_dcache_bypass
// [2]       -- reserved
// [3]       -- decomp_smem_bdepth888
// [4]       -- decomp_paged_mem_mode
// [15:5]    -- reserved
// [18:16]   -- decomp_cbcr_endian
// [19]      -- reserved
// [23:20]   -- decomp_y_endian
// [27:24]   -- is_p01x_mode   //0001:P010  0010:P012  0100:P014  1000:P016
// [28]      -- P010_byte_swap
// [30:29]   -- reserved
// [31]      -- decomp_axif_lbmode888
#define P_VDEC2_HEVCD_MPP_DECOMP_CTL1              (volatile uint32_t *)0xfe329308
// [23:0]    -- header1_offset : 32byte address from canvas base
// [31:24]   -- reserved
#define P_VDEC2_HEVCD_MPP_DECOMP_CTL2              (volatile uint32_t *)0xfe32930c
// [9:0]     -- decomp_default_Y
// [19:10]   -- decomp_default_Cb
// [29:20]   -- decomp_default_Cr
// [31:30]   -- bitdepth_sel 00:8bit 01:9bit 10:10bit
#define P_VDEC2_HEVCD_MPP_DECOMP_CTL3              (volatile uint32_t *)0xfe329310
// HEVCD_MPP_DECOMP_PERFMON_CTL
// [0]      percount_reset
// [3:1]    perfcount_sel
// [31:4]   reserved
// {1'b0,perfcount_sel[1:0]}    perfcount
//     0                        raw_hcache_cnt
//     1                        hit_hcache_cnt
//     2                        raw_dcache_cnt
//     3                        hit_dcache_cnt
// {1'b1,perfcount_sel[1:0]}    perfcount
//     0                        fast_num_compburst
//     1                        slow_num_compburst
//     2,3                      raw_num_ncompburst
#define P_VDEC2_HEVCD_MPP_DECOMP_PERFMON_CTL       (volatile uint32_t *)0xfe329314
// HEVCD_MPP_DECOMP_PERFMON_DATA
// [31:0]   percount_data
#define P_VDEC2_HEVCD_MPP_DECOMP_PERFMON_DATA      (volatile uint32_t *)0xfe329318
// HEVCD_MPP_DECOMP_AXIURG_CTL
// [1:0]      -- decomp_hdrurg  00:Normal 01:Urgent 10:SuperUrgent
// [2]        -- decomp_fpathurg_en 1->Urgent if below lo_thresh
// [3]        -- decomp_spathurg_en 1->Urgent if below lo_thresh
// [10:4]     -- decomp_fpathurg_lothresh [32byte steps : max 96]
// [17:11]    -- decomp_fpathurg_hithresh [32byte steps : max 96]
// [24:18]    -- decomp_spathurg_lothresh [32byte steps : max 64]
// [31:25]    -- decomp_spathurg_hithresh [32byte steps : max 64]
#define P_VDEC2_HEVCD_MPP_DECOMP_AXIURG_CTL        (volatile uint32_t *)0xfe32931c
// HEVCD_MPP_VDEC_MCR_CTL
// [0]        -- mcr_mdec_mode : 1:mcr fetch used by vdec:mdec
// [3:1]      -- reserved
// [4]        -- mcr_mdec_8byte_endian : 1:big 0:little
// [31:5]     -- reserved
#define P_VDEC2_HEVCD_MPP_VDEC_MCR_CTL             (volatile uint32_t *)0xfe329320
//////////////////////////////////////////////////////////////////////////////
///// MCRCC_AXI Registers                                 ////////////////////
//////////////////////////////////////////////////////////////////////////////
// HEVCD_MCRCC_CTL1
// 31:12 <reserved[20:0]>
// 11:10 <cfg_anc11_tb>                           // 01: top 10:bot 11:frame
// 9:8   <cfg_anc10_tb>
// 7:6   <cfg_anc01_tb>
// 5:4   <cfg_anc00_tb>
// 3     <cfg_clkgate_disbl>
// 2     <cfg_field_pic>                           // not used for hevc
// 1     <sw_rst>
// 0     <bypass_en>
#define P_VDEC2_HEVCD_MCRCC_CTL1                   (volatile uint32_t *)0xfe3293c0
// HEVCD_MCRCC_CTL2
// 31:24    <cfg_cache_anc01_c[7:0]>
// 23:16    <cfg_cache_anc01_y[7:0]>
// 15:8     <cfg_cache_anc00_c[7:0]>
// 7:0      <cfg_cache_anc00_y[7:0]>
#define P_VDEC2_HEVCD_MCRCC_CTL2                   (volatile uint32_t *)0xfe3293c4
// HEVCD_MCRCC_CTL3
// 31:24    <cfg_cache_anc11_c[7:0]>
// 23:16    <cfg_cache_anc11_y[7:0]>
// 15:8     <cfg_cache_anc10_c[7:0]>
// 7:0      <cfg_cache_anc10_y[7:0]>
#define P_VDEC2_HEVCD_MCRCC_CTL3                   (volatile uint32_t *)0xfe3293c8
// HEVCD_MCRCC_PERFMON_CTL
// [0]      percount_reset
// [3:1]    perfcount_sel
// [31:4]   reserved
// perfcount_sel[2:0]     perfcount
//     0                  raw_mcr_cnt
//     1                  hit_mcr_cnt
//     2                  byp_mcr_cnt_nchoutwin
//     3                  byp_mcr_cnt_nchcanv
//     4                  miss_mcr_cnt_0
//     5                  miss_mcr_cnt_1
//     6                  hit_mcr_cnt_0
//     7                  hit_mcr_cnt_1
#define P_VDEC2_HEVCD_MCRCC_PERFMON_CTL            (volatile uint32_t *)0xfe3293cc
// HEVCD_MCRCC_PERFMON_DATA
// [31:0]   percount_data
#define P_VDEC2_HEVCD_MCRCC_PERFMON_DATA           (volatile uint32_t *)0xfe3293d0
// HEVCD_MCRCC_STALL_ADJUST
// [2:0]    datapath_lcu16_delay
//          xx1         64 lcu16 or tilestart_y
//          x10        128 lcu16 or tilestart_y
//          100        256 lcu16 or tilestart_y
//          else       no adjust
#define P_VDEC2_HEVCD_MCRCC_STALL_ADJUST           (volatile uint32_t *)0xfe3293d4
//////////////////////////////////////////////////////////////////////////////
///// VP9 Decoder Registers                               ////////////////////
//////////////////////////////////////////////////////////////////////////////
// scale_xy :: REF_SCALE_SHIFT = 14
    // VP9 :: (other_size << REF_SCALE_SHIFT) / this_size
    // AV1 :: ((other_size << REF_SCALE_SHIFT) + this_size / 2) / this_size
// VP9D_MPP_INTERPOL_CFG0
// [2:0]    VP9 MC Interpolation type
            // 0-3:perframe type 4:per partition type
// [3]      reserved
// [4]      V99 MV precision
            // 1:high precision else  mv=mv*2
// [31:5]   reserved
#define P_VDEC2_VP9D_MPP_INTERPOL_CFG0             (volatile uint32_t *)0xfe329100
// VP9D_MPP_REF_SCALE_ENBL
// [7:0]    VP9 MC reference scaled info                                          // -> VVC_MPP_REF_SCALE_ENBL
// [15:8]   VP9 MC reference scaled dir 0:Dwn 1:Up                                // [15:0]    List0 ref0_ref15 is scaled
// [31:16]  reserved                                                              // [31:16]   List1 ref0~ref15 is scaled
#define P_VDEC2_VP9D_MPP_REF_SCALE_ENBL            (volatile uint32_t *)0xfe329104
// VP9D_MPP_REFINFO_TBL_ACCCONFIG
// [1:0]    reserved
// [2]      auto_inc_index/field
// [5:3]    reference index   0:last 1:golden 2:altref[vp9] .... 6:altref[av1]
// [8:6]    info field 0:<ref_width[14:0]> 1:<ref_height[14:0]>
            //         2:<scale_x[26:0]  3:<scale_y[26:0]>
            //         4:<decomp_header1_offset[23:0]> -- 32byte aligned
// [31:9]   reserved	
#define P_VDEC2_VP9D_MPP_REFINFO_TBL_ACCCONFIG     (volatile uint32_t *)0xfe329108
// VP9D_MPP_REFINFO_DATA
// [n:0]    refinfo_tbl[index]field]  wr_data/rd_data
#define P_VDEC2_VP9D_MPP_REFINFO_DATA              (volatile uint32_t *)0xfe32910c
//////////////////////////////////////////////////////////////////////////////
///// AV1 Decoder Registers                               ////////////////////
//////////////////////////////////////////////////////////////////////////////
//`define     AV1D_IPP_DIR_CFG                  8'h90
// [0]      -- edge_filter_enable
// [31:1]   -- reserved
// refid to global motion warped-mode matrix lookup table
#define P_VDEC2_AV1D_MPP_REF2WMMAT_TBL_CONF_ADDR   (volatile uint32_t *)0xfe329244
// [0]      -- gm_wmmat lookup table switch 0:sw 1:hw : read and write
// [1]      -- access type 1:wr 0:rd  : sw access type
// [2]      -- auto index increment
// [7:3]    -- reserved
// [10:8]   -- start refid :: 0 through 7
// [13:11]  -- start matrix entry index :: 0 through 7
// [29:14]  -- reserved
// [30]     -- wr-bank : 2-banks: possible ping-pong
// [31]     -- rd-bank
#define P_VDEC2_AV1D_MPP_REF2WMMAT_TBL_DATA        (volatile uint32_t *)0xfe329248
// [26:0]   -- global motion warped-mode matrix  r/w  32byte aligned
// [31:27]  -- reserved
#define P_VDEC2_AV1D_MPP_ORDERHINT_CFG             (volatile uint32_t *)0xfe32924c
// [3:0]    current frame orderhintbits                                           // [31:0]   curr frame POC (range -2^31 ~ 2^31-1)
// [7:4]    reserved                                                              // SHARED BY VVC
// [15:8]   current frame orderhint
// [31:8]   reserved
#define P_VDEC2_AV1D_MPP_MISC_CFG                  (volatile uint32_t *)0xfe329250
// [0]      -- frame_force_integer_mv
// [31:1]   -- reserved
//////////////////////////////////////////////////////////////////////////////
///// Multi-core COnfiguration Registers                  ////////////////////
//////////////////////////////////////////////////////////////////////////////
#define P_VDEC2_HEVCD_IPP_MULTICORE_CFG            (volatile uint32_t *)0xfe329280
// [0]      -- multi-core-enable
// [3:1]    -- reserved
// [4]      -- intra-lbuf write_mode 0:ddr 1:fifo
// [5]      -- intra_lbuf read_mode 0:ddr 1:fifo
// [31:6]   -- reserved
#define P_VDEC2_HEVCD_IPP_MULTICORE_LINE_CTL       (volatile uint32_t *)0xfe329284
// [11:0]   -- mcore_first_lcu_row, first row processed by this core, programmed at tile/frame sof
// [15:12]  -- reserved
// [27:16]  -- mcore_last_lcu_row, last row processed by this core, programmed at tile/frame sof
// [31:28]  -- reserved
#define P_VDEC2_HEVCD_IPP_LINEBUFF_BASE2           (volatile uint32_t *)0xfe329288
// [31:14]  -- intra-prediction line-buffer 16KByte axi address
//              [single-core:nu multi-core:rd]
// [13:0]   -- reserved
#define P_VDEC2_HEVCD_IPP_DYN_CACHE                (volatile uint32_t *)0xfe32928c
// [0]	    dyn_cache_en
// [1]	    n_hcache
// [5:2]    mode change num
#define P_VDEC2_HEVCD_IPP_CTRL0                    (volatile uint32_t *)0xfe329290
#define P_VDEC2_HEVCD_IPP_CTRL1                    (volatile uint32_t *)0xfe329294
#define P_VDEC2_HEVCD_IPP_CTRL2                    (volatile uint32_t *)0xfe329298
#define P_VDEC2_HEVCD_IPP_CTRL3                    (volatile uint32_t *)0xfe32929c
//////////////////////////////////////////////////////////////////////////////
///// VVC Decoder Registers                               ////////////////////
//////////////////////////////////////////////////////////////////////////////
#define P_VDEC2_VVC_MPP_REF0_POC_CFG               (volatile uint32_t *)0xfe3292c0
// [31:0]   -- reference_POC
#define P_VDEC2_VVC_MPP_REF1_POC_CFG               (volatile uint32_t *)0xfe3292c4
// [31:0]   -- reference_POC
#define P_VDEC2_VVC_MPP_REF_IS_LONGTERM            (volatile uint32_t *)0xfe3292c8
// [15:0]   -- ref0~ref15(list0) is longterm
// [31:16]  -- ref0~ref15(list1) is longterm
#define P_VDEC2_VVC_MPP_CHROMA_COLLOCATED_CFG      (volatile uint32_t *)0xfe3292cc
// [0]      -- chroma_hcollocated_flag
// [1]      -- chroma_vcollocated_flag
// [31:2]   -- reserved
#define P_VDEC2_VVC_MPP_REF_WRAPAROUND_CFG         (volatile uint32_t *)0xfe3292d0
// [15]     -- warparound_enable
// [14:0]   -- wraparound_offset
#define P_VDEC2_VVC_MPP_SUBPIC_START               (volatile uint32_t *)0xfe3292d4
// [11:0]   -- subpic_start_X_in_ctu
// [23:12]  -- subpic_start_Y_in_ctu
// [24]     -- num of subpictures > 1 (sps_num_subpics_minus1 > 0)
// [25]     -- subpic_treated_as_pic
#define P_VDEC2_VVC_MPP_SUBPIC_SIZE                (volatile uint32_t *)0xfe3292d8
// [11:0]   -- subpic_width_in_ctu_m1
// [23:12]  -- subpic_height_in_ctu_m1
#define P_VDEC2_VVC_MPP_SCALING_WIN_OFFSET         (volatile uint32_t *)0xfe3292dc
// [18:0]   -- scaling_win_left/top_offset
// [19]     -- 0: left 1: top
// [31:20]  -- reserved
#define P_VDEC2_VVC_MPP_CURR_PROF_ENABLE           (volatile uint32_t *)0xfe3292e0
// [0]      -- enable PROF(sps && picheader)
// [31:1]   -- reserved
#define P_VDEC2_VVC_MPP_CANVAS_ID_L0               (volatile uint32_t *)0xfe3292e4
// [31:30]  -- address 0-2
// [29:0]   -- six canvasid
#define P_VDEC2_VVC_MPP_CANVAS_ID_L1               (volatile uint32_t *)0xfe3292e8
// [31:30]  -- address 0-2
// [29:0]   -- six canvasid
#define P_VDEC2_VVC_MPP_MV_WRPTR                   (volatile uint32_t *)0xfe3292ec
// [31:0]   -- comv_wrptr
#define P_VDEC2_VVC_MPP_SLICE_INFO                 (volatile uint32_t *)0xfe3292f0
// [1:0]    -- slice_type
// [5:2]    -- lcu_size_log2
// [6]      -- is_monochroma
#define P_VDEC2_VVC_MPP_AXI_CTL                    (volatile uint32_t *)0xfe3292f4
// [0:7]    -- reserved
// [11:8]   -- AXI_WR_ID
// [14:12]  -- AXI_AWSIZE
// [16:15]  -- AXI_AWBURST
// [18:17]  -- AXI_AWLOCK
// [22:19]  -- AXI_AWCACHE
// [25:23]  -- AXI_AWPROT
// [31:26]  -- reserved
#define P_VDEC2_VVC_MPP_LCU_INFO                   (volatile uint32_t *)0xfe3292f8
// [15:0]   -- lcu_x_num
// [31:16]  -- lcu_y_num
#define P_VDEC2_VVC_MPP_RPR_REFINFO                (volatile uint32_t *)0xfe3292fc
// [31]     -- 0: refL0 1: refL1
// [30:27]  -- refIdx
// [26:24]  -- field config:  000: refWidth[14:0]
//                            001: refHeifht[14:0]
//                            010: scaleX[15:0]
//                            011: scaleY[15:0]
//                            100: ref_left_win_scaling_offset[18:0]
//                            101: ref_top_win_scaling_offset[18:0]
//
// Closing file:  hevc_ipp_regs.h
//
//
// Reading file:  hevc_dblk_regs.h
//
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_DBLK_CBUS_BASE = 0x05
// -----------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_DBLK_CBUS_BASE_DBE1 = 0x0a
// -----------------------------------------------
//cfg0[0];        //software_reset
//cfg0[1];        //status clear, only for axi error or pic_done
//cfg0[2];        //clock_forced_on_all
//cfg0[3];        //clock_forced_off_all
//cfg0[11:8];     //PU FIFO Threshold   , 0:16 1:1 ... 1:15
//cfg0[15:12];    //TU FIFO Threshold>>4, 0:16<<4 1:1<<4 ... 1:15<<4
//cfg0[29:16];    //clock_forced_on_submodules
#define P_VDEC2_HEVC_DBLK_CFG0                     (volatile uint32_t *)0xfe329400
//cfg1[1:0];      //ctb_size 0:64x64 1:32x32 2:16x16
//cfg1[2];        //ignore_out_of_boundary
//cfg1[3];        //pcm_loop_filter_disabled_flag
//cfg1[8:4];      //pps_cb_qp_offset (-12~12,inclusive)
//cfg1[13:9];     //pps_cr_qp_offset (-12~12,inclusive)
//cfg1[14];       //ctbx,y swap in pu i/f
//cfg1[15];       //sao_corner_45_degree_all_software_control
#define P_VDEC2_HEVC_DBLK_CFG1                     (volatile uint32_t *)0xfe329404
//cfg2[15:0];     //picture_size_width
//cfg2[31:16];    //picture_size_height
#define P_VDEC2_HEVC_DBLK_CFG2                     (volatile uint32_t *)0xfe329408
//cfg3[3:0];      //parameter_axi_arid
//cfg3[7:4];      //parameter_axi_awid
//cfg3[11:8];     //parameter_axi_wid
//cfg3[12];       //parameter_axi_not_check_write_response
//cfg3[19:16];    //data_axi_arid
//cfg3[23:20];    //data_axi_awid
//cfg3[27:24];    //data_axi_wid
//cfg3[28];       //data_axi_not_check_write_response
#define P_VDEC2_HEVC_DBLK_CFG3                     (volatile uint32_t *)0xfe32940c
//cfg4[31:0];     //parameter_axi_start_address
#define P_VDEC2_HEVC_DBLK_CFG4                     (volatile uint32_t *)0xfe329410
//cfg5[31:0];     //data_axi_start_address
#define P_VDEC2_HEVC_DBLK_CFG5                     (volatile uint32_t *)0xfe329414
//cfg6[9:0];      //tile_ctbx
//cfg6[25:16];    //tile_ctby
//cfg6[31];       //tile_enabled
#define P_VDEC2_HEVC_DBLK_CFG6                     (volatile uint32_t *)0xfe329418
//cfg7[9:0];      //tile_ctbxsize
//cfg7[25:16];    //tile_ctbysize
#define P_VDEC2_HEVC_DBLK_CFG7                     (volatile uint32_t *)0xfe32941c
//cfg8[9:0];      //start_ctbx, normally equals to tile_ctbx
//cfg8[25:16];    //start_ctby, normally equals to tile_ctby
//cfg8[31];       //start, self_cleared signal, normally set it at the begin of tile
#define P_VDEC2_HEVC_DBLK_CFG8                     (volatile uint32_t *)0xfe329420
//cfg9[0]         //loop_filter_across_tiles_enabled_flag
//cfg9[1]         //loop_filter_across_slices_enabled_flag
//cfg9[2]         //deblocking_filter_disabled_flag
//cfg9[6:3]       //beta_offset_div2 (-6~6,inclusive)
//cfg9[10:7]      //tc_offset_div2 (-6~6,inclusive)
#define P_VDEC2_HEVC_DBLK_CFG9                     (volatile uint32_t *)0xfe329424
//cfga[4:0]       //corner45degree{FIFO_CNT}
//cfga[31:27]     //corner45degree{EN,FIFO_CLR,FIFO_PUSH,DATA,DATA_SEL}
#define P_VDEC2_HEVC_DBLK_CFGA                     (volatile uint32_t *)0xfe329428
//cfgb[3:0]       //0:HEVC 1:VP9 ...
#define P_VDEC2_HEVC_DBLK_CFGB                     (volatile uint32_t *)0xfe32942c
//cfgc[31:0]      //cfg_addr_y1
#define P_VDEC2_HEVC_DBLK_CFGC                     (volatile uint32_t *)0xfe329430
//cfgd[31:0]      //cfg_alfpar
#define P_VDEC2_HEVC_DBLK_CFGD                     (volatile uint32_t *)0xfe329434
//cfge[31:0]
#define P_VDEC2_HEVC_DBLK_CFGE                     (volatile uint32_t *)0xfe329438
#define P_VDEC2_HEVC_DBLK_STS0                     (volatile uint32_t *)0xfe32943c
#define P_VDEC2_HEVC_DBLK_STS1                     (volatile uint32_t *)0xfe329440
//cfg11[31:0]
#define P_VDEC2_HEVC_DBLK_CFG11                    (volatile uint32_t *)0xfe329444
//cfg12[31:0]
#define P_VDEC2_HEVC_DBLK_CFG12                    (volatile uint32_t *)0xfe329448
//cfg13[31:0]
#define P_VDEC2_HEVC_DBLK_CFG13                    (volatile uint32_t *)0xfe32944c
//cfg14[31:0]
#define P_VDEC2_HEVC_DBLK_CFG14                    (volatile uint32_t *)0xfe329450
// cfgs for av1 cdef
#define P_VDEC2_HEVC_DBLK_CDEF0                    (volatile uint32_t *)0xfe329454
#define P_VDEC2_HEVC_DBLK_CDEF1                    (volatile uint32_t *)0xfe329458
#define P_VDEC2_HEVC_DBLK_CDEF2                    (volatile uint32_t *)0xfe32945c
#define P_VDEC2_HEVC_DBLK_CDEF3                    (volatile uint32_t *)0xfe329460
#define P_VDEC2_HEVC_DBLK_CDEF4                    (volatile uint32_t *)0xfe329464
#define P_VDEC2_HEVC_DBLK_CDEF5                    (volatile uint32_t *)0xfe329468
// cfgs for av1 upscaling
// ups0[15:0] upscl_picsizex
// ups0[16] use_superre::upscaling enable
// ups0[19:17] denominator
// ups1[15:0] upscaled x0 luma
// ups1[31:16] upscaled x0 chroma
// ups2[29:0] x0_qn luma
// ups3[29:0] x0_qn chroma
// ups4[29:0] x_step luma
// ups5[29:0] x_step luma
#define P_VDEC2_HEVC_DBLK_UPS0                     (volatile uint32_t *)0xfe32946c
#define P_VDEC2_HEVC_DBLK_UPS1                     (volatile uint32_t *)0xfe329470
#define P_VDEC2_HEVC_DBLK_UPS2                     (volatile uint32_t *)0xfe329474
#define P_VDEC2_HEVC_DBLK_UPS3                     (volatile uint32_t *)0xfe329478
#define P_VDEC2_HEVC_DBLK_UPS4                     (volatile uint32_t *)0xfe32947c
#define P_VDEC2_HEVC_DBLK_UPS5                     (volatile uint32_t *)0xfe329480
//cfgs for av1 lrf
//lrf0[0] lrf_enable
//lrf0[4:1] lrf_unitsize
//lrf1[31:0] lrf_unitnum
#define P_VDEC2_HEVC_DBLK_LRF0                     (volatile uint32_t *)0xfe329484
#define P_VDEC2_HEVC_DBLK_LRF1                     (volatile uint32_t *)0xfe329488
//cfgs for av1 dblk
//dblk0[23:0] base_lvl
//dblk1[6:0] for mode_ref_lvl
//dblk2[31:0] for seg_lvl
#define P_VDEC2_HEVC_DBLK_DBLK0                    (volatile uint32_t *)0xfe32948c
#define P_VDEC2_HEVC_DBLK_DBLK1                    (volatile uint32_t *)0xfe329490
#define P_VDEC2_HEVC_DBLK_DBLK2                    (volatile uint32_t *)0xfe329494
// cfgs for AXI ADDRESS PREFIX
#define P_VDEC2_HEVC_DBLK_PREFIX                   (volatile uint32_t *)0xfe329498
#define P_VDEC2_HEVC_DBLK_BUSYSEL                  (volatile uint32_t *)0xfe32949c
#define P_VDEC2_HEVC_DBLK_SHADOWMODE_CNTL          (volatile uint32_t *)0xfe3294a0
// [0]      -- shadow_mode_enbl
// [3:1]    -- reserved
// [4]      -- shadow_armed
// [31:5]   -- reserved
//
// registers need shadowed
//   HEVC_DBLK_CFG6
//   HEVC_DBLK_CFG7
//   HEVC_DBLK_CFG8
#define P_VDEC2_HEVC_DBLK_MCP                      (volatile uint32_t *)0xfe3294a4
#define P_VDEC2_HEVC_DBLK_SLICNT                   (volatile uint32_t *)0xfe3294a8
#define P_VDEC2_HEVC_DBLK_INTRPT                   (volatile uint32_t *)0xfe3294ac
#define P_VDEC2_HEVC_DBLK_LMCS_DELTA_CW_INDEX      (volatile uint32_t *)0xfe3294b0
// [4:0]    -- cfg_lmcs_delta_cw_index
#define P_VDEC2_HEVC_DBLK_LMCS_DELTA_CW_DATA       (volatile uint32_t *)0xfe3294b4
// [15:0]   -- cfg_lmcs_delta_cw[cfg_lmcs_delta_cw_index]
#define P_VDEC2_HEVC_DBLK_LMCS_DELTA_CTRL          (volatile uint32_t *)0xfe3294b8
// [03:00]  -- resv
// [07:04]  -- cfg_lmcs_min_idx(0)
// [11:08]  -- cfg_lmcs_max_idx(0)
// [15:12]  -- resv
// [16]  -- lmi_bypass(0)
// [17]  -- lmi_on(0)
// [30:18]  -- resv
// [31]  -- lmi_cfg_start WO (write only,write "1" to generate one pulse start signal)
#define P_VDEC2_HEVC_DBLK_SAO0                     (volatile uint32_t *)0xfe329500
#define P_VDEC2_HEVC_DBLK_SAO1                     (volatile uint32_t *)0xfe329504
#define P_VDEC2_HEVC_DBLK_SAO2                     (volatile uint32_t *)0xfe329508
#define P_VDEC2_HEVC_DBLK_SAO3                     (volatile uint32_t *)0xfe32950c
#define P_VDEC2_HEVC_DBLK_ALF0                     (volatile uint32_t *)0xfe329510
#define P_VDEC2_HEVC_DBLK_ALF1                     (volatile uint32_t *)0xfe329514
#define P_VDEC2_HEVC_DBLK_ALF2                     (volatile uint32_t *)0xfe329518
#define P_VDEC2_HEVC_DBLK_ALF3                     (volatile uint32_t *)0xfe32951c
// VirtualBoundaryVertical [31:16]ver0 [15:0]ver_number
#define P_VDEC2_HEVC_DBLK_VBVER                    (volatile uint32_t *)0xfe329520
// VirtualBoundaryVertical [31:16]ver2 [15:0]ver1
#define P_VDEC2_HEVC_DBLK_VBVER1                   (volatile uint32_t *)0xfe329524
// VirtualboundaryHorizontal [31:16]hor0 [15:0]hor_number
#define P_VDEC2_HEVC_DBLK_VBHOR                    (volatile uint32_t *)0xfe329528
// VirtualboundaryHorizontal [31:16]hor2 [15:0]hor1
#define P_VDEC2_HEVC_DBLK_VBHOR1                   (volatile uint32_t *)0xfe32952c
// SUBPIC [15:0]:subPic index, [16]:lpf_across_subpic_enabled,
#define P_VDEC2_HEVC_DBLK_SUBPIC                   (volatile uint32_t *)0xfe329530
// EOT [31]:eot_flag [25:16]:eot_ctuy [9:0]:eot_ctux (for OW only)
#define P_VDEC2_HEVC_DBLK_EOT                      (volatile uint32_t *)0xfe329534
//
// Closing file:  hevc_dblk_regs.h
//
//
// Reading file:  hevc_sao_regs.h
//
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_SAO_CBUS_BASE = 0x06
// -----------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_SAO_CBUS_BASE_DBE1 = 0x0b
// -----------------------------------------------
#define P_VDEC2_HEVC_SAO_VERSION                   (volatile uint32_t *)0xfe329800
//  [31:0]  reversion               default:32'h00020001
#define P_VDEC2_HEVC_SAO_CTRL0                     (volatile uint32_t *)0xfe329804
//  [3:0]   lcu_size_log2
//  [27:4]  reserved
//  [28]    vp9_mode:0=not vp9 mode,1=vp9 mode(default:0)
//  [31:29] reserved
#define P_VDEC2_HEVC_SAO_CTRL1                     (volatile uint32_t *)0xfe329808
//  [31:24] ar_fifo1_axi_thred
//  [23:16] ar_fifo0_axi_thred
//  [15:14] axi_linealign, 0-16bytes, 1-32bytes, 2-64bytes (default=1)
//  [13:12] axi_aformat, 0-Linear, 1-32x32, 2-64x32
//  [11:08] axi_lendian_C
//  [07:04] axi_lendian_Y
//  [3]     reserved
//  [2]     clk_forceon
//  [1]     dw_disable:disable double write output
//  [0]     cm_disable:disable compress output
#define P_VDEC2_HEVC_SAO_INT_EN                    (volatile uint32_t *)0xfe32980c
//  [0]     sao_int_enable
//  [1]     sao_int_amrisc_level
//  [2]     sao_int_cpu_level
//  [3]     slice_done_int_amrisc_enable
//  [4]     slice_done_int_cpu_enable
//  [15]    disable_sao_int_clock_gating
//  [22]    OW Picture Done: 1=OW picture is done, 0=picture is not done, default:0
//  [26]    shadow_armed
//  [27]    shadow_mode_enbl
//  [28]    OW_TO_LPF_READY:0=not ready,1=ready
//  [29]    LPF_TO_OW_VALID:0=not valid,1=valid
//  [30]    LPF_IS_DONE:0=LPF is ON/BUSY,1=LPF/DBLK is DONE/OFF
//  [31]    OW_IS_ON:1=OW is ON/BUSY,0=OW is DONW/OFF
//  Other bits are reserved and RO
#define P_VDEC2_HEVC_SAO_INT_STATUS                (volatile uint32_t *)0xfe329810
//  [0]     slice_done IRQ
//  [31]    write "1"=slice start(self clear,read always return "0")
#define P_VDEC2_HEVC_SAO_PIC_SIZE                  (volatile uint32_t *)0xfe329814
//  [15:0]  pic_width[15:0]
//  [31:16] pic_height[15:0]
#define P_VDEC2_HEVC_SAO_PIC_SIZE_LCU              (volatile uint32_t *)0xfe329818
//  [15:0]  lcu_x_num_1[15:0]   (=lcu_x_total-1)
//  [31:16] lcu_y_num_1[15:0]   (=lcu_y_total-1)
#define P_VDEC2_HEVC_SAO_TILE_START                (volatile uint32_t *)0xfe32981c
//  [15:0]  tile_start_lcu_x[15:0]
//  [31:16] tile_start_lcu_y[15:0]
#define P_VDEC2_HEVC_SAO_TILE_SIZE_LCU             (volatile uint32_t *)0xfe329820
//  [15:0]  tile_width_lcu[15:0]
//  [31:16] tile_height_lcu[15:0]
#define P_VDEC2_HEVC_SAO_AXI_WCTRL                 (volatile uint32_t *)0xfe329824
#define P_VDEC2_HEVC_SAO_AXI_RCTRL                 (volatile uint32_t *)0xfe329828
#define P_VDEC2_HEVC_SAO_Y_START_ADDR              (volatile uint32_t *)0xfe32982c
#define P_VDEC2_HEVC_SAO_Y_LENGTH                  (volatile uint32_t *)0xfe329830
#define P_VDEC2_HEVC_SAO_C_START_ADDR              (volatile uint32_t *)0xfe329834
#define P_VDEC2_HEVC_SAO_C_LENGTH                  (volatile uint32_t *)0xfe329838
#define P_VDEC2_HEVC_SAO_Y_WPTR                    (volatile uint32_t *)0xfe32983c
#define P_VDEC2_HEVC_SAO_C_WPTR                    (volatile uint32_t *)0xfe329840
#define P_VDEC2_HEVC_SAO_ABV_START_ADDR            (volatile uint32_t *)0xfe329844
#define P_VDEC2_HEVC_SAO_VB_WR_START_ADDR          (volatile uint32_t *)0xfe329848
#define P_VDEC2_HEVC_SAO_VB_RD_START_ADDR          (volatile uint32_t *)0xfe32984c
#define P_VDEC2_HEVC_SAO_ABV_WPTR                  (volatile uint32_t *)0xfe329850
#define P_VDEC2_HEVC_SAO_ABV_RPTR                  (volatile uint32_t *)0xfe329854
#define P_VDEC2_HEVC_SAO_VB_WPTR                   (volatile uint32_t *)0xfe329858
#define P_VDEC2_HEVC_SAO_VB_RPTR                   (volatile uint32_t *)0xfe32985c
#define P_VDEC2_HEVC_SAO_DBG_MODE0                 (volatile uint32_t *)0xfe329878
#define P_VDEC2_HEVC_SAO_DBG_MODE1                 (volatile uint32_t *)0xfe32987c
#define P_VDEC2_HEVC_SAO_CTRL2                     (volatile uint32_t *)0xfe329880
//[[23:16]=aw_fifo2_axi_thred[7:0],default:0x20
#define P_VDEC2_HEVC_SAO_CTRL3                     (volatile uint32_t *)0xfe329884
//[0]  VVC MODE 0=not VVC mode,1=VVC mode (default:0)
//[1]  Double write P010 MODE 0=not P010 mode 1=P010 mode (default:0)
//[2]  Triple write mode,0=off,1=triple write on,(default:0)
//[3]  Triple write P010 MODE 0=not P010 mode 1=P010 mode (default:0)
//[31:4] reserved
#define P_VDEC2_HEVC_SAO_CTRL4                     (volatile uint32_t *)0xfe329888
//pic_height_ext_r,pic_width_ext_r
#define P_VDEC2_HEVC_SAO_CTRL5                     (volatile uint32_t *)0xfe32988c
//[23:22]  dw_v1_ctrl   default:2'b11
//[21:20]  dw_v0_ctrl   default:2'b11
//[19:18]  dw_h1_ctrl   default:2'b11
//[17:16]  dw_h0_ctrl   default:2'b11
//[14]    av1_mode:0=not av1 mode,1=av1 mode(default:0)
//[13]    avs2/avs3_mode:0=not avs2/avs3 mode,1=avs2/avs3 mode(default:0)
//[7]  blk_unc_force   0=NOT force-uncompress 1=force-uncompress default:0
//[01:00]  SYS USE FOR TEMP REGISTERS(FGS)
#define P_VDEC2_HEVC_SAO_CTRL6                     (volatile uint32_t *)0xfe329890
//pad_v_cbus[9:0]
//pad_u_cbus[9:0]
//pad_y_cbus[9:0]
#define P_VDEC2_HEVC_SAO_CTRL7                     (volatile uint32_t *)0xfe329894
//ar_fifo5_axi_thred
//aw_fifo5_axi_thred
//aw_fifo4_axi_thred
//aw_fifo3_axi_thred
#define P_VDEC2_HEVC_CM_BODY_START_ADDR            (volatile uint32_t *)0xfe329898
#define P_VDEC2_HEVC_CM_BODY_LENGTH                (volatile uint32_t *)0xfe32989c
#define P_VDEC2_HEVC_CM_HEADER_START_ADDR          (volatile uint32_t *)0xfe3298a0
#define P_VDEC2_HEVC_CM_HEADER_LENGTH              (volatile uint32_t *)0xfe3298a4
#define P_VDEC2_HEVC_CM_COLOR                      (volatile uint32_t *)0xfe3298a8
//cm_color_v_cfg_cbus
//cm_color_u_cfg_cbus
//cm_color_y_cfg_cbus
#define P_VDEC2_HEVC_CM_HEADER_OFFSET              (volatile uint32_t *)0xfe3298ac
#define P_VDEC2_HEVC_SAO_CTRL8                     (volatile uint32_t *)0xfe3298b0
//axi_idle_thred=sao_ctrl8[15:0]
#define P_VDEC2_HEVC_SAO_CTRL9                     (volatile uint32_t *)0xfe3298b4
//[10] dw_output_sel:0=nv21,1=compress,default=0
//[11] fgs_bypass:0=bypass,1=not bypass,default=0
//[16] fgs_table_disable:0=enable 1=disable,default=0
//[17] fgs_dma_disable:0=enable 1=disable,default=0
//[18] fgs_core_disable:0=enable 1=disable,default=0
//[23:20] fgs_dma_axi_lendian
#define P_VDEC2_HEVC_SAO_CTRL10                    (volatile uint32_t *)0xfe3298b8
#define P_VDEC2_HEVC_SAO_CTRL11                    (volatile uint32_t *)0xfe3298bc
#define P_VDEC2_HEVC_SAO_DBG_DATA_0                (volatile uint32_t *)0xfe3298c0
#define P_VDEC2_HEVC_SAO_DBG_DATA_1                (volatile uint32_t *)0xfe3298c4
#define P_VDEC2_HEVC_SAO_DBG_DATA_2                (volatile uint32_t *)0xfe3298c8
#define P_VDEC2_HEVC_SAO_DBG_DATA_3                (volatile uint32_t *)0xfe3298cc
#define P_VDEC2_HEVC_SAO_DBG_DATA_4                (volatile uint32_t *)0xfe3298d0
#define P_VDEC2_HEVC_SAO_DBG_DATA_5                (volatile uint32_t *)0xfe3298d4
#define P_VDEC2_HEVC_SAO_DBG_DATA_6                (volatile uint32_t *)0xfe3298d8
#define P_VDEC2_HEVC_SAO_DBG_DATA_7                (volatile uint32_t *)0xfe3298dc
#define P_VDEC2_HEVC_SAO_MMU_WR                    (volatile uint32_t *)0xfe3298e0
//RO:mmu_cm_body_ddr_addr
#define P_VDEC2_HEVC_SAO_MMU_STATUS                (volatile uint32_t *)0xfe3298e4
//Read Only
//[31:16]   mmu_cmd_rd_cnt[15:0]
//[15:0]    reserved0[15:0]
#define P_VDEC2_HEVC_SAO_MMU_VH0_ADDR              (volatile uint32_t *)0xfe3298e8
#define P_VDEC2_HEVC_SAO_MMU_VH1_ADDR              (volatile uint32_t *)0xfe3298ec
#define P_VDEC2_HEVC_SAO_MMU_WPTR                  (volatile uint32_t *)0xfe3298f0
#define P_VDEC2_HEVC_SAO_MMU_RPTR                  (volatile uint32_t *)0xfe3298f4
#define P_VDEC2_HEVC_SAO_MMU_DMA_CTRL              (volatile uint32_t *)0xfe3298f8
//[31:6] mmu_dma_base_address
//[5:1]  reserved 0
//[0]    mmu_dma_enable
#define P_VDEC2_HEVC_SAO_MMU_DMA_STATUS            (volatile uint32_t *)0xfe3298fc
//[31:1] reserved0
//[0]    dma_idle
#define P_VDEC2_HEVC_CM_CORE_STATUS                (volatile uint32_t *)0xfe329900
//[0]    tile_busy
//[30:1] reserved 0
//[31]   mmu_4kbuffer_empty
#define P_VDEC2_HEVC_SAO_MMU_RESET_CTRL            (volatile uint32_t *)0xfe329904
//[31:1] reserved 0
//[0]    sw_rst_mmu
#define P_VDEC2_HEVC_CM_LOSSY_QUANT_CTRL           (volatile uint32_t *)0xfe329908
//[0]    lossy_quant_enable
//[3:1]  reserved 0
//[7:4]  luma_bcleav_offset
//[11:8] chroma_bcleav_offset
//[31:12] reserved 0
#define P_VDEC2_HEVC_CM_LOSSY_RQUANT_YCLUT_ACCCONFIG (volatile uint32_t *)0xfe32990c
// ID to bctree quant lookup table 2x12
// [31:12]  reserved
// [11:8]   access_index
// [7:2]    reserved
// [1]      auto_inc_read
// [0]      auto_inc_write
#define P_VDEC2_HEVC_CM_LOSSY_RQUANT_YCLUT_DATA    (volatile uint32_t *)0xfe329910
// Id[3:0]  --> {chroma_rquant[3:0],luma_rquant[3:0]}
#define P_VDEC2_HEVC_CM_LOSSY_IQUANT_YCLUT_ACCCONFIG (volatile uint32_t *)0xfe329914
// ID to mintree quant lookup table 2x12
// [31:12]  reserved
// [11:8]   access_index
// [7:2]    reserved
// [1]      auto_inc_read
// [0]      auto_inc_write
#define P_VDEC2_HEVC_CM_LOSSY_IQUANT_YCLUT_DATA    (volatile uint32_t *)0xfe329918
// Id[3:0]  --> {chroma_iquant[3:0],luma_iquant[3:0]}
#define P_VDEC2_HEVC_CM_AV1_TILE_LOC_X             (volatile uint32_t *)0xfe32991c
// AV1 Tile info -- due to width superscaling in lpf
// [15:0]   tile_start_x
// [31:16]  tile_end_x
#define P_VDEC2_HEVC_CM_AV1_TILE_LOC_Y             (volatile uint32_t *)0xfe329920
// AV1 Tile info -- due to width superscaling in lpf
// [15:0]   tile_start_y
// [31:16]  tile_end_y
#define P_VDEC2_HEVC_CM_CORE_CTRL                  (volatile uint32_t *)0xfe329924
// [0]      cfg_av1_loopfilter_bypass (0)
// [3:1]    reserved
// [07:04]  axi_lendian_Y (0)
// [11:08]  axi_lendian_C (0)
// [31:12]   reserved
#define P_VDEC2_HEVC_CM_HEADER_START_ADDR2         (volatile uint32_t *)0xfe329928
#define P_VDEC2_HEVC_SAO_MMU_WR2                   (volatile uint32_t *)0xfe32992c
#define P_VDEC2_HEVC_SAO_MMU_DMA_CTRL2             (volatile uint32_t *)0xfe329930
//[31:6] mmu_dma_base_address2
//[5:1]  reserved 0
//[0]    mmu_dma_enable2
#define P_VDEC2_HEVC_SAO_MMU_VH0_ADDR2             (volatile uint32_t *)0xfe329934
#define P_VDEC2_HEVC_SAO_MMU_VH1_ADDR2             (volatile uint32_t *)0xfe329938
#define P_VDEC2_HEVC_CM_CORE_STATUS2               (volatile uint32_t *)0xfe32993c
//[0]    tile_busy
//[30:1] reserved 0
//[31]   mmu_4kbuffer_empty
//
#define P_VDEC2_HEVC_SAO_MMU_STATUS2               (volatile uint32_t *)0xfe329940
//Read Only
//[31:16]   mmu_cmd_rd_cnt2[15:0]
//[15:0]    reserved0[15:0]
//
#define P_VDEC2_HEVC_CM_LOSSY_QUANT_CTRL2          (volatile uint32_t *)0xfe329948
//[0]    lossy_quant_enable
//[3:1]  reserved 0
//[7:4]  luma_bcleav_offset
//[11:8] chroma_bcleav_offset
//[31:12] reserved 0
#define P_VDEC2_HEVC_CM_LOSSY_RQUANT_YCLUT_ACCCONFIG2 (volatile uint32_t *)0xfe32994c
// ID to bctree quant lookup table 2x12
// [31:12]  reserved
// [11:8]   access_index
// [7:2]    reserved
// [1]      auto_inc_read
// [0]      auto_inc_write
#define P_VDEC2_HEVC_CM_LOSSY_RQUANT_YCLUT_DATA2   (volatile uint32_t *)0xfe329950
// Id[3:0]  --> {chroma_rquant[3:0],luma_rquant[3:0]}
#define P_VDEC2_HEVC_CM_LOSSY_IQUANT_YCLUT_ACCCONFIG2 (volatile uint32_t *)0xfe329954
// ID to mintree quant lookup table 2x12
// [31:12]  reserved
// [11:8]   access_index
// [7:2]    reserved
// [1]      auto_inc_read
// [0]      auto_inc_write
#define P_VDEC2_HEVC_CM_LOSSY_IQUANT_YCLUT_DATA2   (volatile uint32_t *)0xfe329958
// Id[3:0]  --> {chroma_iquant[3:0],luma_iquant[3:0]}
#define P_VDEC2_HEVC_CM_AV1_TILE_LOC_X2            (volatile uint32_t *)0xfe32995c
// AV1 Tile info -- due to width superscaling in lpf
// [15:0]   tile_start_x
// [31:16]  tile_end_x
#define P_VDEC2_HEVC_CM_AV1_TILE_LOC_Y2            (volatile uint32_t *)0xfe329960
// AV1 Tile info -- due to width superscaling in lpf
// [15:0]   tile_start_y
// [31:16]  tile_end_y
#define P_VDEC2_HEVC_CM_CORE_CTRL2                 (volatile uint32_t *)0xfe329964
// [0]      cfg_av1_loopfilter_bypass (0)
// [3:1]    reserved
// [07:04]  axi_lendian_Y (0)
// [11:08]  axi_lendian_C (0)
// [31:12]   reserved
#define P_VDEC2_HEVC_CM_BODY_START_ADDR2           (volatile uint32_t *)0xfe329968
#define P_VDEC2_HEVC_FORCE_YUV_CTRL                (volatile uint32_t *)0xfe32996c
//[0]	CM force Y: 0=off,1=on,default=0
//[1]	CM force U: 0=off,1=on,default=0
//[2]	CM force V: 0=off,1=on,default=0
//[4]	DW force Y: 0=off,1=on,default=0
//[5]	DW force U: 0=off,1=on,default=0
//[6]	DW force V: 0=off,1=on,default=0
#define P_VDEC2_HEVC_FORCE_YUV_0                   (volatile uint32_t *)0xfe329970
//[9:0]	CM force Y value:default=10'h010
//[19:10]	CM force U value:default=10'h080
//[29:20]	CM force V value:default=10'h080
#define P_VDEC2_HEVC_FORCE_YUV_1                   (volatile uint32_t *)0xfe329974
//[9:0]	DW force Y value:default=10'h010
//[19:10]	DW force U value:default=10'h080
//[29:20]	DW force V value:default=10'h080
#define P_VDEC2_HEVC_DW_VH0_ADDDR                  (volatile uint32_t *)0xfe329978
#define P_VDEC2_HEVC_DW_VH1_ADDDR                  (volatile uint32_t *)0xfe32997c
#define P_VDEC2_HEVC_FGS_IDX                       (volatile uint32_t *)0xfe329980
// [5:0]  :  fgs_idx
// fbs_idx :
// 0 --
//       bit[30]   - bit_depth_10
//       bit[29]   - mc_identity
//       bit[28]   - num_pos_chroma_one_more
//       bit[27:24] - ar_coeff_shift
//       bit[23:20] - scaling_shift
//       bit[19]   - overlap_flag
//       bit[18]   - clip_to_restricted_range
//       bit[17]   - chroma_scaling_from_luma
// 1 --
//       bit[31:30] - grain_scale_shift
//       bit[29:28] - ar_coeff_lag
//       bit[27:20] - ar_coeffs_cr[24]
//       bit[19:12] - ar_coeffs_cb[24]
//       bit[11:8]  - num_cr_points
//       bit[7:4]   - num_cb_points
//       bit[3:0]   - num_y_points
// 2-8   -- scaling_points_y[14][2]
// 9-13  -- scaling_points_cb[10][2]
// 14-18 -- scaling_points_cr[10][2]
// 19-24 -- ar_coeffs_y[0-23]
// 25-30 -- ar_coeffs_cb[0-23]
// 31-36 -- ar_coeffs_cr[0-23]
// 37 --
//       bit[31:24]  - cb_mult
//       bit[23:16]  - cb_luma_mult
//       bit[15:7]   - cb_offset
// 38 --
//       bit[31:24]  - cr_mult
//       bit[23:16]  - cr_luma_mult
//       bit[15:7]   - cr_offset
#define P_VDEC2_HEVC_FGS_DATA                      (volatile uint32_t *)0xfe329984
#define P_VDEC2_HEVC_FGS_CTRL                      (volatile uint32_t *)0xfe329988
//       bit[31:16] - random_seed
//       bit[06]   - apply_cr (RO) //assign  apply_cr        =num_cr_points>0 | chroma_scaling_from_luma;
//       bit[05]   - apply_cb (RO) //assign  apply_cb        =num_cb_points>0 | chroma_scaling_from_luma;
//       bit[04]   - apply_lu (RO) //assign  apply_lu        =num_y_points>0;
//       bit[03]   - fgs_not_bypass : 0=fgs bypass 1:=fgs not bypass (default=0)
//       bit[02]   - update_parameters
//       bit[01]   - apply_grain
//       bit[00]   - film gran start
#define P_VDEC2_HEVC_CM_BODY_LENGTH2               (volatile uint32_t *)0xfe32998c
#define P_VDEC2_HEVC_CM_HEADER_OFFSET2             (volatile uint32_t *)0xfe329990
#define P_VDEC2_HEVC_CM_HEADER_LENGTH2             (volatile uint32_t *)0xfe329994
#define P_VDEC2_HEVC_FGS_TABLE_START               (volatile uint32_t *)0xfe329998
#define P_VDEC2_HEVC_FGS_TABLE_LENGTH              (volatile uint32_t *)0xfe32999c
#define P_VDEC2_HEVC_OW_FRAME_CNT                  (volatile uint32_t *)0xfe3299a0
#define P_VDEC2_HEVC_SAO_CTRL12                    (volatile uint32_t *)0xfe3299a4
//	[10]	AV1 DW_NV21 DW_PIC_WIDTH_SEL,0=pic_width,1=pic_width_clip,default=0
//	[11]	AV1 DW_NV21 DW_PIC_HEIGHT_SEL,0=pic_height,1=pic_height_clip,default=0
#define P_VDEC2_HEVC_SAO_CTRL13                    (volatile uint32_t *)0xfe3299a8
#define P_VDEC2_HEVC_SAO_CTRL14                    (volatile uint32_t *)0xfe3299ac
#define P_VDEC2_HEVC_SAO_CTRL15                    (volatile uint32_t *)0xfe3299b0
#define P_VDEC2_HEVC_SAO_CTRL16                    (volatile uint32_t *)0xfe3299b4
#define P_VDEC2_HEVC_SAO_CTRL17                    (volatile uint32_t *)0xfe3299b8
#define P_VDEC2_HEVC_SAO_CTRL18                    (volatile uint32_t *)0xfe3299bc
#define P_VDEC2_HEVC_SAO_CTRL19                    (volatile uint32_t *)0xfe3299c0
#define P_VDEC2_HEVC_SAO_CTRL20                    (volatile uint32_t *)0xfe3299c4
#define P_VDEC2_HEVC_SAO_CTRL21                    (volatile uint32_t *)0xfe3299c8
#define P_VDEC2_HEVC_SAO_CTRL22                    (volatile uint32_t *)0xfe3299cc
#define P_VDEC2_HEVC_SAO_CTRL23                    (volatile uint32_t *)0xfe3299d0
#define P_VDEC2_HEVC_SAO_CTRL24                    (volatile uint32_t *)0xfe3299d4
#define P_VDEC2_HEVC_SAO_CTRL25                    (volatile uint32_t *)0xfe3299d8
#define P_VDEC2_HEVC_SAO_CTRL26                    (volatile uint32_t *)0xfe3299dc
//[03:02]  dw_v2_ctrl   default:2'b00
//[01:00]  dw_h2_ctrl   default:2'b00
#define P_VDEC2_HEVC_SAO_CTRL27                    (volatile uint32_t *)0xfe3299e0
#define P_VDEC2_HEVC_SAO_CTRL28                    (volatile uint32_t *)0xfe3299e4
//[31]AFBC_SEC_ENABLE 0=disable 1=enable default:0
//[30:16]AFBC_SEC_Y default:0
//[15:0]AFBC_SEC_X default:0
#define P_VDEC2_HEVC_SAO_CTRL29                    (volatile uint32_t *)0xfe3299e8
//[31]DW_SEC_ENABLE 0=disable 1=enable default:0
//[30:16]DW_SEC_Y default:0
//[15:0]DW_SEC_X default:0
#define P_VDEC2_HEVC_SAO_CTRL30                    (volatile uint32_t *)0xfe3299ec
#define P_VDEC2_HEVC_SAO_CTRL31                    (volatile uint32_t *)0xfe3299f0
//[31:12]  reserved
//[11:10]  triple-write dw_v2_ctrl   default:2'b00
//[09:08]  triple-write dw_v1_ctrl   default:2'b11
//[07:06]  triple-write dw_v0_ctrl   default:2'b11
//[05:04]  triple-write dw_h2_ctrl   default:2'b00
//[03:02]  triple-write dw_h1_ctrl   default:2'b11
//[01:00]  triple-write dw_h0_ctrl   default:2'b11
#define P_VDEC2_HEVC_SAO_CTRL32                    (volatile uint32_t *)0xfe3299f4
//  [31:12] Reserved
//  [11:10] triple write axi_linealign, 0-16bytes, 1-32bytes, 2-64bytes (default=1)
//  [09:08] triple write axi_aformat, 0-Linear, 1-32x32, 2-64x32
//  [07:04] triple write axi_lendian_C
//  [03:00] triple write axi_lendian_Y
//`define HEVC_SAO_CTRL33           8'h7e
//`define HEVC_SAO_CTRL34           8'h7f
#define P_VDEC2_HEVC_OW_AXIADDR_PREFIX             (volatile uint32_t *)0xfe3299f8
//[01:00]nv21_addr_prefix
//[03:02]reserved
//[05:04]dw_vh_addr_prefix
//[07:06]reserved
//[09:08]fgs_table_start_addr_prefix
//[11:10]reserved
//[13:12]mmu_dma_baddr_prefix_0(AFBC)
//[15:14]reserved
//[17:16]vinfo_addr_prefix_0(AFBC)
//[19:18]reserved
//[21:20]header_addr_prefix_0(AFBC)
//[23:22]reserved
//[25:24]mmu_dma_baddr_prefix_1(DWCM)
//[27:26]reserved
//[29:28]vinfo_addr_prefix_1(DWCM)
//[31:30]reserved
#define P_VDEC2_HEVC_OW_AXIADDR_PREFIX2            (volatile uint32_t *)0xfe3299fc
//[01:00]header_addr_prefix_1(DWCM)
//[03:02]reserved
#define P_VDEC2_HEVC_SAO_STATUS0                   (volatile uint32_t *)0xfe329a00
#define P_VDEC2_HEVC_SAO_STATUS1                   (volatile uint32_t *)0xfe329a04
#define P_VDEC2_HEVC_SAO_STATUS2                   (volatile uint32_t *)0xfe329a08
#define P_VDEC2_HEVC_SAO_STATUS3                   (volatile uint32_t *)0xfe329a0c
#define P_VDEC2_HEVC_SAO_STATUS4                   (volatile uint32_t *)0xfe329a10
#define P_VDEC2_HEVC_SAO_STATUS5                   (volatile uint32_t *)0xfe329a14
#define P_VDEC2_HEVC_SAO_STATUS6                   (volatile uint32_t *)0xfe329a18
#define P_VDEC2_HEVC_SAO_STATUS7                   (volatile uint32_t *)0xfe329a1c
//mmu_copy
#define P_VDEC2_COPY_REG_R0                        (volatile uint32_t *)0xfe329a20
#define P_VDEC2_COPY_REG_R1                        (volatile uint32_t *)0xfe329a24
#define P_VDEC2_COPY_SEL                           (volatile uint32_t *)0xfe329a28
#define P_VDEC2_COPY_REG_R3                        (volatile uint32_t *)0xfe329a2c
#define P_VDEC2_COPY_REG_R4                        (volatile uint32_t *)0xfe329a30
#define P_VDEC2_COPY_REG_R5                        (volatile uint32_t *)0xfe329a34
#define P_VDEC2_HEVC_SAO_SHADOWMODE_CNTL           (volatile uint32_t *)0xfe329a38
// [0]      -- shadow_mode_enbl
// [3:1]    -- reserved
// [4]      -- shadow_armed
// [31:5]   -- reserved
//
// registers need shadowed
//   HEVC_SAO_TILE_START
//   HEVC_SAO_TILE_SIZE_LCU
#define P_VDEC2_HEVC_SAO_CRC                       (volatile uint32_t *)0xfe329a40
//lpf to ow input data CRC
#define P_VDEC2_HEVC_SAO_CRC_Y                     (volatile uint32_t *)0xfe329a44
//lpf to ow input Y data CRC
#define P_VDEC2_HEVC_SAO_CRC_C                     (volatile uint32_t *)0xfe329a48
//lpf to ow input C data CRC
#define P_VDEC2_HEVC_SAO_CRC_1                     (volatile uint32_t *)0xfe329a4c
//ow normal decoder loop afbc output CRC
#define P_VDEC2_HEVC_SAO_CRC_2                     (volatile uint32_t *)0xfe329a50
//ow film grain output CRC
#define P_VDEC2_HEVC_SAO_CRC_3                     (volatile uint32_t *)0xfe329a54
//ow double write no-compress(NV21) output CRC
#define P_VDEC2_HEVC_SAO_CRC_4                     (volatile uint32_t *)0xfe329a58
//ow double write compress output CRC
#define P_VDEC2_HEVC_SAO_CRC_5                     (volatile uint32_t *)0xfe329a5c
//ow triple write no-compress(NV21) output CRC
#define P_VDEC2_HEVC_SAO_Y_START_ADDR3             (volatile uint32_t *)0xfe329a60
#define P_VDEC2_HEVC_SAO_Y_LENGTH3                 (volatile uint32_t *)0xfe329a64
#define P_VDEC2_HEVC_SAO_C_START_ADDR3             (volatile uint32_t *)0xfe329a68
#define P_VDEC2_HEVC_SAO_C_LENGTH3                 (volatile uint32_t *)0xfe329a6c
#define P_VDEC2_HEVC_FORCE_YUV_2                   (volatile uint32_t *)0xfe329a70
//[9:0]	DW force Y value:default=10'h010
//[19:10]	DW force U value:default=10'h080
//[29:20]	DW force V value:default=10'h080
#define P_VDEC2_HEVC_SAO_AXI_CTRL                  (volatile uint32_t *)0xfe329a74
#define P_VDEC2_HEVC_SAO_Y2_START_ADDR             (volatile uint32_t *)0xfe329a80
#define P_VDEC2_HEVC_SAO_Y2_LENGTH                 (volatile uint32_t *)0xfe329a84
#define P_VDEC2_HEVC_SAO_C2_START_ADDR             (volatile uint32_t *)0xfe329a88
#define P_VDEC2_HEVC_SAO_C2_LENGTH                 (volatile uint32_t *)0xfe329a8c
#define P_VDEC2_HEVC_SAO_TILE_IDX                  (volatile uint32_t *)0xfe329a90
//[7:0]		TILE_IDX_X (H266/VVC only)
//[15:8]	TILE_IDX_y (H266/VVC only)
//[31:16]	reserved
//
// Closing file:  hevc_sao_regs.h
//
//
// Reading file:  hevc_iqit_regs.h
//
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_IQIT_CBUS_BASE = 0x07
// -----------------------------------------------
// -----------------------------------------------
// CBUS_BASE:  DOS_HEVC_IQIT_CBUS_BASE_DBE1 = 0x0c
// -----------------------------------------------
// [    2] RW en_freeclk.   0=Auto-gated clock for saving power;
//                          1=Free running clock if something wrong with auto-gating.
//                          Default 0.
// [    1] RW enable_clk.   0=Disable clock; 1=Enable clock.        Default 0.
#define P_VDEC2_HEVC_IQIT_CLK_RST_CTRL             (volatile uint32_t *)0xfe329c00
// [ 5: 4] RW ctb_size.     0=8x8; 1=16x16; 2=32x32; 3=64x64.                       Default 0.
// [    3] RW itr_skip_mode. For dealing with discrepancy between Spec and C model for transform_skip.
//                          0=Follow Spec; 1=Follow C model.                        Default 0.
// [    2] RW scalelist_mode. Applicable only when scalelist_en=1.
//                          0=Use default scaling factor list;
//                          1=Use scaling factor list define in bit stream.
//                          Default 0.
// [    1] RW scalelist_en. 0=Use flat scale; 1=Use scaling factor list.            Default 0.
// [    0] RW diagscan_en.  0=Linear lookup dQ table; 1=Diagonally lookup dQ table. Default 0.
#define P_VDEC2_HEVC_IQIT_DEQUANT_CTRL             (volatile uint32_t *)0xfe329c04
// [31:10] WR Reserved.                                 Default 0.
// [ 9: 0] WR scalelut_addr.                            Default 0.
#define P_VDEC2_HEVC_IQIT_SCALELUT_WR_ADDR         (volatile uint32_t *)0xfe329c08
// [31:10] RD Reserved.                                 Default 0.
// [ 9: 0] RD scalelut_addr.                            Default 0.
#define P_VDEC2_HEVC_IQIT_SCALELUT_RD_ADDR         (volatile uint32_t *)0xfe329c0c
// [ 7: 0] RW LUT data.
#define P_VDEC2_HEVC_IQIT_SCALELUT_DATA            (volatile uint32_t *)0xfe329c10
//---------------------------------------------------
// tab_idx [2:0] -
//    0-5 use custom table index
//    6 - reserved
//    7 - use default table
//---------------------------------------------------
// [22:20] 4x4 tab 5
// [   19] reserved
// [18:16] 4x4 tab 4
// [   15] reserved
// [14:12] 4x4 tab 3
// [   11] reserved
// [10: 8] 4x4 tab 2
// [    7] reserved
// [ 6: 4] 4x4 tab 1
// [    3] reserved
// [ 2: 0] 4x4 tab 0
#define P_VDEC2_HEVC_IQIT_SCALELUT_IDX_4           (volatile uint32_t *)0xfe329c14
// [22:20] 8x8 tab 5
// [   19] reserved
// [18:16] 8x8 tab 4
// [   15] reserved
// [14:12] 8x8 tab 3
// [   11] reserved
// [10: 8] 8x8 tab 2
// [    7] reserved
// [ 6: 4] 8x8 tab 1
// [    3] reserved
// [ 2: 0] 8x8 tab 0
#define P_VDEC2_HEVC_IQIT_SCALELUT_IDX_8           (volatile uint32_t *)0xfe329c18
// [   31] reserved
// [30:28] 32x32 tab 1
// [   27] reserved
// [26:24] 32x32 tab 0
// [   23] reserved
// [22:20] 16x16 tab 5
// [   19] reserved
// [18:16] 16x16 tab 4
// [   15] reserved
// [14:12] 16x16 tab 3
// [   11] reserved
// [10: 8] 16x16 tab 2
// [    7] reserved
// [ 6: 4] 16x16 tab 1
// [    3] reserved
// [ 2: 0] 16x16 tab 0
#define P_VDEC2_HEVC_IQIT_SCALELUT_IDX_16_32       (volatile uint32_t *)0xfe329c1c
// [ 8: 2] R  tuinfo_fifo_cnt.
// [    1] R  fifo_has_room.
// [    0] R  mem_init_done.
#define P_VDEC2_HEVC_IQIT_STAT_GEN0                (volatile uint32_t *)0xfe329c20
// [   23] RW cntl_qp_cr_valid.
// [21:16] RW cntl_qp_cr.
// [   15] RW cntl_qp_cb_valid.
// [13: 8] RW cntl_qp_cb.
// [    7] RW cntl_qp_y_valid.
// [ 5: 0] RW cntl_qp_y.
#define P_VDEC2_HEVC_QP_WRITE                      (volatile uint32_t *)0xfe329c24
// [31:30] R  ipp_size.
// [28:24] R  ipp_mem_ptr.
// [23:22] R  itr2_size.
// [20:16] R  itr2_mem_ptr.
// [15:14] R  itr1_size.
// [12: 8] R  itr1_mem_ptr.
// [ 7: 6] R  iq_size.
// [ 4: 0] R  iq_mem_ptr.
#define P_VDEC2_HEVC_IQIT_STAT_GEN1                (volatile uint32_t *)0xfe329c28
// [ 5: 4] RW cntl_bitdepth_c. 0=8-bit; 1=9-bit; 2=10-bit.
// [ 1: 0] RW cntl_bitdepth_y. 0=8-bit; 1=9-bit; 2=10-bit.
#define P_VDEC2_HEVC_IQIT_BITDEPTH                 (volatile uint32_t *)0xfe329c2c
// [   10] R  ipp_active.
// [    9] R  itr2_active.
// [    8] R  itr1_active.
// [ 5: 0] R  mem_spare_num.
#define P_VDEC2_HEVC_IQIT_STAT_GEN2                (volatile uint32_t *)0xfe329c30
#define P_VDEC2_HEVC_IQIT_AVS2_WQP_0123            (volatile uint32_t *)0xfe329c34
#define P_VDEC2_HEVC_IQIT_AVS2_WQP_45              (volatile uint32_t *)0xfe329c38
#define P_VDEC2_HEVC_IQIT_AVS2_QP_DELTA            (volatile uint32_t *)0xfe329c3c
// bit[11]  -- mv_use_abs (only calculate abs)
// bit[10]  -- mv_use_simple_mode (every size count has same weight)
// bit[9]   -- use_simple_mode (every size count has same weight)
// bit[8]   -- reset_all_count // write only
// bit[7:5] Reserved
// bit[4:0] pic_quality_rd_idx
#define P_VDEC2_HEVC_PIC_QUALITY_CTRL              (volatile uint32_t *)0xfe329c40
// idx  -- read out
//   0  -- blk44_y_count // 4k will use 20 bits
//   1  -- qp_y_sum // 4k use 27 bits
//   2  -- intra_y_count // 4k use 20 bits
//   3  -- skipped_cu_y_count // 4k use 20 bits
//   4  -- coeff_zero_y_count // 4k use 20 bits
//   5  -- blk44_c_count // 4k will use 20 bits
//   6  -- qp_c_sum // 4k use 26 bits
//   7  -- intra_c_count // 4k use 20 bits
//   8  -- skipped_cu_c_count // 4k use 20 bits
//   9  -- coeff_zero_c_count // 4k use 20 bits
//  10  -- { 1'h0, qp_c_max[6:0], 1'h0, qp_c_min[6:0], 1'h0, qp_y_max[6:0], 1'h0, qp_y_min[6:0]}
//  11  -- blk44_mv_count
//  12  -- {mvy_L1_count[39:32], mvx_L1_count[39:32], mvy_L0_count[39:32], mvx_L0_count[39:32]}
//  13  -- mvx_L0_count[31:0]
//  14  -- mvy_L0_count[31:0]
//  15  -- mvx_L1_count[31:0]
//  16  -- mvy_L1_count[31:0]
//  17  -- {mvx_L0_max, mvx_L0_min} // format : {sign, abs[14:0]}
//  18  -- {mvy_L0_max, mvy_L0_min}
//  19  -- {mvx_L1_max, mvx_L1_min}
//  20  -- {mvy_L1_max, mvy_L1_min}
#define P_VDEC2_HEVC_PIC_QUALITY_DATA              (volatile uint32_t *)0xfe329c44
// bit[15]  disable_ddr_r_count
// bit[14]  disable_ddr_ar_count
// bit[13]  disable_ddr_w_count
// bit[12]  disable_ddr_aw_count
// bit[11]  disable_dblk_puinfo_count
// bit[10]  disable_dblk_tuinfo_count
// bit[9]   disable_mpreg_imp_count
// bit[8:4] path_monitor_rd_idx
// bit[3:2] Reserved
// bit[1]   Clear all count
// bit[0]   Enable/Disable monitor
#define P_VDEC2_HEVC_PATH_MONITOR_CTRL             (volatile uint32_t *)0xfe329c48
// idx  -- read out
//   0  -- total_clock_count
//   1  -- parser_iqit_transfer_count
//   2  -- parser_iqit_wait_count
//   3  -- iqit_ipp_transfer_count
//   4  -- iqit_ipp_wait_count
//   5  -- dblk_ipp_transfer_count
//   6  -- dblk_ipp_wait_count
//   7  -- dblk_ow_transfer_count
//   8  -- dblk_ow_wait_count
//   9  -- ddr_transfer_count
//  10  -- ddr_wait_count
//  11  -- cmd_transfer_count
//  12  -- cmd_wait_count
//  13  -- {
//            interface_ready[15:0],
//            interface_valid[15:0]
//         }
//interface_ready <= {
//		    5'h0,
//		    imp_rdy_imp,
//		    dblk_tuinfo_ready,
//		    dblk_puinfo_ready,
//		    rready_axi_hs_b,
//		    arready_axi_hs_b,
//		    wready_axi_hs_b,
//		    awready_axi_hs_b,
//		    dblk_ow_ready,
//		    dblk_ipp_ready,
//		    iqit_ipp_ready,
//		    parser_iqit_ready
//                 };
//interface_valid <= {
//		    5'h0,
//		    imp_valid_imp,
//		    dblk_tuinfo_valid,
//		    dblk_puinfo_valid,
//		    rvalid_axi_hs_b,
//		    arvalid_axi_hs_b,
//		    wvalid_axi_hs_b,
//		    awvalid_axi_hs_b,
//		    dblk_ow_valid,
//		    dblk_ipp_valid,
//		    iqit_ipp_valid,
//		    parser_iqit_valid
//                 };
#define P_VDEC2_HEVC_PATH_MONITOR_DATA             (volatile uint32_t *)0xfe329c4c
#define P_VDEC2_HEVC_IQIT_STAT_GEN3                (volatile uint32_t *)0xfe329c80
#define P_VDEC2_HEVC_IQIT_STAT_GEN4                (volatile uint32_t *)0xfe329c84
#define P_VDEC2_HEVC_IQIT_STAT_GEN5                (volatile uint32_t *)0xfe329c88
#define P_VDEC2_HEVC_IQIT_RES_CNT                  (volatile uint32_t *)0xfe329c8c
// Added for VVC
//`define HEVC_IQIT_SCALELUT_IDX_2_VVC        8'h30
//`define HEVC_IQIT_SCALELUT_IDX_32_VVC       8'h31
//`define HEVC_IQIT_SCALELUT_IDX_64_VVC       8'h32
#define P_VDEC2_HEVC_IQIT_DEQUANT_CTRL2            (volatile uint32_t *)0xfe329ccc
#define P_VDEC2_HEVC_IQIT_QP_OFFSET_CHROMA_HEADER  (volatile uint32_t *)0xfe329cd0
#define P_VDEC2_HEVC_IQIT_QP_OFFSET_CHROMA_SLICE   (volatile uint32_t *)0xfe329cd4
#define P_VDEC2_HEVC_IQIT_QP_OFFSET_CHROMA_ADJ_1   (volatile uint32_t *)0xfe329cd8
#define P_VDEC2_HEVC_IQIT_QP_OFFSET_CHROMA_ADJ_2   (volatile uint32_t *)0xfe329cdc
#define P_VDEC2_HEVC_IQIT_QP_OFFSET_CHROMA_ADJ_3   (volatile uint32_t *)0xfe329ce0
#define P_VDEC2_HEVC_IQIT_QP_OFFSET_CHROMA_ADJ_4   (volatile uint32_t *)0xfe329ce4
#define P_VDEC2_HEVC_IQIT_QP_OFFSET_CHROMA_ADJ_5   (volatile uint32_t *)0xfe329ce8
#define P_VDEC2_HEVC_IQIT_QP_OFFSET_CHROMA_ADJ_6   (volatile uint32_t *)0xfe329cec
#define P_VDEC2_HEVC_IQIT_QP_CHROMA_MAP_WADDR      (volatile uint32_t *)0xfe329cf0
#define P_VDEC2_HEVC_IQIT_QP_CHROMA_MAP_RADDR      (volatile uint32_t *)0xfe329cf4
#define P_VDEC2_HEVC_IQIT_QP_CHROMA_MAP_DATA       (volatile uint32_t *)0xfe329cf8
#define P_VDEC2_HEVC_IQIT_ERR_STATUS               (volatile uint32_t *)0xfe329cfc
//
// Closing file:  hevc_iqit_regs.h
//

#endif // P_DOS_REGISTER_H

