// ----------------------------------------------------------------------
// This file is automatically generated from the script:
//
// ./create_headers_from_register_h.pl
//
// and was applied to the file
//
// Project name: a4
//
// Create time: Tue Feb 14 11:32:43 CST 2023 by chong.gu
//
// ./REG_LIST_RTL.h
//
// DO NOT EDIT!!!!!
// ----------------------------------------------------------------------
//
#ifdef REGISTER_H
#else
#define REGISTER_H

#include "soc_def.h"
#if 0
#ifndef VERIFICATION
    #define Wr64(addr, data) *(volatile uint64_t *)(addr)=(data)
    #define Rd64(addr) *(volatile uint64_t *)(addr)
    #define Wr8(addr, data) *(volatile uint8_t *)(addr)=(data)
    #define Rd8(addr) *(volatile uint8_t *)(addr)
    #define Wr(addr, data) *(volatile uint32_t *)(addr)=(data)
    #define Rd(addr) *(volatile uint32_t *)(addr)
    #define Wr_reg_bits(reg, val, start, len) \
      Wr(reg, ((Rd(reg) & ~(((1L<<(len))-1)<<(start))) | ((uint32_t)(val & ((1L<<len)-1)) << (start))))
#else
    #include "dpi.h"
#endif
#endif
#define REG_BASE_VCBUS                  (0xFE340000L)
//
// Reading file:  ./REG_LIST_RTL.h
//
// synopsys translate_off
// synopsys translate_on
//
//`include "./dmc_clk_freq.vh"
//`include "../mmc_lp4/dmc/rtl/dmc_reg.vh"
//========================================================================
// STARTUP
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe02e000
// -----------------------------------------------
#define STARTUP_LOCK                               ((0x0000  << 2) + 0xfe02e000)
#define STARTUP_DFU_STS                            ((0x0004  << 2) + 0xfe02e000)
#define STARTUP_BOOT_SRC                           ((0x0008  << 2) + 0xfe02e000)
#define STARTUP_TEE_REQ_DFU                        ((0x0009  << 2) + 0xfe02e000)
#define STARTUP_BOOT_OVERRIDE                      ((0x000a  << 2) + 0xfe02e000)
#define STARTUP_COLD_BOOT_CNT                      ((0x000b  << 2) + 0xfe02e000)
#define STARTUP_KEY_PRESERVE                       ((0x000c  << 2) + 0xfe02e000)
//========================================================================
// MIPI_DSI_PHY
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe01c000
// -----------------------------------------------
//`define MIPI_DSI_PHY_START      8'h00
//`define MIPI_DSI_PHY_END        16'hffff
#define MIPI_DSI_PHY_CTRL                          ((0x0000  << 2) + 0xfe01c000)
  //bit 31.  soft reset for the phy. 1 = reset. 0 = dessert the reset.
  //bit 30.  clock lane soft reset.
  //bit 29.  data byte lane 3 soft reset.
  //bit 28.  data byte lane 2 soft reset.
  //bit 27.  data byte lane 1 soft reset.
  //bit 26.  data byte lane 0 soft reset.
  //bit 5.   LPDT data endian.  1 = transfer the high bit first. 0 : transfer the low bit first.
  //bit 4.   HS data endian.
  //bit 3.  force data byte lane in stop mode.
  //bit 2.  force data byte lane 0 in receiver mode.
  //bit 1. write 1 to sync the txclkesc input. the internal logic have to use txclkesc to decide Txvalid and Txready.
  //bit 0.  enable the MIPI DSI PHY TxDDRClk.
#define MIPI_DSI_CHAN_CTRL                         ((0x0001  << 2) + 0xfe01c000)
  //bit 31.   clk lane tx_hs_en control selection.  1 = from register. 0 use clk lane state machine.
  //bit 30.   register bit for clock lane tx_hs_en.
  //bit 29.  clk lane tx_lp_en contrl selection.  1 = from register. 0 from clk lane state machine.
  //bit 28.  register bit for clock lane tx_lp_en.
  //bit 27.  chan0 tx_hs_en control selection. 1 = from register. 0 from chan0 state machine.
  //bit 26.  register bit for chan0 tx_hs_en.
  //bit 25.  chan0 tx_lp_en control selection. 1 = from register. 0 from chan0 state machine.
  //bit 24. register bit from chan0 tx_lp_en.
  //bit 23.  chan0 rx_lp_en control selection. 1 = from register. 0 from chan0 state machine.
  //bit 22. register bit from chan0 rx_lp_en.
  //bit 21.  chan0 contention detection enable control selection. 1 = from register. 0 from chan0 state machine.
  //bit 20. register bit from chan0 contention detection enable.
  //bit 19.  chan1 tx_hs_en control selection. 1 = from register. 0 from chan0 state machine.
  //bit 18.  register bit for chan1 tx_hs_en.
  //bit 17.  chan1 tx_lp_en control selection. 1 = from register. 0 from chan0 state machine.
  //bit 16. register bit from chan1 tx_lp_en.
  //bit 15.  chan2 tx_hs_en control selection. 1 = from register. 0 from chan0 state machine.
  //bit 14.  register bit for chan2 tx_hs_en.
  //bit 13.  chan2 tx_lp_en control selection. 1 = from register. 0 from chan0 state machine.
  //bit 12. register bit from chan2 tx_lp_en.
  //bit 11. chan3 tx_hs_en control selection. 1 = from register. 0 from chan0 state machine.
  //bit 10. register bit for chan3 tx_hs_en.
  //bit 9.  chan3 tx_lp_en control selection. 1 = from register. 0 from chan0 state machine.
  //bit 8. register bit from chan3 tx_lp_en.
  //bit 4.  clk chan power down. this bit is also used as the power down of the whole MIPI_DSI_PHY.
  //bit 3.  chan3 power down.
  //bit 2.  chan2 power down.
  //bit 1.  chan1 power down.
  //bit 0.  chan0 power down.
#define MIPI_DSI_CHAN_STS                          ((0x0002  << 2) + 0xfe01c000)
 //bit 24.  chan0 TX->RX turn can't accept the ACK command from slave watch dog triggered.  write 1 to clear the status bit.
 //bit 23.  chan0 RX ESC command watch dog triggered. write 1 to clean this bit.
 //bit
#define MIPI_DSI_CLK_TIM                           ((0x0003  << 2) + 0xfe01c000)
  //bit 31:24. TCLK_PREPARE.
  //bit 23:16. TCLK_ZERO.
  //bit 15:8.  TCLK_POST.
  //bit 7:0.   TCLK_TRAIL.
#define MIPI_DSI_HS_TIM                            ((0x0004  << 2) + 0xfe01c000)
  //bit 31:24. THS_PREPARE.
  //bit 23:16. THS_ZERO.
  //bit 15:8.  THS_TRAIL.
  //bit 7:0.   THS_EXIT.
#define MIPI_DSI_LP_TIM                            ((0x0005  << 2) + 0xfe01c000)
  //bit 31:24. tTA_GET.
  //bit 23:16. tTA_GO.
  //bit 15:8.  tTA_SURE.
  //bit 7:0.   tLPX.
#define MIPI_DSI_ANA_UP_TIM                        ((0x0006  << 2) + 0xfe01c000)
  //wait time to  MIPI DIS analog ready.
#define MIPI_DSI_INIT_TIM                          ((0x0007  << 2) + 0xfe01c000)
  // TINIT.
#define MIPI_DSI_WAKEUP_TIM                        ((0x0008  << 2) + 0xfe01c000)
  //TWAKEUP.
#define MIPI_DSI_LPOK_TIM                          ((0x0009  << 2) + 0xfe01c000)
  //bit 31:0 when in RxULPS state, RX receiver is in sleep mode.
  //every MIPI_DSI_ULPS_CHECK period, the receiver would be enabled once, and waiting this timer period to get the stable input.
#define MIPI_DSI_LP_WCHDOG                         ((0x000a  << 2) + 0xfe01c000)
  //bit 31:0 watch dog timer for MIPI DSI LP receive state.
#define MIPI_DSI_ANA_CTRL                          ((0x000b  << 2) + 0xfe01c000)
  //bit 31:0 tMBIAS.  timer to wait for analog mBIAS voltage stable.
#define MIPI_DSI_CLK_TIM1                          ((0x000c  << 2) + 0xfe01c000)
  //bit 31:8  not used.
  //bit 7:0    tCLK_PRE
#define MIPI_DSI_TURN_WCHDOG                       ((0x000d  << 2) + 0xfe01c000)
 //bit 31:0 watch dog timer for lane 0 LP turn around waiting time.
#define MIPI_DSI_ULPS_CHECK                        ((0x000e  << 2) + 0xfe01c000)
 //bit 31:0 when Lane0 in LP receive state,  if the another side sent Low power command,  using this timer to enable Tcheck the another size wakeup nor not.
#define MIPI_DSI_TEST_CTRL0                        ((0x000f  << 2) + 0xfe01c000)
#define MIPI_DSI_TEST_CTRL1                        ((0x0010  << 2) + 0xfe01c000)
//========================================================================
//  rtc dig
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe09a000
// -----------------------------------------------
//
//
//
#define RTC_CTRL                                   ((0x0000  << 2) + 0xfe09a000)
#define RTC_COUNTER_REG                            ((0x0001  << 2) + 0xfe09a000)
#define RTC_ALARM0_REG                             ((0x0002  << 2) + 0xfe09a000)
#define RTC_ALARM1_REG                             ((0x0003  << 2) + 0xfe09a000)
#define RTC_ALARM2_REG                             ((0x0004  << 2) + 0xfe09a000)
#define RTC_ALARM3_REG                             ((0x0005  << 2) + 0xfe09a000)
#define RTC_SEC_ADJUST_REG                         ((0x0006  << 2) + 0xfe09a000)
#define RTC_WIDEN_VAL                              ((0x0007  << 2) + 0xfe09a000)
#define RTC_INT_MASK                               ((0x0008  << 2) + 0xfe09a000)
#define RTC_INT_CLR                                ((0x0009  << 2) + 0xfe09a000)
#define RTC_OSCIN_CTRL0                            ((0x000a  << 2) + 0xfe09a000)
#define RTC_OSCIN_CTRL1                            ((0x000b  << 2) + 0xfe09a000)
#define RTC_INT_STATUS                             ((0x000c  << 2) + 0xfe09a000)
#define RTC_REAL_TIME                              ((0x000d  << 2) + 0xfe09a000)
//========================================================================
//  Temp sensor PLL
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe020000
// -----------------------------------------------
#define TS_PLL_CFG_REG1                            ((0x0001  << 2) + 0xfe020000)
#define TS_PLL_CFG_REG2                            ((0x0002  << 2) + 0xfe020000)
#define TS_PLL_CFG_REG3                            ((0x0003  << 2) + 0xfe020000)
#define TS_PLL_CFG_REG4                            ((0x0004  << 2) + 0xfe020000)
#define TS_PLL_CFG_REG5                            ((0x0005  << 2) + 0xfe020000)
#define TS_PLL_CFG_REG6                            ((0x0006  << 2) + 0xfe020000)
#define TS_PLL_CFG_REG7                            ((0x0007  << 2) + 0xfe020000)
#define TS_PLL_STAT0                               ((0x0010  << 2) + 0xfe020000)
#define TS_PLL_STAT1                               ((0x0011  << 2) + 0xfe020000)
#define TS_PLL_STAT2                               ((0x0012  << 2) + 0xfe020000)
#define TS_PLL_STAT3                               ((0x0013  << 2) + 0xfe020000)
#define TS_PLL_STAT4                               ((0x0014  << 2) + 0xfe020000)
#define TS_PLL_STAT5                               ((0x0015  << 2) + 0xfe020000)
#define TS_PLL_STAT6                               ((0x0016  << 2) + 0xfe020000)
#define TS_PLL_STAT7                               ((0x0017  << 2) + 0xfe020000)
#define TS_PLL_STAT8                               ((0x0018  << 2) + 0xfe020000)
#define TS_PLL_STAT9                               ((0x0019  << 2) + 0xfe020000)
//========================================================================
//  Temp sensor DDR
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe022000
// -----------------------------------------------
#define TS_DDR_CFG_REG1                            ((0x0001  << 2) + 0xfe022000)
#define TS_DDR_CFG_REG2                            ((0x0002  << 2) + 0xfe022000)
#define TS_DDR_CFG_REG3                            ((0x0003  << 2) + 0xfe022000)
#define TS_DDR_CFG_REG4                            ((0x0004  << 2) + 0xfe022000)
#define TS_DDR_CFG_REG5                            ((0x0005  << 2) + 0xfe022000)
#define TS_DDR_CFG_REG6                            ((0x0006  << 2) + 0xfe022000)
#define TS_DDR_CFG_REG7                            ((0x0007  << 2) + 0xfe022000)
#define TS_DDR_STAT0                               ((0x0010  << 2) + 0xfe022000)
#define TS_DDR_STAT1                               ((0x0011  << 2) + 0xfe022000)
#define TS_DDR_STAT2                               ((0x0012  << 2) + 0xfe022000)
#define TS_DDR_STAT3                               ((0x0013  << 2) + 0xfe022000)
#define TS_DDR_STAT4                               ((0x0014  << 2) + 0xfe022000)
#define TS_DDR_STAT5                               ((0x0015  << 2) + 0xfe022000)
#define TS_DDR_STAT6                               ((0x0016  << 2) + 0xfe022000)
#define TS_DDR_STAT7                               ((0x0017  << 2) + 0xfe022000)
#define TS_DDR_STAT8                               ((0x0018  << 2) + 0xfe022000)
#define TS_DDR_STAT9                               ((0x0019  << 2) + 0xfe022000)
//========================================================================
//  Temp sensor GPU
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe035000
// -----------------------------------------------
//`define TS_GPU_CFG_REG1                         8'h01
//`define TS_GPU_CFG_REG2                         8'h02
//`define TS_GPU_CFG_REG3                         8'h03
//`define TS_GPU_CFG_REG4                         8'h04
//`define TS_GPU_CFG_REG5                         8'h05
//`define TS_GPU_CFG_REG6                         8'h06
//`define TS_GPU_CFG_REG7                         8'h07
//`define TS_GPU_STAT0                            8'h10
//`define TS_GPU_STAT1                            8'h11
//`define TS_GPU_STAT2                            8'h12
//`define TS_GPU_STAT3                            8'h13
//`define TS_GPU_STAT4                            8'h14
//`define TS_GPU_STAT5                            8'h15
//`define TS_GPU_STAT6                            8'h16
//`define TS_GPU_STAT7                            8'h17
//`define TS_GPU_STAT8                            8'h18
//`define TS_GPU_STAT9                            8'h19
//========================================================================
//  RNG
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe034000
// -----------------------------------------------
//========================================================================
//  ACODEC
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe01a000
// -----------------------------------------------
#define ACODEC_0                                   ((0x0000  << 2) + 0xfe01a000)
#define ACODEC_1                                   ((0x0001  << 2) + 0xfe01a000)
#define ACODEC_2                                   ((0x0002  << 2) + 0xfe01a000)
#define ACODEC_3                                   ((0x0003  << 2) + 0xfe01a000)
#define ACODEC_4                                   ((0x0004  << 2) + 0xfe01a000)
#define ACODEC_5                                   ((0x0005  << 2) + 0xfe01a000)
#define ACODEC_6                                   ((0x0006  << 2) + 0xfe01a000)
#define ACODEC_7                                   ((0x0007  << 2) + 0xfe01a000)
#define ACODEC_8                                   ((0x0008  << 2) + 0xfe01a000)
//========================================================================
//  AML USB PHY A
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe03c000
// -----------------------------------------------
#define AMLUSB_A0                                  ((0x0000  << 2) + 0xfe03c000)
#define AMLUSB_A1                                  ((0x0001  << 2) + 0xfe03c000)
#define AMLUSB_A2                                  ((0x0002  << 2) + 0xfe03c000)
#define AMLUSB_A3                                  ((0x0003  << 2) + 0xfe03c000)
#define AMLUSB_A4                                  ((0x0004  << 2) + 0xfe03c000)
#define AMLUSB_A5                                  ((0x0005  << 2) + 0xfe03c000)
#define AMLUSB_A6                                  ((0x0006  << 2) + 0xfe03c000)
#define AMLUSB_A7                                  ((0x0007  << 2) + 0xfe03c000)
#define AMLUSB_A8                                  ((0x0008  << 2) + 0xfe03c000)
#define AMLUSB_A9                                  ((0x0009  << 2) + 0xfe03c000)
#define AMLUSB_A10                                 ((0x000a  << 2) + 0xfe03c000)
#define AMLUSB_A11                                 ((0x000b  << 2) + 0xfe03c000)
#define AMLUSB_A12                                 ((0x000c  << 2) + 0xfe03c000)
#define AMLUSB_A13                                 ((0x000d  << 2) + 0xfe03c000)
#define AMLUSB_A14                                 ((0x000e  << 2) + 0xfe03c000)
#define AMLUSB_A15                                 ((0x000f  << 2) + 0xfe03c000)
#define AMLUSB_A16                                 ((0x0010  << 2) + 0xfe03c000)
#define AMLUSB_A17                                 ((0x0011  << 2) + 0xfe03c000)
#define AMLUSB_A18                                 ((0x0012  << 2) + 0xfe03c000)
#define AMLUSB_A19                                 ((0x0013  << 2) + 0xfe03c000)
#define AMLUSB_A20                                 ((0x0014  << 2) + 0xfe03c000)
#define AMLUSB_A21                                 ((0x0015  << 2) + 0xfe03c000)
#define AMLUSB_A22                                 ((0x0016  << 2) + 0xfe03c000)
#define AMLUSB_A23                                 ((0x0017  << 2) + 0xfe03c000)
#define AMLUSB_A24                                 ((0x0018  << 2) + 0xfe03c000)
#define AMLUSB_A25                                 ((0x0019  << 2) + 0xfe03c000)
#define AMLUSB_A26                                 ((0x001a  << 2) + 0xfe03c000)
#define AMLUSB_A27                                 ((0x001b  << 2) + 0xfe03c000)
#define AMLUSB_A28                                 ((0x001c  << 2) + 0xfe03c000)
#define AMLUSB_A29                                 ((0x001d  << 2) + 0xfe03c000)
#define AMLUSB_A30                                 ((0x001e  << 2) + 0xfe03c000)
#define AMLUSB_A31                                 ((0x001f  << 2) + 0xfe03c000)
//========================================================================
//  AML USB PHY B
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe03e000
// -----------------------------------------------
#define AMLUSB_B0                                  ((0x0000  << 2) + 0xfe03e000)
#define AMLUSB_B1                                  ((0x0001  << 2) + 0xfe03e000)
#define AMLUSB_B2                                  ((0x0002  << 2) + 0xfe03e000)
#define AMLUSB_B3                                  ((0x0003  << 2) + 0xfe03e000)
#define AMLUSB_B4                                  ((0x0004  << 2) + 0xfe03e000)
#define AMLUSB_B5                                  ((0x0005  << 2) + 0xfe03e000)
#define AMLUSB_B6                                  ((0x0006  << 2) + 0xfe03e000)
#define AMLUSB_B7                                  ((0x0007  << 2) + 0xfe03e000)
#define AMLUSB_B8                                  ((0x0008  << 2) + 0xfe03e000)
#define AMLUSB_B9                                  ((0x0009  << 2) + 0xfe03e000)
#define AMLUSB_B10                                 ((0x000a  << 2) + 0xfe03e000)
#define AMLUSB_B11                                 ((0x000b  << 2) + 0xfe03e000)
#define AMLUSB_B12                                 ((0x000c  << 2) + 0xfe03e000)
#define AMLUSB_B13                                 ((0x000d  << 2) + 0xfe03e000)
#define AMLUSB_B14                                 ((0x000e  << 2) + 0xfe03e000)
#define AMLUSB_B15                                 ((0x000f  << 2) + 0xfe03e000)
#define AMLUSB_B16                                 ((0x0010  << 2) + 0xfe03e000)
#define AMLUSB_B17                                 ((0x0011  << 2) + 0xfe03e000)
#define AMLUSB_B18                                 ((0x0012  << 2) + 0xfe03e000)
#define AMLUSB_B19                                 ((0x0013  << 2) + 0xfe03e000)
#define AMLUSB_B20                                 ((0x0014  << 2) + 0xfe03e000)
#define AMLUSB_B21                                 ((0x0015  << 2) + 0xfe03e000)
#define AMLUSB_B22                                 ((0x0016  << 2) + 0xfe03e000)
#define AMLUSB_B23                                 ((0x0017  << 2) + 0xfe03e000)
#define AMLUSB_B24                                 ((0x0018  << 2) + 0xfe03e000)
#define AMLUSB_B25                                 ((0x0019  << 2) + 0xfe03e000)
#define AMLUSB_B26                                 ((0x001a  << 2) + 0xfe03e000)
#define AMLUSB_B27                                 ((0x001b  << 2) + 0xfe03e000)
#define AMLUSB_B28                                 ((0x001c  << 2) + 0xfe03e000)
#define AMLUSB_B29                                 ((0x001d  << 2) + 0xfe03e000)
#define AMLUSB_B30                                 ((0x001e  << 2) + 0xfe03e000)
#define AMLUSB_B31                                 ((0x001f  << 2) + 0xfe03e000)
//========================================================================
//  AML USB PHY C
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe054000
// -----------------------------------------------
#define AMLUSB_C0                                  ((0x0000  << 2) + 0xfe054000)
#define AMLUSB_C1                                  ((0x0001  << 2) + 0xfe054000)
#define AMLUSB_C2                                  ((0x0002  << 2) + 0xfe054000)
#define AMLUSB_C3                                  ((0x0003  << 2) + 0xfe054000)
#define AMLUSB_C4                                  ((0x0004  << 2) + 0xfe054000)
#define AMLUSB_C5                                  ((0x0005  << 2) + 0xfe054000)
#define AMLUSB_C6                                  ((0x0006  << 2) + 0xfe054000)
#define AMLUSB_C7                                  ((0x0007  << 2) + 0xfe054000)
#define AMLUSB_C8                                  ((0x0008  << 2) + 0xfe054000)
#define AMLUSB_C9                                  ((0x0009  << 2) + 0xfe054000)
#define AMLUSB_C10                                 ((0x000a  << 2) + 0xfe054000)
#define AMLUSB_C11                                 ((0x000b  << 2) + 0xfe054000)
#define AMLUSB_C12                                 ((0x000c  << 2) + 0xfe054000)
#define AMLUSB_C13                                 ((0x000d  << 2) + 0xfe054000)
#define AMLUSB_C14                                 ((0x000e  << 2) + 0xfe054000)
#define AMLUSB_C15                                 ((0x000f  << 2) + 0xfe054000)
#define AMLUSB_C16                                 ((0x0010  << 2) + 0xfe054000)
#define AMLUSB_C17                                 ((0x0011  << 2) + 0xfe054000)
#define AMLUSB_C18                                 ((0x0012  << 2) + 0xfe054000)
#define AMLUSB_C19                                 ((0x0013  << 2) + 0xfe054000)
#define AMLUSB_C20                                 ((0x0014  << 2) + 0xfe054000)
#define AMLUSB_C21                                 ((0x0015  << 2) + 0xfe054000)
#define AMLUSB_C22                                 ((0x0016  << 2) + 0xfe054000)
#define AMLUSB_C23                                 ((0x0017  << 2) + 0xfe054000)
#define AMLUSB_C24                                 ((0x0018  << 2) + 0xfe054000)
#define AMLUSB_C25                                 ((0x0019  << 2) + 0xfe054000)
#define AMLUSB_C26                                 ((0x001a  << 2) + 0xfe054000)
#define AMLUSB_C27                                 ((0x001b  << 2) + 0xfe054000)
#define AMLUSB_C28                                 ((0x001c  << 2) + 0xfe054000)
#define AMLUSB_C29                                 ((0x001d  << 2) + 0xfe054000)
#define AMLUSB_C30                                 ((0x001e  << 2) + 0xfe054000)
#define AMLUSB_C31                                 ((0x001f  << 2) + 0xfe054000)
//========================================================================
//  PAD_CTRL
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe004000
// -----------------------------------------------
#define PADCTRL_PIN_MUX_REG0                       ((0x0000  << 2) + 0xfe004000)
#define PADCTRL_PIN_MUX_REG1                       ((0x0001  << 2) + 0xfe004000)
//`define PADCTRL_PIN_MUX_REG2          8'h02
#define PADCTRL_PIN_MUX_REG3                       ((0x0003  << 2) + 0xfe004000)
#define PADCTRL_PIN_MUX_REG4                       ((0x0004  << 2) + 0xfe004000)
#define PADCTRL_PIN_MUX_REG5                       ((0x0005  << 2) + 0xfe004000)
#define PADCTRL_PIN_MUX_REG6                       ((0x0006  << 2) + 0xfe004000)
#define PADCTRL_PIN_MUX_REG7                       ((0x0007  << 2) + 0xfe004000)
//`define PADCTRL_PIN_MUX_REG8          8'h08
#define PADCTRL_PIN_MUX_REG9                       ((0x0009  << 2) + 0xfe004000)
#define PADCTRL_PIN_MUX_REGA                       ((0x000a  << 2) + 0xfe004000)
#define PADCTRL_PIN_MUX_REGB                       ((0x000b  << 2) + 0xfe004000)
#define PADCTRL_PIN_MUX_REGC                       ((0x000c  << 2) + 0xfe004000)
#define PADCTRL_PIN_MUX_REGD                       ((0x000d  << 2) + 0xfe004000)
//`define PADCTRL_PIN_MUX_REGE          8'h0e
//`define PADCTRL_PIN_MUX_REGF          8'h0f
#define PADCTRL_PIN_MUX_REGG                       ((0x0010  << 2) + 0xfe004000)
#define PADCTRL_PIN_MUX_REGH                       ((0x0011  << 2) + 0xfe004000)
#define PADCTRL_PIN_MUX_REGI                       ((0x0012  << 2) + 0xfe004000)
#define PADCTRL_PIN_MUX_REGJ                       ((0x0013  << 2) + 0xfe004000)
#define PADCTRL_GPIO_IRQ_CTRL0                     ((0x0020  << 2) + 0xfe004000)
#define PADCTRL_GPIO_IRQ_CTRL1                     ((0x0021  << 2) + 0xfe004000)
#define PADCTRL_GPIO_IRQ_CTRL2                     ((0x0022  << 2) + 0xfe004000)
#define PADCTRL_GPIO_IRQ_CTRL3                     ((0x0023  << 2) + 0xfe004000)
#define PADCTRL_GPIO_IRQ_CTRL4                     ((0x0024  << 2) + 0xfe004000)
#define PADCTRL_GPIO_IRQ_CTRL5                     ((0x0025  << 2) + 0xfe004000)
#define PADCTRL_GPIO_IRQ_CTRL6                     ((0x0026  << 2) + 0xfe004000)
#define PADCTRL_GPIO_IRQ_CTRL7                     ((0x0027  << 2) + 0xfe004000)
#define PADCTRL_WORLD_SYNC_CTRL0                   ((0x0028  << 2) + 0xfe004000)
#define PADCTRL_GPIO_MSR_CTRL0                     ((0x0029  << 2) + 0xfe004000)
#define PADCTRL_MISC_CTRL0                         ((0x002a  << 2) + 0xfe004000)
#define PADCTRL_GPIOZ_I                            ((0x0030  << 2) + 0xfe004000)
#define PADCTRL_GPIOZ_O                            ((0x0031  << 2) + 0xfe004000)
#define PADCTRL_GPIOZ_OEN                          ((0x0032  << 2) + 0xfe004000)
#define PADCTRL_GPIOZ_PULL_EN                      ((0x0033  << 2) + 0xfe004000)
#define PADCTRL_GPIOZ_PULL_UP                      ((0x0034  << 2) + 0xfe004000)
#define PADCTRL_GPIOZ_LOCK                         ((0x0035  << 2) + 0xfe004000)
#define PADCTRL_GPIOZ_PROT                         ((0x0036  << 2) + 0xfe004000)
#define PADCTRL_GPIOZ_DS                           ((0x0037  << 2) + 0xfe004000)
#define PADCTRL_GPIOX_I                            ((0x0040  << 2) + 0xfe004000)
#define PADCTRL_GPIOX_O                            ((0x0041  << 2) + 0xfe004000)
#define PADCTRL_GPIOX_OEN                          ((0x0042  << 2) + 0xfe004000)
#define PADCTRL_GPIOX_PULL_EN                      ((0x0043  << 2) + 0xfe004000)
#define PADCTRL_GPIOX_PULL_UP                      ((0x0044  << 2) + 0xfe004000)
#define PADCTRL_GPIOX_LOCK                         ((0x0045  << 2) + 0xfe004000)
#define PADCTRL_GPIOX_PROT                         ((0x0046  << 2) + 0xfe004000)
#define PADCTRL_GPIOX_DS                           ((0x0047  << 2) + 0xfe004000)
#define PADCTRL_GPIOX_DS_EXT                       ((0x0048  << 2) + 0xfe004000)
#define PADCTRL_GPIOT_I                            ((0x0050  << 2) + 0xfe004000)
#define PADCTRL_GPIOT_O                            ((0x0051  << 2) + 0xfe004000)
#define PADCTRL_GPIOT_OEN                          ((0x0052  << 2) + 0xfe004000)
#define PADCTRL_GPIOT_PULL_EN                      ((0x0053  << 2) + 0xfe004000)
#define PADCTRL_GPIOT_PULL_UP                      ((0x0054  << 2) + 0xfe004000)
#define PADCTRL_GPIOT_LOCK                         ((0x0055  << 2) + 0xfe004000)
#define PADCTRL_GPIOT_PROT                         ((0x0056  << 2) + 0xfe004000)
#define PADCTRL_GPIOT_DS                           ((0x0057  << 2) + 0xfe004000)
#define PADCTRL_GPIOT_DS_EXT                       ((0x0058  << 2) + 0xfe004000)
//`define PADCTRL_GPIOH_I               8'h50
//`define PADCTRL_GPIOH_O               8'h51
//`define PADCTRL_GPIOH_OEN             8'h52
//`define PADCTRL_GPIOH_PULL_EN         8'h53
//`define PADCTRL_GPIOH_PULL_UP         8'h54
//`define PADCTRL_GPIOH_LOCK            8'h55
//`define PADCTRL_GPIOH_PROT            8'h56
//`define PADCTRL_GPIOH_DS              8'h57
#define PADCTRL_GPIOD_I                            ((0x0060  << 2) + 0xfe004000)
#define PADCTRL_GPIOD_O                            ((0x0061  << 2) + 0xfe004000)
#define PADCTRL_GPIOD_OEN                          ((0x0062  << 2) + 0xfe004000)
#define PADCTRL_GPIOD_PULL_EN                      ((0x0063  << 2) + 0xfe004000)
#define PADCTRL_GPIOD_PULL_UP                      ((0x0064  << 2) + 0xfe004000)
#define PADCTRL_GPIOD_LOCK                         ((0x0065  << 2) + 0xfe004000)
#define PADCTRL_GPIOD_PROT                         ((0x0066  << 2) + 0xfe004000)
#define PADCTRL_GPIOD_DS                           ((0x0067  << 2) + 0xfe004000)
#define PADCTRL_GPIOE_I                            ((0x0070  << 2) + 0xfe004000)
#define PADCTRL_GPIOE_O                            ((0x0071  << 2) + 0xfe004000)
#define PADCTRL_GPIOE_OEN                          ((0x0072  << 2) + 0xfe004000)
#define PADCTRL_GPIOE_PULL_EN                      ((0x0073  << 2) + 0xfe004000)
#define PADCTRL_GPIOE_PULL_UP                      ((0x0074  << 2) + 0xfe004000)
#define PADCTRL_GPIOE_LOCK                         ((0x0075  << 2) + 0xfe004000)
#define PADCTRL_GPIOE_PROT                         ((0x0076  << 2) + 0xfe004000)
#define PADCTRL_GPIOE_DS                           ((0x0077  << 2) + 0xfe004000)
#define PADCTRL_GPIOC_I                            ((0x0080  << 2) + 0xfe004000)
#define PADCTRL_GPIOC_O                            ((0x0081  << 2) + 0xfe004000)
#define PADCTRL_GPIOC_OEN                          ((0x0082  << 2) + 0xfe004000)
#define PADCTRL_GPIOC_PULL_EN                      ((0x0083  << 2) + 0xfe004000)
#define PADCTRL_GPIOC_PULL_UP                      ((0x0084  << 2) + 0xfe004000)
#define PADCTRL_GPIOC_LOCK                         ((0x0085  << 2) + 0xfe004000)
#define PADCTRL_GPIOC_PROT                         ((0x0086  << 2) + 0xfe004000)
#define PADCTRL_GPIOC_DS                           ((0x0087  << 2) + 0xfe004000)
#define PADCTRL_GPIOB_I                            ((0x0090  << 2) + 0xfe004000)
#define PADCTRL_GPIOB_O                            ((0x0091  << 2) + 0xfe004000)
#define PADCTRL_GPIOB_OEN                          ((0x0092  << 2) + 0xfe004000)
#define PADCTRL_GPIOB_PULL_EN                      ((0x0093  << 2) + 0xfe004000)
#define PADCTRL_GPIOB_PULL_UP                      ((0x0094  << 2) + 0xfe004000)
#define PADCTRL_GPIOB_LOCK                         ((0x0095  << 2) + 0xfe004000)
#define PADCTRL_GPIOB_PROT                         ((0x0096  << 2) + 0xfe004000)
#define PADCTRL_GPIOB_DS                           ((0x0097  << 2) + 0xfe004000)
#define PADCTRL_GPIOH_I                            ((0x00a0  << 2) + 0xfe004000)
#define PADCTRL_GPIOH_O                            ((0x00a1  << 2) + 0xfe004000)
#define PADCTRL_GPIOH_OEN                          ((0x00a2  << 2) + 0xfe004000)
#define PADCTRL_GPIOH_PULL_EN                      ((0x00a3  << 2) + 0xfe004000)
#define PADCTRL_GPIOH_PULL_UP                      ((0x00a4  << 2) + 0xfe004000)
#define PADCTRL_GPIOH_LOCK                         ((0x00a5  << 2) + 0xfe004000)
#define PADCTRL_GPIOH_PROT                         ((0x00a6  << 2) + 0xfe004000)
#define PADCTRL_GPIOH_DS                           ((0x00a7  << 2) + 0xfe004000)
//`define PADCTRL_GPIOA_I               8'hA0
//`define PADCTRL_GPIOA_O               8'hA1
//`define PADCTRL_GPIOA_OEN             8'hA2
//`define PADCTRL_GPIOA_PULL_EN         8'hA3
//`define PADCTRL_GPIOA_PULL_UP         8'hA4
//`define PADCTRL_GPIOA_LOCK            8'hA5
//`define PADCTRL_GPIOA_PROT            8'hA6
//`define PADCTRL_GPIOA_DS              8'hA7
//`define PADCTRL_TESTN_I               8'hB0
//`define PADCTRL_TESTN_O               8'hB1
//`define PADCTRL_TESTN_OEN             8'hB2
//`define PADCTRL_TESTN_PULL_EN         8'hB3
//`define PADCTRL_TESTN_PULL_UP         8'hB4
//`define PADCTRL_TESTN_LOCK            8'hB5
//`define PADCTRL_TESTN_PROT            8'hB6
//`define PADCTRL_TESTN_DS              8'hB7
//`define PADCTRL_ANALOG_I              8'hC0
//`define PADCTRL_ANALOG_EN             8'hC1
#define PADCTRL_LOCK_PIN_MUX0                      ((0x00d0  << 2) + 0xfe004000)
#define PADCTRL_LOCK_PIN_MUX1                      ((0x00d1  << 2) + 0xfe004000)
#define PADCTRL_LOCK_PIN_MUX2                      ((0x00d2  << 2) + 0xfe004000)
#define PADCTRL_LOCK_PIN_MUX3                      ((0x00d3  << 2) + 0xfe004000)
#define PADCTRL_LOCK_PIN_MUX4                      ((0x00d4  << 2) + 0xfe004000)
#define PADCTRL_PROT_PIN_MUX0                      ((0x00d8  << 2) + 0xfe004000)
#define PADCTRL_PROT_PIN_MUX1                      ((0x00d9  << 2) + 0xfe004000)
#define PADCTRL_PROT_PIN_MUX2                      ((0x00da  << 2) + 0xfe004000)
#define PADCTRL_PROT_PIN_MUX3                      ((0x00db  << 2) + 0xfe004000)
#define PADCTRL_PROT_PIN_MUX4                      ((0x00dc  << 2) + 0xfe004000)
#define PADCTRL_MUTE_CTRL                          ((0x00e0  << 2) + 0xfe004000)
#define PADCTRL_MUTE_TDM_DISA                      ((0x00e1  << 2) + 0xfe004000)
#define PADCTRL_DEBUG_SEL                          ((0x00e2  << 2) + 0xfe004000)
#define PADCTRL_AUDIO_PAD_SEL0                     ((0x00e3  << 2) + 0xfe004000)
#define PADCTRL_AUDIO_PAD_SEL1                     ((0x00e4  << 2) + 0xfe004000)
//========================================================================
//  AO_IR_CTRL
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe08e000
// -----------------------------------------------
#define IRCTRL_IR_DEC_LDR_ACTIVE                   ((0x0000  << 2) + 0xfe08e000)
#define IRCTRL_IR_DEC_LDR_IDLE                     ((0x0001  << 2) + 0xfe08e000)
#define IRCTRL_IR_DEC_LDR_REPEAT                   ((0x0002  << 2) + 0xfe08e000)
#define IRCTRL_IR_DEC_BIT_0                        ((0x0003  << 2) + 0xfe08e000)
#define IRCTRL_IR_DEC_REG0                         ((0x0004  << 2) + 0xfe08e000)
#define IRCTRL_IR_DEC_FRAME                        ((0x0005  << 2) + 0xfe08e000)
#define IRCTRL_IR_DEC_STATUS                       ((0x0006  << 2) + 0xfe08e000)
#define IRCTRL_IR_DEC_REG1                         ((0x0007  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_LDR_ACTIVE                ((0x0010  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_LDR_IDLE                  ((0x0011  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_LDR_REPEAT                ((0x0012  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_BIT_0                     ((0x0013  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_REG0                      ((0x0014  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_FRAME                     ((0x0015  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_STATUS                    ((0x0016  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_REG1                      ((0x0017  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_REG2                      ((0x0018  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_DURATN2                   ((0x0019  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_DURATN3                   ((0x001a  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_FRAME1                    ((0x001b  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_STATUS1                   ((0x001c  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_STATUS2                   ((0x001d  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_REG3                      ((0x001e  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_FRAME_RSV0                ((0x001f  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_FRAME_RSV1                ((0x0020  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_FILTE                     ((0x0021  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_IRQ_CTL                   ((0x0022  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_FIFO_CTL                  ((0x0023  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_WIDTH_NEW                 ((0x0024  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_REPEAT_DET                ((0x0025  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_WAKE_UP_FRAME_REG0        ((0x0026  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_WAKE_UP_FRAME_REG1        ((0x0027  << 2) + 0xfe08e000)
#define IRCTRL_MF_IR_DEC_WAKE_UP_REG0              ((0x0028  << 2) + 0xfe08e000)
#define IRCTRL_IR_DEC_DEMOD_CNTL0                  ((0x0030  << 2) + 0xfe08e000)
#define IRCTRL_IR_DEC_DEMOD_CNTL1                  ((0x0031  << 2) + 0xfe08e000)
#define IRCTRL_IR_DEC_DEMOD_IIR_THD                ((0x0032  << 2) + 0xfe08e000)
#define IRCTRL_IR_DEC_DEMOD_THD0                   ((0x0033  << 2) + 0xfe08e000)
#define IRCTRL_IR_DEC_DEMOD_THD1                   ((0x0034  << 2) + 0xfe08e000)
#define IRCTRL_IR_DEC_DEMOD_SUM_CNT0               ((0x0035  << 2) + 0xfe08e000)
#define IRCTRL_IR_DEC_DEMOD_SUM_CNT1               ((0x0036  << 2) + 0xfe08e000)
#define IRCTRL_IR_DEC_DEMOD_CNT0                   ((0x0037  << 2) + 0xfe08e000)
#define IRCTRL_IR_DEC_DEMOD_CNT1                   ((0x0038  << 2) + 0xfe08e000)
//`define IRCTRL_IR_BLASTER_ADDR0         8'h43
//`define IRCTRL_IR_BLASTER_ADDR1         8'h44
//`define IRCTRL_IR_BLASTER_ADDR2         8'h45
//`define IRCTRL_IR_BLASTER_ADDR3         8'h46
//========================================================================
//  AO_I2C_CTRL
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe08e400
// -----------------------------------------------
#define I2C_S_AO_CONTROL_REG                       ((0x0000  << 2) + 0xfe08e400)
#define I2C_S_AO_SEND_REG                          ((0x0001  << 2) + 0xfe08e400)
#define I2C_S_AO_RECV_REG                          ((0x0002  << 2) + 0xfe08e400)
#define I2C_S_AO_CNTL1_REG                         ((0x0003  << 2) + 0xfe08e400)
//========================================================================
//  AO_UART_CTRL
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe08e500
// -----------------------------------------------
#define UART_AO_WFIFO                              ((0x0000  << 2) + 0xfe08e500)
#define UART_AO_RFIFO                              ((0x0001  << 2) + 0xfe08e500)
#define UART_AO_CONTROL                            ((0x0002  << 2) + 0xfe08e500)
#define UART_AO_STATUS                             ((0x0003  << 2) + 0xfe08e500)
#define UART_AO_MISC                               ((0x0004  << 2) + 0xfe08e500)
#define UART_AO_REG5                               ((0x0005  << 2) + 0xfe08e500)
//========================================================================
//  AO_RTC_DIG_CTRL
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe08e600
// -----------------------------------------------
#define AO_RTC_CTRL                                ((0x0000  << 2) + 0xfe08e600)
#define AO_RTC_COUNTER_REG                         ((0x0001  << 2) + 0xfe08e600)
#define AO_RTC_ALARM0_REG                          ((0x0002  << 2) + 0xfe08e600)
#define AO_RTC_ALARM1_REG                          ((0x0003  << 2) + 0xfe08e600)
#define AO_RTC_ALARM2_REG                          ((0x0004  << 2) + 0xfe08e600)
#define AO_RTC_ALARM3_REG                          ((0x0005  << 2) + 0xfe08e600)
#define AO_RTC_SEC_ADJUST_REG                      ((0x0006  << 2) + 0xfe08e600)
#define AO_RTC_WIDEN_VAL                           ((0x0007  << 2) + 0xfe08e600)
#define AO_RTC_INT_MASK                            ((0x0008  << 2) + 0xfe08e600)
#define AO_RTC_INT_CLR                             ((0x0009  << 2) + 0xfe08e600)
#define AO_RTC_OSCIN_CTRL0                         ((0x000a  << 2) + 0xfe08e600)
#define AO_RTC_OSCIN_CTRL1                         ((0x000b  << 2) + 0xfe08e600)
#define AO_RTC_INT_STATUS                          ((0x000c  << 2) + 0xfe08e600)
#define AO_RTC_REAL_TIME                           ((0x000d  << 2) + 0xfe08e600)
//========================================================================
//  AO_PAD_CTRL
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe08e700
// -----------------------------------------------
#define PADCTRL_PIN_MUX_REGAO                      ((0x0000  << 2) + 0xfe08e700)
#define PADCTRL_GPIOAO_I                           ((0x0001  << 2) + 0xfe08e700)
#define PADCTRL_GPIOAO_O                           ((0x0002  << 2) + 0xfe08e700)
#define PADCTRL_GPIOAO_OEN                         ((0x0003  << 2) + 0xfe08e700)
#define PADCTRL_GPIOAO_PULL_EN                     ((0x0004  << 2) + 0xfe08e700)
#define PADCTRL_GPIOAO_PULL_UP                     ((0x0005  << 2) + 0xfe08e700)
#define PADCTRL_GPIOAO_LOCK                        ((0x0006  << 2) + 0xfe08e700)
#define PADCTRL_GPIOAO_PROT                        ((0x0007  << 2) + 0xfe08e700)
#define PADCTRL_GPIOAO_DS                          ((0x0008  << 2) + 0xfe08e700)
//`define PADCTRL_AO_WORLD_SYNC_CTRL0    6'h09
//`define PADCTRL_GPIOAO_MSR_CTRL0       6'h0a
#define PADCTRL_GPIOAO_IRQ_CTRL0                   ((0x000b  << 2) + 0xfe08e700)
#define PADCTRL_GPIOAO_IRQ_CTRL1                   ((0x000c  << 2) + 0xfe08e700)
#define PADCTRL_GPIOAO_IRQ_CTRL2                   ((0x000d  << 2) + 0xfe08e700)
#define PADCTRL_AO_LOCK_PIN_MUX0                   ((0x000e  << 2) + 0xfe08e700)
#define PADCTRL_AO_PROT_PIN_MUX0                   ((0x000f  << 2) + 0xfe08e700)
#define PADCTRL_AO_MISC_CTRL0                      ((0x0010  << 2) + 0xfe08e700)
#define PADCTRL_TESTN_I                            ((0x0011  << 2) + 0xfe08e700)
#define PADCTRL_TESTN_O                            ((0x0012  << 2) + 0xfe08e700)
#define PADCTRL_TESTN_OEN                          ((0x0013  << 2) + 0xfe08e700)
#define PADCTRL_TESTN_PULL_EN                      ((0x0014  << 2) + 0xfe08e700)
#define PADCTRL_TESTN_PULL_UP                      ((0x0015  << 2) + 0xfe08e700)
#define PADCTRL_TESTN_LOCK                         ((0x0016  << 2) + 0xfe08e700)
#define PADCTRL_TESTN_PROT                         ((0x0017  << 2) + 0xfe08e700)
#define PADCTRL_TESTN_DS                           ((0x0018  << 2) + 0xfe08e700)
//========================================================================
//  AO_RTC_REG
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe08e800
// -----------------------------------------------
#define RTCCTRL_LOCK_BIT                           ((0x0000  << 2) + 0xfe08e800)
#define RTCCTRL_PROT_BIT                           ((0x0001  << 2) + 0xfe08e800)
#define RTCCTRL_REG_CTRL0                          ((0x0002  << 2) + 0xfe08e800)
#define RTCCTRL_REG_CTRL1                          ((0x0003  << 2) + 0xfe08e800)
#define RTCCTRL_REG_CTRL2                          ((0x0004  << 2) + 0xfe08e800)
#define RTCCTRL_REG_CTRL3                          ((0x0005  << 2) + 0xfe08e800)
#define RTCCTRL_REG_CTRL4                          ((0x0006  << 2) + 0xfe08e800)
#define RTCCTRL_REG_CTRL5                          ((0x0007  << 2) + 0xfe08e800)
#define RTCCTRL_REG_CTRL6                          ((0x0008  << 2) + 0xfe08e800)
#define RTCCTRL_REG_CTRL7                          ((0x0009  << 2) + 0xfe08e800)
#define RTCCTRL_REG_CTRL8                          ((0x000a  << 2) + 0xfe08e800)
#define RTCCTRL_REG_CTRL9                          ((0x000b  << 2) + 0xfe08e800)
//========================================================================
//  AO_RESET_CTRL
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe08e900
// -----------------------------------------------
#define AO_RESETCTRL_RESET0                        ((0x0000  << 2) + 0xfe08e900)
#define AO_RESETCTRL_RESET0_LEVEL                  ((0x0001  << 2) + 0xfe08e900)
#define AO_RESETCTRL_RESET0_MASK                   ((0x0002  << 2) + 0xfe08e900)
#define AO_RESETCTRL_RESET0_LOCK                   ((0x0003  << 2) + 0xfe08e900)
#define AO_RESETCTRL_RESET_HOLD_CYC                ((0x0004  << 2) + 0xfe08e900)
#define AO_RESETCTRL_RESET0_PROT                   ((0x0005  << 2) + 0xfe08e900)
//`define AO_RESETCTRL_WATCHDOG_CTRL0     6'h06
//`define AO_RESETCTRL_WATCHDOG_CTRL1     6'h07
//`define AO_RESETCTRL_WATCHDOG_CNT       6'h08
//`define AO_RESETCTRL_WATCHDOG_CLR       6'h09
//`define AO_RESETCTRL_WATCHDOG_DLY_CNT   6'h0a
//========================================================================
//  AO_CLK_CTRL
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe08ea00
// -----------------------------------------------
#define AO_CLKCTRL_OSCIN_CTRL                      ((0x0000  << 2) + 0xfe08ea00)
#define AO_CLKCTRL_RTC_SYS_CLK                     ((0x0001  << 2) + 0xfe08ea00)
#define AO_CLKCTRL_TIMEBASE_CTRL0                  ((0x0002  << 2) + 0xfe08ea00)
#define AO_CLKCTRL_TIMEBASE_CTRL1                  ((0x0003  << 2) + 0xfe08ea00)
#define AO_CLKCTRL_LOCK_BIT_REG                    ((0x0004  << 2) + 0xfe08ea00)
#define AO_CLKCTRL_PROT_BIT_REG                    ((0x0005  << 2) + 0xfe08ea00)
//========================================================================
//  AO_IRQ
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe08eb00
// -----------------------------------------------
#define AO_IRQCTRL_IRQ_MODE                        ((0x0000  << 2) + 0xfe08eb00)
#define AO_IRQCTRL_MASK_PWRCTRL                    ((0x0001  << 2) + 0xfe08eb00)
#define AO_IRQCTRL_IRQ_LATCH                       ((0x0002  << 2) + 0xfe08eb00)
#define AO_IRQCTRL_IRQ_INV                         ((0x0003  << 2) + 0xfe08eb00)
#define AO_IRQCTRL_IRQ_LATCH_CLR                   ((0x0004  << 2) + 0xfe08eb00)
#define AO_IRQCTRL_LOCK_BIT                        ((0x0005  << 2) + 0xfe08eb00)
#define AO_IRQCTRL_PROT_BIT                        ((0x0006  << 2) + 0xfe08eb00)
//========================================================================
//  AO_PWR_CTRL
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe08ec00
// -----------------------------------------------
#define AO_PWRCTRL_PWR_ACK0                        ((0x0000  << 2) + 0xfe08ec00)
#define AO_PWRCTRL_PWR_OFF0                        ((0x0001  << 2) + 0xfe08ec00)
#define AO_PWRCTRL_ISO_EN0                         ((0x0002  << 2) + 0xfe08ec00)
#define AO_PWRCTRL_FOCRST0                         ((0x0003  << 2) + 0xfe08ec00)
#define AO_PWRCTRL_OFF_DLY0                        ((0x0004  << 2) + 0xfe08ec00)
#define AO_PWRCTRL_OFF_DLY1                        ((0x0005  << 2) + 0xfe08ec00)
#define AO_PWRCTRL_ON_DLY                          ((0x0006  << 2) + 0xfe08ec00)
#define AO_PWRCTRL_MODE                            ((0x0007  << 2) + 0xfe08ec00)
#define AO_PWRCTRL_SHUT_DN                         ((0x0008  << 2) + 0xfe08ec00)
#define AO_PWRCTRL_SW_COUNT                        ((0x0009  << 2) + 0xfe08ec00)
//========================================================================
//  SYS_CTRL
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe010000
// -----------------------------------------------
#define SYSCTRL_METAL_REV0                         ((0x0000  << 2) + 0xfe010000)
#define SYSCTRL_METAL_REV1                         ((0x0001  << 2) + 0xfe010000)
#define SYSCTRL_METAL_REV2                         ((0x0002  << 2) + 0xfe010000)
#define SYSCTRL_CHIP_ID                            ((0x000b  << 2) + 0xfe010000)
#define SYSCTRL_WRITEONCE1_REG0                    ((0x0010  << 2) + 0xfe010000)
#define SYSCTRL_WRITEONCE1_STICKY_REG0             ((0x0011  << 2) + 0xfe010000)
#define SYSCTRL_WRITEONCE1_SEC_REG0                ((0x0012  << 2) + 0xfe010000)
#define SYSCTRL_WRITEONCE1_STICKY_SEC_REG0         ((0x0013  << 2) + 0xfe010000)
#define SYSCTRL_WRITEONCE_REG0                     ((0x0014  << 2) + 0xfe010000)
#define SYSCTRL_WRITEONCE_REG1                     ((0x0015  << 2) + 0xfe010000)
#define SYSCTRL_WRITEONCE_SEC_REG0                 ((0x0016  << 2) + 0xfe010000)
#define SYSCTRL_WRITEONCE_STICKY_REG0              ((0x0017  << 2) + 0xfe010000)
#define SYSCTRL_WRITEONCE_STICKY_REG1              ((0x0018  << 2) + 0xfe010000)
#define SYSCTRL_WRITEONCE_STICKY_SEC_REG0          ((0x0019  << 2) + 0xfe010000)
#define SYSCTRL_TIMERA_CTRL                        ((0x0030  << 2) + 0xfe010000)
#define SYSCTRL_TIMERA                             ((0x0031  << 2) + 0xfe010000)
#define SYSCTRL_TIMERB_CTRL                        ((0x0032  << 2) + 0xfe010000)
#define SYSCTRL_TIMERB                             ((0x0033  << 2) + 0xfe010000)
#define SYSCTRL_TIMERC_CTRL                        ((0x0034  << 2) + 0xfe010000)
#define SYSCTRL_TIMERC                             ((0x0035  << 2) + 0xfe010000)
#define SYSCTRL_TIMERD_CTRL                        ((0x0036  << 2) + 0xfe010000)
#define SYSCTRL_TIMERD                             ((0x0037  << 2) + 0xfe010000)
#define SYSCTRL_SEC_TIMERA_CTRL                    ((0x0038  << 2) + 0xfe010000)
#define SYSCTRL_SEC_TIMERA                         ((0x0039  << 2) + 0xfe010000)
#define SYSCTRL_TIMERE_CTRL                        ((0x003a  << 2) + 0xfe010000)
#define SYSCTRL_TIMERE                             ((0x003b  << 2) + 0xfe010000)
#define SYSCTRL_TIMERE_HI                          ((0x003c  << 2) + 0xfe010000)
#define SYSCTRL_TIMERF_CTRL                        ((0x003d  << 2) + 0xfe010000)
#define SYSCTRL_TIMERF                             ((0x003e  << 2) + 0xfe010000)
#define SYSCTRL_TIMERF_HI                          ((0x003f  << 2) + 0xfe010000)
#define SYSCTRL_TIMERG_CTRL                        ((0x0040  << 2) + 0xfe010000)
#define SYSCTRL_TIMERG                             ((0x0041  << 2) + 0xfe010000)
#define SYSCTRL_TIMERH_CTRL                        ((0x0042  << 2) + 0xfe010000)
#define SYSCTRL_TIMERH                             ((0x0043  << 2) + 0xfe010000)
#define SYSCTRL_TIMERI_CTRL                        ((0x0044  << 2) + 0xfe010000)
#define SYSCTRL_TIMERI                             ((0x0045  << 2) + 0xfe010000)
#define SYSCTRL_TIMERJ_CTRL                        ((0x0046  << 2) + 0xfe010000)
#define SYSCTRL_TIMERJ                             ((0x0047  << 2) + 0xfe010000)
#define SYSCTRL_SEC_TIMERE_CTRL                    ((0x0048  << 2) + 0xfe010000)
#define SYSCTRL_SEC_TIMERE                         ((0x0049  << 2) + 0xfe010000)
#define SYSCTRL_SEC_TIMERE_HI                      ((0x004a  << 2) + 0xfe010000)
#define SYSCTRL_OSC_RING_CTRL0                     ((0x0050  << 2) + 0xfe010000)
#define SYSCTRL_OSC_RING_CTRL1                     ((0x0051  << 2) + 0xfe010000)
#define SYSCTRL_AM2AXI_CTRL0                       ((0x0052  << 2) + 0xfe010000)
#define SYSCTRL_AM2AXI_STS                         ((0x0053  << 2) + 0xfe010000)
#define SYSCTRL_AXI_PIPE_CTRL0                     ((0x0055  << 2) + 0xfe010000)
#define SYSCTRL_AXI_PIPE_CTRL1                     ((0x0056  << 2) + 0xfe010000)
#define SYSCTRL_TIMER90K                           ((0x0057  << 2) + 0xfe010000)
#define SYSCTRL_SCR                                ((0x0058  << 2) + 0xfe010000)
#define SYSCTRL_HPG_TIMER                          ((0x0059  << 2) + 0xfe010000)
#define SYSCTRL_AXI_PIPE_CTRL2                     ((0x005a  << 2) + 0xfe010000)
//`define SYSCTRL_VIPNANOQ_CTRL0                  10'h5A
#define SYSCTRL_AHB2DDR_CTRL0                      ((0x005b  << 2) + 0xfe010000)
#define SYSCTRL_AHB2DDR_CTRL1                      ((0x005c  << 2) + 0xfe010000)
#define SYSCTRL_POC                                ((0x0060  << 2) + 0xfe010000)
#define SYSCTRL_VPU_SECURE_REG0                    ((0x0061  << 2) + 0xfe010000)
#define SYSCTRL_VPU_SECURE_REG1                    ((0x0062  << 2) + 0xfe010000)
//`define SYSCTRL_NIC_CFG0                        10'h63
#define SYSCTRL_ALERT_STS_STICKY                   ((0x0064  << 2) + 0xfe010000)
#define SYSCTRL_ALERT_ENABLE                       ((0x0066  << 2) + 0xfe010000)
#define SYSCTRL_ENABLE_SPIFC                       ((0x0068  << 2) + 0xfe010000)
#define SYSCTRL_DEV_BUS_CFG                        ((0x0069  << 2) + 0xfe010000)
#define SYSCTRL_DEBUG_REG0                         ((0x0090  << 2) + 0xfe010000)
#define SYSCTRL_DEBUG_REG1                         ((0x0091  << 2) + 0xfe010000)
#define SYSCTRL_DEBUG_REG2                         ((0x0092  << 2) + 0xfe010000)
#define SYSCTRL_DEBUG_REG3                         ((0x0093  << 2) + 0xfe010000)
#define SYSCTRL_DEBUG_REG4                         ((0x0094  << 2) + 0xfe010000)
#define SYSCTRL_DEBUG_REG5                         ((0x0095  << 2) + 0xfe010000)
#define SYSCTRL_DEBUG_REG6                         ((0x0096  << 2) + 0xfe010000)
#define SYSCTRL_DEBUG_REG7                         ((0x0097  << 2) + 0xfe010000)
#define SYSCTRL_STATUS_REG0                        ((0x00a0  << 2) + 0xfe010000)
#define SYSCTRL_STATUS_REG1                        ((0x00a1  << 2) + 0xfe010000)
#define SYSCTRL_STATUS_REG2                        ((0x00a2  << 2) + 0xfe010000)
#define SYSCTRL_STATUS_REG3                        ((0x00a3  << 2) + 0xfe010000)
#define SYSCTRL_STATUS_REG4                        ((0x00a4  << 2) + 0xfe010000)
#define SYSCTRL_STATUS_REG5                        ((0x00a5  << 2) + 0xfe010000)
#define SYSCTRL_STATUS_REG6                        ((0x00a6  << 2) + 0xfe010000)
#define SYSCTRL_STATUS_REG7                        ((0x00a7  << 2) + 0xfe010000)
#define SYSCTRL_STICKY_REG0                        ((0x00b0  << 2) + 0xfe010000)
#define SYSCTRL_STICKY_REG1                        ((0x00b1  << 2) + 0xfe010000)
#define SYSCTRL_STICKY_REG2                        ((0x00b2  << 2) + 0xfe010000)
#define SYSCTRL_STICKY_REG3                        ((0x00b3  << 2) + 0xfe010000)
#define SYSCTRL_STICKY_REG4                        ((0x00b4  << 2) + 0xfe010000)
#define SYSCTRL_STICKY_REG5                        ((0x00b5  << 2) + 0xfe010000)
#define SYSCTRL_STICKY_REG6                        ((0x00b6  << 2) + 0xfe010000)
#define SYSCTRL_STICKY_REG7                        ((0x00b7  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG0                    ((0x00c0  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG1                    ((0x00c1  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG2                    ((0x00c2  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG3                    ((0x00c3  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG4                    ((0x00c4  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG5                    ((0x00c5  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG6                    ((0x00c6  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG7                    ((0x00c7  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG8                    ((0x00c8  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG9                    ((0x00c9  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG10                   ((0x00ca  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG11                   ((0x00cb  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG12                   ((0x00cc  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG13                   ((0x00cd  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG14                   ((0x00ce  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG15                   ((0x00cf  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG16                   ((0x00d0  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG17                   ((0x00d1  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG18                   ((0x00d2  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG19                   ((0x00d3  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG20                   ((0x00d4  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG21                   ((0x00d5  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG22                   ((0x00d6  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG23                   ((0x00d7  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG24                   ((0x00d8  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG25                   ((0x00d9  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG26                   ((0x00da  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG27                   ((0x00db  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG28                   ((0x00dc  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG29                   ((0x00dd  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG30                   ((0x00de  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STATUS_REG31                   ((0x00df  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STICKY_REG0                    ((0x00e0  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STICKY_REG1                    ((0x00e1  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STICKY_REG2                    ((0x00e2  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STICKY_REG3                    ((0x00e3  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STICKY_REG4                    ((0x00e4  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STICKY_REG5                    ((0x00e5  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STICKY_REG6                    ((0x00e6  << 2) + 0xfe010000)
#define SYSCTRL_SEC_STICKY_REG7                    ((0x00e7  << 2) + 0xfe010000)
#define SYSCTRL_MSG_INDEX0_STICKY                  ((0x00f0  << 2) + 0xfe010000)
#define SYSCTRL_MSG_INDEX1_STICKY                  ((0x00f1  << 2) + 0xfe010000)
#define SYSCTRL_MSG_INDEX2_STICKY                  ((0x00f2  << 2) + 0xfe010000)
#define SYSCTRL_MSG_INDEX3_STICKY                  ((0x00f3  << 2) + 0xfe010000)
//========================================================================
//  CLK_CTRL
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe000000
// -----------------------------------------------
#define CLKCTRL_OSCIN_CTRL                         ((0x0001  << 2) + 0xfe000000)
#define CLKCTRL_RTC_BY_OSCIN_CTRL0                 ((0x0002  << 2) + 0xfe000000)
#define CLKCTRL_RTC_BY_OSCIN_CTRL1                 ((0x0003  << 2) + 0xfe000000)
#define CLKCTRL_RTC_CTRL                           ((0x0004  << 2) + 0xfe000000)
#define CLKCTRL_CHECK_CLK_RESULT                   ((0x0005  << 2) + 0xfe000000)
#define CLKCTRL_MBIST_ATSPEED_CTRL                 ((0x0006  << 2) + 0xfe000000)
#define CLKCTRL_LOCK_BIT_REG0                      ((0x0008  << 2) + 0xfe000000)
#define CLKCTRL_LOCK_BIT_REG1                      ((0x0009  << 2) + 0xfe000000)
#define CLKCTRL_LOCK_BIT_REG2                      ((0x000a  << 2) + 0xfe000000)
#define CLKCTRL_LOCK_BIT_REG3                      ((0x000b  << 2) + 0xfe000000)
#define CLKCTRL_PROT_BIT_REG0                      ((0x000c  << 2) + 0xfe000000)
#define CLKCTRL_PROT_BIT_REG1                      ((0x000d  << 2) + 0xfe000000)
#define CLKCTRL_PROT_BIT_REG2                      ((0x000e  << 2) + 0xfe000000)
#define CLKCTRL_PROT_BIT_REG3                      ((0x000f  << 2) + 0xfe000000)
#define CLKCTRL_SYS_CLK_CTRL0                      ((0x0010  << 2) + 0xfe000000)
#define CLKCTRL_SYS_CLK_EN0_REG0                   ((0x0011  << 2) + 0xfe000000)
#define CLKCTRL_SYS_CLK_EN0_REG1                   ((0x0012  << 2) + 0xfe000000)
#define CLKCTRL_SYS_CLK_EN0_REG2                   ((0x0013  << 2) + 0xfe000000)
#define CLKCTRL_SYS_CLK_EN0_REG3                   ((0x0014  << 2) + 0xfe000000)
#define CLKCTRL_SYS_CLK_EN1_REG0                   ((0x0015  << 2) + 0xfe000000)
#define CLKCTRL_SYS_CLK_EN1_REG1                   ((0x0016  << 2) + 0xfe000000)
#define CLKCTRL_SYS_CLK_EN1_REG2                   ((0x0017  << 2) + 0xfe000000)
#define CLKCTRL_SYS_CLK_EN1_REG3                   ((0x0018  << 2) + 0xfe000000)
#define CLKCTRL_SYS_CLK_VPU_EN0                    ((0x0019  << 2) + 0xfe000000)
#define CLKCTRL_SYS_CLK_VPU_EN1                    ((0x001a  << 2) + 0xfe000000)
#define CLKCTRL_AXI_CLK_CTRL0                      ((0x001b  << 2) + 0xfe000000)
#define CLKCTRL_SYSOSCIN_CTRL                      ((0x001c  << 2) + 0xfe000000)
#define CLKCTRL_TST_CTRL0                          ((0x0020  << 2) + 0xfe000000)
#define CLKCTRL_TST_CTRL1                          ((0x0021  << 2) + 0xfe000000)
#define CLKCTRL_CECA_CTRL0                         ((0x0022  << 2) + 0xfe000000)
#define CLKCTRL_CECA_CTRL1                         ((0x0023  << 2) + 0xfe000000)
#define CLKCTRL_CECB_CTRL0                         ((0x0024  << 2) + 0xfe000000)
#define CLKCTRL_CECB_CTRL1                         ((0x0025  << 2) + 0xfe000000)
#define CLKCTRL_SC_CLK_CTRL                        ((0x0026  << 2) + 0xfe000000)
#define CLKCTRL_DSPA_CLK_CTRL0                     ((0x0027  << 2) + 0xfe000000)
//`define CLKCTRL_DSPB_CLK_CTRL0          10'h28
#define CLKCTRL_RAMA_CLK_CTRL0                     ((0x0029  << 2) + 0xfe000000)
#define CLKCTRL_CLK12_24_CTRL                      ((0x002a  << 2) + 0xfe000000)
#define CLKCTRL_AXI_CLK_EN0                        ((0x002b  << 2) + 0xfe000000)
#define CLKCTRL_AXI_CLK_EN1                        ((0x002c  << 2) + 0xfe000000)
//`define CLKCTRL_RTCPLL_CTRL0            10'h2b
//`define CLKCTRL_RTCPLL_CTRL1            10'h2c
//`define CLKCTRL_RTCPLL_CTRL2            10'h2d
//`define CLKCTRL_RTCPLL_CTRL3            10'h2e
//`define CLKCTRL_RTCPLL_CTRL4            10'h2f
//`define CLKCTRL_RTCPLL_STS              10'h28
#define CLKCTRL_VID_CLK_CTRL                       ((0x0030  << 2) + 0xfe000000)
#define CLKCTRL_VID_CLK_CTRL2                      ((0x0031  << 2) + 0xfe000000)
#define CLKCTRL_VID_CLK_DIV                        ((0x0032  << 2) + 0xfe000000)
#define CLKCTRL_VIID_CLK_DIV                       ((0x0033  << 2) + 0xfe000000)
#define CLKCTRL_VIID_CLK_CTRL                      ((0x0034  << 2) + 0xfe000000)
#define CLKCTRL_HDMI_CLK_CTRL                      ((0x0038  << 2) + 0xfe000000)
#define CLKCTRL_VID_PLL_CLK_DIV                    ((0x0039  << 2) + 0xfe000000)
#define CLKCTRL_VPU_CLK_CTRL                       ((0x003a  << 2) + 0xfe000000)
#define CLKCTRL_VPU_CLKB_CTRL                      ((0x003b  << 2) + 0xfe000000)
#define CLKCTRL_VPU_CLKC_CTRL                      ((0x003c  << 2) + 0xfe000000)
#define CLKCTRL_VID_LOCK_CLK_CTRL                  ((0x003d  << 2) + 0xfe000000)
#define CLKCTRL_VDIN_MEAS_CLK_CTRL                 ((0x003e  << 2) + 0xfe000000)
#define CLKCTRL_VAPBCLK_CTRL                       ((0x003f  << 2) + 0xfe000000)
#define CLKCTRL_HDCP22_CLK_CTRL                    ((0x0040  << 2) + 0xfe000000)
//`define CLKCTRL_MIPIDSI_PHY_CLK_CTRL    10'h41
#define CLKCTRL_CDAC_CLK_CTRL                      ((0x0042  << 2) + 0xfe000000)
//`define CLKCTRL_MIPI_CSI_PHY_CLK_CTRL   10'h43
//`define CLKCTRL_CSI2_ADAPT_CLK_CTRL     10'h44
#define CLKCTRL_VDEC_CLK_CTRL                      ((0x0050  << 2) + 0xfe000000)
#define CLKCTRL_VDEC2_CLK_CTRL                     ((0x0051  << 2) + 0xfe000000)
#define CLKCTRL_VDEC3_CLK_CTRL                     ((0x0052  << 2) + 0xfe000000)
#define CLKCTRL_VDEC4_CLK_CTRL                     ((0x0053  << 2) + 0xfe000000)
//`define CLKCTRL_WAVE420L_CLK_CTRL       10'h54
//`define CLKCTRL_WAVE420L_CLK_CTRL2      10'h55
#define CLKCTRL_TS_CLK_CTRL                        ((0x0056  << 2) + 0xfe000000)
#define CLKCTRL_MALI_CLK_CTRL                      ((0x0057  << 2) + 0xfe000000)
//`define CLKCTRL_VIPNANOQ_CLK_CTRL       10'h58
#define CLKCTRL_ETH_CLK_CTRL                       ((0x0059  << 2) + 0xfe000000)
#define CLKCTRL_NAND_CLK_CTRL                      ((0x005a  << 2) + 0xfe000000)
#define CLKCTRL_SD_EMMC_CLK_CTRL                   ((0x005b  << 2) + 0xfe000000)
//`define CLKCTRL_BT656_CLK_CTRL          10'h5C
#define CLKCTRL_SPICC_CLK_CTRL                     ((0x005d  << 2) + 0xfe000000)
#define CLKCTRL_GEN_CLK_CTRL                       ((0x005e  << 2) + 0xfe000000)
#define CLKCTRL_SAR_CLK_CTRL0                      ((0x005f  << 2) + 0xfe000000)
#define CLKCTRL_PWM_CLK_AB_CTRL                    ((0x0060  << 2) + 0xfe000000)
#define CLKCTRL_PWM_CLK_CD_CTRL                    ((0x0061  << 2) + 0xfe000000)
#define CLKCTRL_PWM_CLK_EF_CTRL                    ((0x0062  << 2) + 0xfe000000)
#define CLKCTRL_PWM_CLK_GH_CTRL                    ((0x0063  << 2) + 0xfe000000)
#define CLKCTRL_PWM_CLK_IJ_CTRL                    ((0x0064  << 2) + 0xfe000000)
#define CLKCTRL_DEMOD_CLK_CTRL                     ((0x0080  << 2) + 0xfe000000)
#define CLKCTRL_VOUTENC_CLK_CTRL                   ((0x0081  << 2) + 0xfe000000)
#define CLKCTRL_AUDIO_CLK_CTRL                     ((0x0082  << 2) + 0xfe000000)
//`define CLKCTRL_NNA_CLK_CNTL            10'h88
#define CLKCTRL_TIMESTAMP_CTRL                     ((0x0100  << 2) + 0xfe000000)
#define CLKCTRL_TIMESTAMP_CTRL1                    ((0x0101  << 2) + 0xfe000000)
#define CLKCTRL_TIMESTAMP_CTRL2                    ((0x0103  << 2) + 0xfe000000)
#define CLKCTRL_TIMESTAMP_RD0                      ((0x0104  << 2) + 0xfe000000)
#define CLKCTRL_TIMESTAMP_RD1                      ((0x0105  << 2) + 0xfe000000)
#define CLKCTRL_TIMEBASE_CTRL0                     ((0x0106  << 2) + 0xfe000000)
#define CLKCTRL_TIMEBASE_CTRL1                     ((0x0107  << 2) + 0xfe000000)
#define CLKCTRL_EFUSE_CPU_CFG01                    ((0x0120  << 2) + 0xfe000000)
#define CLKCTRL_EFUSE_CPU_CFG2                     ((0x0121  << 2) + 0xfe000000)
#define CLKCTRL_EFUSE_ENCP_CFG0                    ((0x0122  << 2) + 0xfe000000)
#define CLKCTRL_EFUSE_MALI_CFG01                   ((0x0123  << 2) + 0xfe000000)
//`define CLKCTRL_EFUSE_HEVCB_CFG01       10'h124
//`define CLKCTRL_EFUSE_HEVCB_CFG2        10'h125
#define CLKCTRL_EFUSE_LOCK                         ((0x0126  << 2) + 0xfe000000)
//========================================================================
//  PWR_CTRL
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe00c000
// -----------------------------------------------
#define PWRCTRL_PWR_ACK0                           ((0x0000  << 2) + 0xfe00c000)
#define PWRCTRL_PWR_ACK1                           ((0x0001  << 2) + 0xfe00c000)
#define PWRCTRL_PWR_OFF0                           ((0x0004  << 2) + 0xfe00c000)
#define PWRCTRL_PWR_OFF1                           ((0x0005  << 2) + 0xfe00c000)
#define PWRCTRL_ISO_EN0                            ((0x0008  << 2) + 0xfe00c000)
#define PWRCTRL_ISO_EN1                            ((0x0009  << 2) + 0xfe00c000)
#define PWRCTRL_FOCRST0                            ((0x000c  << 2) + 0xfe00c000)
#define PWRCTRL_FOCRST1                            ((0x000d  << 2) + 0xfe00c000)
#define PWRCTRL_MEM_PD0                            ((0x0010  << 2) + 0xfe00c000)
#define PWRCTRL_MEM_PD1                            ((0x0011  << 2) + 0xfe00c000)
#define PWRCTRL_MEM_PD2                            ((0x0012  << 2) + 0xfe00c000)
#define PWRCTRL_MEM_PD3                            ((0x0013  << 2) + 0xfe00c000)
#define PWRCTRL_MEM_PD4                            ((0x0014  << 2) + 0xfe00c000)
#define PWRCTRL_MEM_PD5                            ((0x0015  << 2) + 0xfe00c000)
#define PWRCTRL_MEM_PD6                            ((0x0016  << 2) + 0xfe00c000)
#define PWRCTRL_MEM_PD7                            ((0x0017  << 2) + 0xfe00c000)
#define PWRCTRL_MEM_PD8                            ((0x0018  << 2) + 0xfe00c000)
#define PWRCTRL_MEM_PD9                            ((0x0019  << 2) + 0xfe00c000)
#define PWRCTRL_MEM_PD10                           ((0x001a  << 2) + 0xfe00c000)
#define PWRCTRL_MEM_PD11                           ((0x001b  << 2) + 0xfe00c000)
#define PWRCTRL_MEM_PD12                           ((0x001c  << 2) + 0xfe00c000)
#define PWRCTRL_MEM_PD13                           ((0x001d  << 2) + 0xfe00c000)
#define PWRCTRL_MEM_PD14                           ((0x001e  << 2) + 0xfe00c000)
#define PWRCTRL_MEM_PD15                           ((0x001f  << 2) + 0xfe00c000)
#define PWRCTRL_NNA_AXI_PWR_CTRL                   ((0x0020  << 2) + 0xfe00c000)
#define PWRCTRL_ACCESS_CTRL                        ((0x0021  << 2) + 0xfe00c000)
#define PWRCTRL_DDRPHY_CTRL                        ((0x0022  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_AUTO_OFF_CTRL0                ((0x0040  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_AUTO_OFF_CTRL1                ((0x0041  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_AUTO_OFF_CTRL2                ((0x0042  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_AUTO_OFF_CTRL3                ((0x0043  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_AUTO_OFF_CTRL4                ((0x0044  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_TIMER_TH_01                   ((0x0048  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_TIMER_TH_23                   ((0x0049  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_TIMER_TH_45                   ((0x004a  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_TIMER_TH_67                   ((0x004b  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_TIMER_TH_89                   ((0x004c  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_IRQ_MASK0                     ((0x0050  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_IRQ_MASK1                     ((0x0051  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_IRQ_MASK2                     ((0x0052  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_IRQ_MASK3                     ((0x0053  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_IRQ_MASK4                     ((0x0054  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_IRQ_MASK5                     ((0x0055  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_IRQ_MASK6                     ((0x0056  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_IRQ_MASK7                     ((0x0057  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_MEMPD_INIT_SET                ((0x0060  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_MEMPD_OFF_SET                 ((0x0061  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_MEMPD_ON_A_SET                ((0x0062  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_MEMPD_ON_B_SET                ((0x0063  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_MEMPD_ON_C_SET                ((0x0064  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_MEMPD_ON_D_SET                ((0x0065  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_MEMPD_STS                     ((0x0066  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_FSM_STS0                      ((0x0067  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_FSM_STS1                      ((0x0068  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_FSM_STS2                      ((0x0069  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_FSM_START_OFF                 ((0x006d  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_FSM_START_ON                  ((0x006e  << 2) + 0xfe00c000)
#define PWRCTRL_CPU0_FSM_JUMP                      ((0x006f  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_AUTO_OFF_CTRL0                ((0x0070  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_AUTO_OFF_CTRL1                ((0x0071  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_AUTO_OFF_CTRL2                ((0x0072  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_AUTO_OFF_CTRL3                ((0x0073  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_AUTO_OFF_CTRL4                ((0x0074  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_TIMER_TH_01                   ((0x0078  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_TIMER_TH_23                   ((0x0079  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_TIMER_TH_45                   ((0x007a  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_TIMER_TH_67                   ((0x007b  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_TIMER_TH_89                   ((0x007c  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_IRQ_MASK0                     ((0x0080  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_IRQ_MASK1                     ((0x0081  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_IRQ_MASK2                     ((0x0082  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_IRQ_MASK3                     ((0x0083  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_IRQ_MASK4                     ((0x0084  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_IRQ_MASK5                     ((0x0085  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_IRQ_MASK6                     ((0x0086  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_IRQ_MASK7                     ((0x0087  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_MEMPD_INIT_SET                ((0x0090  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_MEMPD_OFF_SET                 ((0x0091  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_MEMPD_ON_A_SET                ((0x0092  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_MEMPD_ON_B_SET                ((0x0093  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_MEMPD_ON_C_SET                ((0x0094  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_MEMPD_ON_D_SET                ((0x0095  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_MEMPD_STS                     ((0x0096  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_FSM_STS0                      ((0x0097  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_FSM_STS1                      ((0x0098  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_FSM_STS2                      ((0x0099  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_FSM_START_OFF                 ((0x009d  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_FSM_START_ON                  ((0x009e  << 2) + 0xfe00c000)
#define PWRCTRL_CPU1_FSM_JUMP                      ((0x009f  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_AUTO_OFF_CTRL0                ((0x00a0  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_AUTO_OFF_CTRL1                ((0x00a1  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_AUTO_OFF_CTRL2                ((0x00a2  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_AUTO_OFF_CTRL3                ((0x00a3  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_AUTO_OFF_CTRL4                ((0x00a4  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_TIMER_TH_01                   ((0x00a8  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_TIMER_TH_23                   ((0x00a9  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_TIMER_TH_45                   ((0x00aa  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_TIMER_TH_67                   ((0x00ab  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_TIMER_TH_89                   ((0x00ac  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_IRQ_MASK0                     ((0x00b0  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_IRQ_MASK1                     ((0x00b1  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_IRQ_MASK2                     ((0x00b2  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_IRQ_MASK3                     ((0x00b3  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_IRQ_MASK4                     ((0x00b4  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_IRQ_MASK5                     ((0x00b5  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_IRQ_MASK6                     ((0x00b6  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_IRQ_MASK7                     ((0x00b7  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_MEMPD_INIT_SET                ((0x00c0  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_MEMPD_OFF_SET                 ((0x00c1  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_MEMPD_ON_A_SET                ((0x00c2  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_MEMPD_ON_B_SET                ((0x00c3  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_MEMPD_ON_C_SET                ((0x00c4  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_MEMPD_ON_D_SET                ((0x00c5  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_MEMPD_STS                     ((0x00c6  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_FSM_STS0                      ((0x00c7  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_FSM_STS1                      ((0x00c8  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_FSM_STS2                      ((0x00c9  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_FSM_START_OFF                 ((0x00cd  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_FSM_START_ON                  ((0x00ce  << 2) + 0xfe00c000)
#define PWRCTRL_CPU2_FSM_JUMP                      ((0x00cf  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_AUTO_OFF_CTRL0                ((0x00d0  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_AUTO_OFF_CTRL1                ((0x00d1  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_AUTO_OFF_CTRL2                ((0x00d2  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_AUTO_OFF_CTRL3                ((0x00d3  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_AUTO_OFF_CTRL4                ((0x00d4  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_TIMER_TH_01                   ((0x00d8  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_TIMER_TH_23                   ((0x00d9  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_TIMER_TH_45                   ((0x00da  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_TIMER_TH_67                   ((0x00db  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_TIMER_TH_89                   ((0x00dc  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_IRQ_MASK0                     ((0x00e0  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_IRQ_MASK1                     ((0x00e1  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_IRQ_MASK2                     ((0x00e2  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_IRQ_MASK3                     ((0x00e3  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_IRQ_MASK4                     ((0x00e4  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_IRQ_MASK5                     ((0x00e5  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_IRQ_MASK6                     ((0x00e6  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_IRQ_MASK7                     ((0x00e7  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_MEMPD_INIT_SET                ((0x00f0  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_MEMPD_OFF_SET                 ((0x00f1  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_MEMPD_ON_A_SET                ((0x00f2  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_MEMPD_ON_B_SET                ((0x00f3  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_MEMPD_ON_C_SET                ((0x00f4  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_MEMPD_ON_D_SET                ((0x00f5  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_MEMPD_STS                     ((0x00f6  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_FSM_STS0                      ((0x00f7  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_FSM_STS1                      ((0x00f8  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_FSM_STS2                      ((0x00f9  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_FSM_START_OFF                 ((0x00fd  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_FSM_START_ON                  ((0x00fe  << 2) + 0xfe00c000)
#define PWRCTRL_CPU3_FSM_JUMP                      ((0x00ff  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_AUTO_OFF_CTRL0              ((0x0100  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_AUTO_OFF_CTRL1              ((0x0101  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_AUTO_OFF_CTRL2              ((0x0102  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_AUTO_OFF_CTRL3              ((0x0103  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_AUTO_OFF_CTRL4              ((0x0104  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_TIMER_TH_01                 ((0x0108  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_TIMER_TH_23                 ((0x0109  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_TIMER_TH_45                 ((0x010a  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_TIMER_TH_67                 ((0x010b  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_TIMER_TH_89                 ((0x010c  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_IRQ_MASK0                   ((0x0110  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_IRQ_MASK1                   ((0x0111  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_IRQ_MASK2                   ((0x0112  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_IRQ_MASK3                   ((0x0113  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_IRQ_MASK4                   ((0x0114  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_IRQ_MASK5                   ((0x0115  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_IRQ_MASK6                   ((0x0116  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_IRQ_MASK7                   ((0x0117  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_MEMPD_INIT_SET              ((0x0120  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_MEMPD_OFF_SET               ((0x0121  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_MEMPD_ON_A_SET              ((0x0122  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_MEMPD_ON_B_SET              ((0x0123  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_MEMPD_ON_C_SET              ((0x0124  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_MEMPD_ON_D_SET              ((0x0125  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_MEMPD_STS                   ((0x0126  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_FSM_STS0                    ((0x0127  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_FSM_STS1                    ((0x0128  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_FSM_STS2                    ((0x0129  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_FSM_START_OFF               ((0x012d  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_FSM_START_ON                ((0x012e  << 2) + 0xfe00c000)
#define PWRCTRL_CPUTOP_FSM_JUMP                    ((0x012f  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_AUTO_OFF_CTRL0                ((0x0130  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_AUTO_OFF_CTRL1                ((0x0131  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_AUTO_OFF_CTRL2                ((0x0132  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_AUTO_OFF_CTRL3                ((0x0133  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_AUTO_OFF_CTRL4                ((0x0134  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_TIMER_TH_01                   ((0x0138  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_TIMER_TH_23                   ((0x0139  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_TIMER_TH_45                   ((0x013a  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_TIMER_TH_67                   ((0x013b  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_TIMER_TH_89                   ((0x013c  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_IRQ_MASK0                     ((0x0140  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_IRQ_MASK1                     ((0x0141  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_IRQ_MASK2                     ((0x0142  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_IRQ_MASK3                     ((0x0143  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_IRQ_MASK4                     ((0x0144  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_IRQ_MASK5                     ((0x0145  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_IRQ_MASK6                     ((0x0146  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_IRQ_MASK7                     ((0x0147  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_MEMPD_INIT_SET                ((0x0150  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_MEMPD_OFF_SET                 ((0x0151  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_MEMPD_ON_A_SET                ((0x0152  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_MEMPD_ON_B_SET                ((0x0153  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_MEMPD_ON_C_SET                ((0x0154  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_MEMPD_ON_D_SET                ((0x0155  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_MEMPD_STS                     ((0x0156  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_FSM_STS0                      ((0x0157  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_FSM_STS1                      ((0x0158  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_FSM_STS2                      ((0x0159  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_FSM_START_OFF                 ((0x015d  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_FSM_START_ON                  ((0x015e  << 2) + 0xfe00c000)
#define PWRCTRL_DSPA_FSM_JUMP                      ((0x015f  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_AUTO_OFF_CTRL0               ((0x0160  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_AUTO_OFF_CTRL1               ((0x0161  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_AUTO_OFF_CTRL2               ((0x0162  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_AUTO_OFF_CTRL3               ((0x0163  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_AUTO_OFF_CTRL4               ((0x0164  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_TIMER_TH_01                  ((0x0168  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_TIMER_TH_23                  ((0x0169  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_TIMER_TH_45                  ((0x016a  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_TIMER_TH_67                  ((0x016b  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_TIMER_TH_89                  ((0x016c  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_IRQ_MASK0                    ((0x0170  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_IRQ_MASK1                    ((0x0171  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_IRQ_MASK2                    ((0x0172  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_IRQ_MASK3                    ((0x0173  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_IRQ_MASK4                    ((0x0174  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_IRQ_MASK5                    ((0x0175  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_IRQ_MASK6                    ((0x0176  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_IRQ_MASK7                    ((0x0177  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_MEMPD_INIT_SET               ((0x0180  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_MEMPD_OFF_SET                ((0x0181  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_MEMPD_ON_A_SET               ((0x0182  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_MEMPD_ON_B_SET               ((0x0183  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_MEMPD_ON_C_SET               ((0x0184  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_MEMPD_ON_D_SET               ((0x0185  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_MEMPD_STS                    ((0x0186  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_FSM_STS0                     ((0x0187  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_FSM_STS1                     ((0x0188  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_FSM_STS2                     ((0x0189  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_FSM_START_OFF                ((0x018d  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_FSM_START_ON                 ((0x018e  << 2) + 0xfe00c000)
#define PWRCTRL_AOCPU_FSM_JUMP                     ((0x018f  << 2) + 0xfe00c000)
//========================================================================
// RSA
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe448000
// -----------------------------------------------
#define RSA_BASE                                   ((0x0000  << 2) + 0xfe448000)
//========================================================================
//  AOCPU
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe09c000
// -----------------------------------------------
#define AOCPU_CPU_CTRL0                            ((0x0000  << 2) + 0xfe09c000)
//Bit 31:0-       0   - reserved
#define AOCPU_CPU_CTRL1                            ((0x0001  << 2) + 0xfe09c000)
//Bit 31:11-       0   - n205 address shift, 1: 0x8000_0000~0x4000_0000
//Bit 30:11-       0   - reserved
//Bit 10   -       0   - gate by sleep, 1: gate, 0: free run
//Bit  9   -       0   - RXEV for riscv input refer riscv doc
//Bit  8   -       0   - reserved
//Bit   7:6-       0   - n205_debug_sel,aocpu_core_status0 info select
//Bit   5:2-       0   - reserved
//Bit 1    -       0   - n205_i_dbg_stop
//Bit 0    -       0   - n205_pc_enable
#define AOCPU_CPU_CTRL2                            ((0x0002  << 2) + 0xfe09c000)
//Bit 31:0-       0   - reserved
#define AOCPU_CPU_CTRL3                            ((0x0003  << 2) + 0xfe09c000)
//Bit 31:0-       0   - reserved
#define AOCPU_CPU_CTRL4                            ((0x0004  << 2) + 0xfe09c000)
//Bit 31:0-       0   - reserved
#define AOCPU_CPU_CTRL5                            ((0x0005  << 2) + 0xfe09c000)
//Bit 31:0-       0   - reserved
#define AOCPU_CPU_STS0                             ((0x000a  << 2) + 0xfe09c000)
//Bit 31:0 -       0   - n205_debug_sel==0 : n205_trace_cause, 1:n205_trace_tval, 2:n205_trace_iaddr, 3:n205_trace_instr
#define AOCPU_CPU_STS1                             ((0x000b  << 2) + 0xfe09c000)
//Bit 31   -       0   - n205_core_sleep_value
//Bit 30:29-       0   - n205_trace_priv
//Bit 28:20-       0   - reserved
//Bit 19   -       0   - n205_core_wfi_mode
//Bit 18   -       0   - n205_trace_invalid
//Bit 17   -       0   - n205_trace_iexception
//Bit 16   -       0   - n205_trace_interrupt
//Bit 15:0 -       0   - reserved
#define AOCPU_CPU_STS2                             ((0x000c  << 2) + 0xfe09c000)
//Bit 31:0-       0   - reserved
#define AOCPU_CPU_STS3                             ((0x000d  << 2) + 0xfe09c000)
//Bit 31   -       0   - n205_hart_halted
//Bit 30   -       0   - n205_ndmreset
//Bit 29   -       0   - n205_dmactive
//Bit 28:0 -       0   - reserved
#define AOCPU_CPU_VECTOR                           ((0x000f  << 2) + 0xfe09c000)
//Bit 31:0-   0x1000_0000   - reserved
#define AOCPU_IRQ_SEL0                             ((0x0010  << 2) + 0xfe09c000)
//Bit 31:24-       0   - INTISR03 interrupt source select in int_map
//Bit 23:16-       0   - INTISR02 interrupt source select in int_map
//Bit 15:8 -       0   - INTISR01 interrupt source select in int_map
//Bit  7:0 -       0   - INTISR00 interrupt source select in int_map
#define AOCPU_IRQ_SEL1                             ((0x0011  << 2) + 0xfe09c000)
//Bit 31:24-       0   - INTISR07 interrupt source select in int_map
//Bit 23:16-       0   - INTISR06 interrupt source select in int_map
//Bit 15:8 -       0   - INTISR05 interrupt source select in int_map
//Bit  7:0 -       0   - INTISR04 interrupt source select in int_map
#define AOCPU_IRQ_SEL2                             ((0x0012  << 2) + 0xfe09c000)
//Bit 31:24-       0   - INTISR11 interrupt source select in int_map
//Bit 23:16-       0   - INTISR10 interrupt source select in int_map
//Bit 15:8 -       0   - INTISR09 interrupt source select in int_map
//Bit  7:0 -       0   - INTISR08 interrupt source select in int_map
#define AOCPU_IRQ_SEL3                             ((0x0013  << 2) + 0xfe09c000)
//Bit 31:24-       0   - INTISR15 interrupt source select in int_map
//Bit 23:16-       0   - INTISR14 interrupt source select in int_map
//Bit 15:8 -       0   - INTISR13 interrupt source select in int_map
//Bit  7:0 -       0   - INTISR12 interrupt source select in int_map
#define AOCPU_IRQ_SEL4                             ((0x0014  << 2) + 0xfe09c000)
//Bit 31:24-       0   - INTISR19 interrupt source select in int_map
//Bit 23:16-       0   - INTISR18 interrupt source select in int_map
//Bit 15:8 -       0   - INTISR17 interrupt source select in int_map
//Bit  7:0 -       0   - INTISR16 interrupt source select in int_map
#define AOCPU_IRQ_SEL5                             ((0x0015  << 2) + 0xfe09c000)
//Bit 31:24-       0   - INTISR23 interrupt source select in int_map
//Bit 23:16-       0   - INTISR22 interrupt source select in int_map
//Bit 15:8 -       0   - INTISR21 interrupt source select in int_map
//Bit  7:0 -       0   - INTISR20 interrupt source select in int_map
#define AOCPU_IRQ_SEL6                             ((0x0016  << 2) + 0xfe09c000)
//Bit 31:24-       0   - INTISR27 interrupt source select in int_map
//Bit 23:16-       0   - INTISR26 interrupt source select in int_map
//Bit 15:8 -       0   - INTISR25 interrupt source select in int_map
//Bit  7:0 -       0   - INTISR24 interrupt source select in int_map
#define AOCPU_IRQ_SEL7                             ((0x0017  << 2) + 0xfe09c000)
//Bit 31:24-       0   - INTISR31 interrupt source select in int_map
//Bit 23:16-       0   - INTISR30 interrupt source select in int_map
//Bit 15:8 -       0   - INTISR29 interrupt source select in int_map
//Bit  7:0 -       0   - INTISR28 interrupt source select in int_map
#define AOCPU_STS00_BYCPU                          ((0x0018  << 2) + 0xfe09c000)
//Bit 31:0-       0   - reserved
#define AOCPU_STS01_BYCPU                          ((0x0019  << 2) + 0xfe09c000)
//Bit 31:0-       0   - reserved
#define AOCPU_STS02_BYCPU                          ((0x001a  << 2) + 0xfe09c000)
//Bit 31:0-       0   - reserved
#define AOCPU_STS03_BYCPU                          ((0x001b  << 2) + 0xfe09c000)
//Bit 31:0-       0   - reserved
#define AOCPU_STS04_BYCPU                          ((0x001c  << 2) + 0xfe09c000)
//Bit 31:0-       0   - reserved
#define AOCPU_STS05_BYCPU                          ((0x001d  << 2) + 0xfe09c000)
//Bit 31:0-       0   - reserved
#define AOCPU_STS06_BYCPU                          ((0x001e  << 2) + 0xfe09c000)
//Bit 31:0-       0   - reserved
#define AOCPU_STS07_BYCPU                          ((0x001f  << 2) + 0xfe09c000)
//Bit 31:0-       0   - reserved
//========================================================================
//  AUCPU
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe09e000
// -----------------------------------------------
#define AUCPU_CPU_CTRL0                            ((0x0000  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_CPU_CTRL1                            ((0x0001  << 2) + 0xfe09e000)
//Bit 31:11-       0   - reserved
//Bit 10   -       0   - gate by sleep
//Bit 9    -       0   - RXEV
//Bit 8    -       0   - reserved
//Bit 7:6  -       0   - n205_debug_sel,aucpu_core_status0 info select
//Bit 5:2  -       0   - reserved
//Bit 1    -       0   - n205_i_dbg_stop
//Bit 0    -       0   - n205_pc_enable
#define AUCPU_CPU_CTRL2                            ((0x0002  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_CPU_CTRL3                            ((0x0003  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_CPU_CTRL4                            ((0x0004  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_CPU_CTRL5                            ((0x0005  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_CPU_STS0                             ((0x000a  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - n205_debug_sel==0 : n205_trace_cause, 1:n205_trace_tval, 2:n205_trace_iaddr, 3:n205_trace_instr
#define AUCPU_CPU_STS1                             ((0x000b  << 2) + 0xfe09e000)
//Bit 31   -       0   - n205_core_sleep_value
//Bit 30:29-       0   - n205_trace_priv
//Bit 28:20-       0   - reserved
//Bit 19   -       0   - n205_core_wfi_mode
//Bit 18   -       0   - n205_trace_invalid
//Bit 17   -       0   - n205_trace_iexception
//Bit 16   -       0   - n205_trace_interrupt
//Bit 15:0 -       0   - reserved
#define AUCPU_CPU_STS2                             ((0x000c  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_CPU_STS3                             ((0x000d  << 2) + 0xfe09e000)
//Bit 31   -       0   - n205_hart_halted
//Bit 30   -       0   - n205_ndmreset
//Bit 29   -       0   - n205_dmactive
//Bit 28:0 -       0   - reserved
#define AUCPU_DMA_APB_SEL                          ((0x0010  << 2) + 0xfe09e000)
//Bit 31:30-       0   - reserved
//Bit 0    -       0   - 1: riscv control dma, 0: ap control dma
#define AUCPU_IRQ_AP2RISCV                         ((0x0011  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - AP cpu send irq to riscv
#define AUCPU_IRQ_RISCV2AP                         ((0x0012  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - riscv send irq to AP
#define AUCPU_STS00_BY_AP                          ((0x0020  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS01_BY_AP                          ((0x0021  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS02_BY_AP                          ((0x0022  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS03_BY_AP                          ((0x0023  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS04_BY_AP                          ((0x0024  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS05_BY_AP                          ((0x0025  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS06_BY_AP                          ((0x0026  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS07_BY_AP                          ((0x0027  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS08_BY_AP                          ((0x0028  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS09_BY_AP                          ((0x0029  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS10_BY_AP                          ((0x002a  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS11_BY_AP                          ((0x002b  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS12_BY_AP                          ((0x002c  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS13_BY_AP                          ((0x002d  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS14_BY_AP                          ((0x002e  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS15_BY_AP                          ((0x002f  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS16_BY_AP                          ((0x0030  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS17_BY_AP                          ((0x0031  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS18_BY_AP                          ((0x0032  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS19_BY_AP                          ((0x0033  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS20_BY_AP                          ((0x0034  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS21_BY_AP                          ((0x0035  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS22_BY_AP                          ((0x0036  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS23_BY_AP                          ((0x0037  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS24_BY_AP                          ((0x0038  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS25_BY_AP                          ((0x0039  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS26_BY_AP                          ((0x003a  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS27_BY_AP                          ((0x003b  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS28_BY_AP                          ((0x003c  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS29_BY_AP                          ((0x003d  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS30_BY_AP                          ((0x003e  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS31_BY_AP                          ((0x003f  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS00_BY_RISCV                       ((0x0040  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS01_BY_RISCV                       ((0x0041  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS02_BY_RISCV                       ((0x0042  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS03_BY_RISCV                       ((0x0043  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS04_BY_RISCV                       ((0x0044  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS05_BY_RISCV                       ((0x0045  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS06_BY_RISCV                       ((0x0046  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS07_BY_RISCV                       ((0x0047  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS08_BY_RISCV                       ((0x0048  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS09_BY_RISCV                       ((0x0049  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS10_BY_RISCV                       ((0x004a  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS11_BY_RISCV                       ((0x004b  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS12_BY_RISCV                       ((0x004c  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS13_BY_RISCV                       ((0x004d  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS14_BY_RISCV                       ((0x004e  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS15_BY_RISCV                       ((0x004f  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS16_BY_RISCV                       ((0x0050  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS17_BY_RISCV                       ((0x0051  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS18_BY_RISCV                       ((0x0052  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS19_BY_RISCV                       ((0x0053  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS20_BY_RISCV                       ((0x0054  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS21_BY_RISCV                       ((0x0055  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS22_BY_RISCV                       ((0x0056  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS23_BY_RISCV                       ((0x0057  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS24_BY_RISCV                       ((0x0058  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS25_BY_RISCV                       ((0x0059  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS26_BY_RISCV                       ((0x005a  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS27_BY_RISCV                       ((0x005b  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS28_BY_RISCV                       ((0x005c  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS29_BY_RISCV                       ((0x005d  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS30_BY_RISCV                       ((0x005e  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_STS31_BY_RISCV                       ((0x005f  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - reserved
#define AUCPU_DEMUX_STS_BY_RISCV                   ((0x0060  << 2) + 0xfe09e000)
//Bit 31   -       0   - read only, demux status updated
//Bit 31:8 -       0   - reserved
//Bit  7:0 -       0   - read demux chn select
#define AUCPU_DEMUX_STS0                           ((0x0061  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - demux status 0
#define AUCPU_DEMUX_STS1                           ((0x0062  << 2) + 0xfe09e000)
//Bit 31:0 -       0   - demux status 1
//========================================================================
//  AXI_SRAM
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe090000
// -----------------------------------------------
#define SRAM_RANGE0_STA                            ((0x0000  << 2) + 0xfe090000)
#define SRAM_RANGE1_STA                            ((0x0001  << 2) + 0xfe090000)
#define SRAM_RANGE2_STA                            ((0x0002  << 2) + 0xfe090000)
#define SRAM_RANGE3_STA                            ((0x0003  << 2) + 0xfe090000)
#define SRAM_RANGE4_STA                            ((0x0004  << 2) + 0xfe090000)
#define SRAM_RANGE5_STA                            ((0x0005  << 2) + 0xfe090000)
#define SRAM_RANGE6_STA                            ((0x0006  << 2) + 0xfe090000)
#define SRAM_RANGE7_STA                            ((0x0007  << 2) + 0xfe090000)
#define SRAM_RANGE8_STA                            ((0x0008  << 2) + 0xfe090000)
#define SRAM_RANGE9_STA                            ((0x0009  << 2) + 0xfe090000)
#define SRAM_RANGE10_STA                           ((0x000a  << 2) + 0xfe090000)
#define SRAM_RANGE11_STA                           ((0x000b  << 2) + 0xfe090000)
#define SRAM_RANGE12_STA                           ((0x000c  << 2) + 0xfe090000)
#define SRAM_RANGE13_STA                           ((0x000d  << 2) + 0xfe090000)
#define SRAM_RANGE14_STA                           ((0x000e  << 2) + 0xfe090000)
#define SRAM_RANGE0_EDA                            ((0x000f  << 2) + 0xfe090000)
#define SRAM_RANGE1_EDA                            ((0x0010  << 2) + 0xfe090000)
#define SRAM_RANGE2_EDA                            ((0x0011  << 2) + 0xfe090000)
#define SRAM_RANGE3_EDA                            ((0x0012  << 2) + 0xfe090000)
#define SRAM_RANGE4_EDA                            ((0x0013  << 2) + 0xfe090000)
#define SRAM_RANGE5_EDA                            ((0x0014  << 2) + 0xfe090000)
#define SRAM_RANGE6_EDA                            ((0x0015  << 2) + 0xfe090000)
#define SRAM_RANGE7_EDA                            ((0x0016  << 2) + 0xfe090000)
#define SRAM_RANGE8_EDA                            ((0x0017  << 2) + 0xfe090000)
#define SRAM_RANGE9_EDA                            ((0x0018  << 2) + 0xfe090000)
#define SRAM_RANGE10_EDA                           ((0x0019  << 2) + 0xfe090000)
#define SRAM_RANGE11_EDA                           ((0x001a  << 2) + 0xfe090000)
#define SRAM_RANGE12_EDA                           ((0x001b  << 2) + 0xfe090000)
#define SRAM_RANGE13_EDA                           ((0x001c  << 2) + 0xfe090000)
#define SRAM_RANGE14_EDA                           ((0x001d  << 2) + 0xfe090000)
#define SRAM_RANGE0_READ_CTRL0                     ((0x001e  << 2) + 0xfe090000)
#define SRAM_RANGE1_READ_CTRL0                     ((0x001f  << 2) + 0xfe090000)
#define SRAM_RANGE2_READ_CTRL0                     ((0x0020  << 2) + 0xfe090000)
#define SRAM_RANGE3_READ_CTRL0                     ((0x0021  << 2) + 0xfe090000)
#define SRAM_RANGE4_READ_CTRL0                     ((0x0022  << 2) + 0xfe090000)
#define SRAM_RANGE5_READ_CTRL0                     ((0x0023  << 2) + 0xfe090000)
#define SRAM_RANGE6_READ_CTRL0                     ((0x0024  << 2) + 0xfe090000)
#define SRAM_RANGE7_READ_CTRL0                     ((0x0025  << 2) + 0xfe090000)
#define SRAM_RANGE8_READ_CTRL0                     ((0x0026  << 2) + 0xfe090000)
#define SRAM_RANGE9_READ_CTRL0                     ((0x0027  << 2) + 0xfe090000)
#define SRAM_RANGE10_READ_CTRL0                    ((0x0028  << 2) + 0xfe090000)
#define SRAM_RANGE11_READ_CTRL0                    ((0x0029  << 2) + 0xfe090000)
#define SRAM_RANGE12_READ_CTRL0                    ((0x002a  << 2) + 0xfe090000)
#define SRAM_RANGE13_READ_CTRL0                    ((0x002b  << 2) + 0xfe090000)
#define SRAM_RANGE14_READ_CTRL0                    ((0x002c  << 2) + 0xfe090000)
#define SRAM_RANGE15_READ_CTRL0                    ((0x002d  << 2) + 0xfe090000)
#define SRAM_RANGE0_WRITE_CTRL0                    ((0x002e  << 2) + 0xfe090000)
#define SRAM_RANGE1_WRITE_CTRL0                    ((0x002f  << 2) + 0xfe090000)
#define SRAM_RANGE2_WRITE_CTRL0                    ((0x0030  << 2) + 0xfe090000)
#define SRAM_RANGE3_WRITE_CTRL0                    ((0x0031  << 2) + 0xfe090000)
#define SRAM_RANGE4_WRITE_CTRL0                    ((0x0032  << 2) + 0xfe090000)
#define SRAM_RANGE5_WRITE_CTRL0                    ((0x0033  << 2) + 0xfe090000)
#define SRAM_RANGE6_WRITE_CTRL0                    ((0x0034  << 2) + 0xfe090000)
#define SRAM_RANGE7_WRITE_CTRL0                    ((0x0035  << 2) + 0xfe090000)
#define SRAM_RANGE8_WRITE_CTRL0                    ((0x0036  << 2) + 0xfe090000)
#define SRAM_RANGE9_WRITE_CTRL0                    ((0x0037  << 2) + 0xfe090000)
#define SRAM_RANGE10_WRITE_CTRL0                   ((0x0038  << 2) + 0xfe090000)
#define SRAM_RANGE11_WRITE_CTRL0                   ((0x0039  << 2) + 0xfe090000)
#define SRAM_RANGE12_WRITE_CTRL0                   ((0x003a  << 2) + 0xfe090000)
#define SRAM_RANGE13_WRITE_CTRL0                   ((0x003b  << 2) + 0xfe090000)
#define SRAM_RANGE14_WRITE_CTRL0                   ((0x003c  << 2) + 0xfe090000)
#define SRAM_RANGE15_WRITE_CTRL0                   ((0x003d  << 2) + 0xfe090000)
#define SRAM_RANGE0_READ_CTRL1                     ((0x003e  << 2) + 0xfe090000)
#define SRAM_RANGE1_READ_CTRL1                     ((0x003f  << 2) + 0xfe090000)
#define SRAM_RANGE2_READ_CTRL1                     ((0x0040  << 2) + 0xfe090000)
#define SRAM_RANGE3_READ_CTRL1                     ((0x0041  << 2) + 0xfe090000)
#define SRAM_RANGE4_READ_CTRL1                     ((0x0042  << 2) + 0xfe090000)
#define SRAM_RANGE5_READ_CTRL1                     ((0x0043  << 2) + 0xfe090000)
#define SRAM_RANGE6_READ_CTRL1                     ((0x0044  << 2) + 0xfe090000)
#define SRAM_RANGE7_READ_CTRL1                     ((0x0045  << 2) + 0xfe090000)
#define SRAM_RANGE8_READ_CTRL1                     ((0x0046  << 2) + 0xfe090000)
#define SRAM_RANGE9_READ_CTRL1                     ((0x0047  << 2) + 0xfe090000)
#define SRAM_RANGE10_READ_CTRL1                    ((0x0048  << 2) + 0xfe090000)
#define SRAM_RANGE11_READ_CTRL1                    ((0x0049  << 2) + 0xfe090000)
#define SRAM_RANGE12_READ_CTRL1                    ((0x004a  << 2) + 0xfe090000)
#define SRAM_RANGE13_READ_CTRL1                    ((0x004b  << 2) + 0xfe090000)
#define SRAM_RANGE14_READ_CTRL1                    ((0x004c  << 2) + 0xfe090000)
#define SRAM_RANGE15_READ_CTRL1                    ((0x004d  << 2) + 0xfe090000)
#define SRAM_RANGE0_WRITE_CTRL1                    ((0x004e  << 2) + 0xfe090000)
#define SRAM_RANGE1_WRITE_CTRL1                    ((0x004f  << 2) + 0xfe090000)
#define SRAM_RANGE2_WRITE_CTRL1                    ((0x0050  << 2) + 0xfe090000)
#define SRAM_RANGE3_WRITE_CTRL1                    ((0x0051  << 2) + 0xfe090000)
#define SRAM_RANGE4_WRITE_CTRL1                    ((0x0052  << 2) + 0xfe090000)
#define SRAM_RANGE5_WRITE_CTRL1                    ((0x0053  << 2) + 0xfe090000)
#define SRAM_RANGE6_WRITE_CTRL1                    ((0x0054  << 2) + 0xfe090000)
#define SRAM_RANGE7_WRITE_CTRL1                    ((0x0055  << 2) + 0xfe090000)
#define SRAM_RANGE8_WRITE_CTRL1                    ((0x0056  << 2) + 0xfe090000)
#define SRAM_RANGE9_WRITE_CTRL1                    ((0x0057  << 2) + 0xfe090000)
#define SRAM_RANGE10_WRITE_CTRL1                   ((0x0058  << 2) + 0xfe090000)
#define SRAM_RANGE11_WRITE_CTRL1                   ((0x0059  << 2) + 0xfe090000)
#define SRAM_RANGE12_WRITE_CTRL1                   ((0x005a  << 2) + 0xfe090000)
#define SRAM_RANGE13_WRITE_CTRL1                   ((0x005b  << 2) + 0xfe090000)
#define SRAM_RANGE14_WRITE_CTRL1                   ((0x005c  << 2) + 0xfe090000)
#define SRAM_RANGE15_WRITE_CTRL1                   ((0x005d  << 2) + 0xfe090000)
#define SRAM_GLOBAL_READ_CTRL0                     ((0x005e  << 2) + 0xfe090000)
#define SRAM_GLOBAL_READ_CTRL1                     ((0x005f  << 2) + 0xfe090000)
#define SRAM_GLOBAL_WRITE_CTRL0                    ((0x0060  << 2) + 0xfe090000)
#define SRAM_GLOBAL_WRITE_CTRL1                    ((0x0061  << 2) + 0xfe090000)
#define SRAM_SEC_CTRL0                             ((0x0062  << 2) + 0xfe090000)
#define SRAM_REG_LOCK0                             ((0x0063  << 2) + 0xfe090000)
#define SRAM_REG_LOCK1                             ((0x0064  << 2) + 0xfe090000)
#define SRAM_REG_LOCK2                             ((0x0065  << 2) + 0xfe090000)
#define SRAM_GLOBAL_READ_CTRL0_LOCK                ((0x0066  << 2) + 0xfe090000)
#define SRAM_GLOBAL_READ_CTRL1_LOCK                ((0x0067  << 2) + 0xfe090000)
#define SRAM_GLOBAL_WRITE_CTRL0_LOCK               ((0x0068  << 2) + 0xfe090000)
#define SRAM_GLOBAL_WRITE_CTRL1_LOCK               ((0x0069  << 2) + 0xfe090000)
#define SRAM_SEC_CTRL0_LOCK                        ((0x006a  << 2) + 0xfe090000)
#define SRAM_STATUS_REG                            ((0x006b  << 2) + 0xfe090000)
#define SRAM_INIT_DLY_TCNT                         ((0x006c  << 2) + 0xfe090000)
//========================================================================
//  AXI_SRAM B
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe092000
// -----------------------------------------------
#define SRAM_B_RANGE0_STA                          ((0x0000  << 2) + 0xfe092000)
#define SRAM_B_RANGE1_STA                          ((0x0001  << 2) + 0xfe092000)
#define SRAM_B_RANGE2_STA                          ((0x0002  << 2) + 0xfe092000)
#define SRAM_B_RANGE3_STA                          ((0x0003  << 2) + 0xfe092000)
#define SRAM_B_RANGE4_STA                          ((0x0004  << 2) + 0xfe092000)
#define SRAM_B_RANGE5_STA                          ((0x0005  << 2) + 0xfe092000)
#define SRAM_B_RANGE6_STA                          ((0x0006  << 2) + 0xfe092000)
#define SRAM_B_RANGE7_STA                          ((0x0007  << 2) + 0xfe092000)
#define SRAM_B_RANGE8_STA                          ((0x0008  << 2) + 0xfe092000)
#define SRAM_B_RANGE9_STA                          ((0x0009  << 2) + 0xfe092000)
#define SRAM_B_RANGE10_STA                         ((0x000a  << 2) + 0xfe092000)
#define SRAM_B_RANGE11_STA                         ((0x000b  << 2) + 0xfe092000)
#define SRAM_B_RANGE12_STA                         ((0x000c  << 2) + 0xfe092000)
#define SRAM_B_RANGE13_STA                         ((0x000d  << 2) + 0xfe092000)
#define SRAM_B_RANGE14_STA                         ((0x000e  << 2) + 0xfe092000)
#define SRAM_B_RANGE0_EDA                          ((0x000f  << 2) + 0xfe092000)
#define SRAM_B_RANGE1_EDA                          ((0x0010  << 2) + 0xfe092000)
#define SRAM_B_RANGE2_EDA                          ((0x0011  << 2) + 0xfe092000)
#define SRAM_B_RANGE3_EDA                          ((0x0012  << 2) + 0xfe092000)
#define SRAM_B_RANGE4_EDA                          ((0x0013  << 2) + 0xfe092000)
#define SRAM_B_RANGE5_EDA                          ((0x0014  << 2) + 0xfe092000)
#define SRAM_B_RANGE6_EDA                          ((0x0015  << 2) + 0xfe092000)
#define SRAM_B_RANGE7_EDA                          ((0x0016  << 2) + 0xfe092000)
#define SRAM_B_RANGE8_EDA                          ((0x0017  << 2) + 0xfe092000)
#define SRAM_B_RANGE9_EDA                          ((0x0018  << 2) + 0xfe092000)
#define SRAM_B_RANGE10_EDA                         ((0x0019  << 2) + 0xfe092000)
#define SRAM_B_RANGE11_EDA                         ((0x001a  << 2) + 0xfe092000)
#define SRAM_B_RANGE12_EDA                         ((0x001b  << 2) + 0xfe092000)
#define SRAM_B_RANGE13_EDA                         ((0x001c  << 2) + 0xfe092000)
#define SRAM_B_RANGE14_EDA                         ((0x001d  << 2) + 0xfe092000)
#define SRAM_B_RANGE0_READ_CTRL0                   ((0x001e  << 2) + 0xfe092000)
#define SRAM_B_RANGE1_READ_CTRL0                   ((0x001f  << 2) + 0xfe092000)
#define SRAM_B_RANGE2_READ_CTRL0                   ((0x0020  << 2) + 0xfe092000)
#define SRAM_B_RANGE3_READ_CTRL0                   ((0x0021  << 2) + 0xfe092000)
#define SRAM_B_RANGE4_READ_CTRL0                   ((0x0022  << 2) + 0xfe092000)
#define SRAM_B_RANGE5_READ_CTRL0                   ((0x0023  << 2) + 0xfe092000)
#define SRAM_B_RANGE6_READ_CTRL0                   ((0x0024  << 2) + 0xfe092000)
#define SRAM_B_RANGE7_READ_CTRL0                   ((0x0025  << 2) + 0xfe092000)
#define SRAM_B_RANGE8_READ_CTRL0                   ((0x0026  << 2) + 0xfe092000)
#define SRAM_B_RANGE9_READ_CTRL0                   ((0x0027  << 2) + 0xfe092000)
#define SRAM_B_RANGE10_READ_CTRL0                  ((0x0028  << 2) + 0xfe092000)
#define SRAM_B_RANGE11_READ_CTRL0                  ((0x0029  << 2) + 0xfe092000)
#define SRAM_B_RANGE12_READ_CTRL0                  ((0x002a  << 2) + 0xfe092000)
#define SRAM_B_RANGE13_READ_CTRL0                  ((0x002b  << 2) + 0xfe092000)
#define SRAM_B_RANGE14_READ_CTRL0                  ((0x002c  << 2) + 0xfe092000)
#define SRAM_B_RANGE15_READ_CTRL0                  ((0x002d  << 2) + 0xfe092000)
#define SRAM_B_RANGE0_WRITE_CTRL0                  ((0x002e  << 2) + 0xfe092000)
#define SRAM_B_RANGE1_WRITE_CTRL0                  ((0x002f  << 2) + 0xfe092000)
#define SRAM_B_RANGE2_WRITE_CTRL0                  ((0x0030  << 2) + 0xfe092000)
#define SRAM_B_RANGE3_WRITE_CTRL0                  ((0x0031  << 2) + 0xfe092000)
#define SRAM_B_RANGE4_WRITE_CTRL0                  ((0x0032  << 2) + 0xfe092000)
#define SRAM_B_RANGE5_WRITE_CTRL0                  ((0x0033  << 2) + 0xfe092000)
#define SRAM_B_RANGE6_WRITE_CTRL0                  ((0x0034  << 2) + 0xfe092000)
#define SRAM_B_RANGE7_WRITE_CTRL0                  ((0x0035  << 2) + 0xfe092000)
#define SRAM_B_RANGE8_WRITE_CTRL0                  ((0x0036  << 2) + 0xfe092000)
#define SRAM_B_RANGE9_WRITE_CTRL0                  ((0x0037  << 2) + 0xfe092000)
#define SRAM_B_RANGE10_WRITE_CTRL0                 ((0x0038  << 2) + 0xfe092000)
#define SRAM_B_RANGE11_WRITE_CTRL0                 ((0x0039  << 2) + 0xfe092000)
#define SRAM_B_RANGE12_WRITE_CTRL0                 ((0x003a  << 2) + 0xfe092000)
#define SRAM_B_RANGE13_WRITE_CTRL0                 ((0x003b  << 2) + 0xfe092000)
#define SRAM_B_RANGE14_WRITE_CTRL0                 ((0x003c  << 2) + 0xfe092000)
#define SRAM_B_RANGE15_WRITE_CTRL0                 ((0x003d  << 2) + 0xfe092000)
#define SRAM_B_RANGE0_READ_CTRL1                   ((0x003e  << 2) + 0xfe092000)
#define SRAM_B_RANGE1_READ_CTRL1                   ((0x003f  << 2) + 0xfe092000)
#define SRAM_B_RANGE2_READ_CTRL1                   ((0x0040  << 2) + 0xfe092000)
#define SRAM_B_RANGE3_READ_CTRL1                   ((0x0041  << 2) + 0xfe092000)
#define SRAM_B_RANGE4_READ_CTRL1                   ((0x0042  << 2) + 0xfe092000)
#define SRAM_B_RANGE5_READ_CTRL1                   ((0x0043  << 2) + 0xfe092000)
#define SRAM_B_RANGE6_READ_CTRL1                   ((0x0044  << 2) + 0xfe092000)
#define SRAM_B_RANGE7_READ_CTRL1                   ((0x0045  << 2) + 0xfe092000)
#define SRAM_B_RANGE8_READ_CTRL1                   ((0x0046  << 2) + 0xfe092000)
#define SRAM_B_RANGE9_READ_CTRL1                   ((0x0047  << 2) + 0xfe092000)
#define SRAM_B_RANGE10_READ_CTRL1                  ((0x0048  << 2) + 0xfe092000)
#define SRAM_B_RANGE11_READ_CTRL1                  ((0x0049  << 2) + 0xfe092000)
#define SRAM_B_RANGE12_READ_CTRL1                  ((0x004a  << 2) + 0xfe092000)
#define SRAM_B_RANGE13_READ_CTRL1                  ((0x004b  << 2) + 0xfe092000)
#define SRAM_B_RANGE14_READ_CTRL1                  ((0x004c  << 2) + 0xfe092000)
#define SRAM_B_RANGE15_READ_CTRL1                  ((0x004d  << 2) + 0xfe092000)
#define SRAM_B_RANGE0_WRITE_CTRL1                  ((0x004e  << 2) + 0xfe092000)
#define SRAM_B_RANGE1_WRITE_CTRL1                  ((0x004f  << 2) + 0xfe092000)
#define SRAM_B_RANGE2_WRITE_CTRL1                  ((0x0050  << 2) + 0xfe092000)
#define SRAM_B_RANGE3_WRITE_CTRL1                  ((0x0051  << 2) + 0xfe092000)
#define SRAM_B_RANGE4_WRITE_CTRL1                  ((0x0052  << 2) + 0xfe092000)
#define SRAM_B_RANGE5_WRITE_CTRL1                  ((0x0053  << 2) + 0xfe092000)
#define SRAM_B_RANGE6_WRITE_CTRL1                  ((0x0054  << 2) + 0xfe092000)
#define SRAM_B_RANGE7_WRITE_CTRL1                  ((0x0055  << 2) + 0xfe092000)
#define SRAM_B_RANGE8_WRITE_CTRL1                  ((0x0056  << 2) + 0xfe092000)
#define SRAM_B_RANGE9_WRITE_CTRL1                  ((0x0057  << 2) + 0xfe092000)
#define SRAM_B_RANGE10_WRITE_CTRL1                 ((0x0058  << 2) + 0xfe092000)
#define SRAM_B_RANGE11_WRITE_CTRL1                 ((0x0059  << 2) + 0xfe092000)
#define SRAM_B_RANGE12_WRITE_CTRL1                 ((0x005a  << 2) + 0xfe092000)
#define SRAM_B_RANGE13_WRITE_CTRL1                 ((0x005b  << 2) + 0xfe092000)
#define SRAM_B_RANGE14_WRITE_CTRL1                 ((0x005c  << 2) + 0xfe092000)
#define SRAM_B_RANGE15_WRITE_CTRL1                 ((0x005d  << 2) + 0xfe092000)
#define SRAM_B_GLOBAL_READ_CTRL0                   ((0x005e  << 2) + 0xfe092000)
#define SRAM_B_GLOBAL_READ_CTRL1                   ((0x005f  << 2) + 0xfe092000)
#define SRAM_B_GLOBAL_WRITE_CTRL0                  ((0x0060  << 2) + 0xfe092000)
#define SRAM_B_GLOBAL_WRITE_CTRL1                  ((0x0061  << 2) + 0xfe092000)
#define SRAM_B_SEC_CTRL0                           ((0x0062  << 2) + 0xfe092000)
#define SRAM_B_REG_LOCK0                           ((0x0063  << 2) + 0xfe092000)
#define SRAM_B_REG_LOCK1                           ((0x0064  << 2) + 0xfe092000)
#define SRAM_B_REG_LOCK2                           ((0x0065  << 2) + 0xfe092000)
#define SRAM_B_GLOBAL_READ_CTRL0_LOCK              ((0x0066  << 2) + 0xfe092000)
#define SRAM_B_GLOBAL_READ_CTRL1_LOCK              ((0x0067  << 2) + 0xfe092000)
#define SRAM_B_GLOBAL_WRITE_CTRL0_LOCK             ((0x0068  << 2) + 0xfe092000)
#define SRAM_B_GLOBAL_WRITE_CTRL1_LOCK             ((0x0069  << 2) + 0xfe092000)
#define SRAM_B_SEC_CTRL0_LOCK                      ((0x006a  << 2) + 0xfe092000)
#define SRAM_B_STATUS_REG                          ((0x006b  << 2) + 0xfe092000)
#define SRAM_B_INIT_DLY_TCNT                       ((0x006c  << 2) + 0xfe092000)
//========================================================================
//  MAILBOX
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe006000
// -----------------------------------------------
#define MAILBOX_WR_MBOX00                          ((0x0000  << 2) + 0xfe006000)
#define MAILBOX_WR_MBOX01                          ((0x0020  << 2) + 0xfe006000)
#define MAILBOX_WR_MBOX02                          ((0x0040  << 2) + 0xfe006000)
#define MAILBOX_WR_MBOX03                          ((0x0060  << 2) + 0xfe006000)
#define MAILBOX_WR_MBOX04                          ((0x0080  << 2) + 0xfe006000)
#define MAILBOX_WR_MBOX05                          ((0x00a0  << 2) + 0xfe006000)
#define MAILBOX_WR_MBOX06                          ((0x00c0  << 2) + 0xfe006000)
#define MAILBOX_WR_MBOX07                          ((0x00e0  << 2) + 0xfe006000)
#define MAILBOX_WR_MBOX08                          ((0x0100  << 2) + 0xfe006000)
#define MAILBOX_WR_MBOX09                          ((0x0120  << 2) + 0xfe006000)
#define MAILBOX_WR_MBOX10                          ((0x0140  << 2) + 0xfe006000)
#define MAILBOX_WR_MBOX11                          ((0x0160  << 2) + 0xfe006000)
#define MAILBOX_WR_MBOX12                          ((0x0180  << 2) + 0xfe006000)
#define MAILBOX_WR_MBOX13                          ((0x01a0  << 2) + 0xfe006000)
#define MAILBOX_WR_MBOX14                          ((0x01c0  << 2) + 0xfe006000)
#define MAILBOX_WR_MBOX15                          ((0x01e0  << 2) + 0xfe006000)
#define MAILBOX_RD_MBOX00                          ((0x0200  << 2) + 0xfe006000)
#define MAILBOX_RD_MBOX01                          ((0x0220  << 2) + 0xfe006000)
#define MAILBOX_RD_MBOX02                          ((0x0240  << 2) + 0xfe006000)
#define MAILBOX_RD_MBOX03                          ((0x0260  << 2) + 0xfe006000)
#define MAILBOX_RD_MBOX04                          ((0x0280  << 2) + 0xfe006000)
#define MAILBOX_RD_MBOX05                          ((0x02a0  << 2) + 0xfe006000)
#define MAILBOX_RD_MBOX06                          ((0x02c0  << 2) + 0xfe006000)
#define MAILBOX_RD_MBOX07                          ((0x02e0  << 2) + 0xfe006000)
#define MAILBOX_RD_MBOX08                          ((0x0300  << 2) + 0xfe006000)
#define MAILBOX_RD_MBOX09                          ((0x0320  << 2) + 0xfe006000)
#define MAILBOX_RD_MBOX10                          ((0x0340  << 2) + 0xfe006000)
#define MAILBOX_RD_MBOX11                          ((0x0360  << 2) + 0xfe006000)
#define MAILBOX_RD_MBOX12                          ((0x0380  << 2) + 0xfe006000)
#define MAILBOX_RD_MBOX13                          ((0x03a0  << 2) + 0xfe006000)
#define MAILBOX_RD_MBOX14                          ((0x03c0  << 2) + 0xfe006000)
#define MAILBOX_RD_MBOX15                          ((0x03e0  << 2) + 0xfe006000)
#define MAILBOX_LOCK_BIT0                          ((0x0400  << 2) + 0xfe006000)
#define MAILBOX_LOCK_BIT1                          ((0x0401  << 2) + 0xfe006000)
#define MAILBOX_PROT_BIT0                          ((0x0402  << 2) + 0xfe006000)
#define MAILBOX_PROT_BIT1                          ((0x0403  << 2) + 0xfe006000)
#define MAILBOX_ACCESS_EN_IRQA_CLR                 ((0x0404  << 2) + 0xfe006000)
#define MAILBOX_ACCESS_EN_IRQB_CLR                 ((0x0405  << 2) + 0xfe006000)
#define MAILBOX_ACCESS_EN_IRQC_CLR                 ((0x0406  << 2) + 0xfe006000)
#define MAILBOX_ACCESS_EN_IRQD_CLR                 ((0x0407  << 2) + 0xfe006000)
#define MAILBOX_IRQA_MASK                          ((0x0408  << 2) + 0xfe006000)
#define MAILBOX_IRQB_MASK                          ((0x0409  << 2) + 0xfe006000)
#define MAILBOX_IRQC_MASK                          ((0x040a  << 2) + 0xfe006000)
#define MAILBOX_IRQD_MASK                          ((0x040b  << 2) + 0xfe006000)
#define MAILBOX_IRQ_TYPE                           ((0x040c  << 2) + 0xfe006000)
#define MAILBOX_IRQA_CLR                           ((0x0410  << 2) + 0xfe006000)
#define MAILBOX_IRQB_CLR                           ((0x0411  << 2) + 0xfe006000)
#define MAILBOX_IRQC_CLR                           ((0x0412  << 2) + 0xfe006000)
#define MAILBOX_IRQD_CLR                           ((0x0413  << 2) + 0xfe006000)
#define MAILBOX_IRQA_STS                           ((0x0414  << 2) + 0xfe006000)
#define MAILBOX_IRQB_STS                           ((0x0415  << 2) + 0xfe006000)
#define MAILBOX_IRQC_STS                           ((0x0416  << 2) + 0xfe006000)
#define MAILBOX_IRQD_STS                           ((0x0417  << 2) + 0xfe006000)
#define MAILBOX_ACCESS_EN_MBOX00                   ((0x0420  << 2) + 0xfe006000)
#define MAILBOX_ACCESS_EN_MBOX01                   ((0x0421  << 2) + 0xfe006000)
#define MAILBOX_ACCESS_EN_MBOX02                   ((0x0422  << 2) + 0xfe006000)
#define MAILBOX_ACCESS_EN_MBOX03                   ((0x0423  << 2) + 0xfe006000)
#define MAILBOX_ACCESS_EN_MBOX04                   ((0x0424  << 2) + 0xfe006000)
#define MAILBOX_ACCESS_EN_MBOX05                   ((0x0425  << 2) + 0xfe006000)
#define MAILBOX_ACCESS_EN_MBOX06                   ((0x0426  << 2) + 0xfe006000)
#define MAILBOX_ACCESS_EN_MBOX07                   ((0x0427  << 2) + 0xfe006000)
#define MAILBOX_ACCESS_EN_MBOX08                   ((0x0428  << 2) + 0xfe006000)
#define MAILBOX_ACCESS_EN_MBOX09                   ((0x0429  << 2) + 0xfe006000)
#define MAILBOX_ACCESS_EN_MBOX10                   ((0x042a  << 2) + 0xfe006000)
#define MAILBOX_ACCESS_EN_MBOX11                   ((0x042b  << 2) + 0xfe006000)
#define MAILBOX_ACCESS_EN_MBOX12                   ((0x042c  << 2) + 0xfe006000)
#define MAILBOX_ACCESS_EN_MBOX13                   ((0x042d  << 2) + 0xfe006000)
#define MAILBOX_ACCESS_EN_MBOX14                   ((0x042e  << 2) + 0xfe006000)
#define MAILBOX_ACCESS_EN_MBOX15                   ((0x042f  << 2) + 0xfe006000)
#define MAILBOX_SET_MBOX00                         ((0x0430  << 2) + 0xfe006000)
#define MAILBOX_SET_MBOX01                         ((0x0431  << 2) + 0xfe006000)
#define MAILBOX_SET_MBOX02                         ((0x0432  << 2) + 0xfe006000)
#define MAILBOX_SET_MBOX03                         ((0x0433  << 2) + 0xfe006000)
#define MAILBOX_SET_MBOX04                         ((0x0434  << 2) + 0xfe006000)
#define MAILBOX_SET_MBOX05                         ((0x0435  << 2) + 0xfe006000)
#define MAILBOX_SET_MBOX06                         ((0x0436  << 2) + 0xfe006000)
#define MAILBOX_SET_MBOX07                         ((0x0437  << 2) + 0xfe006000)
#define MAILBOX_SET_MBOX08                         ((0x0438  << 2) + 0xfe006000)
#define MAILBOX_SET_MBOX09                         ((0x0439  << 2) + 0xfe006000)
#define MAILBOX_SET_MBOX10                         ((0x043a  << 2) + 0xfe006000)
#define MAILBOX_SET_MBOX11                         ((0x043b  << 2) + 0xfe006000)
#define MAILBOX_SET_MBOX12                         ((0x043c  << 2) + 0xfe006000)
#define MAILBOX_SET_MBOX13                         ((0x043d  << 2) + 0xfe006000)
#define MAILBOX_SET_MBOX14                         ((0x043e  << 2) + 0xfe006000)
#define MAILBOX_SET_MBOX15                         ((0x043f  << 2) + 0xfe006000)
#define MAILBOX_CLR_MBOX00                         ((0x0440  << 2) + 0xfe006000)
#define MAILBOX_CLR_MBOX01                         ((0x0441  << 2) + 0xfe006000)
#define MAILBOX_CLR_MBOX02                         ((0x0442  << 2) + 0xfe006000)
#define MAILBOX_CLR_MBOX03                         ((0x0443  << 2) + 0xfe006000)
#define MAILBOX_CLR_MBOX04                         ((0x0444  << 2) + 0xfe006000)
#define MAILBOX_CLR_MBOX05                         ((0x0445  << 2) + 0xfe006000)
#define MAILBOX_CLR_MBOX06                         ((0x0446  << 2) + 0xfe006000)
#define MAILBOX_CLR_MBOX07                         ((0x0447  << 2) + 0xfe006000)
#define MAILBOX_CLR_MBOX08                         ((0x0448  << 2) + 0xfe006000)
#define MAILBOX_CLR_MBOX09                         ((0x0449  << 2) + 0xfe006000)
#define MAILBOX_CLR_MBOX10                         ((0x044a  << 2) + 0xfe006000)
#define MAILBOX_CLR_MBOX11                         ((0x044b  << 2) + 0xfe006000)
#define MAILBOX_CLR_MBOX12                         ((0x044c  << 2) + 0xfe006000)
#define MAILBOX_CLR_MBOX13                         ((0x044d  << 2) + 0xfe006000)
#define MAILBOX_CLR_MBOX14                         ((0x044e  << 2) + 0xfe006000)
#define MAILBOX_CLR_MBOX15                         ((0x044f  << 2) + 0xfe006000)
#define MAILBOX_STS_MBOX00                         ((0x0450  << 2) + 0xfe006000)
#define MAILBOX_STS_MBOX01                         ((0x0451  << 2) + 0xfe006000)
#define MAILBOX_STS_MBOX02                         ((0x0452  << 2) + 0xfe006000)
#define MAILBOX_STS_MBOX03                         ((0x0453  << 2) + 0xfe006000)
#define MAILBOX_STS_MBOX04                         ((0x0454  << 2) + 0xfe006000)
#define MAILBOX_STS_MBOX05                         ((0x0455  << 2) + 0xfe006000)
#define MAILBOX_STS_MBOX06                         ((0x0456  << 2) + 0xfe006000)
#define MAILBOX_STS_MBOX07                         ((0x0457  << 2) + 0xfe006000)
#define MAILBOX_STS_MBOX08                         ((0x0458  << 2) + 0xfe006000)
#define MAILBOX_STS_MBOX09                         ((0x0459  << 2) + 0xfe006000)
#define MAILBOX_STS_MBOX10                         ((0x045a  << 2) + 0xfe006000)
#define MAILBOX_STS_MBOX11                         ((0x045b  << 2) + 0xfe006000)
#define MAILBOX_STS_MBOX12                         ((0x045c  << 2) + 0xfe006000)
#define MAILBOX_STS_MBOX13                         ((0x045d  << 2) + 0xfe006000)
#define MAILBOX_STS_MBOX14                         ((0x045e  << 2) + 0xfe006000)
#define MAILBOX_STS_MBOX15                         ((0x045f  << 2) + 0xfe006000)
//========================================================================
//  IRQ_CTRL
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe00a000
// -----------------------------------------------
#define IRQCTRL_IRQ_INV0                           ((0x0000  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_INV1                           ((0x0001  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_INV2                           ((0x0002  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_INV3                           ((0x0003  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_INV4                           ((0x0004  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_INV5                           ((0x0005  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_INV6                           ((0x0006  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_INV7                           ((0x0007  << 2) + 0xfe00a000)
#define IRQCTRL_MASK0_GIC                          ((0x0010  << 2) + 0xfe00a000)
#define IRQCTRL_MASK1_GIC                          ((0x0011  << 2) + 0xfe00a000)
#define IRQCTRL_MASK2_GIC                          ((0x0012  << 2) + 0xfe00a000)
#define IRQCTRL_MASK3_GIC                          ((0x0013  << 2) + 0xfe00a000)
#define IRQCTRL_MASK4_GIC                          ((0x0014  << 2) + 0xfe00a000)
#define IRQCTRL_MASK5_GIC                          ((0x0015  << 2) + 0xfe00a000)
#define IRQCTRL_MASK6_GIC                          ((0x0016  << 2) + 0xfe00a000)
#define IRQCTRL_MASK7_GIC                          ((0x0017  << 2) + 0xfe00a000)
#define IRQCTRL_MASK0_DSP                          ((0x0020  << 2) + 0xfe00a000)
#define IRQCTRL_MASK1_DSP                          ((0x0021  << 2) + 0xfe00a000)
#define IRQCTRL_MASK2_DSP                          ((0x0022  << 2) + 0xfe00a000)
#define IRQCTRL_MASK3_DSP                          ((0x0023  << 2) + 0xfe00a000)
#define IRQCTRL_MASK4_DSP                          ((0x0024  << 2) + 0xfe00a000)
#define IRQCTRL_MASK5_DSP                          ((0x0025  << 2) + 0xfe00a000)
#define IRQCTRL_MASK6_DSP                          ((0x0026  << 2) + 0xfe00a000)
#define IRQCTRL_MASK7_DSP                          ((0x0027  << 2) + 0xfe00a000)
#define IRQCTRL_MASK0_PWRCTRL                      ((0x0030  << 2) + 0xfe00a000)
#define IRQCTRL_MASK1_PWRCTRL                      ((0x0031  << 2) + 0xfe00a000)
#define IRQCTRL_MASK2_PWRCTRL                      ((0x0032  << 2) + 0xfe00a000)
#define IRQCTRL_MASK3_PWRCTRL                      ((0x0033  << 2) + 0xfe00a000)
#define IRQCTRL_MASK4_PWRCTRL                      ((0x0034  << 2) + 0xfe00a000)
#define IRQCTRL_MASK5_PWRCTRL                      ((0x0035  << 2) + 0xfe00a000)
#define IRQCTRL_MASK6_PWRCTRL                      ((0x0036  << 2) + 0xfe00a000)
#define IRQCTRL_MASK7_PWRCTRL                      ((0x0037  << 2) + 0xfe00a000)
#define IRQCTRL_MASK0_AOCPU                        ((0x0040  << 2) + 0xfe00a000)
#define IRQCTRL_MASK1_AOCPU                        ((0x0041  << 2) + 0xfe00a000)
#define IRQCTRL_MASK2_AOCPU                        ((0x0042  << 2) + 0xfe00a000)
#define IRQCTRL_MASK3_AOCPU                        ((0x0043  << 2) + 0xfe00a000)
#define IRQCTRL_MASK4_AOCPU                        ((0x0044  << 2) + 0xfe00a000)
#define IRQCTRL_MASK5_AOCPU                        ((0x0045  << 2) + 0xfe00a000)
#define IRQCTRL_MASK6_AOCPU                        ((0x0046  << 2) + 0xfe00a000)
#define IRQCTRL_MASK7_AOCPU                        ((0x0047  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_MODE0                          ((0x0050  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_MODE1                          ((0x0051  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_MODE2                          ((0x0052  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_MODE3                          ((0x0053  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_MODE4                          ((0x0054  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_MODE5                          ((0x0055  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_MODE6                          ((0x0056  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_MODE7                          ((0x0057  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_LATCH0                         ((0x0060  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_LATCH1                         ((0x0061  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_LATCH2                         ((0x0062  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_LATCH3                         ((0x0063  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_LATCH4                         ((0x0064  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_LATCH5                         ((0x0065  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_LATCH6                         ((0x0066  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_LATCH7                         ((0x0067  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_LATCH_CLR0                     ((0x0070  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_LATCH_CLR1                     ((0x0071  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_LATCH_CLR2                     ((0x0072  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_LATCH_CLR3                     ((0x0073  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_LATCH_CLR4                     ((0x0074  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_LATCH_CLR5                     ((0x0075  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_LATCH_CLR6                     ((0x0076  << 2) + 0xfe00a000)
#define IRQCTRL_IRQ_LATCH_CLR7                     ((0x0077  << 2) + 0xfe00a000)
#define IRQCTRL_LOCK_BIT                           ((0x0080  << 2) + 0xfe00a000)
#define IRQCTRL_PROT_BIT                           ((0x0081  << 2) + 0xfe00a000)
//========================================================================
//  RESET_CTRL - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe002000
// -----------------------------------------------
#define RESETCTRL_RESET0                           ((0x0000  << 2) + 0xfe002000)
#define RESETCTRL_RESET1                           ((0x0001  << 2) + 0xfe002000)
#define RESETCTRL_RESET2                           ((0x0002  << 2) + 0xfe002000)
#define RESETCTRL_RESET3                           ((0x0003  << 2) + 0xfe002000)
#define RESETCTRL_RESET4                           ((0x0004  << 2) + 0xfe002000)
#define RESETCTRL_RESET5                           ((0x0005  << 2) + 0xfe002000)
#define RESETCTRL_RESET0_LEVEL                     ((0x0010  << 2) + 0xfe002000)
#define RESETCTRL_RESET1_LEVEL                     ((0x0011  << 2) + 0xfe002000)
#define RESETCTRL_RESET2_LEVEL                     ((0x0012  << 2) + 0xfe002000)
#define RESETCTRL_RESET3_LEVEL                     ((0x0013  << 2) + 0xfe002000)
#define RESETCTRL_RESET4_LEVEL                     ((0x0014  << 2) + 0xfe002000)
#define RESETCTRL_RESET5_LEVEL                     ((0x0015  << 2) + 0xfe002000)
#define RESETCTRL_RESET0_MASK                      ((0x0020  << 2) + 0xfe002000)
#define RESETCTRL_RESET1_MASK                      ((0x0021  << 2) + 0xfe002000)
#define RESETCTRL_RESET2_MASK                      ((0x0022  << 2) + 0xfe002000)
#define RESETCTRL_RESET3_MASK                      ((0x0023  << 2) + 0xfe002000)
#define RESETCTRL_RESET4_MASK                      ((0x0024  << 2) + 0xfe002000)
#define RESETCTRL_RESET5_MASK                      ((0x0025  << 2) + 0xfe002000)
#define RESETCTRL_RESET_HOLD_CYC                   ((0x0030  << 2) + 0xfe002000)
#define RESETCTRL_WATCHDOG_CTRL0                   ((0x0040  << 2) + 0xfe002000)
#define RESETCTRL_WATCHDOG_CTRL1                   ((0x0041  << 2) + 0xfe002000)
#define RESETCTRL_WATCHDOG_CNT                     ((0x0042  << 2) + 0xfe002000)
#define RESETCTRL_WATCHDOG_CLR                     ((0x0043  << 2) + 0xfe002000)
#define RESETCTRL_SEC_WATCHDOG_CTRL0               ((0x0044  << 2) + 0xfe002000)
#define RESETCTRL_SEC_WATCHDOG_CTRL1               ((0x0045  << 2) + 0xfe002000)
#define RESETCTRL_SEC_WATCHDOG_CNT                 ((0x0046  << 2) + 0xfe002000)
#define RESETCTRL_SEC_WATCHDOG_CLR                 ((0x0047  << 2) + 0xfe002000)
#define RESETCTRL_WATCHDOG_DLY_CNT                 ((0x0048  << 2) + 0xfe002000)
#define RESETCTRL_WATCHDOG_IRQ_OFFSET              ((0x0049  << 2) + 0xfe002000)
#define RESETCTRL_SEC_WATCHDOG_IRQ_OFFSET          ((0x004a  << 2) + 0xfe002000)
#define RESETCTRL_SEC_RESET0                       ((0x0050  << 2) + 0xfe002000)
#define RESETCTRL_SEC_RESET1                       ((0x0051  << 2) + 0xfe002000)
#define RESETCTRL_SEC_RESET0_LEVEL                 ((0x0060  << 2) + 0xfe002000)
#define RESETCTRL_SEC_RESET1_LEVEL                 ((0x0061  << 2) + 0xfe002000)
#define RESETCTRL_SEC_RESET0_MASK                  ((0x0070  << 2) + 0xfe002000)
#define RESETCTRL_SEC_RESET1_MASK                  ((0x0071  << 2) + 0xfe002000)
#define RESETCTRL_RESET0_LOCK                      ((0x0080  << 2) + 0xfe002000)
#define RESETCTRL_RESET1_LOCK                      ((0x0081  << 2) + 0xfe002000)
#define RESETCTRL_RESET2_LOCK                      ((0x0082  << 2) + 0xfe002000)
#define RESETCTRL_RESET3_LOCK                      ((0x0083  << 2) + 0xfe002000)
#define RESETCTRL_RESET4_LOCK                      ((0x0084  << 2) + 0xfe002000)
#define RESETCTRL_RESET5_LOCK                      ((0x0085  << 2) + 0xfe002000)
#define RESETCTRL_SEC_RESET0_LOCK                  ((0x0088  << 2) + 0xfe002000)
#define RESETCTRL_SEC_RESET1_LOCK                  ((0x0089  << 2) + 0xfe002000)
#define RESETCTRL_RESET0_PROT                      ((0x0090  << 2) + 0xfe002000)
#define RESETCTRL_RESET1_PROT                      ((0x0091  << 2) + 0xfe002000)
#define RESETCTRL_RESET2_PROT                      ((0x0092  << 2) + 0xfe002000)
#define RESETCTRL_RESET3_PROT                      ((0x0093  << 2) + 0xfe002000)
#define RESETCTRL_RESET4_PROT                      ((0x0094  << 2) + 0xfe002000)
#define RESETCTRL_RESET5_PROT                      ((0x0095  << 2) + 0xfe002000)
#define RESETCTRL_SEC_RESET0_PROT                  ((0x0098  << 2) + 0xfe002000)
#define RESETCTRL_SEC_RESET1_PROT                  ((0x0099  << 2) + 0xfe002000)
//========================================================================
//  CPU_CTRL
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe00e000
// -----------------------------------------------
#define CPUCTRL_SYS_CPU_RESET_CNTL                 ((0x0050  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_CLK_CTRL                   ((0x0051  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_CLK_CTRL1                  ((0x0052  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_CLK_CTRL2                  ((0x0053  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_CLK_CTRL3                  ((0x0054  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_CLK_CTRL4                  ((0x0055  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_CLK_CTRL5                  ((0x0056  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_CLK_CTRL6                  ((0x0057  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_CLK_RESULT                 ((0x0058  << 2) + 0xfe00e000)
#define CPUCTRL_ROM_DISABLE                        ((0x0060  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_PERIPHBASE                 ((0x0080  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_TARGETID                   ((0x0081  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_POR_CFG0                   ((0x0090  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_POR_CFG1                   ((0x0091  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_CFG0                       ((0x0092  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_CFG1                       ((0x0093  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_CFG2                       ((0x0094  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_CFG3                       ((0x0095  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_CFG4                       ((0x0096  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_CFG5                       ((0x0097  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_CFG6                       ((0x0098  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_CFG7                       ((0x0099  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_CFG8                       ((0x009a  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_CFG9                       ((0x009b  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_CFG10                      ((0x009c  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_CFG11                      ((0x009d  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_CFG12                      ((0x009e  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_CFG13                      ((0x009f  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_STATUS0                    ((0x00a0  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_STATUS1                    ((0x00a1  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_STATUS2                    ((0x00a2  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_STATUS3                    ((0x00a3  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_STATUS4                    ((0x00a4  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_STATUS5                    ((0x00a5  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_STATUS6                    ((0x00a6  << 2) + 0xfe00e000)
#define CPUCTRL_SYS_CPU_STATUS7                    ((0x00a7  << 2) + 0xfe00e000)
#define SYS_CPU_MISC                               ((0x00a8  << 2) + 0xfe00e000)
//========================================================================
//  SAR_ADC
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe026000
// -----------------------------------------------
#define SAR_ADC_REG0                               ((0x0000  << 2) + 0xfe026000)
#define SAR_ADC_CHAN_LIST                          ((0x0001  << 2) + 0xfe026000)
#define SAR_ADC_AVG_CNTL                           ((0x0002  << 2) + 0xfe026000)
#define SAR_ADC_REG3                               ((0x0003  << 2) + 0xfe026000)
#define SAR_ADC_DELAY                              ((0x0004  << 2) + 0xfe026000)
#define SAR_ADC_LAST_RD                            ((0x0005  << 2) + 0xfe026000)
#define SAR_ADC_FIFO_RD                            ((0x0006  << 2) + 0xfe026000)
#define SAR_ADC_AUX_SW                             ((0x0007  << 2) + 0xfe026000)
#define SAR_ADC_CHAN_10_SW                         ((0x0008  << 2) + 0xfe026000)
#define SAR_ADC_DETECT_IDLE_SW                     ((0x0009  << 2) + 0xfe026000)
#define SAR_ADC_DELTA_10                           ((0x000a  << 2) + 0xfe026000)
#define SAR_ADC_REG11                              ((0x000b  << 2) + 0xfe026000)
#define SAR_ADC_REG12                              ((0x000c  << 2) + 0xfe026000)
#define SAR_ADC_REG13                              ((0x000d  << 2) + 0xfe026000)
#define SAR_ADC_REG14                              ((0x000e  << 2) + 0xfe026000)
#define SAR_ADC_CH0_CTRL1                          ((0x0013  << 2) + 0xfe026000)
#define SAR_ADC_CH0_CTRL2                          ((0x0014  << 2) + 0xfe026000)
#define SAR_ADC_CH0_CTRL3                          ((0x0015  << 2) + 0xfe026000)
#define SAR_ADC_CH1_CTRL1                          ((0x0016  << 2) + 0xfe026000)
#define SAR_ADC_CH1_CTRL2                          ((0x0017  << 2) + 0xfe026000)
#define SAR_ADC_CH1_CTRL3                          ((0x0018  << 2) + 0xfe026000)
#define SAR_ADC_CH2_CTRL1                          ((0x0019  << 2) + 0xfe026000)
#define SAR_ADC_CH2_CTRL2                          ((0x001a  << 2) + 0xfe026000)
#define SAR_ADC_CH2_CTRL3                          ((0x001b  << 2) + 0xfe026000)
#define SAR_ADC_CH3_CTRL1                          ((0x001c  << 2) + 0xfe026000)
#define SAR_ADC_CH3_CTRL2                          ((0x001d  << 2) + 0xfe026000)
#define SAR_ADC_CH3_CTRL3                          ((0x001e  << 2) + 0xfe026000)
#define SAR_ADC_CH4_CTRL1                          ((0x001f  << 2) + 0xfe026000)
#define SAR_ADC_CH4_CTRL2                          ((0x0020  << 2) + 0xfe026000)
#define SAR_ADC_CH4_CTRL3                          ((0x0021  << 2) + 0xfe026000)
#define SAR_ADC_CH5_CTRL1                          ((0x0022  << 2) + 0xfe026000)
#define SAR_ADC_CH5_CTRL2                          ((0x0023  << 2) + 0xfe026000)
#define SAR_ADC_CH5_CTRL3                          ((0x0024  << 2) + 0xfe026000)
#define SAR_ADC_CH6_CTRL1                          ((0x0025  << 2) + 0xfe026000)
#define SAR_ADC_CH6_CTRL2                          ((0x0026  << 2) + 0xfe026000)
#define SAR_ADC_CH6_CTRL3                          ((0x0027  << 2) + 0xfe026000)
#define SAR_ADC_CH7_CTRL1                          ((0x0028  << 2) + 0xfe026000)
#define SAR_ADC_CH7_CTRL2                          ((0x0029  << 2) + 0xfe026000)
#define SAR_ADC_CH7_CTRL3                          ((0x002a  << 2) + 0xfe026000)
#define SAR_ADC_HCIC_CTRL1                         ((0x002b  << 2) + 0xfe026000)
#define SAR_ADC_F1_CTRL                            ((0x002c  << 2) + 0xfe026000)
#define SAR_ADC_F2_CTRL                            ((0x002d  << 2) + 0xfe026000)
#define SAR_ADC_F3_CTRL                            ((0x002e  << 2) + 0xfe026000)
#define SAR_ADC_DECI_FILTER_CTRL                   ((0x002f  << 2) + 0xfe026000)
#define SAR_ADC_COEF_RAM_CNTL                      ((0x0030  << 2) + 0xfe026000)
#define SAR_ADC_COEF_RAM_DATA                      ((0x0031  << 2) + 0xfe026000)
#define SAR_ADC_FIFO_RD_NEW                        ((0x0032  << 2) + 0xfe026000)
#define SAR_ADC_RAW                                ((0x0033  << 2) + 0xfe026000)
#define SAR_ADC_CHNL0                              ((0x0034  << 2) + 0xfe026000)
#define SAR_ADC_CHNL1                              ((0x0035  << 2) + 0xfe026000)
#define SAR_ADC_CHNL2                              ((0x0036  << 2) + 0xfe026000)
#define SAR_ADC_CHNL3                              ((0x0037  << 2) + 0xfe026000)
#define SAR_ADC_CHNL4                              ((0x0038  << 2) + 0xfe026000)
#define SAR_ADC_CHNL5                              ((0x0039  << 2) + 0xfe026000)
#define SAR_ADC_CHNL6                              ((0x003a  << 2) + 0xfe026000)
#define SAR_ADC_CHNL7                              ((0x003b  << 2) + 0xfe026000)
#define SAR_ADC_RDY                                ((0x0040  << 2) + 0xfe026000)
//========================================================================
//  ANA_CTRL - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe008000
// -----------------------------------------------
#define ANACTRL_SYSPLL_CTRL0                       ((0x0000  << 2) + 0xfe008000)
#define ANACTRL_SYSPLL_CTRL1                       ((0x0001  << 2) + 0xfe008000)
#define ANACTRL_SYSPLL_CTRL2                       ((0x0002  << 2) + 0xfe008000)
#define ANACTRL_SYSPLL_CTRL3                       ((0x0003  << 2) + 0xfe008000)
#define ANACTRL_SYSPLL_CTRL4                       ((0x0004  << 2) + 0xfe008000)
#define ANACTRL_SYSPLL_CTRL5                       ((0x0005  << 2) + 0xfe008000)
#define ANACTRL_SYSPLL_CTRL6                       ((0x0006  << 2) + 0xfe008000)
#define ANACTRL_SYSPLL_STS                         ((0x0007  << 2) + 0xfe008000)
#define ANACTRL_FIXPLL_CTRL0                       ((0x0010  << 2) + 0xfe008000)
#define ANACTRL_FIXPLL_CTRL1                       ((0x0011  << 2) + 0xfe008000)
#define ANACTRL_FIXPLL_CTRL2                       ((0x0012  << 2) + 0xfe008000)
#define ANACTRL_FIXPLL_CTRL3                       ((0x0013  << 2) + 0xfe008000)
#define ANACTRL_FIXPLL_CTRL4                       ((0x0014  << 2) + 0xfe008000)
#define ANACTRL_FIXPLL_CTRL5                       ((0x0015  << 2) + 0xfe008000)
#define ANACTRL_FIXPLL_CTRL6                       ((0x0016  << 2) + 0xfe008000)
#define ANACTRL_FIXPLL_STS                         ((0x0017  << 2) + 0xfe008000)
#define ANACTRL_GP0PLL_CTRL0                       ((0x0020  << 2) + 0xfe008000)
#define ANACTRL_GP0PLL_CTRL1                       ((0x0021  << 2) + 0xfe008000)
#define ANACTRL_GP0PLL_CTRL2                       ((0x0022  << 2) + 0xfe008000)
#define ANACTRL_GP0PLL_CTRL3                       ((0x0023  << 2) + 0xfe008000)
#define ANACTRL_GP0PLL_CTRL4                       ((0x0024  << 2) + 0xfe008000)
#define ANACTRL_GP0PLL_CTRL5                       ((0x0025  << 2) + 0xfe008000)
#define ANACTRL_GP0PLL_CTRL6                       ((0x0026  << 2) + 0xfe008000)
#define ANACTRL_GP0PLL_STS                         ((0x0027  << 2) + 0xfe008000)
#define ANACTRL_GP1PLL_CTRL0                       ((0x0030  << 2) + 0xfe008000)
#define ANACTRL_GP1PLL_CTRL1                       ((0x0031  << 2) + 0xfe008000)
#define ANACTRL_GP1PLL_CTRL2                       ((0x0032  << 2) + 0xfe008000)
#define ANACTRL_GP1PLL_CTRL3                       ((0x0033  << 2) + 0xfe008000)
#define ANACTRL_GP1PLL_CTRL4                       ((0x0034  << 2) + 0xfe008000)
#define ANACTRL_GP1PLL_CTRL5                       ((0x0035  << 2) + 0xfe008000)
#define ANACTRL_GP1PLL_CTRL6                       ((0x0036  << 2) + 0xfe008000)
#define ANACTRL_GP1PLL_STS                         ((0x0037  << 2) + 0xfe008000)
#define ANACTRL_HIFIPLL_CTRL0                      ((0x0040  << 2) + 0xfe008000)
#define ANACTRL_HIFIPLL_CTRL1                      ((0x0041  << 2) + 0xfe008000)
#define ANACTRL_HIFIPLL_CTRL2                      ((0x0042  << 2) + 0xfe008000)
#define ANACTRL_HIFIPLL_CTRL3                      ((0x0043  << 2) + 0xfe008000)
#define ANACTRL_HIFIPLL_CTRL4                      ((0x0044  << 2) + 0xfe008000)
#define ANACTRL_HIFIPLL_CTRL5                      ((0x0045  << 2) + 0xfe008000)
#define ANACTRL_HIFIPLL_CTRL6                      ((0x0046  << 2) + 0xfe008000)
#define ANACTRL_HIFIPLL_STS                        ((0x0047  << 2) + 0xfe008000)
//`define ANACTRL_PCIEPLL_CTRL0    8'h50
//`define ANACTRL_PCIEPLL_CTRL1    8'h51
//`define ANACTRL_PCIEPLL_CTRL2    8'h52
//`define ANACTRL_PCIEPLL_CTRL3    8'h53
//`define ANACTRL_PCIEPLL_CTRL4    8'h54
//`define ANACTRL_PCIEPLL_CTRL5    8'h55
//`define ANACTRL_PCIEPLL_STS      8'h56
#define ANACTRL_MPLL_CTRL0                         ((0x0060  << 2) + 0xfe008000)
#define ANACTRL_MPLL_CTRL1                         ((0x0061  << 2) + 0xfe008000)
#define ANACTRL_MPLL_CTRL2                         ((0x0062  << 2) + 0xfe008000)
#define ANACTRL_MPLL_CTRL3                         ((0x0063  << 2) + 0xfe008000)
#define ANACTRL_MPLL_CTRL4                         ((0x0064  << 2) + 0xfe008000)
#define ANACTRL_MPLL_CTRL5                         ((0x0065  << 2) + 0xfe008000)
#define ANACTRL_MPLL_CTRL6                         ((0x0066  << 2) + 0xfe008000)
#define ANACTRL_MPLL_CTRL7                         ((0x0067  << 2) + 0xfe008000)
#define ANACTRL_MPLL_CTRL8                         ((0x0068  << 2) + 0xfe008000)
#define ANACTRL_MPLL_STS                           ((0x0069  << 2) + 0xfe008000)
#define ANACTRL_HDMIPLL_CTRL0                      ((0x0070  << 2) + 0xfe008000)
#define ANACTRL_HDMIPLL_CTRL1                      ((0x0071  << 2) + 0xfe008000)
#define ANACTRL_HDMIPLL_CTRL2                      ((0x0072  << 2) + 0xfe008000)
#define ANACTRL_HDMIPLL_CTRL3                      ((0x0073  << 2) + 0xfe008000)
#define ANACTRL_HDMIPLL_CTRL4                      ((0x0074  << 2) + 0xfe008000)
#define ANACTRL_HDMIPLL_CTRL5                      ((0x0075  << 2) + 0xfe008000)
#define ANACTRL_HDMIPLL_CTRL6                      ((0x0076  << 2) + 0xfe008000)
//`define ANACTRL_HDMIPLL_STS      8'h77
//`define ANACTRL_HDMIPLL_VLOCK    8'h79
#define ANACTRL_HDMIPHY_CTRL0                      ((0x0080  << 2) + 0xfe008000)
#define ANACTRL_HDMIPHY_CTRL1                      ((0x0081  << 2) + 0xfe008000)
#define ANACTRL_HDMIPHY_CTRL2                      ((0x0082  << 2) + 0xfe008000)
#define ANACTRL_HDMIPHY_CTRL3                      ((0x0083  << 2) + 0xfe008000)
#define ANACTRL_HDMIPHY_CTRL4                      ((0x0084  << 2) + 0xfe008000)
#define ANACTRL_HDMIPHY_CTRL5                      ((0x0085  << 2) + 0xfe008000)
#define ANACTRL_HDMIPHY_STS                        ((0x0086  << 2) + 0xfe008000)
//`define ANACTRL_MIPICSI_CTRL0    8'h90
//`define ANACTRL_MIPICSI_CTRL1    8'h91
//`define ANACTRL_MIPICSI_CTRL2    8'h92
//`define ANACTRL_MIPICSI_CTRL3    8'h93
//`define ANACTRL_MIPICSI_CTRL4    8'h94
//`define ANACTRL_MIPICSI_CTRL5    8'h95
//`define ANACTRL_MIPIDSI_CTRL0    8'hA0
//`define ANACTRL_MIPIDSI_CTRL1    8'hA1
//`define ANACTRL_MIPIDSI_CTRL2    8'hA2
//`define ANACTRL_MIPIDSI_STS      8'hA3
//`define ANACTRL_VDAC_CTRL0       8'hB0
//`define ANACTRL_VDAC_CTRL1       8'hB1
#define ANACTRL_POR_CTRL                           ((0x00b6  << 2) + 0xfe008000)
#define ANACTRL_LOCK_BIT                           ((0x00b8  << 2) + 0xfe008000)
#define ANACTRL_PROT_BIT                           ((0x00b9  << 2) + 0xfe008000)
#define ANACTRL_ADC_PLL_CTRL                       ((0x00c0  << 2) + 0xfe008000)
#define ANACTRL_ADC_PLL_CTRL1                      ((0x00c1  << 2) + 0xfe008000)
#define ANACTRL_ADC_PLL_CTRL2                      ((0x00c2  << 2) + 0xfe008000)
#define ANACTRL_ADC_PLL_CTRL3                      ((0x00c3  << 2) + 0xfe008000)
#define ANACTRL_ADC_PLL_CTRL4                      ((0x00c4  << 2) + 0xfe008000)
#define ANACTRL_ADC_PLL_CTRL5                      ((0x00c5  << 2) + 0xfe008000)
#define ANACTRL_ADC_PLL_CTRL6                      ((0x00c6  << 2) + 0xfe008000)
//`define ANACTRL_ADC_PLL_STS      8'hC7
#define ANACTRL_RTCPLL_CTRL0                       ((0x00d0  << 2) + 0xfe008000)
#define ANACTRL_RTCPLL_CTRL1                       ((0x00d1  << 2) + 0xfe008000)
#define ANACTRL_RTCPLL_CTRL2                       ((0x00d2  << 2) + 0xfe008000)
#define ANACTRL_RTCPLL_CTRL3                       ((0x00d3  << 2) + 0xfe008000)
#define ANACTRL_RTCPLL_CTRL4                       ((0x00d4  << 2) + 0xfe008000)
#define ANACTRL_RTCPLL_STS                         ((0x00d5  << 2) + 0xfe008000)
//`define ANACTRL_S2_DADC_CTRL     8'hD0
//`define ANACTRL_S2_DADC_CTRL2    8'hD1
#define ANACTRL_CHIP_TEST_STS                      ((0x00e0  << 2) + 0xfe008000)
//========================================================================
//  Ethernet Phy
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe028000
// -----------------------------------------------
#define ETH_PHY_DBG_CTL0                           ((0x0000  << 2) + 0xfe028000)
#define ETH_PHY_DBG_CTL1                           ((0x0001  << 2) + 0xfe028000)
#define ETH_PHY_DBG_CFG0                           ((0x0002  << 2) + 0xfe028000)
#define ETH_PHY_DBG_CFG1                           ((0x0003  << 2) + 0xfe028000)
#define ETH_PHY_DBG_CFG2                           ((0x0004  << 2) + 0xfe028000)
#define ETH_PHY_DBG_CFG3                           ((0x0005  << 2) + 0xfe028000)
#define ETH_PHY_DBG_CFG4                           ((0x0006  << 2) + 0xfe028000)
#define ETH_PLL_STS                                ((0x0010  << 2) + 0xfe028000)
#define ETH_PLL_CTL0                               ((0x0011  << 2) + 0xfe028000)
#define ETH_PLL_CTL1                               ((0x0012  << 2) + 0xfe028000)
#define ETH_PLL_CTL2                               ((0x0013  << 2) + 0xfe028000)
#define ETH_PLL_CTL3                               ((0x0014  << 2) + 0xfe028000)
#define ETH_PLL_CTL4                               ((0x0015  << 2) + 0xfe028000)
#define ETH_PLL_CTL5                               ((0x0016  << 2) + 0xfe028000)
#define ETH_PLL_CTL6                               ((0x0017  << 2) + 0xfe028000)
#define ETH_PLL_CTL7                               ((0x0018  << 2) + 0xfe028000)
#define ETH_PHY_CNTL0                              ((0x0020  << 2) + 0xfe028000)
#define ETH_PHY_CNTL1                              ((0x0021  << 2) + 0xfe028000)
#define ETH_PHY_CNTL2                              ((0x0022  << 2) + 0xfe028000)
#define ETH_PHY_CNTL3                              ((0x0023  << 2) + 0xfe028000)
#define ETH_PHY_STS0                               ((0x0025  << 2) + 0xfe028000)
#define ETH_PHY_STS1                               ((0x0026  << 2) + 0xfe028000)
#define ETH_PHY_STS2                               ((0x0027  << 2) + 0xfe028000)
#define ETH_PHY_DBG_REG                            ((0x0028  << 2) + 0xfe028000)
//========================================================================
//  Ethernet TOP
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe024000
// -----------------------------------------------
#define ETHTOP_CNTL0                               ((0x0000  << 2) + 0xfe024000)
#define ETHTOP_CNTL1                               ((0x0001  << 2) + 0xfe024000)
//========================================================================
//  I2C Slave A
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe064000
// -----------------------------------------------
//`define I2C_S_A_CONTROL_REG        8'h00
//`define I2C_S_A_SEND_REG           8'h01
//`define I2C_S_A_RECV_REG           8'h02
//`define I2C_S_A_CNTL1_REG          8'h03
//========================================================================
//  IR TX
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe084000
// -----------------------------------------------
//`define IRCTRL_IR_DEC_LDR_ACTIVE        8'h00
//`define IRCTRL_IR_DEC_LDR_IDLE          8'h01
//`define IRCTRL_IR_DEC_LDR_REPEAT        8'h02
//`define IRCTRL_IR_DEC_BIT_0             8'h03
//`define IRCTRL_IR_DEC_REG0              8'h04
//`define IRCTRL_IR_DEC_FRAME             8'h05
//`define IRCTRL_IR_DEC_STATUS            8'h06
//`define IRCTRL_IR_DEC_REG1              8'h07
//
//`define IRCTRL_MF_IR_DEC_LDR_ACTIVE     8'h10
//`define IRCTRL_MF_IR_DEC_LDR_IDLE       8'h11
//`define IRCTRL_MF_IR_DEC_LDR_REPEAT     8'h12
//`define IRCTRL_MF_IR_DEC_BIT_0          8'h13
//`define IRCTRL_MF_IR_DEC_REG0           8'h14
//`define IRCTRL_MF_IR_DEC_FRAME          8'h15
//`define IRCTRL_MF_IR_DEC_STATUS         8'h16
//`define IRCTRL_MF_IR_DEC_REG1           8'h17
//`define IRCTRL_MF_IR_DEC_REG2           8'h18
//`define IRCTRL_MF_IR_DEC_DURATN2        8'h19
//`define IRCTRL_MF_IR_DEC_DURATN3        8'h1a
//`define IRCTRL_MF_IR_DEC_FRAME1         8'h1b
//`define IRCTRL_MF_IR_DEC_STATUS1        8'h1c
//`define IRCTRL_MF_IR_DEC_STATUS2        8'h1d
//`define IRCTRL_MF_IR_DEC_REG3           8'h1e
//`define IRCTRL_MF_IR_DEC_FRAME_RSV0     8'h1f
//`define IRCTRL_MF_IR_DEC_FRAME_RSV1     8'h20
//`define IRCTRL_MF_IR_DEC_FILTE          8'h21
//`define IRCTRL_MF_IR_DEC_IRQ_CTL        8'h22
//`define IRCTRL_MF_IR_DEC_FIFO_CTL       8'h23
//`define IRCTRL_MF_IR_DEC_WIDTH_NEW      8'h24
//`define IRCTRL_MF_IR_DEC_REPEAT_DET     8'h25
//
//`define IRCTRL_IR_DEC_DEMOD_CNTL0       8'h30
//`define IRCTRL_IR_DEC_DEMOD_CNTL1       8'h31
//`define IRCTRL_IR_DEC_DEMOD_IIR_THD     8'h32
//`define IRCTRL_IR_DEC_DEMOD_THD0        8'h33
//`define IRCTRL_IR_DEC_DEMOD_THD1        8'h34
//`define IRCTRL_IR_DEC_DEMOD_SUM_CNT0    8'h35
//`define IRCTRL_IR_DEC_DEMOD_SUM_CNT1    8'h36
//`define IRCTRL_IR_DEC_DEMOD_CNT0        8'h37
//`define IRCTRL_IR_DEC_DEMOD_CNT1        8'h38
//
#define IRCTRL_IR_BLASTER_ADDR0                    ((0x0000  << 2) + 0xfe084000)
#define IRCTRL_IR_BLASTER_ADDR1                    ((0x0001  << 2) + 0xfe084000)
#define IRCTRL_IR_BLASTER_ADDR2                    ((0x0002  << 2) + 0xfe084000)
#define IRCTRL_IR_BLASTER_ADDR3                    ((0x0003  << 2) + 0xfe084000)
//========================================================================
//  I2C Master A
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe066000
// -----------------------------------------------
#define I2C_M_A_CONTROL_REG                        ((0x0000  << 2) + 0xfe066000)
#define I2C_M_A_SLAVE_ADDR                         ((0x0001  << 2) + 0xfe066000)
#define I2C_M_A_TOKEN_LIST0                        ((0x0002  << 2) + 0xfe066000)
#define I2C_M_A_TOKEN_LIST1                        ((0x0003  << 2) + 0xfe066000)
#define I2C_M_A_WDATA_REG0                         ((0x0004  << 2) + 0xfe066000)
#define I2C_M_A_WDATA_REG1                         ((0x0005  << 2) + 0xfe066000)
#define I2C_M_A_RDATA_REG0                         ((0x0006  << 2) + 0xfe066000)
#define I2C_M_A_RDATA_REG1                         ((0x0007  << 2) + 0xfe066000)
#define I2C_M_A_TIMEOUT_TH                         ((0x0008  << 2) + 0xfe066000)
#define I2C_M_A_CNTL_DELY1                         ((0x0009  << 2) + 0xfe066000)
#define I2C_M_A_CNTL_DELY2                         ((0x000a  << 2) + 0xfe066000)
#define I2C_M_A_LOW_DELY                           ((0x000b  << 2) + 0xfe066000)
#define I2C_M_A_HIGH_DELY                          ((0x000c  << 2) + 0xfe066000)
#define I2C_M_A_FIFO_CTRL0                         ((0x000d  << 2) + 0xfe066000)
#define I2C_M_A_FIFO_CTRL1                         ((0x000e  << 2) + 0xfe066000)
#define I2C_M_A_FIFO_PENDING                       ((0x000f  << 2) + 0xfe066000)
#define I2C_M_A_FIFO_PENDING_MASK                  ((0x0010  << 2) + 0xfe066000)
#define I2C_M_A_FIFO_ST0                           ((0x0011  << 2) + 0xfe066000)
//========================================================================
//  I2C Master B
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe068000
// -----------------------------------------------
#define I2C_M_B_CONTROL_REG                        ((0x0000  << 2) + 0xfe068000)
#define I2C_M_B_SLAVE_ADDR                         ((0x0001  << 2) + 0xfe068000)
#define I2C_M_B_TOKEN_LIST0                        ((0x0002  << 2) + 0xfe068000)
#define I2C_M_B_TOKEN_LIST1                        ((0x0003  << 2) + 0xfe068000)
#define I2C_M_B_WDATA_REG0                         ((0x0004  << 2) + 0xfe068000)
#define I2C_M_B_WDATA_REG1                         ((0x0005  << 2) + 0xfe068000)
#define I2C_M_B_RDATA_REG0                         ((0x0006  << 2) + 0xfe068000)
#define I2C_M_B_RDATA_REG1                         ((0x0007  << 2) + 0xfe068000)
#define I2C_M_B_TIMEOUT_TH                         ((0x0008  << 2) + 0xfe068000)
#define I2C_M_B_CNTL_DELY1                         ((0x0009  << 2) + 0xfe068000)
#define I2C_M_B_CNTL_DELY2                         ((0x000a  << 2) + 0xfe068000)
#define I2C_M_B_LOW_DELY                           ((0x000b  << 2) + 0xfe068000)
#define I2C_M_B_HIGH_DELY                          ((0x000c  << 2) + 0xfe068000)
#define I2C_M_B_FIFO_CTRL0                         ((0x000d  << 2) + 0xfe068000)
#define I2C_M_B_FIFO_CTRL1                         ((0x000e  << 2) + 0xfe068000)
#define I2C_M_B_FIFO_PENDING                       ((0x000f  << 2) + 0xfe068000)
#define I2C_M_B_FIFO_PENDING_MASK                  ((0x0010  << 2) + 0xfe068000)
#define I2C_M_B_FIFO_ST0                           ((0x0011  << 2) + 0xfe068000)
//========================================================================
//  I2C Master C
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe06a000
// -----------------------------------------------
#define I2C_M_C_CONTROL_REG                        ((0x0000  << 2) + 0xfe06a000)
#define I2C_M_C_SLAVE_ADDR                         ((0x0001  << 2) + 0xfe06a000)
#define I2C_M_C_TOKEN_LIST0                        ((0x0002  << 2) + 0xfe06a000)
#define I2C_M_C_TOKEN_LIST1                        ((0x0003  << 2) + 0xfe06a000)
#define I2C_M_C_WDATA_REG0                         ((0x0004  << 2) + 0xfe06a000)
#define I2C_M_C_WDATA_REG1                         ((0x0005  << 2) + 0xfe06a000)
#define I2C_M_C_RDATA_REG0                         ((0x0006  << 2) + 0xfe06a000)
#define I2C_M_C_RDATA_REG1                         ((0x0007  << 2) + 0xfe06a000)
#define I2C_M_C_TIMEOUT_TH                         ((0x0008  << 2) + 0xfe06a000)
#define I2C_M_C_CNTL_DELY1                         ((0x0009  << 2) + 0xfe06a000)
#define I2C_M_C_CNTL_DELY2                         ((0x000a  << 2) + 0xfe06a000)
#define I2C_M_C_LOW_DELY                           ((0x000b  << 2) + 0xfe06a000)
#define I2C_M_C_HIGH_DELY                          ((0x000c  << 2) + 0xfe06a000)
#define I2C_M_C_FIFO_CTRL0                         ((0x000d  << 2) + 0xfe06a000)
#define I2C_M_C_FIFO_CTRL1                         ((0x000e  << 2) + 0xfe06a000)
#define I2C_M_C_FIFO_PENDING                       ((0x000f  << 2) + 0xfe06a000)
#define I2C_M_C_FIFO_PENDING_MASK                  ((0x0010  << 2) + 0xfe06a000)
#define I2C_M_C_FIFO_ST0                           ((0x0011  << 2) + 0xfe06a000)
//========================================================================
//  I2C Master D
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe06c000
// -----------------------------------------------
#define I2C_M_D_CONTROL_REG                        ((0x0000  << 2) + 0xfe06c000)
#define I2C_M_D_SLAVE_ADDR                         ((0x0001  << 2) + 0xfe06c000)
#define I2C_M_D_TOKEN_LIST0                        ((0x0002  << 2) + 0xfe06c000)
#define I2C_M_D_TOKEN_LIST1                        ((0x0003  << 2) + 0xfe06c000)
#define I2C_M_D_WDATA_REG0                         ((0x0004  << 2) + 0xfe06c000)
#define I2C_M_D_WDATA_REG1                         ((0x0005  << 2) + 0xfe06c000)
#define I2C_M_D_RDATA_REG0                         ((0x0006  << 2) + 0xfe06c000)
#define I2C_M_D_RDATA_REG1                         ((0x0007  << 2) + 0xfe06c000)
#define I2C_M_D_TIMEOUT_TH                         ((0x0008  << 2) + 0xfe06c000)
#define I2C_M_D_CNTL_DELY1                         ((0x0009  << 2) + 0xfe06c000)
#define I2C_M_D_CNTL_DELY2                         ((0x000a  << 2) + 0xfe06c000)
#define I2C_M_D_LOW_DELY                           ((0x000b  << 2) + 0xfe06c000)
#define I2C_M_D_HIGH_DELY                          ((0x000c  << 2) + 0xfe06c000)
#define I2C_M_D_FIFO_CTRL0                         ((0x000d  << 2) + 0xfe06c000)
#define I2C_M_D_FIFO_CTRL1                         ((0x000e  << 2) + 0xfe06c000)
#define I2C_M_D_FIFO_PENDING                       ((0x000f  << 2) + 0xfe06c000)
#define I2C_M_D_FIFO_PENDING_MASK                  ((0x0010  << 2) + 0xfe06c000)
#define I2C_M_D_FIFO_ST0                           ((0x0011  << 2) + 0xfe06c000)
//========================================================================
//  I2C Master E
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe06e000
// -----------------------------------------------
#define I2C_M_E_CONTROL_REG                        ((0x0000  << 2) + 0xfe06e000)
#define I2C_M_E_SLAVE_ADDR                         ((0x0001  << 2) + 0xfe06e000)
#define I2C_M_E_TOKEN_LIST0                        ((0x0002  << 2) + 0xfe06e000)
#define I2C_M_E_TOKEN_LIST1                        ((0x0003  << 2) + 0xfe06e000)
#define I2C_M_E_WDATA_REG0                         ((0x0004  << 2) + 0xfe06e000)
#define I2C_M_E_WDATA_REG1                         ((0x0005  << 2) + 0xfe06e000)
#define I2C_M_E_RDATA_REG0                         ((0x0006  << 2) + 0xfe06e000)
#define I2C_M_E_RDATA_REG1                         ((0x0007  << 2) + 0xfe06e000)
#define I2C_M_E_TIMEOUT_TH                         ((0x0008  << 2) + 0xfe06e000)
#define I2C_M_E_CNTL_DELY1                         ((0x0009  << 2) + 0xfe06e000)
#define I2C_M_E_CNTL_DELY2                         ((0x000a  << 2) + 0xfe06e000)
#define I2C_M_E_LOW_DELY                           ((0x000b  << 2) + 0xfe06e000)
#define I2C_M_E_HIGH_DELY                          ((0x000c  << 2) + 0xfe06e000)
#define I2C_M_E_FIFO_CTRL0                         ((0x000d  << 2) + 0xfe06e000)
#define I2C_M_E_FIFO_CTRL1                         ((0x000e  << 2) + 0xfe06e000)
#define I2C_M_E_FIFO_PENDING                       ((0x000f  << 2) + 0xfe06e000)
#define I2C_M_E_FIFO_PENDING_MASK                  ((0x0010  << 2) + 0xfe06e000)
#define I2C_M_E_FIFO_ST0                           ((0x0011  << 2) + 0xfe06e000)
//========================================================================
//  I2C Master F
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe070000
// -----------------------------------------------
#define I2C_M_F_CONTROL_REG                        ((0x0000  << 2) + 0xfe070000)
#define I2C_M_F_SLAVE_ADDR                         ((0x0001  << 2) + 0xfe070000)
#define I2C_M_F_TOKEN_LIST0                        ((0x0002  << 2) + 0xfe070000)
#define I2C_M_F_TOKEN_LIST1                        ((0x0003  << 2) + 0xfe070000)
#define I2C_M_F_WDATA_REG0                         ((0x0004  << 2) + 0xfe070000)
#define I2C_M_F_WDATA_REG1                         ((0x0005  << 2) + 0xfe070000)
#define I2C_M_F_RDATA_REG0                         ((0x0006  << 2) + 0xfe070000)
#define I2C_M_F_RDATA_REG1                         ((0x0007  << 2) + 0xfe070000)
#define I2C_M_F_TIMEOUT_TH                         ((0x0008  << 2) + 0xfe070000)
#define I2C_M_F_CNTL_DELY1                         ((0x0009  << 2) + 0xfe070000)
#define I2C_M_F_CNTL_DELY2                         ((0x000a  << 2) + 0xfe070000)
#define I2C_M_F_LOW_DELY                           ((0x000b  << 2) + 0xfe070000)
#define I2C_M_F_HIGH_DELY                          ((0x000c  << 2) + 0xfe070000)
#define I2C_M_F_FIFO_CTRL_REG                      ((0x000d  << 2) + 0xfe070000)
#define I2C_M_F_STATE_REG                          ((0x000e  << 2) + 0xfe070000)
//========================================================================
//  APB0_UART_A - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe078000
// -----------------------------------------------
#define UART_A_WFIFO                               ((0x0000  << 2) + 0xfe078000)
#define UART_A_RFIFO                               ((0x0001  << 2) + 0xfe078000)
#define UART_A_CONTROL                             ((0x0002  << 2) + 0xfe078000)
#define UART_A_STATUS                              ((0x0003  << 2) + 0xfe078000)
#define UART_A_MISC                                ((0x0004  << 2) + 0xfe078000)
#define UART_A_REG5                                ((0x0005  << 2) + 0xfe078000)
//========================================================================
//  APB0_UART_B - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe07a000
// -----------------------------------------------
#define UART_B_WFIFO                               ((0x0000  << 2) + 0xfe07a000)
#define UART_B_RFIFO                               ((0x0001  << 2) + 0xfe07a000)
#define UART_B_CONTROL                             ((0x0002  << 2) + 0xfe07a000)
#define UART_B_STATUS                              ((0x0003  << 2) + 0xfe07a000)
#define UART_B_MISC                                ((0x0004  << 2) + 0xfe07a000)
#define UART_B_REG5                                ((0x0005  << 2) + 0xfe07a000)
//========================================================================
//  APB0_UART_C - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe07c000
// -----------------------------------------------
//`define UART_C_WFIFO        8'h00
//`define UART_C_RFIFO        8'h01
//`define UART_C_CONTROL      8'h02
//`define UART_C_STATUS       8'h03
//`define UART_C_MISC         8'h04
//`define UART_C_REG5         8'h05
//========================================================================
//  APB0_UART_D - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe07e000
// -----------------------------------------------
#define UART_D_WFIFO                               ((0x0000  << 2) + 0xfe07e000)
#define UART_D_RFIFO                               ((0x0001  << 2) + 0xfe07e000)
#define UART_D_CONTROL                             ((0x0002  << 2) + 0xfe07e000)
#define UART_D_STATUS                              ((0x0003  << 2) + 0xfe07e000)
#define UART_D_MISC                                ((0x0004  << 2) + 0xfe07e000)
#define UART_D_REG5                                ((0x0005  << 2) + 0xfe07e000)
//========================================================================
//  APB0_UART_E - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe080000
// -----------------------------------------------
#define UART_E_WFIFO                               ((0x0000  << 2) + 0xfe080000)
#define UART_E_RFIFO                               ((0x0001  << 2) + 0xfe080000)
#define UART_E_CONTROL                             ((0x0002  << 2) + 0xfe080000)
#define UART_E_STATUS                              ((0x0003  << 2) + 0xfe080000)
#define UART_E_MISC                                ((0x0004  << 2) + 0xfe080000)
#define UART_E_REG5                                ((0x0005  << 2) + 0xfe080000)
//========================================================================
//  PWM_AB - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe058000
// -----------------------------------------------
#define PWMAB_PWM_A                                ((0x0000  << 2) + 0xfe058000)
#define PWMAB_PWM_B                                ((0x0001  << 2) + 0xfe058000)
#define PWMAB_MISC_REG_AB                          ((0x0002  << 2) + 0xfe058000)
#define PWMAB_DELTA_SIGMA_AB                       ((0x0003  << 2) + 0xfe058000)
#define PWMAB_TIME_AB                              ((0x0004  << 2) + 0xfe058000)
#define PWMAB_A2                                   ((0x0005  << 2) + 0xfe058000)
#define PWMAB_B2                                   ((0x0006  << 2) + 0xfe058000)
#define PWMAB_BLINK_AB                             ((0x0007  << 2) + 0xfe058000)
#define PWMAB_LOCK_AB                              ((0x0008  << 2) + 0xfe058000)
//========================================================================
//  PWM_CD - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe05a000
// -----------------------------------------------
#define PWMCD_PWM_A                                ((0x0000  << 2) + 0xfe05a000)
#define PWMCD_PWM_B                                ((0x0001  << 2) + 0xfe05a000)
#define PWMCD_MISC_REG_AB                          ((0x0002  << 2) + 0xfe05a000)
#define PWMCD_DELTA_SIGMA_AB                       ((0x0003  << 2) + 0xfe05a000)
#define PWMCD_TIME_AB                              ((0x0004  << 2) + 0xfe05a000)
#define PWMCD_A2                                   ((0x0005  << 2) + 0xfe05a000)
#define PWMCD_B2                                   ((0x0006  << 2) + 0xfe05a000)
#define PWMCD_BLINK_AB                             ((0x0007  << 2) + 0xfe05a000)
#define PWMCD_LOCK_AB                              ((0x0008  << 2) + 0xfe05a000)
//========================================================================
//  PWM_EF - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe05c000
// -----------------------------------------------
#define PWMEF_PWM_A                                ((0x0000  << 2) + 0xfe05c000)
#define PWMEF_PWM_B                                ((0x0001  << 2) + 0xfe05c000)
#define PWMEF_MISC_REG_AB                          ((0x0002  << 2) + 0xfe05c000)
#define PWMEF_DELTA_SIGMA_AB                       ((0x0003  << 2) + 0xfe05c000)
#define PWMEF_TIME_AB                              ((0x0004  << 2) + 0xfe05c000)
#define PWMEF_A2                                   ((0x0005  << 2) + 0xfe05c000)
#define PWMEF_B2                                   ((0x0006  << 2) + 0xfe05c000)
#define PWMEF_BLINK_AB                             ((0x0007  << 2) + 0xfe05c000)
#define PWMEF_LOCK_AB                              ((0x0008  << 2) + 0xfe05c000)
//========================================================================
//  PWM_GH - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe05e000
// -----------------------------------------------
#define PWMGH_PWM_A                                ((0x0000  << 2) + 0xfe05e000)
#define PWMGH_PWM_B                                ((0x0001  << 2) + 0xfe05e000)
#define PWMGH_MISC_REG_AB                          ((0x0002  << 2) + 0xfe05e000)
#define PWMGH_DELTA_SIGMA_AB                       ((0x0003  << 2) + 0xfe05e000)
#define PWMGH_TIME_AB                              ((0x0004  << 2) + 0xfe05e000)
#define PWMGH_A2                                   ((0x0005  << 2) + 0xfe05e000)
#define PWMGH_B2                                   ((0x0006  << 2) + 0xfe05e000)
#define PWMGH_BLINK_AB                             ((0x0007  << 2) + 0xfe05e000)
#define PWMGH_LOCK_AB                              ((0x0008  << 2) + 0xfe05e000)
//========================================================================
//  PWM_IJ - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe060000
// -----------------------------------------------
#define PWMIJ_PWM_A                                ((0x0000  << 2) + 0xfe060000)
#define PWMIJ_PWM_B                                ((0x0001  << 2) + 0xfe060000)
#define PWMIJ_MISC_REG_AB                          ((0x0002  << 2) + 0xfe060000)
#define PWMIJ_DELTA_SIGMA_AB                       ((0x0003  << 2) + 0xfe060000)
#define PWMIJ_TIME_AB                              ((0x0004  << 2) + 0xfe060000)
#define PWMIJ_A2                                   ((0x0005  << 2) + 0xfe060000)
#define PWMIJ_B2                                   ((0x0006  << 2) + 0xfe060000)
#define PWMIJ_BLINK_AB                             ((0x0007  << 2) + 0xfe060000)
#define PWMIJ_LOCK_AB                              ((0x0008  << 2) + 0xfe060000)
//========================================================================
//  SPICC_0
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe050000
// -----------------------------------------------
//`define SPICC0_RXDATA        8'h00
//`define SPICC0_TXDATA        8'h01
//`define SPICC0_CONREG        8'h02
//`define SPICC0_INTREG        8'h03
//`define SPICC0_DMAREG        8'h04
//`define SPICC0_STATREG       8'h05
//`define SPICC0_PERIODREG     8'h06
//`define SPICC0_TESTREG       8'h07
//`define SPICC0_DRADDR        8'h08
//`define SPICC0_DWADDR        8'h09
//`define SPICC0_LD_CNTL0      8'h0a
//`define SPICC0_LD_CNTL1      8'h0b
//`define SPICC0_LD_RADDR      8'h0c
//`define SPICC0_LD_WADDR      8'h0d
//`define SPICC0_ENHANCE_CNTL  8'h0e
//`define SPICC0_ENHANCE_CNTL1 8'h0f
//`define SPICC0_ENHANCE_CNTL2 8'h10
//========================================================================
//  SPICC_1
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe052000
// -----------------------------------------------
//`define SPICC1_RXDATA        8'h00
//`define SPICC1_TXDATA        8'h01
//`define SPICC1_CONREG        8'h02
//`define SPICC1_INTREG        8'h03
//`define SPICC1_DMAREG        8'h04
//`define SPICC1_STATREG       8'h05
//`define SPICC1_PERIODREG     8'h06
//`define SPICC1_TESTREG       8'h07
//`define SPICC1_DRADDR        8'h08
//`define SPICC1_DWADDR        8'h09
//`define SPICC1_LD_CNTL0      8'h0a
//`define SPICC1_LD_CNTL1      8'h0b
//`define SPICC1_LD_RADDR      8'h0c
//`define SPICC1_LD_WADDR      8'h0d
//`define SPICC1_ENHANCE_CNTL  8'h0e
//`define SPICC1_ENHANCE_CNTL1 8'h0f
//`define SPICC1_ENHANCE_CNTL2 8'h10
//========================================================================
//  SPICC_0
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe050000
// -----------------------------------------------
#define SPICC0_CFG_READY                           ((0x0000  << 2) + 0xfe050000)
#define SPICC0_CFG_SPI                             ((0x0001  << 2) + 0xfe050000)
#define SPICC0_CFG_START                           ((0x0002  << 2) + 0xfe050000)
#define SPICC0_CFG_BUS                             ((0x0003  << 2) + 0xfe050000)
#define SPICC0_TX_DESC0                            ((0x0004  << 2) + 0xfe050000)
#define SPICC0_TX_DESC1                            ((0x0005  << 2) + 0xfe050000)
#define SPICC0_RX_DESC0                            ((0x0006  << 2) + 0xfe050000)
#define SPICC0_RX_DESC1                            ((0x0007  << 2) + 0xfe050000)
#define SPICC0_DESC_LIST0                          ((0x0008  << 2) + 0xfe050000)
#define SPICC0_DESC_LIST1                          ((0x0009  << 2) + 0xfe050000)
#define SPICC0_DESC_CURR0                          ((0x000a  << 2) + 0xfe050000)
#define SPICC0_DESC_CURR1                          ((0x000b  << 2) + 0xfe050000)
#define SPICC0_IRQ_STS                             ((0x000c  << 2) + 0xfe050000)
#define SPICC0_IRQ_ENABLE                          ((0x000d  << 2) + 0xfe050000)
//========================================================================
//  SPICC_1
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe050100
// -----------------------------------------------
#define SPICC1_CFG_READY                           ((0x0000  << 2) + 0xfe050100)
#define SPICC1_CFG_SPI                             ((0x0001  << 2) + 0xfe050100)
#define SPICC1_CFG_START                           ((0x0002  << 2) + 0xfe050100)
#define SPICC1_CFG_BUS                             ((0x0003  << 2) + 0xfe050100)
#define SPICC1_TX_DESC0                            ((0x0004  << 2) + 0xfe050100)
#define SPICC1_TX_DESC1                            ((0x0005  << 2) + 0xfe050100)
#define SPICC1_RX_DESC0                            ((0x0006  << 2) + 0xfe050100)
#define SPICC1_RX_DESC1                            ((0x0007  << 2) + 0xfe050100)
#define SPICC1_DESC_LIST0                          ((0x0008  << 2) + 0xfe050100)
#define SPICC1_DESC_LIST1                          ((0x0009  << 2) + 0xfe050100)
#define SPICC1_DESC_CURR0                          ((0x000a  << 2) + 0xfe050100)
#define SPICC1_DESC_CURR1                          ((0x000b  << 2) + 0xfe050100)
#define SPICC1_IRQ_STS                             ((0x000c  << 2) + 0xfe050100)
#define SPICC1_IRQ_ENABLE                          ((0x000d  << 2) + 0xfe050100)
//========================================================================
//  AIFIFO - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe046000
// -----------------------------------------------
#define AIU_AIFIFO_CTRL                            ((0x0000  << 2) + 0xfe046000)
#define AIU_AIFIFO_STATUS                          ((0x0001  << 2) + 0xfe046000)
#define AIU_AIFIFO_GBIT                            ((0x0002  << 2) + 0xfe046000)
#define AIU_AIFIFO_CLB                             ((0x0003  << 2) + 0xfe046000)
#define AIU_MEM_AIFIFO_START_PTR                   ((0x0004  << 2) + 0xfe046000)
#define AIU_MEM_AIFIFO_CURR_PTR                    ((0x0005  << 2) + 0xfe046000)
#define AIU_MEM_AIFIFO_END_PTR                     ((0x0006  << 2) + 0xfe046000)
#define AIU_MEM_AIFIFO_BYTES_AVAIL                 ((0x0007  << 2) + 0xfe046000)
#define AIU_MEM_AIFIFO_CONTROL                     ((0x0008  << 2) + 0xfe046000)
#define AIU_MEM_AIFIFO_MAN_WP                      ((0x0009  << 2) + 0xfe046000)
#define AIU_MEM_AIFIFO_MAN_RP                      ((0x000a  << 2) + 0xfe046000)
#define AIU_MEM_AIFIFO_LEVEL                       ((0x000b  << 2) + 0xfe046000)
#define AIU_MEM_AIFIFO_BUF_CNTL                    ((0x000c  << 2) + 0xfe046000)
#define AIU_MEM_AIFIFO_BUF_WRAP_COUNT              ((0x000d  << 2) + 0xfe046000)
#define AIU_MEM_AIFIFO_MEM_CTL                     ((0x000f  << 2) + 0xfe046000)
#define AIFIFO_TIME_STAMP_CNTL                     ((0x0010  << 2) + 0xfe046000)
#define AIFIFO_TIME_STAMP_SYNC_0                   ((0x0011  << 2) + 0xfe046000)
#define AIFIFO_TIME_STAMP_SYNC_1                   ((0x0012  << 2) + 0xfe046000)
#define AIFIFO_TIME_STAMP_0                        ((0x0013  << 2) + 0xfe046000)
#define AIFIFO_TIME_STAMP_1                        ((0x0014  << 2) + 0xfe046000)
#define AIFIFO_TIME_STAMP_2                        ((0x0015  << 2) + 0xfe046000)
#define AIFIFO_TIME_STAMP_3                        ((0x0016  << 2) + 0xfe046000)
#define AIFIFO_TIME_STAMP_LENGTH                   ((0x0017  << 2) + 0xfe046000)
//========================================================================
//  MSR_CLK - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe048000
// -----------------------------------------------
#define MSR_CLK_REG0                               ((0x0000  << 2) + 0xfe048000)
#define MSR_CLK_REG1                               ((0x0001  << 2) + 0xfe048000)
#define MSR_CLK_REG2                               ((0x0002  << 2) + 0xfe048000)
#define MSR_CLK_REG3                               ((0x0003  << 2) + 0xfe048000)
#define MSR_CLK_REG4                               ((0x0004  << 2) + 0xfe048000)
#define MSR_CLK_REG5                               ((0x0005  << 2) + 0xfe048000)
#define MSR_CLK_DUTY                               ((0x0006  << 2) + 0xfe048000)
//========================================================================
//  SPIFC - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe056000
// -----------------------------------------------
#define SPI_FLASH_CMD                              ((0x0000  << 2) + 0xfe056000)
    // SPI_FLASH_READ    31
    // SPI_FLASH_WREN    30
    // SPI_FLASH_WRDI    29
    // SPI_FLASH_RDID    28
    // SPI_FLASH_RDSR    27
    // SPI_FLASH_WRSR    26
    // SPI_FLASH_PP      25
    // SPI_FLASH_SE      24
    // SPI_FLASH_BE      23
    // SPI_FLASH_CE      22
    // SPI_FLASH_DP      21
    // SPI_FLASH_RES     20
    // SPI_HPM           19
    // SPI_FLASH_USR     18
    // SPI_FLASH_USR_ADDR 15
    // SPI_FLASH_USR_DUMMY 14
    // SPI_FLASH_USR_DIN   13
    // SPI_FLASH_USR_DOUT   12
    // SPI_FLASH_USR_DUMMY_BLEN   10
    // SPI_FLASH_USR_CMD     0
#define SPI_FLASH_ADDR                             ((0x0001  << 2) + 0xfe056000)
    // SPI_FLASH_BYTES_LEN 24
    // SPI_FLASH_ADDR_START 0
#define SPI_FLASH_CTRL                             ((0x0002  << 2) + 0xfe056000)
    // SPI_ENABLE_AHB    17
    // SPI_SST_AAI       16
    // SPI_RES_RID       15
    // SPI_FREAD_DUAL    14
    // SPI_READ_READ_EN  13
    // SPI_CLK_DIV0      12
    // SPI_CLKCNT_N      8
    // SPI_CLKCNT_H      4
    // SPI_CLKCNT_L      0
#define SPI_FLASH_CTRL1                            ((0x0003  << 2) + 0xfe056000)
#define SPI_FLASH_STATUS                           ((0x0004  << 2) + 0xfe056000)
#define SPI_FLASH_CTRL2                            ((0x0005  << 2) + 0xfe056000)
#define SPI_FLASH_CLOCK                            ((0x0006  << 2) + 0xfe056000)
#define SPI_FLASH_USER                             ((0x0007  << 2) + 0xfe056000)
#define SPI_FLASH_USER1                            ((0x0008  << 2) + 0xfe056000)
#define SPI_FLASH_USER2                            ((0x0009  << 2) + 0xfe056000)
#define SPI_FLASH_USER3                            ((0x000a  << 2) + 0xfe056000)
#define SPI_FLASH_USER4                            ((0x000b  << 2) + 0xfe056000)
#define SPI_FLASH_SLAVE                            ((0x000c  << 2) + 0xfe056000)
#define SPI_FLASH_SLAVE1                           ((0x000d  << 2) + 0xfe056000)
#define SPI_FLASH_SLAVE2                           ((0x000e  << 2) + 0xfe056000)
#define SPI_FLASH_SLAVE3                           ((0x000f  << 2) + 0xfe056000)
#define SPI_FLASH_C0                               ((0x0010  << 2) + 0xfe056000)
#define SPI_FLASH_C1                               ((0x0011  << 2) + 0xfe056000)
#define SPI_FLASH_C2                               ((0x0012  << 2) + 0xfe056000)
#define SPI_FLASH_C3                               ((0x0013  << 2) + 0xfe056000)
#define SPI_FLASH_C4                               ((0x0014  << 2) + 0xfe056000)
#define SPI_FLASH_C5                               ((0x0015  << 2) + 0xfe056000)
#define SPI_FLASH_C6                               ((0x0016  << 2) + 0xfe056000)
#define SPI_FLASH_C7                               ((0x0017  << 2) + 0xfe056000)
#define SPI_FLASH_B8                               ((0x0018  << 2) + 0xfe056000)
#define SPI_FLASH_B9                               ((0x0019  << 2) + 0xfe056000)
#define SPI_FLASH_B10                              ((0x001a  << 2) + 0xfe056000)
#define SPI_FLASH_B11                              ((0x001b  << 2) + 0xfe056000)
#define SPI_FLASH_B12                              ((0x001c  << 2) + 0xfe056000)
#define SPI_FLASH_B13                              ((0x001d  << 2) + 0xfe056000)
#define SPI_FLASH_B14                              ((0x001e  << 2) + 0xfe056000)
#define SPI_FLASH_B15                              ((0x001f  << 2) + 0xfe056000)
//========================================================================
//  LED_CTRL - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe082000
// -----------------------------------------------
//
// Reading file:  ./led_ctrl_regs.h
//
//========================================================================
//  LED_CTRL - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe082000
// -----------------------------------------------
#define LED_CTRL_DATA0                             ((0x0000  << 2) + 0xfe082000)
#define LED_CTRL_DATA1                             ((0x0001  << 2) + 0xfe082000)
#define LED_CTRL_DATA2                             ((0x0002  << 2) + 0xfe082000)
#define LED_CTRL_DATA3                             ((0x0003  << 2) + 0xfe082000)
#define LED_CTRL_DATA4                             ((0x0004  << 2) + 0xfe082000)
#define LED_CTRL_DATA5                             ((0x0005  << 2) + 0xfe082000)
#define LED_CTRL_DATA6                             ((0x0006  << 2) + 0xfe082000)
#define LED_CTRL_DATA7                             ((0x0007  << 2) + 0xfe082000)
#define LED_CTRL_DATA8                             ((0x0008  << 2) + 0xfe082000)
#define LED_CTRL_DATA9                             ((0x0009  << 2) + 0xfe082000)
#define LED_CTRL_DATA10                            ((0x000a  << 2) + 0xfe082000)
#define LED_CTRL_DATA11                            ((0x000b  << 2) + 0xfe082000)
#define LED_CTRL_DATA12                            ((0x000c  << 2) + 0xfe082000)
#define LED_CTRL_DATA13                            ((0x000d  << 2) + 0xfe082000)
#define LED_CTRL_DATA14                            ((0x000e  << 2) + 0xfe082000)
#define LED_CTRL_DATA15                            ((0x000f  << 2) + 0xfe082000)
#define LED_CTRL_DATA16                            ((0x0010  << 2) + 0xfe082000)
#define LED_CTRL_DATA17                            ((0x0011  << 2) + 0xfe082000)
#define LED_CTRL_DATA18                            ((0x0012  << 2) + 0xfe082000)
#define LED_CTRL_DATA19                            ((0x0013  << 2) + 0xfe082000)
#define LED_CTRL_DATA20                            ((0x0014  << 2) + 0xfe082000)
#define LED_CTRL_DATA21                            ((0x0015  << 2) + 0xfe082000)
#define LED_CTRL_DATA22                            ((0x0016  << 2) + 0xfe082000)
#define LED_CTRL_DATA23                            ((0x0017  << 2) + 0xfe082000)
#define LED_CTRL_DATA24                            ((0x0018  << 2) + 0xfe082000)
#define LED_CTRL_DATA25                            ((0x0019  << 2) + 0xfe082000)
#define LED_CTRL_DATA26                            ((0x001a  << 2) + 0xfe082000)
#define LED_CTRL_DATA27                            ((0x001b  << 2) + 0xfe082000)
#define LED_CTRL_DATA28                            ((0x001c  << 2) + 0xfe082000)
#define LED_CTRL_DATA29                            ((0x001d  << 2) + 0xfe082000)
#define LED_CTRL_DATA30                            ((0x001e  << 2) + 0xfe082000)
#define LED_CTRL_DATA31                            ((0x001f  << 2) + 0xfe082000)
#define LED_CONTRO_REG                             ((0x0020  << 2) + 0xfe082000)
#define LED_CYCLE_RATIO_RES                        ((0x0021  << 2) + 0xfe082000)
//
// Closing file:  ./led_ctrl_regs.h
//
//========================================================================
//  CEC - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe044000
// -----------------------------------------------
#define CECA_GEN_CNTL                              ((0x0000  << 2) + 0xfe044000)
#define CECA_RW_REG                                ((0x0001  << 2) + 0xfe044000)
#define CECA_INTR_MASKN                            ((0x0002  << 2) + 0xfe044000)
#define CECA_INTR_CLR                              ((0x0003  << 2) + 0xfe044000)
#define CECA_INTR_STAT                             ((0x0004  << 2) + 0xfe044000)
#define CECB_GEN_CNTL                              ((0x0010  << 2) + 0xfe044000)
#define CECB_RW_REG                                ((0x0011  << 2) + 0xfe044000)
#define CECB_INTR_MASKN                            ((0x0012  << 2) + 0xfe044000)
#define CECB_INTR_CLR                              ((0x0013  << 2) + 0xfe044000)
#define CECB_INTR_STAT                             ((0x0014  << 2) + 0xfe044000)
//========================================================================
//  SMART CARD - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe038000
// -----------------------------------------------
#define SMARTCARD_REG0                             ((0x0000  << 2) + 0xfe038000)
#define SMARTCARD_REG1                             ((0x0001  << 2) + 0xfe038000)
#define SMARTCARD_REG2                             ((0x0002  << 2) + 0xfe038000)
#define SMARTCARD_STATUS                           ((0x0003  << 2) + 0xfe038000)
#define SMARTCARD_INTR                             ((0x0004  << 2) + 0xfe038000)
#define SMARTCARD_REG5                             ((0x0005  << 2) + 0xfe038000)
#define SMARTCARD_REG6                             ((0x0006  << 2) + 0xfe038000)
#define SMARTCARD_FIFO                             ((0x0007  << 2) + 0xfe038000)
#define SMARTCARD_REG8                             ((0x0008  << 2) + 0xfe038000)
//========================================================================
//  CAPU
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe012000
// -----------------------------------------------
#define CAPU_ACCESS_EN_AHB_NNA                     ((0x00c3  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_AHB_ETH                     ((0x00c2  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_AHB_USB0                    ((0x00c1  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_AHB_USB1                    ((0x00c0  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_16M_SLOT0                   ((0x00b0  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_256K_SLOT1                  ((0x00a1  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_256K_SLOT0                  ((0x00a0  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_64K_SLOT5                   ((0x0085  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_64K_SLOT4                   ((0x0084  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_64K_SLOT3                   ((0x0083  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_64K_SLOT2                   ((0x0082  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_64K_SLOT1                   ((0x0081  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_64K_SLOT0                   ((0x0080  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT4F                   ((0x004f  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT4E                   ((0x004e  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT4D                   ((0x004d  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT4C                   ((0x004c  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT4B                   ((0x004b  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT4A                   ((0x004a  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT49                   ((0x0049  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT48                   ((0x0048  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT47                   ((0x0047  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT46                   ((0x0046  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT45                   ((0x0045  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT44                   ((0x0044  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT43                   ((0x0043  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT42                   ((0x0042  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT41                   ((0x0041  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT40                   ((0x0040  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT3F                   ((0x003f  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT3E                   ((0x003e  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT3D                   ((0x003d  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT3C                   ((0x003c  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT3B                   ((0x003b  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT3A                   ((0x003a  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT39                   ((0x0039  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT38                   ((0x0038  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT37                   ((0x0037  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT36                   ((0x0036  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT35                   ((0x0035  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT34                   ((0x0034  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT33                   ((0x0033  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT32                   ((0x0032  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT31                   ((0x0031  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT30                   ((0x0030  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT2F                   ((0x002f  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT2E                   ((0x002e  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT2D                   ((0x002d  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT2C                   ((0x002c  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT2B                   ((0x002b  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT2A                   ((0x002a  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT29                   ((0x0029  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT28                   ((0x0028  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT27                   ((0x0027  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT26                   ((0x0026  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT25                   ((0x0025  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT24                   ((0x0024  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT23                   ((0x0023  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT22                   ((0x0022  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT21                   ((0x0021  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT20                   ((0x0020  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT1F                   ((0x001f  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT1E                   ((0x001e  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT1D                   ((0x001d  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT1C                   ((0x001c  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT1B                   ((0x001b  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT1A                   ((0x001a  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT19                   ((0x0019  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT18                   ((0x0018  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT17                   ((0x0017  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT16                   ((0x0016  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT15                   ((0x0015  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT14                   ((0x0014  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT13                   ((0x0013  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT12                   ((0x0012  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT11                   ((0x0011  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT10                   ((0x0010  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT0F                   ((0x000f  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT0E                   ((0x000e  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT0D                   ((0x000d  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT0C                   ((0x000c  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT0B                   ((0x000b  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT0A                   ((0x000a  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT09                   ((0x0009  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT08                   ((0x0008  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT07                   ((0x0007  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT06                   ((0x0006  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT05                   ((0x0005  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT04                   ((0x0004  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT03                   ((0x0003  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT02                   ((0x0002  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT01                   ((0x0001  << 2) + 0xfe012000)
#define CAPU_ACCESS_EN_8K_SLOT00                   ((0x0000  << 2) + 0xfe012000)
//========================================================================
//  BT656
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe030000
// -----------------------------------------------
#define BT_CTRL                                    ((0x0000  << 2) + 0xfe030000)
    #define BT_SOFT_RESET           31      // Soft reset
    #define BT_JPEG_START           30
    #define BT_JPEG_IGNORE_BYTES    18     //20:18
    #define BT_JPEG_IGNORE_LAST     17
    #define BT_UPDATE_ST_SEL        16
    #define BT_COLOR_REPEAT         15
    #define BT_VIDEO_MODE           13     // 14:13
    #define BT_AUTO_FMT             12
    #define BT_PROG_MODE            11
    #define BT_JPEG_MODE            10
    #define BT_XCLK27_EN_BIT        9      // 1 : xclk27 is input.     0 : xclk27 is output.
    #define BT_FID_EN_BIT           8       // 1 : enable use FID port.
    #define BT_CLK27_SEL_BIT        7       // 1 : external xclk27      0 : internal clk27.
    #define BT_CLK27_PHASE_BIT      6       // 1 : no inverted          0 : inverted.
    #define BT_ACE_MODE_BIT         5       // 1 : auto cover error by hardware.
    #define BT_SLICE_MODE_BIT       4       // 1 : no ancillary flag    0 : with ancillary flag.
    #define BT_FMT_MODE_BIT         3       // 1 : ntsc                 0 : pal.
    #define BT_REF_MODE_BIT         2       // 1 : from bit stream.     0 : from ports.
    #define BT_MODE_BIT             1       // 1 : BT656 model          0 : SAA7118 mode.
    #define BT_EN_BIT               0       // 1 : enable.
#define BT_VBISTART                                ((0x0001  << 2) + 0xfe030000)
#define BT_VBIEND                                  ((0x0002  << 2) + 0xfe030000)
#define BT_FIELDSADR                               ((0x0003  << 2) + 0xfe030000)
#define BT_LINECTRL                                ((0x0004  << 2) + 0xfe030000)
#define BT_VIDEOSTART                              ((0x0005  << 2) + 0xfe030000)
#define BT_VIDEOEND                                ((0x0006  << 2) + 0xfe030000)
#define BT_SLICELINE0                              ((0x0007  << 2) + 0xfe030000)
#define BT_SLICELINE1                              ((0x0008  << 2) + 0xfe030000)
#define BT_PORT_CTRL                               ((0x0009  << 2) + 0xfe030000)
  #define BT_HSYNC_PHASE           0
  #define BT_VSYNC_PHASE           1
  #define BT_HSYNC_PULSE           2
  #define BT_VSYNC_PULSE           3
  #define BT_FID_PHASE             4
  #define BT_FID_HSVS              5
  #define BT_IDQ_EN                6
  #define BT_IDQ_PHASE             7
  #define BT_D8B                   8
  #define BT_10BTO8B               9
  #define BT_FID_DELAY            10    //12:10
  #define BT_VSYNC_DELAY          13    //
  #define BT_HSYNC_DELAY          16
  #define BT_FID_HSVS_PCNT        19
  #define BT_FID_HSVS_VS_RISING   20
  #define BT_FID_HSVS_VS_FALLING  21
  #define BT_VREF_FROM_VS_ONLY    22
  #define BT_PORT_ACTIVE_HMODE    23
  #define BT_DUAL_EDGE_CLK_EN     24
  #define BT_CLK_INV_SEL          25
  #define BT_DATA_ENDIAN          26
#define BT_SWAP_CTRL                               ((0x000a  << 2) + 0xfe030000)
#define BT_601_CTRL0                               ((0x000e  << 2) + 0xfe030000)
#define BT_601_CTRL1                               ((0x000f  << 2) + 0xfe030000)
#define BT_601_CTRL2                               ((0x0010  << 2) + 0xfe030000)
#define BT_601_CTRL3                               ((0x0011  << 2) + 0xfe030000)
#define BT_FIELD_LUMA                              ((0x0012  << 2) + 0xfe030000)
#define BT_RAW_CTRL                                ((0x0013  << 2) + 0xfe030000)
#define BT_STATUS                                  ((0x0014  << 2) + 0xfe030000)
#define BT_INT_CTRL                                ((0x0015  << 2) + 0xfe030000)
#define BT_VLINE_STATUS                            ((0x0017  << 2) + 0xfe030000)
#define BT_ERR_CNT                                 ((0x0019  << 2) + 0xfe030000)
#define BT_LCNT_STATUS                             ((0x001a  << 2) + 0xfe030000)
#define BT_PCNT_STATUS                             ((0x001c  << 2) + 0xfe030000)
#define BT_DELAY_CTRL                              ((0x001d  << 2) + 0xfe030000)
#define BT_REF_000                                 ((0x0020  << 2) + 0xfe030000)
#define BT_REF_001                                 ((0x0021  << 2) + 0xfe030000)
#define BT_REF_010                                 ((0x0022  << 2) + 0xfe030000)
#define BT_REF_011                                 ((0x0023  << 2) + 0xfe030000)
#define BT_REF_100                                 ((0x0024  << 2) + 0xfe030000)
#define BT_REF_101                                 ((0x0025  << 2) + 0xfe030000)
#define BT_REF_110                                 ((0x0026  << 2) + 0xfe030000)
#define BT_REF_111                                 ((0x0027  << 2) + 0xfe030000)
//========================================================================
//  PDM
//========================================================================
//`include "../audio/rtl/pdm_reg.vh"
//
// Reading file:  ./REG_LIST_AUDIO_RTL.h
//
//========================================================================
//  AUDIO - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe330000
// -----------------------------------------------
#define EE_AUDIO_CLK_GATE_EN0                      ((0x0000  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_GATE_EN1                      ((0x0001  << 2) + 0xfe330000)
#define EE_AUDIO_MCLK_A_CTRL                       ((0x0002  << 2) + 0xfe330000)
#define EE_AUDIO_MCLK_B_CTRL                       ((0x0003  << 2) + 0xfe330000)
#define EE_AUDIO_MCLK_C_CTRL                       ((0x0004  << 2) + 0xfe330000)
#define EE_AUDIO_MCLK_D_CTRL                       ((0x0005  << 2) + 0xfe330000)
#define EE_AUDIO_MCLK_E_CTRL                       ((0x0006  << 2) + 0xfe330000)
#define EE_AUDIO_MCLK_F_CTRL                       ((0x0007  << 2) + 0xfe330000)
#define EE_AUDIO_SW_RESET0                         ((0x000a  << 2) + 0xfe330000)
#define EE_AUDIO_SW_RESET1                         ((0x000b  << 2) + 0xfe330000)
#define EE_AUDIO_CLK81_CTRL                        ((0x000c  << 2) + 0xfe330000)
#define EE_AUDIO_CLK81_EN                          ((0x000d  << 2) + 0xfe330000)
#define EE_AUDIO_MCLK_CTRL                         ((0x000e  << 2) + 0xfe330000)
#define EE_AUDIO_MST_A_SCLK_CTRL0                  ((0x0010  << 2) + 0xfe330000)
#define EE_AUDIO_MST_A_SCLK_CTRL1                  ((0x0011  << 2) + 0xfe330000)
#define EE_AUDIO_MST_B_SCLK_CTRL0                  ((0x0012  << 2) + 0xfe330000)
#define EE_AUDIO_MST_B_SCLK_CTRL1                  ((0x0013  << 2) + 0xfe330000)
#define EE_AUDIO_MST_C_SCLK_CTRL0                  ((0x0014  << 2) + 0xfe330000)
#define EE_AUDIO_MST_C_SCLK_CTRL1                  ((0x0015  << 2) + 0xfe330000)
#define EE_AUDIO_MST_D_SCLK_CTRL0                  ((0x0016  << 2) + 0xfe330000)
#define EE_AUDIO_MST_D_SCLK_CTRL1                  ((0x0017  << 2) + 0xfe330000)
#define EE_AUDIO_MST_E_SCLK_CTRL0                  ((0x0018  << 2) + 0xfe330000)
#define EE_AUDIO_MST_E_SCLK_CTRL1                  ((0x0019  << 2) + 0xfe330000)
#define EE_AUDIO_MST_F_SCLK_CTRL0                  ((0x001a  << 2) + 0xfe330000)
#define EE_AUDIO_MST_F_SCLK_CTRL1                  ((0x001b  << 2) + 0xfe330000)
#define EE_AUDIO_MST_DLY_CTRL0                     ((0x001c  << 2) + 0xfe330000)
#define EE_AUDIO_MST_DLY_CTRL1                     ((0x001d  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_TDMIN_A_CTRL                  ((0x0020  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_TDMIN_B_CTRL                  ((0x0021  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_TDMIN_C_CTRL                  ((0x0022  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_TDMIN_LB_CTRL                 ((0x0023  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_TDMOUT_A_CTRL                 ((0x0024  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_TDMOUT_B_CTRL                 ((0x0025  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_TDMOUT_C_CTRL                 ((0x0026  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_SPDIFIN_CTRL                  ((0x0027  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_SPDIFOUT_CTRL                 ((0x0028  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_RESAMPLEA_CTRL                ((0x0029  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_LOCKER_CTRL                   ((0x002a  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_PDMIN_CTRL0                   ((0x002b  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_PDMIN_CTRL1                   ((0x002c  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_SPDIFOUT_B_CTRL               ((0x002d  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_RESAMPLEB_CTRL                ((0x002e  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_SPDIFIN_LB_CTRL               ((0x002f  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_EQDRC_CTRL0                   ((0x0030  << 2) + 0xfe330000)
#define EE_AUDIO_VAD_CLK_CTRL                      ((0x0031  << 2) + 0xfe330000)
#define EE_AUDIO_EARCTX_CMDC_CLK_CTRL              ((0x0032  << 2) + 0xfe330000)
#define EE_AUDIO_EARCTX_DMAC_CLK_CTRL              ((0x0033  << 2) + 0xfe330000)
#define EE_AUDIO_EARCRX_CMDC_CLK_CTRL              ((0x0034  << 2) + 0xfe330000)
#define EE_AUDIO_EARCRX_DMAC_CLK_CTRL              ((0x0035  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_LOCKERB_CTRL                  ((0x0036  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_TDMINB_LB_CTRL                ((0x0037  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_PDMIN_CTRL2                   ((0x0038  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_PDMIN_CTRL3                   ((0x0039  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_TDMIN_D_CTRL                  ((0x003a  << 2) + 0xfe330000)
#define EE_AUDIO_CLK_TDMOUT_D_CTRL                 ((0x003b  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_A_CTRL0                     ((0x0040  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_A_CTRL1                     ((0x0041  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_A_START_ADDR                ((0x0042  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_A_FINISH_ADDR               ((0x0043  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_A_INT_ADDR                  ((0x0044  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_A_STATUS1                   ((0x0045  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_A_STATUS2                   ((0x0046  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_A_START_ADDRB               ((0x0047  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_A_FINISH_ADDRB              ((0x0048  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_A_INIT_ADDR                 ((0x0049  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_A_CTRL2                     ((0x004a  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_B_CTRL0                     ((0x0050  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_B_CTRL1                     ((0x0051  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_B_START_ADDR                ((0x0052  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_B_FINISH_ADDR               ((0x0053  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_B_INT_ADDR                  ((0x0054  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_B_STATUS1                   ((0x0055  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_B_STATUS2                   ((0x0056  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_B_START_ADDRB               ((0x0057  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_B_FINISH_ADDRB              ((0x0058  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_B_INIT_ADDR                 ((0x0059  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_B_CTRL2                     ((0x005a  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_C_CTRL0                     ((0x0060  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_C_CTRL1                     ((0x0061  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_C_START_ADDR                ((0x0062  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_C_FINISH_ADDR               ((0x0063  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_C_INT_ADDR                  ((0x0064  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_C_STATUS1                   ((0x0065  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_C_STATUS2                   ((0x0066  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_C_START_ADDRB               ((0x0067  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_C_FINISH_ADDRB              ((0x0068  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_C_INIT_ADDR                 ((0x0069  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_C_CTRL2                     ((0x006a  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_A_CTRL0                     ((0x0070  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_A_CTRL1                     ((0x0071  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_A_START_ADDR                ((0x0072  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_A_FINISH_ADDR               ((0x0073  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_A_INT_ADDR                  ((0x0074  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_A_STATUS1                   ((0x0075  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_A_STATUS2                   ((0x0076  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_A_START_ADDRB               ((0x0077  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_A_FINISH_ADDRB              ((0x0078  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_A_INIT_ADDR                 ((0x0079  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_A_CTRL2                     ((0x007a  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_B_CTRL0                     ((0x0080  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_B_CTRL1                     ((0x0081  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_B_START_ADDR                ((0x0082  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_B_FINISH_ADDR               ((0x0083  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_B_INT_ADDR                  ((0x0084  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_B_STATUS1                   ((0x0085  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_B_STATUS2                   ((0x0086  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_B_START_ADDRB               ((0x0087  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_B_FINISH_ADDRB              ((0x0088  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_B_INIT_ADDR                 ((0x0089  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_B_CTRL2                     ((0x008a  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_C_CTRL0                     ((0x0090  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_C_CTRL1                     ((0x0091  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_C_START_ADDR                ((0x0092  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_C_FINISH_ADDR               ((0x0093  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_C_INT_ADDR                  ((0x0094  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_C_STATUS1                   ((0x0095  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_C_STATUS2                   ((0x0096  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_C_START_ADDRB               ((0x0097  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_C_FINISH_ADDRB              ((0x0098  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_C_INIT_ADDR                 ((0x0099  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_C_CTRL2                     ((0x009a  << 2) + 0xfe330000)
//`define EE_AUDIO_ARB_CTRL0              10'ha0
//`define EE_AUDIO_ARB_CTRL1              10'ha1
//`define EE_AUDIO_ARB_STS                10'ha8
#define EE_AUDIO_AM2AXI_CTRL0                      ((0x00a2  << 2) + 0xfe330000)
#define EE_AUDIO_AM2AXI_CTRL1                      ((0x00a3  << 2) + 0xfe330000)
#define EE_AUDIO_AXI_ASYNC_CTRL0                   ((0x00a4  << 2) + 0xfe330000)
#define EE_AUDIO_AM2AXI_STS                        ((0x00a9  << 2) + 0xfe330000)
#define EE_AUDIO_AXI_ASYNC_STS                     ((0x00aa  << 2) + 0xfe330000)
#define EE_AUDIO_LB_A_CTRL0                        ((0x00b0  << 2) + 0xfe330000)
#define EE_AUDIO_LB_A_CTRL1                        ((0x00b1  << 2) + 0xfe330000)
#define EE_AUDIO_LB_A_CTRL2                        ((0x00b2  << 2) + 0xfe330000)
#define EE_AUDIO_LB_A_CTRL3                        ((0x00b3  << 2) + 0xfe330000)
#define EE_AUDIO_LB_A_DAT_CH_ID0                   ((0x00b4  << 2) + 0xfe330000)
#define EE_AUDIO_LB_A_DAT_CH_ID1                   ((0x00b5  << 2) + 0xfe330000)
#define EE_AUDIO_LB_A_DAT_CH_ID2                   ((0x00b6  << 2) + 0xfe330000)
#define EE_AUDIO_LB_A_DAT_CH_ID3                   ((0x00b7  << 2) + 0xfe330000)
#define EE_AUDIO_LB_A_LB_CH_ID0                    ((0x00b8  << 2) + 0xfe330000)
#define EE_AUDIO_LB_A_LB_CH_ID1                    ((0x00b9  << 2) + 0xfe330000)
#define EE_AUDIO_LB_A_LB_CH_ID2                    ((0x00ba  << 2) + 0xfe330000)
#define EE_AUDIO_LB_A_LB_CH_ID3                    ((0x00bb  << 2) + 0xfe330000)
#define EE_AUDIO_LB_A_STS                          ((0x00bc  << 2) + 0xfe330000)
#define EE_AUDIO_LB_A_CHSYNC_CTRL_INSERT           ((0x00bd  << 2) + 0xfe330000)
#define EE_AUDIO_LB_A_CHSYNC_CTRL_ORIG             ((0x00be  << 2) + 0xfe330000)
#define EE_AUDIO_LB_A_CTRL4                        ((0x00bf  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_A_CTRL                      ((0x00c0  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_A_SWAP0                     ((0x00c1  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_A_MASK0                     ((0x00c2  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_A_MASK1                     ((0x00c3  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_A_MASK2                     ((0x00c4  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_A_MASK3                     ((0x00c5  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_A_STAT                      ((0x00c6  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_A_MUTE_VAL                  ((0x00c7  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_A_MUTE0                     ((0x00c8  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_A_MUTE1                     ((0x00c9  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_A_MUTE2                     ((0x00ca  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_A_MUTE3                     ((0x00cb  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_B_CTRL                      ((0x00d0  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_B_SWAP0                     ((0x00d1  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_B_MASK0                     ((0x00d2  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_B_MASK1                     ((0x00d3  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_B_MASK2                     ((0x00d4  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_B_MASK3                     ((0x00d5  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_B_STAT                      ((0x00d6  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_B_MUTE_VAL                  ((0x00d7  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_B_MUTE0                     ((0x00d8  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_B_MUTE1                     ((0x00d9  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_B_MUTE2                     ((0x00da  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_B_MUTE3                     ((0x00db  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_C_CTRL                      ((0x00e0  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_C_SWAP0                     ((0x00e1  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_C_MASK0                     ((0x00e2  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_C_MASK1                     ((0x00e3  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_C_MASK2                     ((0x00e4  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_C_MASK3                     ((0x00e5  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_C_STAT                      ((0x00e6  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_C_MUTE_VAL                  ((0x00e7  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_C_MUTE0                     ((0x00e8  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_C_MUTE1                     ((0x00e9  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_C_MUTE2                     ((0x00ea  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_C_MUTE3                     ((0x00eb  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_LB_CTRL                     ((0x00f0  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_LB_SWAP0                    ((0x00f1  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_LB_MASK0                    ((0x00f2  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_LB_MASK1                    ((0x00f3  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_LB_MASK2                    ((0x00f4  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_LB_MASK3                    ((0x00f5  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_LB_STAT                     ((0x00f6  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_LB_MUTE_VAL                 ((0x00f7  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_LB_MUTE0                    ((0x00f8  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_LB_MUTE1                    ((0x00f9  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_LB_MUTE2                    ((0x00fa  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_LB_MUTE3                    ((0x00fb  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFIN_CTRL0                     ((0x0100  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFIN_CTRL1                     ((0x0101  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFIN_CTRL2                     ((0x0102  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFIN_CTRL3                     ((0x0103  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFIN_CTRL4                     ((0x0104  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFIN_CTRL5                     ((0x0105  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFIN_CTRL6                     ((0x0106  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFIN_STAT0                     ((0x0107  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFIN_STAT1                     ((0x0108  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFIN_STAT2                     ((0x0109  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFIN_MUTE_VAL                  ((0x010a  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFIN_CTRL7                     ((0x010b  << 2) + 0xfe330000)
#define EE_AUDIO_RESAMPLEA_CTRL0                   ((0x0110  << 2) + 0xfe330000)
#define EE_AUDIO_RESAMPLEA_CTRL1                   ((0x0111  << 2) + 0xfe330000)
#define EE_AUDIO_RESAMPLEA_CTRL2                   ((0x0112  << 2) + 0xfe330000)
#define EE_AUDIO_RESAMPLEA_CTRL3                   ((0x0113  << 2) + 0xfe330000)
#define EE_AUDIO_RESAMPLEA_COEF0                   ((0x0114  << 2) + 0xfe330000)
#define EE_AUDIO_RESAMPLEA_COEF1                   ((0x0115  << 2) + 0xfe330000)
#define EE_AUDIO_RESAMPLEA_COEF2                   ((0x0116  << 2) + 0xfe330000)
#define EE_AUDIO_RESAMPLEA_COEF3                   ((0x0117  << 2) + 0xfe330000)
#define EE_AUDIO_RESAMPLEA_COEF4                   ((0x0118  << 2) + 0xfe330000)
#define EE_AUDIO_RESAMPLEA_STATUS1                 ((0x0119  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_STAT                     ((0x0120  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_GAIN0                    ((0x0121  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_GAIN1                    ((0x0122  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_CTRL0                    ((0x0123  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_CTRL1                    ((0x0124  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_PREAMB                   ((0x0125  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_SWAP                     ((0x0126  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_CHSTS0                   ((0x0127  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_CHSTS1                   ((0x0128  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_CHSTS2                   ((0x0129  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_CHSTS3                   ((0x012a  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_CHSTS4                   ((0x012b  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_CHSTS5                   ((0x012c  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_CHSTS6                   ((0x012d  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_CHSTS7                   ((0x012e  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_CHSTS8                   ((0x012f  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_CHSTS9                   ((0x0130  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_CHSTSA                   ((0x0131  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_CHSTSB                   ((0x0132  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_MUTE_VAL                 ((0x0133  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_GAIN2                    ((0x0134  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_GAIN3                    ((0x0135  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_GAIN_EN                  ((0x0136  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_GAIN_CTRL                ((0x0137  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_CTRL0                    ((0x0140  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_CTRL1                    ((0x0141  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_SWAP0                    ((0x0142  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_MASK0                    ((0x0143  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_MASK1                    ((0x0144  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_MASK2                    ((0x0145  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_MASK3                    ((0x0146  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_STAT                     ((0x0147  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_GAIN0                    ((0x0148  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_GAIN1                    ((0x0149  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_MUTE_VAL                 ((0x014a  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_MUTE0                    ((0x014b  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_MUTE1                    ((0x014c  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_MUTE2                    ((0x014d  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_MUTE3                    ((0x014e  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_MASK_VAL                 ((0x014f  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_CTRL0                    ((0x0150  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_CTRL1                    ((0x0151  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_SWAP0                    ((0x0152  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_MASK0                    ((0x0153  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_MASK1                    ((0x0154  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_MASK2                    ((0x0155  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_MASK3                    ((0x0156  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_STAT                     ((0x0157  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_GAIN0                    ((0x0158  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_GAIN1                    ((0x0159  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_MUTE_VAL                 ((0x015a  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_MUTE0                    ((0x015b  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_MUTE1                    ((0x015c  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_MUTE2                    ((0x015d  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_MUTE3                    ((0x015e  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_MASK_VAL                 ((0x015f  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_CTRL0                    ((0x0160  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_CTRL1                    ((0x0161  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_SWAP0                    ((0x0162  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_MASK0                    ((0x0163  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_MASK1                    ((0x0164  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_MASK2                    ((0x0165  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_MASK3                    ((0x0166  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_STAT                     ((0x0167  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_GAIN0                    ((0x0168  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_GAIN1                    ((0x0169  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_MUTE_VAL                 ((0x016a  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_MUTE0                    ((0x016b  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_MUTE1                    ((0x016c  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_MUTE2                    ((0x016d  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_MUTE3                    ((0x016e  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_MASK_VAL                 ((0x016f  << 2) + 0xfe330000)
#define EE_AUDIO_TDMINB_LB_CTRL                    ((0x0170  << 2) + 0xfe330000)
#define EE_AUDIO_TDMINB_LB_SWAP0                   ((0x0171  << 2) + 0xfe330000)
#define EE_AUDIO_TDMINB_LB_MASK0                   ((0x0172  << 2) + 0xfe330000)
#define EE_AUDIO_TDMINB_LB_MASK1                   ((0x0173  << 2) + 0xfe330000)
#define EE_AUDIO_TDMINB_LB_MASK2                   ((0x0174  << 2) + 0xfe330000)
#define EE_AUDIO_TDMINB_LB_MASK3                   ((0x0175  << 2) + 0xfe330000)
#define EE_AUDIO_TDMINB_LB_STAT                    ((0x0176  << 2) + 0xfe330000)
#define EE_AUDIO_TDMINB_LB_MUTE_VAL                ((0x0177  << 2) + 0xfe330000)
#define EE_AUDIO_TDMINB_LB_MUTE0                   ((0x0178  << 2) + 0xfe330000)
#define EE_AUDIO_TDMINB_LB_MUTE1                   ((0x0179  << 2) + 0xfe330000)
#define EE_AUDIO_TDMINB_LB_MUTE2                   ((0x017a  << 2) + 0xfe330000)
#define EE_AUDIO_TDMINB_LB_MUTE3                   ((0x017b  << 2) + 0xfe330000)
//`define EE_AUDIO_POW_DET_CTRL0          10'h180
//`define EE_AUDIO_POW_DET_CTRL1          10'h181
//`define EE_AUDIO_POW_DET_TH_HI          10'h182
//`define EE_AUDIO_POW_DET_TH_LO          10'h183
//`define EE_AUDIO_POW_DET_VALUE          10'h184
#define EE_AUDIO_SECURITY_CTRL0                    ((0x0190  << 2) + 0xfe330000)
#define EE_AUDIO_SECURITY_CTRL1                    ((0x0191  << 2) + 0xfe330000)
#define EE_AUDIO_SECURITY_CTRL2                    ((0x0192  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_STAT                   ((0x01a0  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_GAIN0                  ((0x01a1  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_GAIN1                  ((0x01a2  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_CTRL0                  ((0x01a3  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_CTRL1                  ((0x01a4  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_PREAMB                 ((0x01a5  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_SWAP                   ((0x01a6  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_CHSTS0                 ((0x01a7  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_CHSTS1                 ((0x01a8  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_CHSTS2                 ((0x01a9  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_CHSTS3                 ((0x01aa  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_CHSTS4                 ((0x01ab  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_CHSTS5                 ((0x01ac  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_CHSTS6                 ((0x01ad  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_CHSTS7                 ((0x01ae  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_CHSTS8                 ((0x01af  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_CHSTS9                 ((0x01b0  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_CHSTSA                 ((0x01b1  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_CHSTSB                 ((0x01b2  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_MUTE_VAL               ((0x01b3  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_GAIN2                  ((0x01b4  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_GAIN3                  ((0x01b5  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_GAIN_EN                ((0x01b6  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFOUT_B_GAIN_CTRL              ((0x01b7  << 2) + 0xfe330000)
#define EE_AUDIO_TORAM_CTRL0                       ((0x01c0  << 2) + 0xfe330000)
#define EE_AUDIO_TORAM_CTRL1                       ((0x01c1  << 2) + 0xfe330000)
#define EE_AUDIO_TORAM_START_ADDR                  ((0x01c2  << 2) + 0xfe330000)
#define EE_AUDIO_TORAM_FINISH_ADDR                 ((0x01c3  << 2) + 0xfe330000)
#define EE_AUDIO_TORAM_INT_ADDR                    ((0x01c4  << 2) + 0xfe330000)
#define EE_AUDIO_TORAM_STATUS1                     ((0x01c5  << 2) + 0xfe330000)
#define EE_AUDIO_TORAM_STATUS2                     ((0x01c6  << 2) + 0xfe330000)
#define EE_AUDIO_TORAM_INIT_ADDR                   ((0x01c7  << 2) + 0xfe330000)
#define EE_AUDIO_TOACODEC_CTRL0                    ((0x01d0  << 2) + 0xfe330000)
#define EE_AUDIO_TOHDMITX_CTRL0                    ((0x01d1  << 2) + 0xfe330000)
#define EE_AUDIO_TOVAD_CTRL0                       ((0x01d2  << 2) + 0xfe330000)
#define EE_AUDIO_FRATV_CTRL0                       ((0x01d3  << 2) + 0xfe330000)
#define EE_AUDIO_RESAMPLEB_CTRL0                   ((0x01e0  << 2) + 0xfe330000)
#define EE_AUDIO_RESAMPLEB_CTRL1                   ((0x01e1  << 2) + 0xfe330000)
#define EE_AUDIO_RESAMPLEB_CTRL2                   ((0x01e2  << 2) + 0xfe330000)
#define EE_AUDIO_RESAMPLEB_CTRL3                   ((0x01e3  << 2) + 0xfe330000)
#define EE_AUDIO_RESAMPLEB_COEF0                   ((0x01e4  << 2) + 0xfe330000)
#define EE_AUDIO_RESAMPLEB_COEF1                   ((0x01e5  << 2) + 0xfe330000)
#define EE_AUDIO_RESAMPLEB_COEF2                   ((0x01e6  << 2) + 0xfe330000)
#define EE_AUDIO_RESAMPLEB_COEF3                   ((0x01e7  << 2) + 0xfe330000)
#define EE_AUDIO_RESAMPLEB_COEF4                   ((0x01e8  << 2) + 0xfe330000)
#define EE_AUDIO_RESAMPLEB_STATUS1                 ((0x01e9  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFIN_LB_CTRL0                  ((0x01f0  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFIN_LB_CTRL1                  ((0x01f1  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFIN_LB_CTRL6                  ((0x01f6  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFIN_LB_STAT0                  ((0x01f7  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFIN_LB_STAT1                  ((0x01f8  << 2) + 0xfe330000)
#define EE_AUDIO_SPDIFIN_LB_MUTE_VAL               ((0x01fa  << 2) + 0xfe330000)
#define EE_AUDIO_FRHDMIRX_CTRL0                    ((0x0200  << 2) + 0xfe330000)
#define EE_AUDIO_FRHDMIRX_CTRL1                    ((0x0201  << 2) + 0xfe330000)
#define EE_AUDIO_FRHDMIRX_CTRL2                    ((0x0202  << 2) + 0xfe330000)
#define EE_AUDIO_FRHDMIRX_CTRL3                    ((0x0203  << 2) + 0xfe330000)
#define EE_AUDIO_FRHDMIRX_CTRL4                    ((0x0204  << 2) + 0xfe330000)
#define EE_AUDIO_FRHDMIRX_CTRL5                    ((0x0205  << 2) + 0xfe330000)
#define EE_AUDIO_FRHDMIRX_CTRL6                    ((0x0206  << 2) + 0xfe330000)
#define EE_AUDIO_FRHDMIRX_CTRL7                    ((0x0207  << 2) + 0xfe330000)
#define EE_AUDIO_FRHDMIRX_STAT0                    ((0x020a  << 2) + 0xfe330000)
#define EE_AUDIO_FRHDMIRX_STAT1                    ((0x020b  << 2) + 0xfe330000)
#define EE_AUDIO_FRHDMIRX_STAT2                    ((0x020c  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_D_CTRL0                     ((0x0210  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_D_CTRL1                     ((0x0211  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_D_START_ADDR                ((0x0212  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_D_FINISH_ADDR               ((0x0213  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_D_INT_ADDR                  ((0x0214  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_D_STATUS1                   ((0x0215  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_D_STATUS2                   ((0x0216  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_D_START_ADDRB               ((0x0217  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_D_FINISH_ADDRB              ((0x0218  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_D_INIT_ADDR                 ((0x0219  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_D_CTRL2                     ((0x021a  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_D_CTRL0                     ((0x0220  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_D_CTRL1                     ((0x0221  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_D_START_ADDR                ((0x0222  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_D_FINISH_ADDR               ((0x0223  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_D_INT_ADDR                  ((0x0224  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_D_STATUS1                   ((0x0225  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_D_STATUS2                   ((0x0226  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_D_START_ADDRB               ((0x0227  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_D_FINISH_ADDRB              ((0x0228  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_D_INIT_ADDR                 ((0x0229  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_D_CTRL2                     ((0x022a  << 2) + 0xfe330000)
#define EE_AUDIO_LB_B_CTRL0                        ((0x0230  << 2) + 0xfe330000)
#define EE_AUDIO_LB_B_CTRL1                        ((0x0231  << 2) + 0xfe330000)
#define EE_AUDIO_LB_B_CTRL2                        ((0x0232  << 2) + 0xfe330000)
#define EE_AUDIO_LB_B_CTRL3                        ((0x0233  << 2) + 0xfe330000)
#define EE_AUDIO_LB_B_DAT_CH_ID0                   ((0x0234  << 2) + 0xfe330000)
#define EE_AUDIO_LB_B_DAT_CH_ID1                   ((0x0235  << 2) + 0xfe330000)
#define EE_AUDIO_LB_B_DAT_CH_ID2                   ((0x0236  << 2) + 0xfe330000)
#define EE_AUDIO_LB_B_DAT_CH_ID3                   ((0x0237  << 2) + 0xfe330000)
#define EE_AUDIO_LB_B_LB_CH_ID0                    ((0x0238  << 2) + 0xfe330000)
#define EE_AUDIO_LB_B_LB_CH_ID1                    ((0x0239  << 2) + 0xfe330000)
#define EE_AUDIO_LB_B_LB_CH_ID2                    ((0x023a  << 2) + 0xfe330000)
#define EE_AUDIO_LB_B_LB_CH_ID3                    ((0x023b  << 2) + 0xfe330000)
#define EE_AUDIO_LB_B_STS                          ((0x023c  << 2) + 0xfe330000)
#define EE_AUDIO_LB_B_CHSYNC_CTRL_INSERT           ((0x023d  << 2) + 0xfe330000)
#define EE_AUDIO_LB_B_CHSYNC_CTRL_ORIG             ((0x023e  << 2) + 0xfe330000)
#define EE_AUDIO_LB_B_CTRL4                        ((0x023f  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_E_CTRL0                     ((0x0240  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_E_CTRL1                     ((0x0241  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_E_START_ADDR                ((0x0242  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_E_FINISH_ADDR               ((0x0243  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_E_INT_ADDR                  ((0x0244  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_E_STATUS1                   ((0x0245  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_E_STATUS2                   ((0x0246  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_E_START_ADDRB               ((0x0247  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_E_FINISH_ADDRB              ((0x0248  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_E_INIT_ADDR                 ((0x0249  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_E_CTRL2                     ((0x024a  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_E_CTRL0                     ((0x0250  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_E_CTRL1                     ((0x0251  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_E_START_ADDR                ((0x0252  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_E_FINISH_ADDR               ((0x0253  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_E_INT_ADDR                  ((0x0254  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_E_STATUS1                   ((0x0255  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_E_STATUS2                   ((0x0256  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_E_START_ADDRB               ((0x0257  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_E_FINISH_ADDRB              ((0x0258  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_E_INIT_ADDR                 ((0x0259  << 2) + 0xfe330000)
#define EE_AUDIO_FRDDR_E_CTRL2                     ((0x025a  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_A_SWAP1                     ((0x0260  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_A_MASK4                     ((0x0261  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_A_MASK5                     ((0x0262  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_A_MASK6                     ((0x0263  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_A_MASK7                     ((0x0264  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_A_MUTE4                     ((0x0265  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_A_MUTE5                     ((0x0266  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_A_MUTE6                     ((0x0267  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_A_MUTE7                     ((0x0268  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_B_SWAP1                     ((0x0270  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_B_MASK4                     ((0x0271  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_B_MASK5                     ((0x0272  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_B_MASK6                     ((0x0273  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_B_MASK7                     ((0x0274  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_B_MUTE4                     ((0x0275  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_B_MUTE5                     ((0x0276  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_B_MUTE6                     ((0x0277  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_B_MUTE7                     ((0x0278  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_C_SWAP1                     ((0x0280  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_C_MASK4                     ((0x0281  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_C_MASK5                     ((0x0282  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_C_MASK6                     ((0x0283  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_C_MASK7                     ((0x0284  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_C_MUTE4                     ((0x0285  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_C_MUTE5                     ((0x0286  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_C_MUTE6                     ((0x0287  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_C_MUTE7                     ((0x0288  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_LB_SWAP1                    ((0x0290  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_LB_MASK4                    ((0x0291  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_LB_MASK5                    ((0x0292  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_LB_MASK6                    ((0x0293  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_LB_MASK7                    ((0x0294  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_LB_MUTE4                    ((0x0295  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_LB_MUTE5                    ((0x0296  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_LB_MUTE6                    ((0x0297  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_LB_MUTE7                    ((0x0298  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_CTRL2                    ((0x02a0  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_SWAP1                    ((0x02a1  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_GAIN2                    ((0x02a2  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_GAIN3                    ((0x02a3  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_MASK4                    ((0x02a4  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_MASK5                    ((0x02a5  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_MASK6                    ((0x02a6  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_MASK7                    ((0x02a7  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_MUTE4                    ((0x02a8  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_MUTE5                    ((0x02a9  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_MUTE6                    ((0x02aa  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_MUTE7                    ((0x02ab  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_GAIN_EN                  ((0x02ac  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_A_GAIN_CTRL                ((0x02ad  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_CTRL2                    ((0x02b0  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_SWAP1                    ((0x02b1  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_GAIN2                    ((0x02b2  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_GAIN3                    ((0x02b3  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_MASK4                    ((0x02b4  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_MASK5                    ((0x02b5  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_MASK6                    ((0x02b6  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_MASK7                    ((0x02b7  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_MUTE4                    ((0x02b8  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_MUTE5                    ((0x02b9  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_MUTE6                    ((0x02ba  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_MUTE7                    ((0x02bb  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_GAIN_EN                  ((0x02bc  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_B_GAIN_CTRL                ((0x02bd  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_CTRL2                    ((0x02c0  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_SWAP1                    ((0x02c1  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_GAIN2                    ((0x02c2  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_GAIN3                    ((0x02c3  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_MASK4                    ((0x02c4  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_MASK5                    ((0x02c5  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_MASK6                    ((0x02c6  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_MASK7                    ((0x02c7  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_MUTE4                    ((0x02c8  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_MUTE5                    ((0x02c9  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_MUTE6                    ((0x02ca  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_MUTE7                    ((0x02cb  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_GAIN_EN                  ((0x02cc  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_C_GAIN_CTRL                ((0x02cd  << 2) + 0xfe330000)
#define EE_AUDIO_TDMINB_LB_SWAP1                   ((0x02d0  << 2) + 0xfe330000)
#define EE_AUDIO_TDMINB_LB_MASK4                   ((0x02d1  << 2) + 0xfe330000)
#define EE_AUDIO_TDMINB_LB_MASK5                   ((0x02d2  << 2) + 0xfe330000)
#define EE_AUDIO_TDMINB_LB_MASK6                   ((0x02d3  << 2) + 0xfe330000)
#define EE_AUDIO_TDMINB_LB_MASK7                   ((0x02d4  << 2) + 0xfe330000)
#define EE_AUDIO_TDMINB_LB_MUTE4                   ((0x02d5  << 2) + 0xfe330000)
#define EE_AUDIO_TDMINB_LB_MUTE5                   ((0x02d6  << 2) + 0xfe330000)
#define EE_AUDIO_TDMINB_LB_MUTE6                   ((0x02d7  << 2) + 0xfe330000)
#define EE_AUDIO_TDMINB_LB_MUTE7                   ((0x02d8  << 2) + 0xfe330000)
#define EE_AUDIO_PCPD_MON_A_CTRL0                  ((0x02e0  << 2) + 0xfe330000)
#define EE_AUDIO_PCPD_MON_A_CTRL1                  ((0x02e1  << 2) + 0xfe330000)
#define EE_AUDIO_PCPD_MON_A_CTRL2                  ((0x02e2  << 2) + 0xfe330000)
#define EE_AUDIO_PCPD_MON_A_CTRL3                  ((0x02e3  << 2) + 0xfe330000)
#define EE_AUDIO_PCPD_MON_A_CTRL4                  ((0x02e4  << 2) + 0xfe330000)
#define EE_AUDIO_PCPD_MON_A_CTRL5                  ((0x02e5  << 2) + 0xfe330000)
#define EE_AUDIO_PCPD_MON_A_STAT0                  ((0x02e8  << 2) + 0xfe330000)
#define EE_AUDIO_PCPD_MON_A_STAT1                  ((0x02e9  << 2) + 0xfe330000)
#define EE_AUDIO_PCPD_MON_B_CTRL0                  ((0x02f0  << 2) + 0xfe330000)
#define EE_AUDIO_PCPD_MON_B_CTRL1                  ((0x02f1  << 2) + 0xfe330000)
#define EE_AUDIO_PCPD_MON_B_CTRL2                  ((0x02f2  << 2) + 0xfe330000)
#define EE_AUDIO_PCPD_MON_B_CTRL3                  ((0x02f3  << 2) + 0xfe330000)
#define EE_AUDIO_PCPD_MON_B_CTRL4                  ((0x02f4  << 2) + 0xfe330000)
#define EE_AUDIO_PCPD_MON_B_CTRL5                  ((0x02f5  << 2) + 0xfe330000)
#define EE_AUDIO_PCPD_MON_B_STAT0                  ((0x02f8  << 2) + 0xfe330000)
#define EE_AUDIO_PCPD_MON_B_STAT1                  ((0x02f9  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_A_CHNUM_ID0                 ((0x0300  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_A_CHNUM_ID1                 ((0x0301  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_A_CHNUM_ID2                 ((0x0302  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_A_CHNUM_ID3                 ((0x0303  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_A_CHNUM_ID4                 ((0x0304  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_A_CHNUM_ID5                 ((0x0305  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_A_CHNUM_ID6                 ((0x0306  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_A_CHNUM_ID7                 ((0x0307  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_A_CHSYNC_CTRL               ((0x030f  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_B_CHNUM_ID0                 ((0x0310  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_B_CHNUM_ID1                 ((0x0311  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_B_CHNUM_ID2                 ((0x0312  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_B_CHNUM_ID3                 ((0x0313  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_B_CHNUM_ID4                 ((0x0314  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_B_CHNUM_ID5                 ((0x0315  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_B_CHNUM_ID6                 ((0x0316  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_B_CHNUM_ID7                 ((0x0317  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_B_CHSYNC_CTRL               ((0x031f  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_C_CHNUM_ID0                 ((0x0320  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_C_CHNUM_ID1                 ((0x0321  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_C_CHNUM_ID2                 ((0x0322  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_C_CHNUM_ID3                 ((0x0323  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_C_CHNUM_ID4                 ((0x0324  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_C_CHNUM_ID5                 ((0x0325  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_C_CHNUM_ID6                 ((0x0326  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_C_CHNUM_ID7                 ((0x0327  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_C_CHSYNC_CTRL               ((0x032f  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_D_CHNUM_ID0                 ((0x0330  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_D_CHNUM_ID1                 ((0x0331  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_D_CHNUM_ID2                 ((0x0332  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_D_CHNUM_ID3                 ((0x0333  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_D_CHNUM_ID4                 ((0x0334  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_D_CHNUM_ID5                 ((0x0335  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_D_CHNUM_ID6                 ((0x0336  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_D_CHNUM_ID7                 ((0x0337  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_D_CHSYNC_CTRL               ((0x033f  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_E_CHNUM_ID0                 ((0x0340  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_E_CHNUM_ID1                 ((0x0341  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_E_CHNUM_ID2                 ((0x0342  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_E_CHNUM_ID3                 ((0x0343  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_E_CHNUM_ID4                 ((0x0344  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_E_CHNUM_ID5                 ((0x0345  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_E_CHNUM_ID6                 ((0x0346  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_E_CHNUM_ID7                 ((0x0347  << 2) + 0xfe330000)
#define EE_AUDIO_TODDR_E_CHSYNC_CTRL               ((0x034f  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_A_CHNUM_ID0                 ((0x0350  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_A_CHNUM_ID1                 ((0x0351  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_A_CHNUM_ID2                 ((0x0352  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_A_CHNUM_ID3                 ((0x0353  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_A_CHNUM_ID4                 ((0x0354  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_A_CHNUM_ID5                 ((0x0355  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_A_CHNUM_ID6                 ((0x0356  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_A_CHNUM_ID7                 ((0x0357  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_CHSYNC_MASK                 ((0x035e  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_A_CHSYNC_CTRL               ((0x035f  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_B_CHNUM_ID0                 ((0x0360  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_B_CHNUM_ID1                 ((0x0361  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_B_CHNUM_ID2                 ((0x0362  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_B_CHNUM_ID3                 ((0x0363  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_B_CHNUM_ID4                 ((0x0364  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_B_CHNUM_ID5                 ((0x0365  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_B_CHNUM_ID6                 ((0x0366  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_B_CHNUM_ID7                 ((0x0367  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_B_CHSYNC_CTRL               ((0x036f  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_C_CHNUM_ID0                 ((0x0370  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_C_CHNUM_ID1                 ((0x0371  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_C_CHNUM_ID2                 ((0x0372  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_C_CHNUM_ID3                 ((0x0373  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_C_CHNUM_ID4                 ((0x0374  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_C_CHNUM_ID5                 ((0x0375  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_C_CHNUM_ID6                 ((0x0376  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_C_CHNUM_ID7                 ((0x0377  << 2) + 0xfe330000)
#define EE_AUDIO_RSAMP_C_CHSYNC_CTRL               ((0x037f  << 2) + 0xfe330000)
#define EE_AUDIO_EXCEPTION_IRQ_STS0                ((0x0380  << 2) + 0xfe330000)
#define EE_AUDIO_EXCEPTION_IRQ_STS1                ((0x0381  << 2) + 0xfe330000)
#define EE_AUDIO_EXCEPTION_IRQ_MASK0               ((0x0382  << 2) + 0xfe330000)
#define EE_AUDIO_EXCEPTION_IRQ_MASK1               ((0x0383  << 2) + 0xfe330000)
#define EE_AUDIO_EXCEPTION_IRQ_MODE0               ((0x0384  << 2) + 0xfe330000)
#define EE_AUDIO_EXCEPTION_IRQ_MODE1               ((0x0385  << 2) + 0xfe330000)
#define EE_AUDIO_EXCEPTION_IRQ_CLR0                ((0x0386  << 2) + 0xfe330000)
#define EE_AUDIO_EXCEPTION_IRQ_CLR1                ((0x0387  << 2) + 0xfe330000)
#define EE_AUDIO_EXCEPTION_IRQ_INV0                ((0x0388  << 2) + 0xfe330000)
#define EE_AUDIO_EXCEPTION_IRQ_INV1                ((0x0389  << 2) + 0xfe330000)
#define EE_AUDIO_DAT_PAD_CTRL0                     ((0x0390  << 2) + 0xfe330000)
#define EE_AUDIO_DAT_PAD_CTRL1                     ((0x0391  << 2) + 0xfe330000)
#define EE_AUDIO_DAT_PAD_CTRL2                     ((0x0392  << 2) + 0xfe330000)
#define EE_AUDIO_DAT_PAD_CTRL3                     ((0x0393  << 2) + 0xfe330000)
#define EE_AUDIO_DAT_PAD_CTRL4                     ((0x0394  << 2) + 0xfe330000)
#define EE_AUDIO_DAT_PAD_CTRL5                     ((0x0395  << 2) + 0xfe330000)
#define EE_AUDIO_DAT_PAD_CTRL6                     ((0x0396  << 2) + 0xfe330000)
#define EE_AUDIO_DAT_PAD_CTRL7                     ((0x0397  << 2) + 0xfe330000)
#define EE_AUDIO_DAT_PAD_CTRL8                     ((0x0398  << 2) + 0xfe330000)
#define EE_AUDIO_DAT_PAD_CTRL9                     ((0x0399  << 2) + 0xfe330000)
#define EE_AUDIO_DAT_PAD_CTRLA                     ((0x039a  << 2) + 0xfe330000)
#define EE_AUDIO_DAT_PAD_CTRLB                     ((0x039b  << 2) + 0xfe330000)
#define EE_AUDIO_DAT_PAD_CTRLC                     ((0x039c  << 2) + 0xfe330000)
#define EE_AUDIO_DAT_PAD_CTRLD                     ((0x039d  << 2) + 0xfe330000)
#define EE_AUDIO_DAT_PAD_CTRLE                     ((0x039e  << 2) + 0xfe330000)
#define EE_AUDIO_DAT_PAD_CTRLF                     ((0x039f  << 2) + 0xfe330000)
#define EE_AUDIO_MCLK_PAD_CTRL0                    ((0x03a0  << 2) + 0xfe330000)
#define EE_AUDIO_MCLK_PAD_CTRL1                    ((0x03a1  << 2) + 0xfe330000)
#define EE_AUDIO_SCLK_PAD_CTRL0                    ((0x03a2  << 2) + 0xfe330000)
#define EE_AUDIO_LRCLK_PAD_CTRL0                   ((0x03a3  << 2) + 0xfe330000)
#define EE_AUDIO_MCLK_PAD_CTRL2                    ((0x03a4  << 2) + 0xfe330000)
#define EE_AUDIO_DAT_PAD_CTRLG                     ((0x03a5  << 2) + 0xfe330000)
#define EE_AUDIO_DAT_PAD_CTRLH                     ((0x03a6  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_D_CTRL                      ((0x03b0  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_D_SWAP0                     ((0x03b1  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_D_MASK0                     ((0x03b2  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_D_MASK1                     ((0x03b3  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_D_MASK2                     ((0x03b4  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_D_MASK3                     ((0x03b5  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_D_STAT                      ((0x03b6  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_D_MUTE_VAL                  ((0x03b7  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_D_MUTE0                     ((0x03b8  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_D_MUTE1                     ((0x03b9  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_D_MUTE2                     ((0x03ba  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_D_MUTE3                     ((0x03bb  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_D_SWAP1                     ((0x03c0  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_D_MASK4                     ((0x03c1  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_D_MASK5                     ((0x03c2  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_D_MASK6                     ((0x03c3  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_D_MASK7                     ((0x03c4  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_D_MUTE4                     ((0x03c5  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_D_MUTE5                     ((0x03c6  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_D_MUTE6                     ((0x03c7  << 2) + 0xfe330000)
#define EE_AUDIO_TDMIN_D_MUTE7                     ((0x03c8  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_CTRL0                    ((0x03d0  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_CTRL1                    ((0x03d1  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_SWAP0                    ((0x03d2  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_MASK0                    ((0x03d3  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_MASK1                    ((0x03d4  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_MASK2                    ((0x03d5  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_MASK3                    ((0x03d6  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_STAT                     ((0x03d7  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_GAIN0                    ((0x03d8  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_GAIN1                    ((0x03d9  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_MUTE_VAL                 ((0x03da  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_MUTE0                    ((0x03db  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_MUTE1                    ((0x03dc  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_MUTE2                    ((0x03dd  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_MUTE3                    ((0x03de  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_MASK_VAL                 ((0x03df  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_CTRL2                    ((0x03e0  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_SWAP1                    ((0x03e1  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_GAIN2                    ((0x03e2  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_GAIN3                    ((0x03e3  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_MASK4                    ((0x03e4  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_MASK5                    ((0x03e5  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_MASK6                    ((0x03e6  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_MASK7                    ((0x03e7  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_MUTE4                    ((0x03e8  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_MUTE5                    ((0x03e9  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_MUTE6                    ((0x03ea  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_MUTE7                    ((0x03eb  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_GAIN_EN                  ((0x03ec  << 2) + 0xfe330000)
#define EE_AUDIO_TDMOUT_D_GAIN_CTRL                ((0x03ed  << 2) + 0xfe330000)
//========================================================================
//  PDM - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe331000
// -----------------------------------------------
#define PDM_CTRL                                   ((0x0000  << 2) + 0xfe331000)
  //bit 31:   PDM enable.
  //bit 30:   invert the PDM_DCLK.
  //bit 29:   output mode:  1: 24bits. 0: 32 bits.
  //bit 28:   bypass mode. 1: bypass all filter. directly output the PDM input to DDR. 0: normal mode.
  //bit 27~9: not used.
  //bit 16:.   PDM Asynchronous FIFO soft reset.  write 1 to soft reset AFIFO.
  //bit 15:8   PDM channel reset.  0: to reset each PDM channel.  1: normal mode.
  //bit 7:0.  PDM channel enable. each bit for one channel.
#define PDM_HCIC_CTRL1                             ((0x0001  << 2) + 0xfe331000)
  //bit 31      hcic filter enable.  1 use sinc filter. 0 bypass input to output.
  //bit 29:24.  hcic final gain shift parameter.
  //bit 23:16   hcic final gain multiplier.
  //bit 8:4     hcic  down sample rate.
  //bit 3:0     hcic  stage number. must be between 3 to 9.
#define PDM_HCIC_CTRL2                             ((0x0002  << 2) + 0xfe331000)
  //Not used.
#define PDM_F1_CTRL                                ((0x0003  << 2) + 0xfe331000)
  //bit 31 .   filter 1 enable.
  //bit 16:15. f1 round mode.  2'b00 : sign bit at bit 49.  28bits output [49:22] round at bit 21. 32bits output [49:18]. 24bits output [49:26]
         //                    2'b01 : sign bit at bit 50.  28bits output [50:23] round at bit 22. 32bits output [49:18]. 24bits output [49:26]
         //                    2'b10 : sign bit at bit 51.  28bits output [51:24] round at bit 23 32bits output [49:18]. 24bits output [49:26].
  //bit 15:12. filter 1 down sample rate.
  //bit 8:0.   filter 1 stage number.
#define PDM_F2_CTRL                                ((0x0004  << 2) + 0xfe331000)
  //bit 31 .   filter 2 enable.
  //bit 16:15. f2 round mode.  2'b00 : round at bit 21. 2'b01 : round at bit 22.  2'b10 : round at bit 23.
  //bit 15:12. filter 2 down sample rate.
  //bit 8:0.   filter 2 stage number.
#define PDM_F3_CTRL                                ((0x0005  << 2) + 0xfe331000)
  //bit 31 .   filter 3 enable.
  //bit 16:15. f3 round mode.  2'b00 : round at bit 21. 2'b01 : round at bit 22.  2'b10 : round at bit 23.
  //bit 15:12. filter 3 down sample rate.
  //bit 8:0.   filter 3 stage number.
#define PDM_HPF_CTRL                               ((0x0006  << 2) + 0xfe331000)
  //bit 31  High pass filter enable.
  //bit 20:16 high pass filter shift steps. 6~19 steps.
  //bit 15:0 high pass filter output factor.
#define PDM_CHAN_CTRL                              ((0x0007  << 2) + 0xfe331000)
  //bit 31:24.  chan3 data sample pointer vs edge of the PDM_DCLK.
  //bit 23:16   chan2 data sample pointer vs edge of the PDM_DCLK.
  //bit 15:8.   chan1 data sample pointer vs edge of the PDM_DCLK.
  //bit 7:0     chan0 data sample pointer vs edge of the PDM_DCLK.
#define PDM_CHAN_CTRL1                             ((0x0008  << 2) + 0xfe331000)
  //bit 31:24.  chan7 data sample pointer vs edge of the PDM_DCLK.
  //bit 23:16   chan6 data sample pointer vs edge of the PDM_DCLK.
  //bit 15:8.   chan5 data sample pointer vs edge of the PDM_DCLK.
  //bit 7:0     chan4 data sample pointer vs edge of the PDM_DCLK.
#define PDM_COEFF_ADDR                             ((0x0009  << 2) + 0xfe331000)
  // address of the write/read of coeff data.
#define PDM_COEFF_DATA                             ((0x000a  << 2) + 0xfe331000)
  //write/read data to coeff memory.
#define PDM_CLKG_CTRL                              ((0x000b  << 2) + 0xfe331000)
  // auto clock gating control.  1: disable the clock gating function. the clock will awlays enabled. 0 : use RTL auto clock gating.
  //31:7 not used.
  //bit 6  filt_ctrl module auto clock gating control.
  //bit 5  sinc fifo module auto clock gating control.
  //bit 4  filter module auto clock gating control.
  //bit 3  apb module auto clock gating control.
  //bit 2  coeff memory module auto clock gating control.
  //bit 1  each channel module auto clock gating control.
  //bit 0 cts_pdm_clk   auto clock gating control.
#define PDM_STS                                    ((0x000c  << 2) + 0xfe331000)
//bit 1  HPF filter output overflow.  means the PCLK is too slow.
//bit 0  HCIC filter output overflow. means the CTS_PDM_CLK is too slow. can't finished the filter function.
#define PDM_MUTE_VALUE                             ((0x000d  << 2) + 0xfe331000)
#define PDM_MASK_NUM                               ((0x000e  << 2) + 0xfe331000)
#define PDM_CHAN_CTRL2                             ((0x000f  << 2) + 0xfe331000)
  //bit 7:0    second sample and start FSM point vs rise edge of PDM_DCLK
//========================================================================
//  PDMB - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe334800
// -----------------------------------------------
#define PDMB_CTRL                                  ((0x0000  << 2) + 0xfe334800)
  //bit 31:   PDM enable.
  //bit 30:   invert the PDM_DCLK.
  //bit 29:   output mode:  1: 24bits. 0: 32 bits.
  //bit 28:   bypass mode. 1: bypass all filter. directly output the PDM input to DDR. 0: normal mode.
  //bit 27~9: not used.
  //bit 16:.   PDM Asynchronous FIFO soft reset.  write 1 to soft reset AFIFO.
  //bit 15:8   PDM channel reset.  0: to reset each PDM channel.  1: normal mode.
  //bit 7:0.  PDM channel enable. each bit for one channel.
#define PDMB_HCIC_CTRL1                            ((0x0001  << 2) + 0xfe334800)
  //bit 31      hcic filter enable.  1 use sinc filter. 0 bypass input to output.
  //bit 29:24.  hcic final gain shift parameter.
  //bit 23:16   hcic final gain multiplier.
  //bit 8:4     hcic  down sample rate.
  //bit 3:0     hcic  stage number. must be between 3 to 9.
#define PDMB_HCIC_CTRL2                            ((0x0002  << 2) + 0xfe334800)
  //Not used.
#define PDMB_F1_CTRL                               ((0x0003  << 2) + 0xfe334800)
  //bit 31 .   filter 1 enable.
  //bit 16:15. f1 round mode.  2'b00 : sign bit at bit 49.  28bits output [49:22] round at bit 21. 32bits output [49:18]. 24bits output [49:26]
         //                    2'b01 : sign bit at bit 50.  28bits output [50:23] round at bit 22. 32bits output [49:18]. 24bits output [49:26]
         //                    2'b10 : sign bit at bit 51.  28bits output [51:24] round at bit 23 32bits output [49:18]. 24bits output [49:26].
  //bit 15:12. filter 1 down sample rate.
  //bit 8:0.   filter 1 stage number.
#define PDMB_F2_CTRL                               ((0x0004  << 2) + 0xfe334800)
  //bit 31 .   filter 2 enable.
  //bit 16:15. f2 round mode.  2'b00 : round at bit 21. 2'b01 : round at bit 22.  2'b10 : round at bit 23.
  //bit 15:12. filter 2 down sample rate.
  //bit 8:0.   filter 2 stage number.
#define PDMB_F3_CTRL                               ((0x0005  << 2) + 0xfe334800)
  //bit 31 .   filter 3 enable.
  //bit 16:15. f3 round mode.  2'b00 : round at bit 21. 2'b01 : round at bit 22.  2'b10 : round at bit 23.
  //bit 15:12. filter 3 down sample rate.
  //bit 8:0.   filter 3 stage number.
#define PDMB_HPF_CTRL                              ((0x0006  << 2) + 0xfe334800)
  //bit 31  High pass filter enable.
  //bit 20:16 high pass filter shift steps. 6~19 steps.
  //bit 15:0 high pass filter output factor.
#define PDMB_CHAN_CTRL                             ((0x0007  << 2) + 0xfe334800)
  //bit 31:24.  chan3 data sample pointer vs edge of the PDM_DCLK.
  //bit 23:16   chan2 data sample pointer vs edge of the PDM_DCLK.
  //bit 15:8.   chan1 data sample pointer vs edge of the PDM_DCLK.
  //bit 7:0     chan0 data sample pointer vs edge of the PDM_DCLK.
#define PDMB_CHAN_CTRL1                            ((0x0008  << 2) + 0xfe334800)
  //bit 31:24.  chan7 data sample pointer vs edge of the PDM_DCLK.
  //bit 23:16   chan6 data sample pointer vs edge of the PDM_DCLK.
  //bit 15:8.   chan5 data sample pointer vs edge of the PDM_DCLK.
  //bit 7:0     chan4 data sample pointer vs edge of the PDM_DCLK.
#define PDMB_COEFF_ADDR                            ((0x0009  << 2) + 0xfe334800)
  // address of the write/read of coeff data.
#define PDMB_COEFF_DATA                            ((0x000a  << 2) + 0xfe334800)
  //write/read data to coeff memory.
#define PDMB_CLKG_CTRL                             ((0x000b  << 2) + 0xfe334800)
  // auto clock gating control.  1: disable the clock gating function. the clock will awlays enabled. 0 : use RTL auto clock gating.
  //31:7 not used.
  //bit 6  filt_ctrl module auto clock gating control.
  //bit 5  sinc fifo module auto clock gating control.
  //bit 4  filter module auto clock gating control.
  //bit 3  apb module auto clock gating control.
  //bit 2  coeff memory module auto clock gating control.
  //bit 1  each channel module auto clock gating control.
  //bit 0 cts_pdm_clk   auto clock gating control.
#define PDMB_STS                                   ((0x000c  << 2) + 0xfe334800)
//bit 1  HPF filter output overflow.  means the PCLK is too slow.
//bit 0  HCIC filter output overflow. means the CTS_PDM_CLK is too slow. can't finished the filter function.
#define PDMB_MUTE_VALUE                            ((0x000d  << 2) + 0xfe334800)
#define PDMB_MASK_NUM                              ((0x000e  << 2) + 0xfe334800)
#define PDMB_CHAN_CTRL2                            ((0x000f  << 2) + 0xfe334800)
  //bit 7:0    second sample and start FSM point vs rise edge of PDM_DCLK
//========================================================================
//  AUDIO TOP_VAD - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe334c00
// -----------------------------------------------
#define EE_AUDIO2_CLK81_CTRL                       ((0x0000  << 2) + 0xfe334c00)
#define EE_AUDIO2_CLK81_EN                         ((0x0001  << 2) + 0xfe334c00)
#define EE_AUDIO2_SW_RESET0                        ((0x0002  << 2) + 0xfe334c00)
#define EE_AUDIO2_CLK_GATE_EN0                     ((0x0003  << 2) + 0xfe334c00)
#define EE_AUDIO2_SECURITY_CTRL0                   ((0x0004  << 2) + 0xfe334c00)
#define EE_AUDIO2_SECURITY_CTRL1                   ((0x0005  << 2) + 0xfe334c00)
#define EE_AUDIO2_MCLK_VAD_CTRL                    ((0x0010  << 2) + 0xfe334c00)
#define EE_AUDIO2_VAD_CLK_CTRL                     ((0x0011  << 2) + 0xfe334c00)
#define EE_AUDIO2_MST_DLY_CTRL0                    ((0x0012  << 2) + 0xfe334c00)
#define EE_AUDIO2_MST_VAD_SCLK_CTRL0               ((0x0013  << 2) + 0xfe334c00)
#define EE_AUDIO2_MST_VAD_SCLK_CTRL1               ((0x0014  << 2) + 0xfe334c00)
#define EE_AUDIO2_CLK_TDMIN_VAD_CTRL               ((0x0015  << 2) + 0xfe334c00)
#define EE_AUDIO2_CLK_PDMIN_CTRL0                  ((0x0016  << 2) + 0xfe334c00)
#define EE_AUDIO2_CLK_PDMIN_CTRL1                  ((0x0017  << 2) + 0xfe334c00)
#define EE_AUDIO2_AUD_VAD_PAD_CTRL0                ((0x0018  << 2) + 0xfe334c00)
#define EE_AUDIO2_TOVAD_CTRL0                      ((0x0020  << 2) + 0xfe334c00)
#define EE_AUDIO2_TODDR_VAD_CTRL0                  ((0x0030  << 2) + 0xfe334c00)
#define EE_AUDIO2_TODDR_VAD_CTRL1                  ((0x0031  << 2) + 0xfe334c00)
#define EE_AUDIO2_TODDR_VAD_CTRL2                  ((0x0032  << 2) + 0xfe334c00)
#define EE_AUDIO2_TODDR_VAD_START_ADDR             ((0x0033  << 2) + 0xfe334c00)
#define EE_AUDIO2_TODDR_VAD_INIT_ADDR              ((0x0034  << 2) + 0xfe334c00)
#define EE_AUDIO2_TODDR_VAD_FINISH_ADDR            ((0x0035  << 2) + 0xfe334c00)
#define EE_AUDIO2_TODDR_VAD_START_ADDRB            ((0x0036  << 2) + 0xfe334c00)
#define EE_AUDIO2_TODDR_VAD_FINISH_ADDRB           ((0x0037  << 2) + 0xfe334c00)
#define EE_AUDIO2_TODDR_VAD_INT_ADDR               ((0x0038  << 2) + 0xfe334c00)
#define EE_AUDIO2_TODDR_VAD_STATUS1                ((0x0039  << 2) + 0xfe334c00)
#define EE_AUDIO2_TODDR_VAD_STATUS2                ((0x003a  << 2) + 0xfe334c00)
#define EE_AUDIO2_TDMIN_VAD_CTRL                   ((0x0040  << 2) + 0xfe334c00)
#define EE_AUDIO2_TDMIN_VAD_SWAP0                  ((0x0041  << 2) + 0xfe334c00)
#define EE_AUDIO2_TDMIN_VAD_SWAP1                  ((0x0042  << 2) + 0xfe334c00)
#define EE_AUDIO2_TDMIN_VAD_MUTE_VAL               ((0x0043  << 2) + 0xfe334c00)
#define EE_AUDIO2_TDMIN_VAD_STAT                   ((0x0044  << 2) + 0xfe334c00)
#define EE_AUDIO2_TDMIN_VAD_MUTE0                  ((0x0050  << 2) + 0xfe334c00)
#define EE_AUDIO2_TDMIN_VAD_MUTE1                  ((0x0051  << 2) + 0xfe334c00)
#define EE_AUDIO2_TDMIN_VAD_MUTE2                  ((0x0052  << 2) + 0xfe334c00)
#define EE_AUDIO2_TDMIN_VAD_MUTE3                  ((0x0053  << 2) + 0xfe334c00)
#define EE_AUDIO2_TDMIN_VAD_MUTE4                  ((0x0054  << 2) + 0xfe334c00)
#define EE_AUDIO2_TDMIN_VAD_MUTE5                  ((0x0055  << 2) + 0xfe334c00)
#define EE_AUDIO2_TDMIN_VAD_MUTE6                  ((0x0056  << 2) + 0xfe334c00)
#define EE_AUDIO2_TDMIN_VAD_MUTE7                  ((0x0057  << 2) + 0xfe334c00)
#define EE_AUDIO2_TDMIN_VAD_MASK0                  ((0x0058  << 2) + 0xfe334c00)
#define EE_AUDIO2_TDMIN_VAD_MASK1                  ((0x0059  << 2) + 0xfe334c00)
#define EE_AUDIO2_TDMIN_VAD_MASK2                  ((0x005a  << 2) + 0xfe334c00)
#define EE_AUDIO2_TDMIN_VAD_MASK3                  ((0x005b  << 2) + 0xfe334c00)
#define EE_AUDIO2_TDMIN_VAD_MASK4                  ((0x005c  << 2) + 0xfe334c00)
#define EE_AUDIO2_TDMIN_VAD_MASK5                  ((0x005d  << 2) + 0xfe334c00)
#define EE_AUDIO2_TDMIN_VAD_MASK6                  ((0x005e  << 2) + 0xfe334c00)
#define EE_AUDIO2_TDMIN_VAD_MASK7                  ((0x005f  << 2) + 0xfe334c00)
#define EE_AUDIO2_VAD_DAT_PAD_CTRL0                ((0x0060  << 2) + 0xfe334c00)
#define EE_AUDIO2_VAD_DAT_PAD_CTRL1                ((0x0061  << 2) + 0xfe334c00)
#define EE_AUDIO2_TODDR_VAD_CHNUM_ID0              ((0x0070  << 2) + 0xfe334c00)
#define EE_AUDIO2_TODDR_VAD_CHNUM_ID1              ((0x0071  << 2) + 0xfe334c00)
#define EE_AUDIO2_TODDR_VAD_CHNUM_ID2              ((0x0072  << 2) + 0xfe334c00)
#define EE_AUDIO2_TODDR_VAD_CHNUM_ID3              ((0x0073  << 2) + 0xfe334c00)
#define EE_AUDIO2_TODDR_VAD_CHNUM_ID4              ((0x0074  << 2) + 0xfe334c00)
#define EE_AUDIO2_TODDR_VAD_CHNUM_ID5              ((0x0075  << 2) + 0xfe334c00)
#define EE_AUDIO2_TODDR_VAD_CHNUM_ID6              ((0x0076  << 2) + 0xfe334c00)
#define EE_AUDIO2_TODDR_VAD_CHNUM_ID7              ((0x0077  << 2) + 0xfe334c00)
#define EE_AUDIO2_TODDR_VAD_CHSYNC_CTRL            ((0x007f  << 2) + 0xfe334c00)
#define EE_AUDIO2_VAD_AM2AXI_CTRL0                 ((0x0080  << 2) + 0xfe334c00)
#define EE_AUDIO2_VAD_AXIWR_ASYNC_CTRL0            ((0x0081  << 2) + 0xfe334c00)
#define EE_AUDIO2_VAD_AM2AXI_STAT                  ((0x0088  << 2) + 0xfe334c00)
#define EE_AUDIO2_VAD_AXIWR_ASYNC_STAT             ((0x0089  << 2) + 0xfe334c00)
#define EE_AUDIO2_EXCEPTION_IRQ_STS0               ((0x0090  << 2) + 0xfe334c00)
#define EE_AUDIO2_EXCEPTION_IRQ_MASK0              ((0x0091  << 2) + 0xfe334c00)
#define EE_AUDIO2_EXCEPTION_IRQ_MODE0              ((0x0092  << 2) + 0xfe334c00)
#define EE_AUDIO2_EXCEPTION_IRQ_CLR0               ((0x0093  << 2) + 0xfe334c00)
#define EE_AUDIO2_EXCEPTION_IRQ_INV0               ((0x0094  << 2) + 0xfe334c00)
//========================================================================
//  AUDIO ASRC WRAPPER - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe336400
// -----------------------------------------------
//
#define AUDIO_ACC_ASRC_WRAPPER_TOP_CTL0            ((0x0000  << 2) + 0xfe336400)
#define AUDIO_ACC_ASRC_WRAPPER_TOP_CTL1            ((0x0001  << 2) + 0xfe336400)
#define AUDIO_ACC_ASRC_WRAPPER_TOP_CTL2            ((0x0002  << 2) + 0xfe336400)
#define AUDIO_ACC_ASRC_WRAPPER_TOP_CTL3            ((0x0003  << 2) + 0xfe336400)
#define AUDIO_ACC_ASRC_WRAPPER_TOP_CTL4            ((0x0004  << 2) + 0xfe336400)
#define AUDIO_ACC_ASRC_WRAPPER_TOP_ST0             ((0x0010  << 2) + 0xfe336400)
#define AUDIO_ACC_ASRC_WRAPPER_TOP_ST1             ((0x0011  << 2) + 0xfe336400)
//========================================================================
//  AUDIO EQDRC WRAPPER - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe336800
// -----------------------------------------------
//
#define AUDIO_ACC_EQDRC_WRAPPER_TOP_CTL0           ((0x0000  << 2) + 0xfe336800)
#define AUDIO_ACC_EQDRC_WRAPPER_TOP_CTL1           ((0x0001  << 2) + 0xfe336800)
#define AUDIO_ACC_EQDRC_WRAPPER_TOP_CTL2           ((0x0002  << 2) + 0xfe336800)
#define AUDIO_ACC_EQDRC_WRAPPER_TOP_CTL3           ((0x0003  << 2) + 0xfe336800)
#define AUDIO_ACC_EQDRC_WRAPPER_TOP_CTL4           ((0x0004  << 2) + 0xfe336800)
#define AUDIO_ACC_EQDRC_WRAPPER_TOP_ST0            ((0x0010  << 2) + 0xfe336800)
#define AUDIO_ACC_EQDRC_WRAPPER_TOP_ST1            ((0x0011  << 2) + 0xfe336800)
//========================================================================
//  EQ DRC - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe332000
// -----------------------------------------------
//
// Reading file:  ./audio_eq_drc.h
//
#define AED_COEF_RAM_CNTL                          ((0x0000  << 2) + 0xfe332000)
#define AED_COEF_RAM_DATA                          ((0x0001  << 2) + 0xfe332000)
#define AED_EQ_EN                                  ((0x0002  << 2) + 0xfe332000)
#define AED_EQ_TAP_CNTL                            ((0x0003  << 2) + 0xfe332000)
#define AED_EQ_VOLUME                              ((0x0004  << 2) + 0xfe332000)
#define AED_EQ_VOLUME_SLEW_CNT                     ((0x0005  << 2) + 0xfe332000)
#define AED_MUTE                                   ((0x0006  << 2) + 0xfe332000)
#define AED_DRC_CNTL                               ((0x0007  << 2) + 0xfe332000)
#define AED_DRC_RMS_COEF0                          ((0x0008  << 2) + 0xfe332000)
#define AED_DRC_RMS_COEF1                          ((0x0009  << 2) + 0xfe332000)
#define AED_DRC_THD0                               ((0x000a  << 2) + 0xfe332000)
#define AED_DRC_THD1                               ((0x000b  << 2) + 0xfe332000)
#define AED_DRC_THD2                               ((0x000c  << 2) + 0xfe332000)
#define AED_DRC_THD3                               ((0x000d  << 2) + 0xfe332000)
#define AED_DRC_THD4                               ((0x000e  << 2) + 0xfe332000)
#define AED_DRC_K0                                 ((0x000f  << 2) + 0xfe332000)
#define AED_DRC_K1                                 ((0x0010  << 2) + 0xfe332000)
#define AED_DRC_K2                                 ((0x0011  << 2) + 0xfe332000)
#define AED_DRC_K3                                 ((0x0012  << 2) + 0xfe332000)
#define AED_DRC_K4                                 ((0x0013  << 2) + 0xfe332000)
#define AED_DRC_K5                                 ((0x0014  << 2) + 0xfe332000)
#define AED_DRC_THD_OUT0                           ((0x0015  << 2) + 0xfe332000)
#define AED_DRC_THD_OUT1                           ((0x0016  << 2) + 0xfe332000)
#define AED_DRC_THD_OUT2                           ((0x0017  << 2) + 0xfe332000)
#define AED_DRC_THD_OUT3                           ((0x0018  << 2) + 0xfe332000)
#define AED_DRC_OFFSET                             ((0x0019  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF00                     ((0x001a  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF01                     ((0x001b  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF10                     ((0x001c  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF11                     ((0x001d  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF20                     ((0x001e  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF21                     ((0x001f  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF30                     ((0x0020  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF31                     ((0x0021  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF40                     ((0x0022  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF41                     ((0x0023  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF50                     ((0x0024  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF51                     ((0x0025  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF00                      ((0x0026  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF01                      ((0x0027  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF10                      ((0x0028  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF11                      ((0x0029  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF20                      ((0x002a  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF21                      ((0x002b  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF30                      ((0x002c  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF31                      ((0x002d  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF40                      ((0x002e  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF41                      ((0x002f  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF50                      ((0x0030  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF51                      ((0x0031  << 2) + 0xfe332000)
#define AED_DRC_LOOPBACK_CNTL                      ((0x0032  << 2) + 0xfe332000)
#define AED_MDRC_CNTL                              ((0x0033  << 2) + 0xfe332000)
#define AED_MDRC_RMS_COEF00                        ((0x0034  << 2) + 0xfe332000)
#define AED_MDRC_RMS_COEF01                        ((0x0035  << 2) + 0xfe332000)
#define AED_MDRC_RELEASE_COEF00                    ((0x0036  << 2) + 0xfe332000)
#define AED_MDRC_RELEASE_COEF01                    ((0x0037  << 2) + 0xfe332000)
#define AED_MDRC_ATTACK_COEF00                     ((0x0038  << 2) + 0xfe332000)
#define AED_MDRC_ATTACK_COEF01                     ((0x0039  << 2) + 0xfe332000)
#define AED_MDRC_THD0                              ((0x003a  << 2) + 0xfe332000)
#define AED_MDRC_K0                                ((0x003b  << 2) + 0xfe332000)
#define AED_MDRC_LOW_GAIN                          ((0x003c  << 2) + 0xfe332000)
#define AED_MDRC_OFFSET0                           ((0x003d  << 2) + 0xfe332000)
#define AED_MDRC_RMS_COEF10                        ((0x003e  << 2) + 0xfe332000)
#define AED_MDRC_RMS_COEF11                        ((0x003f  << 2) + 0xfe332000)
#define AED_MDRC_RELEASE_COEF10                    ((0x0040  << 2) + 0xfe332000)
#define AED_MDRC_RELEASE_COEF11                    ((0x0041  << 2) + 0xfe332000)
#define AED_MDRC_ATTACK_COEF10                     ((0x0042  << 2) + 0xfe332000)
#define AED_MDRC_ATTACK_COEF11                     ((0x0043  << 2) + 0xfe332000)
#define AED_MDRC_THD1                              ((0x0044  << 2) + 0xfe332000)
#define AED_MDRC_K1                                ((0x0045  << 2) + 0xfe332000)
#define AED_MDRC_OFFSET1                           ((0x0046  << 2) + 0xfe332000)
#define AED_MDRC_MID_GAIN                          ((0x0047  << 2) + 0xfe332000)
#define AED_MDRC_RMS_COEF20                        ((0x0048  << 2) + 0xfe332000)
#define AED_MDRC_RMS_COEF21                        ((0x0049  << 2) + 0xfe332000)
#define AED_MDRC_RELEASE_COEF20                    ((0x004a  << 2) + 0xfe332000)
#define AED_MDRC_RELEASE_COEF21                    ((0x004b  << 2) + 0xfe332000)
#define AED_MDRC_ATTACK_COEF20                     ((0x004c  << 2) + 0xfe332000)
#define AED_MDRC_ATTACK_COEF21                     ((0x004d  << 2) + 0xfe332000)
#define AED_MDRC_THD2                              ((0x004e  << 2) + 0xfe332000)
#define AED_MDRC_K2                                ((0x004f  << 2) + 0xfe332000)
#define AED_MDRC_OFFSET2                           ((0x0050  << 2) + 0xfe332000)
#define AED_MDRC_HIGH_GAIN                         ((0x0051  << 2) + 0xfe332000)
#define AED_ED_CNTL                                ((0x0052  << 2) + 0xfe332000)
#define AED_DC_EN                                  ((0x0053  << 2) + 0xfe332000)
#define AED_ND_LOW_THD                             ((0x0054  << 2) + 0xfe332000)
#define AED_ND_HIGH_THD                            ((0x0055  << 2) + 0xfe332000)
#define AED_ND_CNT_THD                             ((0x0056  << 2) + 0xfe332000)
#define AED_ND_SUM_NUM                             ((0x0057  << 2) + 0xfe332000)
#define AED_ND_CZ_NUM                              ((0x0058  << 2) + 0xfe332000)
#define AED_ND_SUM_THD0                            ((0x0059  << 2) + 0xfe332000)
#define AED_ND_SUM_THD1                            ((0x005a  << 2) + 0xfe332000)
#define AED_ND_CZ_THD0                             ((0x005b  << 2) + 0xfe332000)
#define AED_ND_CZ_THD1                             ((0x005c  << 2) + 0xfe332000)
#define AED_ND_COND_CNTL                           ((0x005d  << 2) + 0xfe332000)
#define AED_ND_RELEASE_COEF0                       ((0x005e  << 2) + 0xfe332000)
#define AED_ND_RELEASE_COEF1                       ((0x005f  << 2) + 0xfe332000)
#define AED_ND_ATTACK_COEF0                        ((0x0060  << 2) + 0xfe332000)
#define AED_ND_ATTACK_COEF1                        ((0x0061  << 2) + 0xfe332000)
#define AED_ND_CNTL                                ((0x0062  << 2) + 0xfe332000)
#define AED_MIX0_LL                                ((0x0063  << 2) + 0xfe332000)
#define AED_MIX0_RL                                ((0x0064  << 2) + 0xfe332000)
#define AED_MIX0_LR                                ((0x0065  << 2) + 0xfe332000)
#define AED_MIX0_RR                                ((0x0066  << 2) + 0xfe332000)
#define AED_CLIP_THD                               ((0x0067  << 2) + 0xfe332000)
#define AED_CH1_ND_SUM_OUT                         ((0x0068  << 2) + 0xfe332000)
#define AED_CH2_ND_SUM_OUT                         ((0x0069  << 2) + 0xfe332000)
#define AED_CH1_ND_CZ_OUT                          ((0x006a  << 2) + 0xfe332000)
#define AED_CH2_ND_CZ_OUT                          ((0x006b  << 2) + 0xfe332000)
#define AED_NOISE_STATUS                           ((0x006c  << 2) + 0xfe332000)
#define AED_POW_CURRENT_S0                         ((0x006d  << 2) + 0xfe332000)
#define AED_POW_CURRENT_S1                         ((0x006e  << 2) + 0xfe332000)
#define AED_POW_CURRENT_S2                         ((0x006f  << 2) + 0xfe332000)
#define AED_POW_OUT0                               ((0x0070  << 2) + 0xfe332000)
#define AED_POW_OUT1                               ((0x0071  << 2) + 0xfe332000)
#define AED_POW_OUT2                               ((0x0072  << 2) + 0xfe332000)
#define AED_POW_ADJ_INDEX0                         ((0x0073  << 2) + 0xfe332000)
#define AED_POW_ADJ_INDEX1                         ((0x0074  << 2) + 0xfe332000)
#define AED_POW_ADJ_INDEX2                         ((0x0075  << 2) + 0xfe332000)
#define AED_DRC_GAIN_INDEX0                        ((0x0076  << 2) + 0xfe332000)
#define AED_DRC_GAIN_INDEX1                        ((0x0077  << 2) + 0xfe332000)
#define AED_DRC_GAIN_INDEX2                        ((0x0078  << 2) + 0xfe332000)
#define AED_CH1_VOLUME_STATE                       ((0x0079  << 2) + 0xfe332000)
#define AED_CH2_VOLUME_STATE                       ((0x007a  << 2) + 0xfe332000)
#define AED_CH1_VOLUME_GAIN                        ((0x007b  << 2) + 0xfe332000)
#define AED_CH2_VOLUME_GAIN                        ((0x007c  << 2) + 0xfe332000)
#define AED_FULL_POW_CURRENT                       ((0x007d  << 2) + 0xfe332000)
#define AED_FULL_POW_OUT                           ((0x007e  << 2) + 0xfe332000)
#define AED_FULL_POW_ADJ                           ((0x007f  << 2) + 0xfe332000)
#define AED_FULL_DRC_GAIN                          ((0x0080  << 2) + 0xfe332000)
#define AED_MASTER_VOLUME_STATE                    ((0x0081  << 2) + 0xfe332000)
#define AED_MASTER_VOLUME_GAIN                     ((0x0082  << 2) + 0xfe332000)
#define AED_TOP_CTL0                               ((0x0083  << 2) + 0xfe332000)
#define AED_TOP_CTL1                               ((0x0084  << 2) + 0xfe332000)
#define AED_TOP_CTL2                               ((0x0085  << 2) + 0xfe332000)
#define AED_TOP_ST0                                ((0x0086  << 2) + 0xfe332000)
#define AED_TOP_ST1                                ((0x0087  << 2) + 0xfe332000)
#define AED_EQDRC_DYNAMIC_CNTL                     ((0x0090  << 2) + 0xfe332000)
#define AED_COEF_RAM_CNTL_B                        ((0x0091  << 2) + 0xfe332000)
#define AED_COEF_RAM_DATA_B                        ((0x0092  << 2) + 0xfe332000)
#define AED_DRC_RMS_COEF0_B                        ((0x0093  << 2) + 0xfe332000)
#define AED_DRC_RMS_COEF1_B                        ((0x0094  << 2) + 0xfe332000)
#define AED_DRC_THD0_B                             ((0x0095  << 2) + 0xfe332000)
#define AED_DRC_THD1_B                             ((0x0096  << 2) + 0xfe332000)
#define AED_DRC_THD2_B                             ((0x0097  << 2) + 0xfe332000)
#define AED_DRC_THD3_B                             ((0x0098  << 2) + 0xfe332000)
#define AED_DRC_THD4_B                             ((0x0099  << 2) + 0xfe332000)
#define AED_DRC_K0_B                               ((0x009a  << 2) + 0xfe332000)
#define AED_DRC_K1_B                               ((0x009b  << 2) + 0xfe332000)
#define AED_DRC_K2_B                               ((0x009c  << 2) + 0xfe332000)
#define AED_DRC_K3_B                               ((0x009d  << 2) + 0xfe332000)
#define AED_DRC_K4_B                               ((0x009e  << 2) + 0xfe332000)
#define AED_DRC_K5_B                               ((0x009f  << 2) + 0xfe332000)
#define AED_DRC_THD_OUT0_B                         ((0x00a0  << 2) + 0xfe332000)
#define AED_DRC_THD_OUT1_B                         ((0x00a1  << 2) + 0xfe332000)
#define AED_DRC_THD_OUT2_B                         ((0x00a2  << 2) + 0xfe332000)
#define AED_DRC_THD_OUT3_B                         ((0x00a3  << 2) + 0xfe332000)
#define AED_DRC_OFFSET_B                           ((0x00a4  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF00_B                   ((0x00a5  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF01_B                   ((0x00a6  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF10_B                   ((0x00a7  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF11_B                   ((0x00a8  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF20_B                   ((0x00a9  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF21_B                   ((0x00aa  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF30_B                   ((0x00ab  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF31_B                   ((0x00ac  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF40_B                   ((0x00ad  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF41_B                   ((0x00ae  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF50_B                   ((0x00af  << 2) + 0xfe332000)
#define AED_DRC_RELEASE_COEF51_B                   ((0x00b0  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF00_B                    ((0x00b1  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF01_B                    ((0x00b2  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF10_B                    ((0x00b3  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF11_B                    ((0x00b4  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF20_B                    ((0x00b5  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF21_B                    ((0x00b6  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF30_B                    ((0x00b7  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF31_B                    ((0x00b8  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF40_B                    ((0x00b9  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF41_B                    ((0x00ba  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF50_B                    ((0x00bb  << 2) + 0xfe332000)
#define AED_DRC_ATTACK_COEF51_B                    ((0x00bc  << 2) + 0xfe332000)
#define AED_MDRC_RMS_COEF00_B                      ((0x00bd  << 2) + 0xfe332000)
#define AED_MDRC_RMS_COEF01_B                      ((0x00be  << 2) + 0xfe332000)
#define AED_MDRC_RMS_COEF10_B                      ((0x00bf  << 2) + 0xfe332000)
#define AED_MDRC_RMS_COEF11_B                      ((0x00c0  << 2) + 0xfe332000)
#define AED_MDRC_RMS_COEF20_B                      ((0x00c1  << 2) + 0xfe332000)
#define AED_MDRC_RMS_COEF21_B                      ((0x00c2  << 2) + 0xfe332000)
#define AED_MDRC_RELEASE_COEF00_B                  ((0x00c3  << 2) + 0xfe332000)
#define AED_MDRC_RELEASE_COEF01_B                  ((0x00c4  << 2) + 0xfe332000)
#define AED_MDRC_RELEASE_COEF10_B                  ((0x00c5  << 2) + 0xfe332000)
#define AED_MDRC_RELEASE_COEF11_B                  ((0x00c6  << 2) + 0xfe332000)
#define AED_MDRC_RELEASE_COEF20_B                  ((0x00c7  << 2) + 0xfe332000)
#define AED_MDRC_RELEASE_COEF21_B                  ((0x00c8  << 2) + 0xfe332000)
#define AED_MDRC_ATTACK_COEF00_B                   ((0x00c9  << 2) + 0xfe332000)
#define AED_MDRC_ATTACK_COEF01_B                   ((0x00ca  << 2) + 0xfe332000)
#define AED_MDRC_ATTACK_COEF10_B                   ((0x00cb  << 2) + 0xfe332000)
#define AED_MDRC_ATTACK_COEF11_B                   ((0x00cc  << 2) + 0xfe332000)
#define AED_MDRC_ATTACK_COEF20_B                   ((0x00cd  << 2) + 0xfe332000)
#define AED_MDRC_ATTACK_COEF21_B                   ((0x00ce  << 2) + 0xfe332000)
#define AED_MDRC_THD0_B                            ((0x00cf  << 2) + 0xfe332000)
#define AED_MDRC_THD1_B                            ((0x00d0  << 2) + 0xfe332000)
#define AED_MDRC_THD2_B                            ((0x00d1  << 2) + 0xfe332000)
#define AED_MDRC_K0_B                              ((0x00d2  << 2) + 0xfe332000)
#define AED_MDRC_K1_B                              ((0x00d3  << 2) + 0xfe332000)
#define AED_MDRC_K2_B                              ((0x00d4  << 2) + 0xfe332000)
#define AED_MDRC_OFFSET0_B                         ((0x00d5  << 2) + 0xfe332000)
#define AED_MDRC_OFFSET1_B                         ((0x00d6  << 2) + 0xfe332000)
#define AED_MDRC_OFFSET2_B                         ((0x00d7  << 2) + 0xfe332000)
#define AED_MDRC_LOW_GAIN_B                        ((0x00d8  << 2) + 0xfe332000)
#define AED_MDRC_MID_GAIN_B                        ((0x00d9  << 2) + 0xfe332000)
#define AED_MDRC_HIGH_GAIN_B                       ((0x00da  << 2) + 0xfe332000)
#define AED_DRC_CNTL_B                             ((0x00db  << 2) + 0xfe332000)
#define AED_DRC_LOOPBACK_CNTL_B                    ((0x00dc  << 2) + 0xfe332000)
#define AED_MDRC_CNTL_B                            ((0x00dd  << 2) + 0xfe332000)
#define AED_STATUS_REG                             ((0x00de  << 2) + 0xfe332000)
//
// Closing file:  ./audio_eq_drc.h
//
//========================================================================
//  AUDIO locker - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe331400
// -----------------------------------------------
//
// Reading file:  ./audio_locker_reg.h
//
// synopsys translate_off
// synopsys translate_on
#define AUD_LOCK_EN                                ((0x0000  << 2) + 0xfe331400)
#define AUD_LOCK_SW_RESET                          ((0x0001  << 2) + 0xfe331400)
#define AUD_LOCK_SW_LATCH                          ((0x0002  << 2) + 0xfe331400)
#define AUD_LOCK_HW_LATCH                          ((0x0003  << 2) + 0xfe331400)
#define AUD_LOCK_REFCLK_SRC                        ((0x0004  << 2) + 0xfe331400)
#define AUD_LOCK_REFCLK_LAT_INT                    ((0x0005  << 2) + 0xfe331400)
#define AUD_LOCK_IMCLK_LAT_INT                     ((0x0006  << 2) + 0xfe331400)
#define AUD_LOCK_OMCLK_LAT_INT                     ((0x0007  << 2) + 0xfe331400)
#define AUD_LOCK_REFCLK_DS_INT                     ((0x0008  << 2) + 0xfe331400)
#define AUD_LOCK_IMCLK_DS_INT                      ((0x0009  << 2) + 0xfe331400)
#define AUD_LOCK_OMCLK_DS_INT                      ((0x000a  << 2) + 0xfe331400)
#define AUD_LOCK_INT_CLR                           ((0x000b  << 2) + 0xfe331400)
#define AUD_LOCK_GCLK_CTRL                         ((0x000c  << 2) + 0xfe331400)
#define AUD_LOCK_INT_CTRL                          ((0x000d  << 2) + 0xfe331400)
#define RO_REF2IMCLK_CNT_L                         ((0x0010  << 2) + 0xfe331400)
#define RO_REF2IMCLK_CNT_H                         ((0x0011  << 2) + 0xfe331400)
#define RO_REF2OMCLK_CNT_L                         ((0x0012  << 2) + 0xfe331400)
#define RO_REF2OMCLK_CNT_H                         ((0x0013  << 2) + 0xfe331400)
#define RO_IMCLK2REF_CNT_L                         ((0x0014  << 2) + 0xfe331400)
#define RO_IMCLK2REF_CNT_H                         ((0x0015  << 2) + 0xfe331400)
#define RO_OMCLK2REF_CNT_L                         ((0x0016  << 2) + 0xfe331400)
#define RO_OMCLK2REF_CNT_H                         ((0x0017  << 2) + 0xfe331400)
#define RO_REFCLK_PKG_CNT                          ((0x0018  << 2) + 0xfe331400)
#define RO_IMCLK_PKG_CNT                           ((0x0019  << 2) + 0xfe331400)
#define RO_OMCLK_PKG_CNT                           ((0x001a  << 2) + 0xfe331400)
#define RO_AUD_LOCK_INT_STATUS                     ((0x001b  << 2) + 0xfe331400)
// synopsys translate_off
// synopsys translate_on
//
// Closing file:  ./audio_locker_reg.h
//
//========================================================================
//  AUDIO lockerB - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe334400
// -----------------------------------------------
//
// Reading file:  ./audio_lockerb_reg.h
//
// synopsys translate_off
// synopsys translate_on
#define AUD_LOCKB_EN                               ((0x0000  << 2) + 0xfe334400)
#define AUD_LOCKB_SW_RESET                         ((0x0001  << 2) + 0xfe334400)
#define AUD_LOCKB_SW_LATCH                         ((0x0002  << 2) + 0xfe334400)
#define AUD_LOCKB_HW_LATCH                         ((0x0003  << 2) + 0xfe334400)
#define AUD_LOCKB_REFCLK_SRC                       ((0x0004  << 2) + 0xfe334400)
#define AUD_LOCKB_REFCLK_LAT_INT                   ((0x0005  << 2) + 0xfe334400)
#define AUD_LOCKB_IMCLK_LAT_INT                    ((0x0006  << 2) + 0xfe334400)
#define AUD_LOCKB_OMCLK_LAT_INT                    ((0x0007  << 2) + 0xfe334400)
#define AUD_LOCKB_REFCLK_DS_INT                    ((0x0008  << 2) + 0xfe334400)
#define AUD_LOCKB_IMCLK_DS_INT                     ((0x0009  << 2) + 0xfe334400)
#define AUD_LOCKB_OMCLK_DS_INT                     ((0x000a  << 2) + 0xfe334400)
#define AUD_LOCKB_INT_CLR                          ((0x000b  << 2) + 0xfe334400)
#define AUD_LOCKB_GCLK_CTRL                        ((0x000c  << 2) + 0xfe334400)
#define AUD_LOCKB_INT_CTRL                         ((0x000d  << 2) + 0xfe334400)
#define ROB_REF2IMCLK_CNT_L                        ((0x0010  << 2) + 0xfe334400)
#define ROB_REF2IMCLK_CNT_H                        ((0x0011  << 2) + 0xfe334400)
#define ROB_REF2OMCLK_CNT_L                        ((0x0012  << 2) + 0xfe334400)
#define ROB_REF2OMCLK_CNT_H                        ((0x0013  << 2) + 0xfe334400)
#define ROB_IMCLK2REF_CNT_L                        ((0x0014  << 2) + 0xfe334400)
#define ROB_IMCLK2REF_CNT_H                        ((0x0015  << 2) + 0xfe334400)
#define ROB_OMCLK2REF_CNT_L                        ((0x0016  << 2) + 0xfe334400)
#define ROB_OMCLK2REF_CNT_H                        ((0x0017  << 2) + 0xfe334400)
#define ROB_REFCLK_PKG_CNT                         ((0x0018  << 2) + 0xfe334400)
#define ROB_IMCLK_PKG_CNT                          ((0x0019  << 2) + 0xfe334400)
#define ROB_OMCLK_PKG_CNT                          ((0x001a  << 2) + 0xfe334400)
#define ROB_AUD_LOCK_INT_STATUS                    ((0x001b  << 2) + 0xfe334400)
// synopsys translate_off
// synopsys translate_on
//
// Closing file:  ./audio_lockerb_reg.h
//
//========================================================================
//  AUDIO VAD - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe331800
// -----------------------------------------------
//
// Reading file:  ./VAD_REG.h
//
#define VAD_TOP_CTRL0                              ((0x0000  << 2) + 0xfe331800)
#define VAD_TOP_CTRL1                              ((0x0001  << 2) + 0xfe331800)
#define VAD_TOP_CTRL2                              ((0x0002  << 2) + 0xfe331800)
#define VAD_FIR_CTRL                               ((0x0003  << 2) + 0xfe331800)
#define VAD_FIR_EMP                                ((0x0004  << 2) + 0xfe331800)
#define VAD_FIR_COEF0                              ((0x0005  << 2) + 0xfe331800)
#define VAD_FIR_COEF1                              ((0x0006  << 2) + 0xfe331800)
#define VAD_FIR_COEF2                              ((0x0007  << 2) + 0xfe331800)
#define VAD_FIR_COEF3                              ((0x0008  << 2) + 0xfe331800)
#define VAD_FIR_COEF4                              ((0x0009  << 2) + 0xfe331800)
#define VAD_FIR_COEF5                              ((0x000a  << 2) + 0xfe331800)
#define VAD_FIR_COEF6                              ((0x000b  << 2) + 0xfe331800)
#define VAD_FIR_COEF7                              ((0x000c  << 2) + 0xfe331800)
#define VAD_FIR_COEF8                              ((0x000d  << 2) + 0xfe331800)
#define VAD_FIR_COEF9                              ((0x000e  << 2) + 0xfe331800)
#define VAD_FIR_COEF10                             ((0x000f  << 2) + 0xfe331800)
#define VAD_FIR_COEF11                             ((0x0010  << 2) + 0xfe331800)
#define VAD_FIR_COEF12                             ((0x0011  << 2) + 0xfe331800)
#define VAD_FRAME_CTRL0                            ((0x0012  << 2) + 0xfe331800)
#define VAD_FRAME_CTRL1                            ((0x0013  << 2) + 0xfe331800)
#define VAD_FRAME_CTRL2                            ((0x0014  << 2) + 0xfe331800)
#define VAD_CEP_CTRL0                              ((0x0015  << 2) + 0xfe331800)
#define VAD_CEP_CTRL1                              ((0x0016  << 2) + 0xfe331800)
#define VAD_CEP_CTRL2                              ((0x0017  << 2) + 0xfe331800)
#define VAD_CEP_CTRL3                              ((0x0018  << 2) + 0xfe331800)
#define VAD_CEP_CTRL4                              ((0x0019  << 2) + 0xfe331800)
#define VAD_CEP_CTRL5                              ((0x001a  << 2) + 0xfe331800)
#define VAD_DEC_CTRL                               ((0x001b  << 2) + 0xfe331800)
#define VAD_TOP_STS0                               ((0x001c  << 2) + 0xfe331800)
#define VAD_TOP_STS1                               ((0x001d  << 2) + 0xfe331800)
#define VAD_TOP_STS2                               ((0x001e  << 2) + 0xfe331800)
#define VAD_FIR_STS0                               ((0x001f  << 2) + 0xfe331800)
#define VAD_FIR_STS1                               ((0x0020  << 2) + 0xfe331800)
#define VAD_POW_STS0                               ((0x0021  << 2) + 0xfe331800)
#define VAD_POW_STS1                               ((0x0022  << 2) + 0xfe331800)
#define VAD_POW_STS2                               ((0x0023  << 2) + 0xfe331800)
#define VAD_FFT_STS0                               ((0x0024  << 2) + 0xfe331800)
#define VAD_FFT_STS1                               ((0x0025  << 2) + 0xfe331800)
#define VAD_SPE_STS0                               ((0x0026  << 2) + 0xfe331800)
#define VAD_SPE_STS1                               ((0x0027  << 2) + 0xfe331800)
#define VAD_SPE_STS2                               ((0x0028  << 2) + 0xfe331800)
#define VAD_SPE_STS3                               ((0x0029  << 2) + 0xfe331800)
#define VAD_DEC_STS0                               ((0x002a  << 2) + 0xfe331800)
#define VAD_DEC_STS1                               ((0x002b  << 2) + 0xfe331800)
#define VAD_LUT_CTRL                               ((0x002c  << 2) + 0xfe331800)
#define VAD_LUT_WR                                 ((0x002d  << 2) + 0xfe331800)
#define VAD_LUT_RD                                 ((0x002e  << 2) + 0xfe331800)
#define VAD_IN_SEL0                                ((0x002f  << 2) + 0xfe331800)
#define VAD_IN_SEL1                                ((0x0030  << 2) + 0xfe331800)
#define VAD_TO_DDR                                 ((0x0031  << 2) + 0xfe331800)
#define VAD_SYNC_CTRL0                             ((0x0032  << 2) + 0xfe331800)
#define VAD_SYNC_CHNUM_ID0                         ((0x0033  << 2) + 0xfe331800)
#define VAD_SYNC_CHNUM_ID1                         ((0x0034  << 2) + 0xfe331800)
#define VAD_SYNC_CHNUM_ID2                         ((0x0035  << 2) + 0xfe331800)
#define VAD_SYNC_CHNUM_ID3                         ((0x0036  << 2) + 0xfe331800)
#define VAD_SYNC_CHNUM_ID4                         ((0x0037  << 2) + 0xfe331800)
#define VAD_SYNC_CHNUM_ID5                         ((0x0038  << 2) + 0xfe331800)
#define VAD_SYNC_CHNUM_ID6                         ((0x0039  << 2) + 0xfe331800)
#define VAD_SYNC_CHNUM_ID7                         ((0x003a  << 2) + 0xfe331800)
//
// Closing file:  ./VAD_REG.h
//
//========================================================================
//  AUDIO RESAMPLEA - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe331c00
// -----------------------------------------------
//
// Reading file:  ./RESAMPLE.h
//
#define AUDIO_RSAMP_CTRL0                          ((0x0000  << 2) + 0xfe331c00)
//Bit   31:3      reserved
//Bit   2         reg_lock_rst      //unsigned  , default =0;
//Bit   1         reg_rsamp_rst     //unsigned  , default =0;
//Bit   0         reg_sw_rst        //unsigned  , default =0;
#define AUDIO_RSAMP_CTRL1                          ((0x0001  << 2) + 0xfe331c00)
//Bit   31:27      reg_in_lsb        //unsigned  , default =0;
//Bit   26         reg_watchdog_en   //unsigned  , default =0;
//Bit   25         reg_rsamp_rst_sel //unsigned  , default =0;
//Bit   24         reg_module_bypas  //unsigned  , default =0;
//Bit   23:18      reg_gclk_ctrl     //unsigned  , default =0;
//Bit   17:13      reg_in_msb        //unsigned  , default =23;
//Bit   12         reg_output_en     //unsigned  , default =0;
//Bit   11         reg_rsamp_en      //unsigned  , default =0;
//Bit   10         reg_filt_en       //unsigned  , default =0;
//Bit   9          reg_post_en       //unsigned  , default =0;
//Bit   8          reg_inp_mux_mode  //unsigned  , default =0;
//Bit   7:5        reserved          //unsigned  , default =2;
//Bit   4:0        reg_inp_mux       //unsigned  , default =0;
#define AUDIO_RSAMP_CTRL2                          ((0x0002  << 2) + 0xfe331c00)
//Bit 31:30    reserved              //unsigned  , default =0;
//Bit 29:24    reg_chx_size          //unsigned  , default =2;
//Bit 23:18    reserved              //unsigned  , default =0;
//Bit 17:16    reg_scl_step          //unsigned  , default =0; 0: 1/1  1: 1/2  2: 1/4
//Bit 15:8     reg_filt_tap          //unsigned  , default =63;
//Bit 7:0      reg_intp_tap          //unsigned  , default =63;
#define AUDIO_RSAMP_PHSINIT                        ((0x0003  << 2) + 0xfe331c00)
//Bit   31:28      reserved          //unsigned  , default = 0;
//Bit   27:0       reg_init_phs      //unsigned  , default = 0;
#define AUDIO_RSAMP_PHSSTEP                        ((0x0004  << 2) + 0xfe331c00)
//Bit   31         reserved          //unsigned  , default = 0;
//Bit   30:0       reg_rsamp_step    //unsigned  , default = 134217728;//'h800_0000
#define AUDIO_RSAMP_SHIFT                          ((0x0005  << 2) + 0xfe331c00)
//Bit   31:24       reg_rsft_iir    //unsigned  , default = 23;
//Bit   23:16       reg_rsft_blnd   //unsigned  , default = 21;
//Bit   15:8        reg_rsft_sinc   //unsigned  , default = 31;
//Bit   7:0         reg_rsft_aa     //unsigned  , default = 31;
#define AUDIO_RSAMP_ADJ_CTRL0                      ((0x0006  << 2) + 0xfe331c00)
//Bit   31:7        reserved                //unsigned
//Bit   6           reg_lock_vld_sel        //unsigned , default = 0;
//Bit   5           reg_loop_dif_clr_en     //unsigned , default = 0;
//Bit   4           reg_aout_force_en       //unsigned , default = 0;
//Bit   3           reserved                //unsigned
//Bit   2           reg_rsamp_adj_out_inv   //unsigned , default = 0;
//Bit   1           reg_rsamp_adj_force_en  //unsigned , default = 0;
//Bit   0           reg_rsamp_adj_en        //unsigned , default = 0;
#define AUDIO_RSAMP_ADJ_CTRL1                      ((0x0007  << 2) + 0xfe331c00)
//Bit   31:16       reg_rsamp_adj_odet_step     //unsigned , default = 8;
//Bit   15:0        reg_rsamp_adj_kmax          //unsigned , default = 32768;
#define AUDIO_RSAMP_ADJ_SFT                        ((0x0008  << 2) + 0xfe331c00)
//Bit   31:30       reserved                //unsigned , default = 0;
//Bit   29          reg_rsamp_adj_dif_sel   //unsigned , default = 0;
//Bit   28:24       reg_rsamp_adj_ki        //unsigned , default = 9;
//Bit   23:21       reserved                //unsigned , default = 0;
//Bit   20:16       reg_rsamp_adj_kp        //unsigned , default = 1;
//Bit   15:13       reserved                //unsigned , default = 0;
//Bit   12:8        reg_rsamp_adj_ki_sft    //unsigned , default = 6;
//Bit   7:6         reserved                //unsigned , default = 0;
//Bit   5:0         reg_rsamp_adj_out_sft   //unsigned , default = 12;
#define AUDIO_RSAMP_ADJ_IDET_LEN                   ((0x0009  << 2) + 0xfe331c00)
//Bit   31:0       reg_rsamp_adj_idet_len       //unsigned , default = 10000;
#define AUDIO_RSAMP_ADJ_FORCE                      ((0x000a  << 2) + 0xfe331c00)
//Bit   31:0       reg_rsamp_adj_force_err      //signed , default = 8;
#define AUDIO_RSAMP_ADJ_KI_FORCE                   ((0x000b  << 2) + 0xfe331c00)
//Bit   31:0       reg_rsamp_adj_ki_force //signed , default = 0;
#define AUDIO_RSAMP_WATCHDOG_THRD                  ((0x000c  << 2) + 0xfe331c00)
//Bit   31:0       reg_watchdog_thrd      //signed , default = 32'h1000;
#define AUDIO_RSAMP_DBG_INFO                       ((0x000d  << 2) + 0xfe331c00)
//Bit   31:16      reg_aout_force_hi        //unsigned , default = 0;
//Bit   15:7       reserved                 //unsigned , default = 0;
//Bit   6          reg_rsamp_dbgcnt_clr     //unsigned , default = 0;
//Bit   5          reg_rsamp_dbgcnt_vldsel  //unsigned , default = 0;
//Bit   4          reg_rsamp_dbgcnt_en      //unsigned , default = 0;
//Bit   3          reserved                 //unsigned , default = 0;
//Bit   2:0        reg_watchdog_rstsel      //unsigned , default = 4;
#define AUDIO_RSAMP_AOUT_FORCE                     ((0x000e  << 2) + 0xfe331c00)
//Bit   31:0       reg_aout_force_lo        //unsigned , default = 0;
#define AUDIO_RSAMP_IRQ_CTRL                       ((0x000f  << 2) + 0xfe331c00)
//Bit   31:16      reg_irq_thrd             //unsigned , default = 0;
//Bit   15:12      reserved                 //unsigned , default = 0;
//Bit   11:8       reg_irq_sel              //unsigned , default = 0;
//Bit   7:4        reg_irq_clr              //unsigned , default = 0;
//Bit   3:0        reg_irq_en               //unsigned , default = 0;
#define AUDIO_RSAMP_RO_STATUS                      ((0x0010  << 2) + 0xfe331c00)
//Bit   31:0       ro_rsamp_stat  //{din_chx_chk_err,is_idle_st,rsamp_fifo_over_cnt[7:0]}
#define AUDIO_RSAMP_RO_ADJ_FREQ                    ((0x0011  << 2) + 0xfe331c00)
//Bit   31:0       ro_rsamp_adj_freq
#define AUDIO_RSAMP_RO_ADJ_DIFF_BAK                ((0x0012  << 2) + 0xfe331c00)
//Bit   31:0       ro_det_diff_bak
#define AUDIO_RSAMP_RO_ADJ_DIFF_DLT                ((0x0013  << 2) + 0xfe331c00)
//Bit   31:0       ro_det_diff_dlt
#define AUDIO_RSAMP_RO_ADJ_PHS_ERR                 ((0x0014  << 2) + 0xfe331c00)
//Bit   31:0       ro_det_phase_err
#define AUDIO_RSAMP_RO_ADJ_KI_OUT                  ((0x0015  << 2) + 0xfe331c00)
//Bit   31:0       ro_rsamp_ki_out
#define AUDIO_RSAMP_RO_IN_CNT                      ((0x0016  << 2) + 0xfe331c00)
//Bit   31:0       ro_rsamp_in_cnt
#define AUDIO_RSAMP_RO_OUT_CNT                     ((0x0017  << 2) + 0xfe331c00)
//Bit   31:0       ro_rsamp_out_cnt
#define AUDIO_RSAMP_RO_ADJ_PHS_ERR_VAR             ((0x0018  << 2) + 0xfe331c00)
//Bit   31:0       ro_det_phase_err_var
#define AUDIO_RSAMP_POST_COEF0                     ((0x0020  << 2) + 0xfe331c00)
//Bit   31:0       reg_post_coef0 //signed  , default = 0;
#define AUDIO_RSAMP_POST_COEF1                     ((0x0021  << 2) + 0xfe331c00)
//Bit   31:0       reg_post_coef1 //signed  , default = 0;
#define AUDIO_RSAMP_POST_COEF2                     ((0x0022  << 2) + 0xfe331c00)
//Bit   31:0       reg_post_coef2 //signed  , default = 0;
#define AUDIO_RSAMP_POST_COEF3                     ((0x0023  << 2) + 0xfe331c00)
//Bit   31:0       reg_post_coef3 //signed  , default = 0;
#define AUDIO_RSAMP_POST_COEF4                     ((0x0024  << 2) + 0xfe331c00)
//Bit   31:0       reg_post_coef4 //signed  , default = 0;
#define AUDIO_RSAMP_AA_COEF_ADDR                   ((0x0030  << 2) + 0xfe331c00)
//Bit   31:0       reg_aa_coef_addr     //unsigned, default = 0;
#define AUDIO_RSAMP_AA_COEF_DATA                   ((0x0031  << 2) + 0xfe331c00)
//Bit   31:0       reg_aa_coef_data     //signed  , default = 0;
#define AUDIO_RSAMP_SINC_COEF_ADDR                 ((0x0040  << 2) + 0xfe331c00)
//Bit   31:0       reg_sinc_coef_addr   //unsigned, default = 0;
#define AUDIO_RSAMP_SINC_COEF_DATA                 ((0x0041  << 2) + 0xfe331c00)
//Bit   31:0       reg_sinc_coef_data   //signed  , default = 0;
//
// Closing file:  ./RESAMPLE.h
//
//========================================================================
//  AUDIO EARCTX_CMDC - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe333000
// -----------------------------------------------
//
// Reading file:  ./earc_tx_cmdc.h
//
#define EARC_TX_CMDC_TOP_CTRL0                     ((0x0030  << 2) + 0xfe333000)
//Bit   31   ,      idle2_int          unsigned, default = 0, 1: enable
//Bit   30   ,      idle1_int            unsigned, default = 0, 1: enable
//Bit   29   ,      disc2_int            unsigned, default = 0, 1: enable
//Bit   28   ,      disc1_int            unsigned, default = 0, 1: enable
//Bit   27   ,      earc_int             unsigned, default = 0, 1: enable
//Bit   26   ,      hb_status_int        unsigned, default = 0, 1: enable
//Bit   25   ,      losthb_int           unsigned, default = 0, 1: enable
//Bit   24   ,      timeout_int          unsigned, default = 0, 1: enable
//Bit   23   ,      status_ch_int        unsigned, default = 0, 1: enable
//Bit   22   ,      int_recv_finished  unsigned, default = 0, 1: enable
//Bit   21   ,      int_rdata          unsigned, default = 0, 1: enable
//Bit   20   ,      int_recv_nack       unsigned, default = 0, 1: enable
//Bit   19   ,      int_recv_norsp     unsigned, default = 0, 1: enable
//Bit   18   ,      int_recv_unexp     unsigned, default = 0, 1: enable
//Bit   17   ,      int_recv_data       unsigned, default = 0, 1: enable
//Bit   16   ,      int_recv_ack       unsigned, default = 0, 1: enable
//Bit   15   ,      int_recv_ecc_err   unsigned, default = 0, 1: enable
//Bit   14   ,      int_recv_packet    unsigned, default = 0, 1: enable
//Bit   13:0 ,      reserved
#define EARC_TX_CMDC_TOP_CTRL1                     ((0x0031  << 2) + 0xfe333000)
//Bit      31:0,     cmdc_top_ctrl1     //unsigned, RW, default = 0,
#define EARC_TX_CMDC_TOP_CTRL2                     ((0x0032  << 2) + 0xfe333000)
//Bit   31   ,     reset_idle2_int              unsigned, default = 0, 1: enable
//Bit   30   ,     reset_idle1_int            unsigned, default = 0, 1: enable
//Bit   29   ,     reset_disc2_int            unsigned, default = 0, 1: enable
//Bit   28   ,     reset_disc1_int            unsigned, default = 0, 1: enable
//Bit   27   ,     reset_earc_int             unsigned, default = 0, 1: enable
//Bit   26   ,     reset_hb_status_int        unsigned, default = 0, 1: enable
//Bit   25   ,     reset_losthb_int           unsigned, default = 0, 1: enable
//Bit   24   ,     reset_timeout_int          unsigned, default = 0, 1: enable
//Bit   23   ,     reset_status_ch_int        unsigned, default = 0, 1: enable
//Bit   22   ,     reset_int_recv_finished        unsigned, default = 0, 1: enable
//Bit   21   ,     reset_int_rdata              unsigned, default = 0, 1: enable
//Bit   20   ,     reset_int_recv_nack       unsigned, default = 0, 1: enable
//Bit   19   ,     reset_int_recv_norsp         unsigned, default = 0, 1: enable
//Bit   18   ,     reset_int_recv_unexp         unsigned, default = 0, 1: enable
//Bit   17   ,     reset_int_recv_data       unsigned, default = 0, 1: enable
//Bit   16   ,     reset_int_recv_ack       unsigned, default = 0, 1: enable
//Bit   15   ,     reset_int_recv_ecc_err       unsigned, default = 0, 1: enable
//Bit   14   ,     reset_int_recv_packet        unsigned, default = 0, 1: enable
//Bit 13:0   ,     reserved
#define EARC_TX_CMDC_TIMER_CTRL0                   ((0x0033  << 2) + 0xfe333000)
//Bit      31:0,     cmdc_timer_ctrl0   //unsigned, RW, default = 0,
#define EARC_TX_CMDC_TIMER_CTRL1                   ((0x0034  << 2) + 0xfe333000)
//Bit      31:0,     cmdc_timer_ctrl1  //unsigned, RW, default = 0,
#define EARC_TX_CMDC_TIMER_CTRL2                   ((0x0035  << 2) + 0xfe333000)
//Bit      31:0,     cmdc_timer_ctrl2  //unsigned, RW, default = 0,
#define EARC_TX_CMDC_TIMER_CTRL3                   ((0x0036  << 2) + 0xfe333000)
//Bit      31:0,     cmdc_timer_ctrl3  //unsigned, RW, default = 0,
#define EARC_TX_CMDC_VSM_CTRL0                     ((0x0037  << 2) + 0xfe333000)
//Bit      31,      sw_state_update         unsigned, default = 0,  XX
//Bit      30:28,   sw_state                 unsigned, default = 0,  XX
//Bit      27,      arc_initiated             unsigned, default = 0,  XX
//Bit      26,      arc_terminated             unsigned, default = 0,  XX
//Bit      25,      arc_enable                 unsigned, default = 1,  XX
//Bit      24,      man_hpd                 unsigned, default = 0,  XX
//Bit      23:22,   hpd_sel                 unsigned, default = 0,  XX
//Bit      21:20,   hpd_sel_earc            unsigned, default = 0,  XX
//Bit      19,      comma_cnt_rst           unsigned, default = 0,  XX
//Bit      18,      timeout_status_rst      unsigned, default = 0,  XX
//Bit      17,      losthb_status_rst       unsigned, default = 0,  XX
//Bit      16,      force_rst               unsigned, default = 0,  XX
//Bit      15,      auto_state_en           unsigned, default = 0,  XX
//Bit      14,      cmdc_state_en             unsigned, default = 0,  XX
//Bit      13,      noack_repeat_en            unsigned, default = 0,  XX
//Bit    12:0,      reserved
#define EARC_TX_CMDC_VSM_CTRL1                     ((0x0038  << 2) + 0xfe333000)
//Bit    31:9,      reserved
//Bit       8,      cntl_hpd_sel            unsigned, default = 0, 0:sel hd_hpd,1:sel hdmirx_hpd
//Bit     7:0,      comma_cnt_th            unsigned, default = 0, should bigger than 3 and small than 10
#define EARC_TX_CMDC_VSM_CTRL2                     ((0x0039  << 2) + 0xfe333000)
//Bit    31:12,      max_count_th          unsigned, default = 0,  disc1 hpd_val timing
//Bit     11:8,      reserved
//Bit        7,      reg_soft_rst          unsigned, default = 0,  disc1 hpd_val timing
//Bit      6:4,      time_sel              unsigned, default = 0,  disc1 hpd_val timing
//Bit      3:2,      soft_rst_sel          unsigned, default = 0,  disc1 hpd_val timing
//Bit      1:0,      enable_ctrl           unsigned, default = 0,  disc1 hpd_val timing
#define EARC_TX_CMDC_VSM_CTRL3                     ((0x003a  << 2) + 0xfe333000)
//Bit    31:12,      max_count_th          unsigned, default = 0,  disc2 heartbeat act timing
//Bit     11:8,      reserved
//Bit        7,      reg_soft_rst          unsigned, default = 0,  disc2 heartbeat act timing
//Bit      6:4,      time_sel              unsigned, default = 0,  disc2 heartbeat act timing
//Bit      3:2,      soft_rst_sel          unsigned, default = 0,  disc2 heartbeat act timing
//Bit      1:0,      enable_ctrl           unsigned, default = 0,  disc2 heartbeat act timing
#define EARC_TX_CMDC_VSM_CTRL4                     ((0x003b  << 2) + 0xfe333000)
//Bit    31:12,      max_count_th          unsigned, default = 0,  in disc2, no heartbeat ack timing
//Bit     11:8,      reserved
//Bit        7,      reg_soft_rst          unsigned, default = 0,  in disc2, no heartbeat ack timing
//Bit      6:4,      time_sel              unsigned, default = 0,  in disc2, no heartbeat ack timing
//Bit      3:2,      soft_rst_sel          unsigned, default = 0,  in disc2, no heartbeat ack timing
//Bit      1:0,      enable_ctrl           unsigned, default = 0,  in disc2, no heartbeat ack timing
#define EARC_TX_CMDC_VSM_CTRL5                     ((0x003c  << 2) + 0xfe333000)
//Bit    31:12,      max_count_th          unsigned, default = 0,  in disc1 and disc2 timing out
//Bit     11:8,      reserved
//Bit        7,      reg_soft_rst          unsigned, default = 0,  in disc1 and disc2 timing out
//Bit      6:4,      time_sel              unsigned, default = 0,  in disc1 and disc2 timing out
//Bit      3:2,      soft_rst_sel          unsigned, default = 0,  in disc1 and disc2 timing out
//Bit      1:0,      enable_ctrl           unsigned, default = 0,  in disc1 and disc2 timing out
#define EARC_TX_CMDC_VSM_CTRL6                     ((0x003d  << 2) + 0xfe333000)
//Bit    31:12,      max_count_th          unsigned, default = 0,  in earc heartbeat act timing
//Bit     11:8,      reserved
//Bit        7,      reg_soft_rst          unsigned, default = 0,  in earc heartbeat act timing
//Bit      6:4,      time_sel              unsigned, default = 0,  in earc heartbeat act timing
//Bit      3:2,      soft_rst_sel          unsigned, default = 0,  in earc heartbeat act timing
//Bit      1:0,      enable_ctrl           unsigned, default = 0,  in earc heartbeat act timing
#define EARC_TX_CMDC_VSM_CTRL7                     ((0x003e  << 2) + 0xfe333000)
//Bit    31:16,      reserved
//Bit     15:8,      status_soft_val       unsigned, default = 0,  in earc heartbeat det timing
//Bit        7,      reg_soft_rst          unsigned, default = 0,  in earc heartbeat det timing
//Bit        6,      status_rst            unsigned, default = 0,  in earc heartbeat det timing
//Bit      5:4,      reserved
//Bit      3:2,      soft_rst_sel          unsigned, default = 0,  in earc heartbeat det timing
//Bit      1:0,      enable_ctrl           unsigned, default = 0,  in earc heartbeat det timing
#define EARC_TX_CMDC_VSM_CTRL8                     ((0x003f  << 2) + 0xfe333000)
//Bit      31:0,     cmdc_vsm_ctrl8        //unsigned, RW, default = 0,
#define EARC_TX_CMDC_VSM_CTRL9                     ((0x0041  << 2) + 0xfe333000)
//Bit      31:0,     cmdc_vsm_ctrl9        //unsigned, RW, default = 0
#define EARC_TX_CMDC_SENDER_CTRL0                  ((0x0042  << 2) + 0xfe333000)
//Bit      31:2,     sender_ctrl0                 unsigned,  default = 0,
//Bit      1,        hb_chg_conf_auto             unsigned,  default = 1,
//Bit      0,        hb_chg_auto                  unsigned,  default = 0,
#define EARC_TX_CMDC_PACKET_CTRL0                  ((0x0043  << 2) + 0xfe333000)
//Bit        31,      packet_mode_enable          unsigned, default = 0,  packet control
//Bit        30,      free_enable                 unsigned, default = 0,  packet control
//Bit        29,      soft_rst                    unsigned, default = 0,  packet control
//Bit     28:24,      tx_ready_threshold          unsigned, default = 0,  packet control
//Bit     23:20,      reserved
//Bit      19:8,      send_pre_threshold          unsigned, default = 0,  packet control
//Bit       7:6,      reserved
//Bit         5,      state_auto_en               unsigned, default = 0, packet control
//Bit         4,      sw_state_update_en          unsigned, default = 0,  packet control
//Bit       3:0,      sw_state_value              unsigned, default = 0,  packet control
#define EARC_TX_CMDC_PACKET_CTRL1                  ((0x0044  << 2) + 0xfe333000)
//Bit        31,      ecc_endian                  unsigned, default = 0,  send
//Bit        30,      pre_start_value             unsigned, default = 0,  send
//Bit     29:21,      reserved
//Bit     20:16,      post_threshold              unsigned, default = 0,  send
//Bit     15:14,      reserved
//Bit      13:8,      pre_threshold               unsigned, default = 0,  XX
//Bit       7:0,      post_flag                   unsigned, default = 0,  XX
#define EARC_TX_CMDC_PACKET_CTRL2                  ((0x0045  << 2) + 0xfe333000)
//Bit      31:0,      pre_flag                    unsigned, default = 0,  XX
#define EARC_TX_CMDC_PACKET_CTRL3                  ((0x0046  << 2) + 0xfe333000)
//Bit      31,       recv_en                      unsigned, default = 0,  XX
//Bit      30,       recv_parity_mask             unsigned, default = 0,  XX
//Bit      29,       recv_timeout_en              unsigned, default = 0,  XX
//Bit      28,       bch_ecc_en                   unsigned, default = 0, xx
//Bit     27:16,     reserved
//Bit      15:0,     recv_timeout_threshold       unsigned, default = 0,  XX
#define EARC_TX_CMDC_PACKET_CTRL4                  ((0x0047  << 2) + 0xfe333000)
//Bit     31:20,     reserved
//Bit      19:0,     recv_packet_head             unsigned, default = 0,  XX
#define EARC_TX_CMDC_PACKET_CTRL5                  ((0x0048  << 2) + 0xfe333000)
//Bit     31:20,     reserved
//Bit      19:0,     recv_packet_head_mask        unsigned, default = 0,  XX
#define EARC_TX_CMDC_PACKET_CTRL6                  ((0x0049  << 2) + 0xfe333000)
//Bit     31:20,     recv_pre_threshold          unsigned, default = 0,  packet control
//Bit      19:7,     reserved
//Bit         6,     recv_finished_int            unsigned, default = 0,  XX
//Bit         5,     recv_ecc_err_int             unsigned, default = 0,  XX
//Bit         4,     recv_ack_int                 unsigned, default = 0,  XX
//Bit         3,     recv_data_int                unsigned, default = 0,  XX
//Bit         2,     recv_unexp_int               unsigned, default = 0,  XX
//Bit         1,     recv_norsp_int               unsigned, default = 0,  XX
//Bit         0,     recv_nack_int                unsigned, default = 0,  XX
#define EARC_TX_CMDC_BIPHASE_CTRL0                 ((0x004a  << 2) + 0xfe333000)
//Bit     31:24,     reserved
//Bit     23:16,     ack delay threshold           unsigned, default = 0, xx
//Bit     15:10,     reserved
//Bit         9,     send_ack_en                   unsigned, default = 0,  xx
//Bit         8,     sq_val_en                     unsigned, default = 0,  XX
//Bit         7,     biphase_send_soft_rst         unsigned, default = 0,  XX
//Bit         6,     comma_soft_rst                unsigned, default = 0,  XX
//Bit         5,     fifo_rst                      unsigned, default = 0,  XX
//Bit         4,     receiver_no_sender            unsigned, default = 0,  XX
//Bit         3,     sender_free                   unsigned, default = 0,  XX
//Bit         2,     receiver_send                 unsigned, default = 0,  XX
//Bit         1,     receiver_earc                 unsigned, default = 0,  XX
//Bit         0,     receiver_free                 unsigned, default = 0,  XX
#define EARC_TX_CMDC_BIPHASE_CTRL1                 ((0x004b  << 2) + 0xfe333000)
//Bit     31:16,     reserved
//Bit        15,     ack_enable                    unsigned, default = 0,  send
//Bit      14:8,     reserved
//Bit       7:0,     wait_threshold before ack     unsigned, default = 0,  send
#define EARC_TX_CMDC_BIPHASE_CTRL2                 ((0x004c  << 2) + 0xfe333000)
//Bit        31,     comma_detection_enable        unsigned, default = 0, comma detection
//Bit        30,     manual_reset_enable           unsigned, default = 0, manual reset select, 1: manual
//Bit        29,     manual_reset_value            unsigned, default = 0, manual reset control
//Bit     28:16,     reserved
//Bit      15:0,     comma_detection_threshold     unsigned, default = 0,
#define EARC_TX_CMDC_BIPHASE_CTRL3                 ((0x004d  << 2) + 0xfe333000)
//Bit      31:0,     cmdc_biphase_ctrl3            unsigned, default = 0,
#define EARC_TX_CMDC_DEVICE_ID_CTRL                ((0x004e  << 2) + 0xfe333000)
//Bit        31,     apb_write                     unsigned, default = 0, apb bus wr/read
//Bit        30,     apb_read                      unsigned, default = 0, apb bus wr/read
//Bit        29,     apb_rw_done                  unsigned, default = 0, apb bus wr/read
//Bit        28,     apb_rw_reset                 unsigned, default = 0, apb bus wr/read
//Bit     27:17,     reserved
//Bit        16,     hpb_rst_enable               unsigned, default = 1, hpd rst enable
//Bit      15:8,     apb_rwid                    unsigned, default = 0, apb bus wr/read
//Bit       7:0,     apbrw_start_addr            unsigned, default = 0, apb bus wr/read
#define EARC_TX_CMDC_DEVICE_WDATA                  ((0x004f  << 2) + 0xfe333000)
//Bit      31:8,     reserved
//Bit       7:0,     apb_write_data                unsigned, default = 0, apb bus wr/read
#define EARC_TX_CMDC_DEVICE_RDATA                  ((0x0050  << 2) + 0xfe333000)
//Bit      31:8,     reserved
//Bit       7:0,     apb_read_data                 unsigned, default = 0, apb bus wr/read
#define EARC_TX_CMDC_MASTER_CTRL                   ((0x0051  << 2) + 0xfe333000)
//Bit        31,     master_cmd_rw                 unsigned, default = 0, 1 write 0 read
//Bit        30,     master_hb_ignore              unsigned, default =0, 0:wait hb issued before pkt cmd, 1: pkt cmd issued immediately
//Bit        29,     master_idle                   unsigned, default = 0, master status
//Bit        28,     master_cmd_soft_rst           unsigned, default= 0,
//Bit     27:24,     hb_cmd_cal_th                 unsigned, default= 0,
//Bit     23:16,     master_cmd_count              unsigned, default = 0, cmd count -1
//Bit      15:8,     master_cmd_id                 unsigned, default = 0,
//Bit       7:0,     master_cmd_address            unsigned, default = 0,
#define EARC_TX_ANA_CTRL0                          ((0x0052  << 2) + 0xfe333000)
//Bit      31:0,      reg_earctx_ana_ctrl0       //unsigned, RW, default = 0,
#define EARC_TX_ANA_CTRL1                          ((0x0053  << 2) + 0xfe333000)
//Bit      31:0,      reg_earctx_ana_ctrl1       //unsigned, RW, default = 0,
#define EARC_TX_ANA_CTRL2                          ((0x0054  << 2) + 0xfe333000)
//Bit      31:0,      reg_earctx_ana_ctrl2       //unsigned, RW, default = 0,
#define EARC_TX_ANA_CTRL3                          ((0x0055  << 2) + 0xfe333000)
//Bit      31:0,      reg_earctx_ana_ctrl3       //unsigned, RW, default = 0,
#define EARC_TX_ANA_CTRL4                          ((0x0056  << 2) + 0xfe333000)
//Bit      31:0,      reg_earctx_ana_ctrl4       //unsigned, RW, default = 0,
#define EARC_TX_ANA_CTRL5                          ((0x0057  << 2) + 0xfe333000)
//Bit      31:0,      reg_earctx_ana_ctrl5       //unsigned, RW, default = 0,
#define EARC_TX_ANA_STAT0                          ((0x0058  << 2) + 0xfe333000)
//Bit      31:0,     ro_ANA_status0              //unsigned, RO, default = 0,
#define EARC_TX_CMDC_STATUS0                       ((0x0059  << 2) + 0xfe333000)
//Bit      31:0,     ro_cmdc_status0              //unsigned, RO, default = 0,
#define EARC_TX_CMDC_STATUS1                       ((0x005a  << 2) + 0xfe333000)
//Bit      31:0,     ro_cmdc_status1              ///unsigned, RO, default = 0,
#define EARC_TX_CMDC_STATUS2                       ((0x005b  << 2) + 0xfe333000)
//Bit      31:0,     ro_cmdc_status2              ///unsigned, RO, default = 0,
#define EARC_TX_CMDC_STATUS3                       ((0x005c  << 2) + 0xfe333000)
//Bit      31:0,     ro_cmdc_status3              ///unsigned, RO, default = 0,
#define EARC_TX_CMDC_STATUS4                       ((0x005d  << 2) + 0xfe333000)
//Bit      31:0,     ro_cmdc_status4              ///unsigned, RO, default = 0,
#define EARC_TX_CMDC_STATUS5                       ((0x005e  << 2) + 0xfe333000)
//Bit      31:0,     ro_cmdc_status5              ///unsigned, RO, default = 0,
#define EARC_TX_CMDC_STATUS6                       ((0x005f  << 2) + 0xfe333000)
//Bit   31   ,     ro_idle2_int            unsigned, RO, default = 0
//Bit   30   ,     ro_idle1_int            unsigned, RO, default = 0
//Bit   29   ,     ro_disc2_int            unsigned, RO, default = 0
//Bit   28   ,     ro_disc1_int            unsigned, RO, default = 0
//Bit   27   ,     ro_earc_int             unsigned, RO, default = 0
//Bit   26   ,     ro_hb_status_int        unsigned, RO, default = 0
//Bit   25   ,     ro_losthb_int           unsigned, RO, default = 0
//Bit   24   ,     ro_timeout_int          unsigned, RO, default = 0
//Bit   23   ,     ro_status_ch_int        unsigned, RO, default = 0
//Bit   22   ,     ro_int_recv_finished    unsigned, RO, default = 0
//Bit   21   ,     ro_int_rdata            unsigned, RO, default = 0
//Bit   20   ,     ro_int_recv_nack        unsigned, RO, default = 0
//Bit   19   ,     ro_int_recv_norsp       unsigned, RO, default = 0
//Bit   18   ,     ro_int_recv_unexp       unsigned, RO, default = 0
//Bit   17   ,     ro_int_recv_data        unsigned, RO, default = 0
//Bit   16   ,     ro_int_recv_ack         unsigned, RO, default = 0
//Bit   15   ,     ro_int_recv_ecc_err     unsigned, RO, default = 0
//Bit   14   ,     ro_int_recv_packet      unsigned, RO, default = 0
//Bit 13:0   ,     reserved
//
// Closing file:  ./earc_tx_cmdc.h
//
//========================================================================
//  AUDIO EARCTX_DMAC - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe333400
// -----------------------------------------------
//
// Reading file:  ./earctx_dmac.h
//
#define EARCTX_DMAC_TOP_CTRL0                      ((0x0000  << 2) + 0xfe333400)
//Bit 31,       reg_top_reg_sync             ,default = 0,Bit 3:0 sync to clk10m,pluse auto clear
//Bit 30,       reg_top_soft_rst             ,default = 0
//Bit 29:26,    reserved
//Bit 25:24,    reg_debug_mux                ,default = 0
//Bit 23:21,    reserved
//Bit 20,       reg_slow_sync_scan_reg       ,default = 0
//Bit 19,       reg_fe_sf_scan_reg           ,default = 0
//Bit 18,       reg_fe_slow_sync_scan_reg    ,default = 0
//Bit 17,       reg_top_sf_scan_reg          ,default = 0
//Bit 16,       reg_top_slow_sync_scan_reg   ,default = 0
//Bit 15:4,     reserved
//Bit 3,        reg_spdif_tx_en_force        ,default = 0,spdif_tx_en force enable
//Bit 2,        reg_spdif_tx_en_force_value  ,default = 0,spdif_tx_en force value
//Bit 1,        reg_dmac_tx_en_force         ,default = 0,dmac_tx_en force enable
//Bit 0,        reg_dmac_tx_en_force_value   ,default = 0,dmac_tx_en force value
#define EARCTX_MUTE_VAL                            ((0x0001  << 2) + 0xfe333400)
//Bit 31:0,     reg_spdif_mute_val     ,default = 0,when biahpase encode mute,the channel value,with reg_mute_l/reg_mute_r
#define EARCTX_SPDIFOUT_GAIN0                      ((0x0002  << 2) + 0xfe333400)
//Bit 31:24,    reg_gain_ch3     ,default = 0,channel 3 gain
//Bit 23:16,    reg_gain_ch2     ,default = 0,channel 2 gain
//Bit 15:8,     reg_gain_ch1     ,default = 0,channel 1 gain
//Bit 7:0,      reg_gain_ch0     ,default = 0,channel 0 gain
#define EARCTX_SPDIFOUT_GAIN1                      ((0x0003  << 2) + 0xfe333400)
//Bit 31:24,    reg_gain_ch7     ,default = 0,channel 7 gain
//Bit 23:16,    reg_gain_ch6     ,default = 0,channel 6 gain
//Bit 15:8,     reg_gain_ch5     ,default = 0,channel 5 gain
//Bit 7:0,      reg_gain_ch4     ,default = 0,channel 4 gain
#define EARCTX_SPDIFOUT_CTRL0                      ((0x0004  << 2) + 0xfe333400)
//Bit 31,     reg_work_start      ,default = 0,biphase work start,pluse
//Bit 30,     reg_work_clr        ,default = 0,biphase work clear,pluse
//Bit 29,     reg_rst_afifo_out_n ,default = 0,afifo out reset
//Bit 28,     reg_rst_afifo_in_n  ,default = 0,afifo in reset
//Bit 27,     reg_hold_for_tdm    ,default = 0,add delay to mathc TDM out when share buff
//Bit 26,     reg_userdata_sel    ,default = 0,user Bit select : 0 from reg_userdata_set 1 from data[29]
//Bit 25,     reg_userdata_set    ,default = 0
//Bit 24,     reg_chdata_sel      ,default = 0,0 :from reg_chstst 1 from data[30]
//Bit 23,     reserved
//Bit 22,     reg_mute_l          ,default = 0,r channel mute ,with reg_mute_val
//Bit 21,     reg_mute_r          ,default = 0,l channel mute ,with reg_mute_val
//Bit 20,     reg_data_sel        ,default = 0,0 data from 31Bit 1 data from 27bit
//Bit 19,     reg_out_msb_first   ,default = 0,0 lsb first 1 msb first
//Bit 18,     reg_valid_sel       ,default = 0,biphase encode valid Bit value sel : 0 from data 1 from reg_valid_set
//Bit 17,     reg_valid_set       ,default = 0,biphase encode valid Bit value
//Bit 16,     reg_mute_hold_init_en  ,default = 0,when c_mute_hold_last_err_corrt valid,clear work enable, initial biphase encode
//Bit 15:12,  reserved
//Bit 0,      reg_parity_mask     ,default = 0,Bit 0 is initial parity value
#define EARCTX_SPDIFOUT_CTRL1                      ((0x0005  << 2) + 0xfe333400)
//Bit 31,     reg_eq_drc_sel      ,default = 0,set 1 select eq_drc data
//Bit 30,     reg_keep_req_ddr_init ,default = 0,reg_keep_req_ddr_init
//Bit 29:28,  reserved
//Bit 27,     reg_gain_en         ,default = 0,gain enable
//Bit 26:24,  reg_frddr_sel       ,default = 0,from ddr selet
//Bit 23:16,  reg_wait_cnt        ,default = 0,wait some time when enable set to 1
//Bit 15:13,  reserved
//Bit 12:8,   reg_frddr_msb       ,default = 0,msb position of data
//Bit 7,      reg_force_start     ,default = 0,set 1 no need ack from frddr to transmit channel status
//Bit 6:4,    reg_frddr_type      ,default = 0
//Bit 3:0,    reserved
#define EARCTX_SPDIFOUT_PREAMB                     ((0x0006  << 2) + 0xfe333400)
//Bit 31,     reg_preamble_Z_set      ,default = 0,user 8'b11101000 1 user 7:0
//Bit 30,     reg_preamble_Y_set      ,default = 0,user 8'b11100100 1 user 15:8
//Bit 29,     reg_preamble_X_set      ,default = 0,user 8'b11100010 1 user 23:16
//Bit 28:24,  reserved
//Bit 23:16,  reg_preamble_X_value    ,default = 0
//Bit 15:8,   reg_preamble_Y_value    ,default = 0
//Bit 7:0,    reg_preamble_Z_value    ,default = 0
#define EARCTX_SPDIFOUT_SWAP                       ((0x0007  << 2) + 0xfe333400)
//Bit 31:16,  reg_hold_cnt        ,default = 0,hold start cnt ,valid when reg_hold_for_tdm set 1
//Bit 15,     reg_init_send_en    ,default = 0,send 01 sequence some times after initial done from frddr set
//Bit 14:0,   reg_init_send_cnt   ,default = 0,send 01 sequence time ,valid when reg_init_send_en set 1
#define EARCTX_ERR_CORRT_CTRL0                     ((0x0008  << 2) + 0xfe333400)
//Bit 31:24,  reserved
//Bit 23,     reg_bch_in_reverse       ,default = 0,bch input data generate in 24it data reverse
//Bit 22,     reg_bch_out_ecc_reverse  ,default = 0,bch output ecc  reverse
//Bit 21,     reg_bch_out_data_reverse ,default = 0,bch output data reverse
//Bit 20,     reg_bch_out_ecc_msb      ,default = 0,bch output ecc position
//Bit 19:17,  reserved
//Bit 16,     reg_ubit_fifo_init_n,default = 0,fifo in  initial
//Bit 15:14,  reserved
//Bit 13:12,  reg_gain_shift      ,default = 0,gain x 1/2/4/8
//Bit 11,     reg_mix_lr          ,default = 0,l/r mix
//Bit 10:8,   reg_spdifout_r_sel  ,default = 0,r channel select
//Bit 7,      reserved
//Bit 6:4,    reg_spdifout_l_sel  ,default = 0,l channel select
//Bit 3:0,    reg_iu_interval     ,default = 0,iu transmit interval
#define EARCTX_ERR_CORRT_CTRL1                     ((0x0009  << 2) + 0xfe333400)
//Bit 31,     reg_ubit_fifo_wr    ,default = 0,iu data write enable,pluse,auto clr in reg.v
//Bit 30:8,   reserved
//Bit 7:0,    reg_ubit_fifo_wdata ,default = 0,iu data
#define EARCTX_ERR_CORRT_CTRL2                     ((0x000a  << 2) + 0xfe333400)
//Bit 31,     reg_mute_clear       ,default = 0,mute clear,pluse,auto clr in reg.v
//Bit 30,     reg_mute_start       ,default = 0,mute start,pluse,auto clr in reg.v
//Bit 29:28,  reserved
//Bit 27:16,  reg_mute_block_num   ,default = 0,mute block number
//Bit 15:8,   reg_mute_ch_Bit      ,default = 0,mute Bit at channel statue which bit
//Bit 7:3,    reserved
//Bit 2,      reg_mute_data_sel    ,default = 0,mute data sel: 0 data 1 reg_mute_data_value
//Bit 1:0,    reg_mute_mode        ,default = 0,0:always mute 1:mute block number and dis mute 2:mute block number and hold bus
#define EARCTX_ERR_CORRT_CTRL3                     ((0x000b  << 2) + 0xfe333400)
//Bit 31:30,  reserved
//Bit 29,     reg_bch_en           ,default = 0,bch generate enable
//Bit 28:24,  reg_bch_msb          ,default = 0,bch data msb position in audio data
//Bit 23:0,   reg_mute_data_value  ,default = 0,mute value,only for audio data part
#define EARCTX_ERR_CORRT_CTRL4                     ((0x000c  << 2) + 0xfe333400)
//Bit 31,    reg_ubit_fifo_lr_swap        ,default = 0,//user Bit lr swap
//Bit 30,    reg_ubit_fifo_lr_same        ,default = 0,//l/r channel use same Bit user bit
//Bit 29:25, reg_data_msb                 ,default = 0,audio data msb postion in input data
//Bit 24,    reg_data_rsv                 ,default = 0,audio data msb/lsb
//Bit 23,    reg_ubit_value               ,default = 0,user Bit value
//Bit 22,    reg_vbit_value               ,default = 0,valid Bit value
//Bit 21,    reg_data_sel                 ,default = 0,//data sel: 0 data 1 reg_mute_data_value
//Bit 20:19, reg_ubit_sel                 ,default = 0,//userBit sel: 0 data 1 reg_value 2 fifo data
//Bit 18,    reg_vbit_sel                 ,default = 0,//validBit sel: 0 data 1 reg_value
//Bit 17,    reg_chst_sel                 ,default = 0,//channel status sel: 0 data 1 reg_value
//Bit 16,    reg_ubit_fifo_less_irq_en    ,default = 0,fifo_less_thd irq enable
//Bit 15:8,  reg_ubit_fifo_start_thd      ,default = 0,start transmit iu after fifo level greater than this value
//Bit 7:0,   reg_ubit_fifo_less_thd       ,default = 0,generate irq,when fifo level less than this value
#define EARCTX_ERR_CORRT_STAT0                     ((0x000d  << 2) + 0xfe333400)
//Bit 31:0,  ro_err_corrt_stat0          ,default = 0,
#define EARCTX_SPDIFOUT_CHSTS0                     ((0x000e  << 2) + 0xfe333400)
//Bit 31:0,  reg_changel_a_status         ,default =0,channel A status[31:0]
#define EARCTX_SPDIFOUT_CHSTS1                     ((0x000f  << 2) + 0xfe333400)
//Bit 31:0,  reg_changel_a_status         ,default =0,channel A status[63:32]
#define EARCTX_SPDIFOUT_CHSTS2                     ((0x0010  << 2) + 0xfe333400)
//Bit 31:0,  reg_changel_a_status         ,default =0,channel A status[95:64]
#define EARCTX_SPDIFOUT_CHSTS3                     ((0x0011  << 2) + 0xfe333400)
//Bit 31:0,  reg_changel_a_status         ,default =0,channel A status[127:96]
#define EARCTX_SPDIFOUT_CHSTS4                     ((0x0012  << 2) + 0xfe333400)
//Bit 31:0,  reg_changel_a_status         ,default =0,channel A status[159:128]
#define EARCTX_SPDIFOUT_CHSTS5                     ((0x0013  << 2) + 0xfe333400)
//Bit 31:0,  reg_changel_a_status         ,default =0,channel A status[191:160]
#define EARCTX_SPDIFOUT_CHSTS6                     ((0x0014  << 2) + 0xfe333400)
//Bit 31:0,  reg_changel_b_status         ,default =0,channel B status[31:0]
#define EARCTX_SPDIFOUT_CHSTS7                     ((0x0015  << 2) + 0xfe333400)
//Bit 31:0,  reg_changel_b_status         ,default =0,channel B status[63:32]
#define EARCTX_SPDIFOUT_CHSTS8                     ((0x0016  << 2) + 0xfe333400)
//Bit 31:0,  reg_changel_b_status         ,default =0,channel B status[95:64]
#define EARCTX_SPDIFOUT_CHSTS9                     ((0x0017  << 2) + 0xfe333400)
//Bit 31:0,  reg_changel_b_status         ,default =0,channel B status[127:96]
#define EARCTX_SPDIFOUT_CHSTSA                     ((0x0018  << 2) + 0xfe333400)
//Bit 31:0,  reg_changel_b_status         ,default =0,channel B status[159:128]
#define EARCTX_SPDIFOUT_CHSTSB                     ((0x0019  << 2) + 0xfe333400)
//Bit 31:0,  reg_changel_b_status         ,default =0,channel B status[191:160]
#define EARCTX_FE_CTRL0                            ((0x001a  << 2) + 0xfe333400)
//Bit 31,    reg_mute_hold_clr      ,default = 0,clear mute hold statues,pluse, auto clr
//Bit 30,    reg_work_enable        ,default = 0,wore enable
//Bit 29,    reg_dmac_invt          ,default = 0,fe out invent
//Bit 28,    reg_hold_time_en       ,default = 0,hold min time enable
//Bit 27,    reg_hold_soft_clr_en   ,default = 0,0 auto clear hold at next valid 1 clear hold with reg_mute_hold_clr
//Bit 26:24, reg_hold_time_tick_sel ,default = 0,hold min time tick select
//Bit 23:0,  reg_hold_min_time      ,default = 0,hold min time
#define EARCTX_FE_STAT0                            ((0x001b  << 2) + 0xfe333400)
//Bit 31:0,  ro_fe_stat0          ,default = 0,
#define EARCTX_SPDIFOUT_STAT                       ((0x001c  << 2) + 0xfe333400)
//Bit 31:0,  ro_spdifout_stat     ,default = 0,
#define EARCTX_SPDIFOUT_CTRL2                      ((0x001d  << 2) + 0xfe333400)
//Bit 31:28,  reserved
//Bit 27:16,  reg_clr_by_init      ,default = 0,reg_clr_by_init
//Bit 15:0 ,  reg_mask             ,default = 0,reg_mask
#define EARCTX_SPDIFOUT_GAIN2                      ((0x001e  << 2) + 0xfe333400)
//Bit 31:0,  spdifout_gain2        ,default = 0,spdifout gain2
#define EARCTX_SPDIFOUT_GAIN3                      ((0x001f  << 2) + 0xfe333400)
//Bit 31:0,  spdifout_gain3        ,default = 0,spdifout gain3
#define EARCTX_SPDIFOUT_GAIN4                      ((0x0020  << 2) + 0xfe333400)
//Bit 31:0,  spdifout_gain4        ,default = 0,spdifout gain4
#define EARCTX_SPDIFOUT_GAIN5                      ((0x0021  << 2) + 0xfe333400)
//Bit 31:0,  spdifout_gain5        ,default = 0,spdifout gain5
//
//
// Closing file:  ./earctx_dmac.h
//
//========================================================================
//  AUDIO EARCTX_TOP  - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe333600
// -----------------------------------------------
//
// Reading file:  ./earctx_top.h
//
#define EARCTX_TOP_CTRL0                           ((0x0000  << 2) + 0xfe333600)
//Bit   31:18,   reserved
//Bit   17:16,   reg_earctx_debug_mux     unsigned, default = 0, debug mux
//Bit   15,      reg_slow_sync_scan_reg   unsigned, default = 0, reg_slow_sync_scan_reg
//Bit   14:12,   reserved
//Bit   11,      reg_hdmi_hpd_invt        unsigned, default = 0, hdmi_hpd invent
//Bit   10,      reg_hdmi_hpd_value       unsigned, default = 0, hdmi_hpd mux = 3,register value
//Bit   9:8,     reg_hdmi_hpd_mux         unsigned, default = 0, hdmi_hpd mux
//Bit   7,       reg_earctx_hd_hpd_invt   unsigned, default = 0, earctx_hd_hdp invent
//Bit   6,       reg_earctx_hd_hpd_value  unsigned, default = 0, earctx_hd_hdp mux = 3,register value
//Bit   5:4,     reg_earctx_hd_hdp_mux    unsigned, default = 0, earctx_hd_hdp mux
//Bit   3:2,     reserved
//Bit   1,       reg_earctx_force_mode_en unsigned, default = 0, force mode enale
//Bit   0,       reg_earctx_force_mode    unsigned, default = 0, force mode value
#define EARCTX_DMAC_INT_MASK                       ((0x0001  << 2) + 0xfe333600)
//Bit   31:6,  reserved
//Bit   5:0,   reg_dmac_int_mask             unsigned, default = 0, dmac int mask
#define EARCTX_DMAC_INT_PENDING                    ((0x0002  << 2) + 0xfe333600)
//Bit   31:6,  reserved
//Bit   5:0,   reg_dmac_int_mask             unsigned, default = 0, dmac int pending,read only
#define EARCTX_CMDC_INT_MASK                       ((0x0003  << 2) + 0xfe333600)
//Bit   31:18,  reserved
//Bit   17:0,   reg_cmdc_int_mask             unsigned, default = 0, cmdc int mask
#define EARCTX_CMDC_INT_PENDING                    ((0x0004  << 2) + 0xfe333600)
//Bit   31:18,  reserved
//Bit   17:0,   reg_cmdc_int_mask             unsigned, default = 0, cmdc int pending,read only
#define EARCTX_ANA_CTRL0                           ((0x0005  << 2) + 0xfe333600)
//Bit   31:0,   reg_earctx_ana_ctrl0          unsigned, default = 0
#define EARCTX_ANA_CTRL1                           ((0x0006  << 2) + 0xfe333600)
//Bit   31:0,   reg_earctx_ana_ctrl0          unsigned, default = 0
#define EARCTX_ANA_CTRL2                           ((0x0007  << 2) + 0xfe333600)
//Bit   31:0,   reg_earctx_ana_ctrl0          unsigned, default = 0
#define EARCTX_ANA_STAT0                           ((0x0008  << 2) + 0xfe333600)
//Bit   31:0,   reg_earctx_ana_ctrl0          unsigned, default = 0
//
// Closing file:  ./earctx_top.h
//
//========================================================================
//  AUDIO EARCRX_CMDC - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe333800
// -----------------------------------------------
//
// Reading file:  ./earc_rx_cmdc.h
//
#define EARC_RX_CMDC_TOP_CTRL0                     ((0x0000  << 2) + 0xfe333800)
//Bit   31   ,     idle2_int                 unsigned, default = 0, 1: enable
//Bit   30   ,     idle1_int     	         unsigned, default = 0, 1: enable
//Bit   29   ,     disc2_int     	         unsigned, default = 0, 1: enable
//Bit   28   ,     disc1_int     	         unsigned, default = 0, 1: enable
//Bit   27   ,     earc_int      	         unsigned, default = 0, 1: enable
//Bit   26   ,     hb_status_int 	         unsigned, default = 0, 1: enable
//Bit   25   ,     losthb_int    	         unsigned, default = 0, 1: enable
//Bit   24   ,     timeout_int   	         unsigned, default = 0, 1: enable
//Bit   23   ,     status_ch_int 	         unsigned, default = 0, 1: enable
//Bit   22   ,     int_rec_invalid_id        unsigned, default = 0, 1: enable
//Bit   21   ,     int_rec_invalid_offset    unsigned, default = 0, 1: enable
//Bit   20   ,     int_rec_unexp             unsigned, default = 0, 1: enable
//Bit   19   ,     int_rec_ecc_err           unsigned, default = 0, 1: enable
//Bit   18   ,     int_rec_parity_err        unsigned, default = 0, 1: enable
//Bit   17   ,     int_recv_packet           unsigned, default = 0, 1: enable
//Bit   16   ,     int_rec_time_out          unsigned, default = 0, 1: enable
//Bit   15   ,     cmdc_debug0               unsigned, default = 0, 1: enable
//Bit   14   ,     cmdc_debug1               unsigned, default = 0, 1: enable
//Bit   13   ,     cmdc_debug2               unsigned, default = 0, 1: enable
//Bit   12:7 ,     reserved
//Bit    6   ,     mute_select               unsigned, default = 0, 1: use bit5, 0: earc off
//Bit    5   ,     mute_contrl               unsigned, default = 0, value of mannul mute control
//Bit    4:0 ,     reserved
#define EARC_RX_CMDC_TOP_CTRL1                     ((0x0001  << 2) + 0xfe333800)
//Bit      31:13,  reserved
//Bit      12:8,   reg_scan_reg             unsigned, RW, default = 0,
//Bit      7:5,    reserved
//Bit      4:0,    reg_top_soft_rst         unsigned, RW, default = 0,
#define EARC_RX_CMDC_TOP_CTRL2                     ((0x0002  << 2) + 0xfe333800)
//Bit      31,         reset_idle2_int                unsigned, default =0
//Bit      30,         reset_idle1_int                unsigned, default =0
//Bit      29,         reset_disc2_int                unsigned, default =0
//Bit      28,         reset_disc1_int                unsigned, default =0
//Bit      27,         reset_earc_int                 unsigned, default =0
//Bit      26,         reset_hb_status_int            unsigned, default =0
//Bit      25,         reset_losthb_int               unsigned, default =0
//Bit      24,         reset_timeout_int              unsigned, default =0
//Bit      23,         reset_status_ch_int            unsigned, default =0
//Bit      22,         reset_int_rec_invalid_id       unsigned, default =0
//Bit      21,         reset_int_rec_invalid_offset   unsigned, default =0
//Bit      20,         reset_int_rec_unexp            unsigned, default =0
//Bit      19,         reset_int_rec_ecc_err          unsigned, default =0
//Bit      18,         reset_int_rec_parity_err       unsigned, default =0
//Bit      17,         reset_int_recv_packet          unsigned, default =0
//Bit      16,         reset_int_rec_time_out         unsigned, default =0
//Bit      15:0,       reserved
#define EARC_RX_CMDC_TIMER_CTRL0                   ((0x0003  << 2) + 0xfe333800)
//Bit      31:0,   ro_cmdc_status0         unsigned, RO, default = 0,
#define EARC_RX_CMDC_TIMER_CTRL1                   ((0x0004  << 2) + 0xfe333800)
//Bit      31:0,   ro_cmdc_status0         unsigned, RO, default = 0,
#define EARC_RX_CMDC_TIMER_CTRL2                   ((0x0005  << 2) + 0xfe333800)
//Bit      31:0,    ro_cmdc_status0         unsigned, RO, default = 0,
#define EARC_RX_CMDC_TIMER_CTRL3                   ((0x0006  << 2) + 0xfe333800)
//Bit      31:0,    ro_cmdc_status0         unsigned, RO, default = 0,
#define EARC_RX_CMDC_VSM_CTRL0                     ((0x0007  << 2) + 0xfe333800)
//Bit      31,      sw_state_update         unsigned, default = 0,  XX
//Bit      30:28,   sw_state 		        unsigned, default = 0,  XX
//Bit      27,      arc_initiated 	        unsigned, default = 0,  XX
//Bit      26,      arc_terminated 	        unsigned, default = 0,  XX
//Bit      25,      arc_enable 		        unsigned, default = 0,  XX
//Bit      24,      man_hpd 		        unsigned, default = 0,  XX
//Bit      23:22,   hpd_sel 		        unsigned, default = 0,  XX
//Bit      21:20,   hpd_sel_earc            unsigned, default = 0,  XX
//Bit      19,      comma_cnt_rst           unsigned, default = 0,  XX
//Bit      18,      timeout_status_rst      unsigned, default = 0,  XX
//Bit      17,      losthb_status_rst       unsigned, default = 0,  XX
//Bit      16,      force_rst               unsigned, default = 0,  XX
//Bit      15,      auto_state              unsigned, default = 0,  XX
//Bit      14,      cmdc_state_en 	        unsigned, default = 0,  XX
//Bit    13:0,      reserved
#define EARC_RX_CMDC_VSM_CTRL1                     ((0x0008  << 2) + 0xfe333800)
//Bit    31:12,      max_count_th          unsigned, default = 0,  idle done timing
//Bit     11:8,      reserved
//Bit        7,      reg_soft_rst          unsigned, default = 0,  idle done timing
//Bit      6:4,      time_sel              unsigned, default = 0,  idle done timing
//Bit      3:2,      soft_rst_sel          unsigned, default = 0,  idle done timing
//Bit      1:0,      enable_ctrl           unsigned, default = 0,  idle done timing
#define EARC_RX_CMDC_VSM_CTRL2                     ((0x0009  << 2) + 0xfe333800)
//Bit    31:12,      max_count_th          unsigned, default = 0,  comma off done timing
//Bit     11:8,      reserved
//Bit        7,      reg_soft_rst          unsigned, default = 0,  comma off done timing
//Bit      6:4,      time_sel              unsigned, default = 0,  comma off done timing
//Bit      3:2,      soft_rst_sel          unsigned, default = 0,  comma off done timing
//Bit      1:0,      enable_ctrl           unsigned, default = 0,  comma off done timing
#define EARC_RX_CMDC_VSM_CTRL3                     ((0x000a  << 2) + 0xfe333800)
//Bit    31:12,      max_count_th          unsigned, default = 0,  earc_time out timing
//Bit     11:8,      reserved
//Bit        7,      reg_soft_rst          unsigned, default = 0,  earc_time out timing
//Bit      6:4,      time_sel              unsigned, default = 0,  earc_time out timing
//Bit      3:2,      soft_rst_sel          unsigned, default = 0,  earc_time out timing
//Bit      1:0,      enable_ctrl           unsigned, default = 0,  earc_time out timing
#define EARC_RX_CMDC_VSM_CTRL4                     ((0x000b  << 2) + 0xfe333800)
//Bit    31:12,      max_count_th          unsigned, default = 0,  heartbeat lost timing
//Bit     11:8,      reserved
//Bit        7,      reg_soft_rst          unsigned, default = 0,  heartbeat lost timing
//Bit      6:4,      time_sel              unsigned, default = 0,  heartbeat lost timing
//Bit      3:2,      soft_rst_sel          unsigned, default = 0,  heartbeat lost timing
//Bit      1:0,      enable_ctrl           unsigned, default = 0,  heartbeat lost timing
#define EARC_RX_CMDC_VSM_CTRL5                     ((0x000c  << 2) + 0xfe333800)
//Bit    31:16,      reserved
//Bit     15:8,      status_soft           unsigned, default = 0,  in earc heartbeat det timing
//Bit        7,      reg_soft_rst          unsigned, default = 0,  in earc heartbeat det timing
//Bit        6,      status_rst            unsigned, default = 0,  in earc heartbeat det timing
//Bit      5:4,      reserved
//Bit      3:2,      soft_rst_sel          unsigned, default = 0,  in earc heartbeat det timing
//Bit      1:0,      enable_ctrl           unsigned, default = 0,  in earc heartbeat det timing
#define EARC_RX_CMDC_VSM_CTRL6                     ((0x000d  << 2) + 0xfe333800)
//Bit    31:17,      reserved
//Bit        16,     cntl_hpd_sel          unsigned, default = 0,  in earc heartbeat det timing
//Bit      15:4,     cntl_hpd_valid_width  unsigned, default = 0,  in earc heartbeat det timing
//Bit      3:0,      cntl_hpd_glitch_width unsigned, default = 0,  in earc heartbeat det timing
#define EARC_RX_CMDC_VSM_CTRL7                     ((0x000e  << 2) + 0xfe333800)
//Bit      31:0,     vsm_ctrl7             unsigned,  default = 0,
#define EARC_RX_CMDC_VSM_CTRL8                     ((0x000f  << 2) + 0xfe333800)
//Bit      31:0,     vsm_ctrl8             unsigned,  default = 0,
#define EARC_RX_CMDC_VSM_CTRL9                     ((0x0010  << 2) + 0xfe333800)
//Bit      31:0,     vsm_ctrl9             unsigned,  default = 0,
#define EARC_RX_CMDC_SENDER_CTRL0                  ((0x0011  << 2) + 0xfe333800)
//Bit      31:2,     reserved
//Bit      1,        hb_chg_conf_auto          unsigned,  default = 0,
//Bit      0,        hb_chg_auto               unsigned,  default = 1,
#define EARC_RX_CMDC_PACKET_CTRL0                  ((0x0012  << 2) + 0xfe333800)
//Bit        31,      packet_mode_enable          unsigned, default = 0,  packet control
//Bit        30,      free_enable                 unsigned, default = 0,  packet control
//Bit        29,      soft_rst_man                unsigned, default = 0,  packet control
//Bit     28:24,      ready_th                    unsigned, default = 0,  packet control
//Bit     23:20,      reserved
//Bit      19:8,      send_pre_th                 unsigned, default = 0,  packet control
//Bit       7:5,      reserved
//Bit         4,      sw_state_update             unsigned, default = 0,  packet control
//Bit       3:0,      sw_state                    unsigned, default = 0,  packet control
#define EARC_RX_CMDC_PACKET_CTRL1                  ((0x0013  << 2) + 0xfe333800)
//Bit        31,      ecc_endian                  unsigned, default = 0,  send
//Bit        30,      pre_reg_st                  unsigned, default = 0,  send
//Bit     29:21,      reserved
//Bit     20:16,      post_th                     unsigned, default = 0,  send
//Bit     15:14,      reserved
//Bit      13:8,      pre_th                      unsigned, default = 0,
//Bit       7:0,      post_flag                   unsigned, default = 0,
#define EARC_RX_CMDC_PACKET_CTRL2                  ((0x0014  << 2) + 0xfe333800)
//Bit      31:0,      pre_flag                    unsigned, default = 0,  X
#define EARC_RX_CMDC_PACKET_CTRL3                  ((0x0015  << 2) + 0xfe333800)
//Bit      31,       cmdc_en                      unsigned, default = 0,  XX
//Bit      30,       cmdc_parity_mask             unsigned, default = 0,  XX
//Bit      29,       imeout_en                    unsigned, default = 0,  XX
//Bit      28,       ecc_check_en                 unsigned, default = 0,  XX
//Bit      27,       rev_debug_en                 unsigned, default = 0,  XX
//Bit     26:16,     reserved
//Bit      15:0,     timeout_th                   unsigned, default = 0,  X
#define EARC_RX_CMDC_PACKET_CTRL4                  ((0x0016  << 2) + 0xfe333800)
//Bit      31,       ack_ignore                   unsigned, default = 0,  XX
//Bit      30,       cmdc_tail_check_mask         unsigned, default = 0,  XX
//Bit     29:20,     reserved
//Bit      19:0,     cmdc_packet_head             unsigned, default = 0,  XX
#define EARC_RX_CMDC_PACKET_CTRL5                  ((0x0017  << 2) + 0xfe333800)
//Bit     31:24,     rev_debug_mask               unsigned, default = 0,  XX
//Bit     23:20,     reserved
//Bit      19:0,     cmdc_packet_head_mask        unsigned, default = 0,  XX
#define EARC_RX_CMDC_PACKET_CTRL6                  ((0x0018  << 2) + 0xfe333800)
//Bit     31:20,     recv_pre_threshold          unsigned, default = 0,  packet control
//Bit      19:9,     reserved
//Bit         8,     rec_packet_d                 unsigned, default = 0,  XX
//Bit         7,     rec_parity_err_cnt		      unsigned, default = 0,  XX
//Bit         6,     rec_ecc_err_cnt		      unsigned, default = 0,  XX
//Bit         5,     rec_unexp_cnt			      unsigned, default = 0,  XX
//Bit         4,     rec_invalid_offset_cnt	      unsigned, default = 0,  XX
//Bit         3,     rec_invalid_id_cnt		      unsigned, default = 0,  XX
//Bit         2,     rec_timeout_cnt		      unsigned, default = 0,  XX
//Bit         1,     rec_w_cnt				      unsigned, default = 0,  XX
//Bit         0,     rec_r_cnt				      unsigned, default = 0,  X
#define EARC_RX_CMDC_BIPHASE_CTRL0                 ((0x0019  << 2) + 0xfe333800)
//Bit     31:24,     reg_tns                       unsigned, default = 7, xx
//Bit     23:16,     delay_th                      unsigned, default = 0, xx
//Bit     15:10,     reserved
//Bit         9,     send_ack_en                   unsigned, default = 0,  xx
//Bit         8,     sq_val_en                     unsigned, default = 0,  XX
//Bit         7,     biphase_send_soft_rst         unsigned, default = 0,  XX
//Bit         6,     comma_soft_rst                unsigned, default = 0,  XX
//Bit         5,     fifo_rst                      unsigned, default = 0,  XX
//Bit         4,     receiver_no_sender            unsigned, default = 0,  XX
//Bit         3,     sender_free                   unsigned, default = 0,  XX
//Bit         2,     receiver_send                 unsigned, default = 0,  XX
//Bit         1,     receiver_earc                 unsigned, default = 0,  XX
//Bit         0,     receiver_free                 unsigned, default = 0,  XX
#define EARC_RX_CMDC_BIPHASE_CTRL1                 ((0x001a  << 2) + 0xfe333800)
//Bit     31:16,     reserved
//Bit        15,     ack_val_en                      unsigned, default = 0,  send
//Bit      14:8,     reserved
//Bit       7:0,     width                        unsigned, default = 0,  send
#define EARC_RX_CMDC_BIPHASE_CTRL2                 ((0x001b  << 2) + 0xfe333800)
//Bit      31,        ack_val_en                  unsigned, default = 0,  send
//Bit      30:20,     reserved
//Bit       19:16,    ack_rate                   unsigned, default = 0,  comma send
//Bit       15:0,     width                         unsigned, default = 0,  comma sen
#define EARC_RX_CMDC_BIPHASE_CTRL3                 ((0x001c  << 2) + 0xfe333800)
//Bit      31:0,     biphase_ctrl3                 unsigned, default = 0,
#define EARC_RX_CMDC_DEVICE_ID_CTRL                ((0x001d  << 2) + 0xfe333800)
//Bit        31,     apb_write                     unsigned, default = 0, apb bus wr/read
//Bit        30,     apb_read                      unsigned, default = 0, apb bus wr/read
//Bit        29,     apb_w_r_done                  unsigned, default = 0, apb bus wr/read
//Bit        28,     apb_w_r_reset                 unsigned, default = 0, apb bus wr/read
//Bit     27:16,     reserved
//Bit      15:8,     apb_w_r_id                    unsigned, default = 0, apb bus wr/read
//Bit       7:0,     apb_w_r_start_addr            unsigned, default = 0, apb bus wr/read
#define EARC_RX_CMDC_DEVICE_WDATA                  ((0x001e  << 2) + 0xfe333800)
//Bit      31:8,     reserved
//Bit       7:0,     apb_write_data                unsigned, default = 0, apb bus wr/rea
#define EARC_RX_CMDC_DEVICE_RDATA                  ((0x001f  << 2) + 0xfe333800)
//Bit      31:8,     reserved
//Bit       7:0,     apb_read_data                 unsigned, default = 0, apb bus wr/rea
#define EARC_RX_ANA_CTRL0                          ((0x0020  << 2) + 0xfe333800)
//Bit      31:0,     ana_ctrl0                     unsigned, default = 0,
#define EARC_RX_ANA_CTRL1                          ((0x0021  << 2) + 0xfe333800)
//Bit      31:0,     ana_ctrl1                     unsigned, default = 0,
#define EARC_RX_ANA_CTRL2                          ((0x0022  << 2) + 0xfe333800)
//Bit      31:0,     ana_ctrl2                     unsigned, default = 0,
#define EARC_RX_ANA_CTRL3                          ((0x0023  << 2) + 0xfe333800)
//Bit      31:0,     ana_ctrl3                     unsigned, default = 0,
#define EARC_RX_ANA_CTRL4                          ((0x0024  << 2) + 0xfe333800)
//Bit      31:0,     ana_ctrl4                     unsigned, default = 0,
#define EARC_RX_ANA_CTRL5                          ((0x0025  << 2) + 0xfe333800)
//Bit      31:0,     ana_ctrl5                     unsigned, default = 0,
#define EARC_RX_ANA_STAT0                          ((0x0026  << 2) + 0xfe333800)
//Bit      31:0,     ro_ANA_status0              unsigned, RO, default = 0,
#define EARC_RX_CMDC_STATUS0                       ((0x0027  << 2) + 0xfe333800)
//Bit      31:0,     ro_cmdc_status0              unsigned, RO, default = 0,
#define EARC_RX_CMDC_STATUS1                       ((0x0028  << 2) + 0xfe333800)
//Bit      31:0,     ro_cmdc_status1              unsigned, RO, default = 0,
#define EARC_RX_CMDC_STATUS2                       ((0x0029  << 2) + 0xfe333800)
//Bit      31:0,     ro_cmdc_status2              unsigned, RO, default = 0,
#define EARC_RX_CMDC_STATUS3                       ((0x002a  << 2) + 0xfe333800)
//Bit      31:0,     ro_cmdc_status3              unsigned, RO, default = 0,
#define EARC_RX_CMDC_STATUS4                       ((0x002b  << 2) + 0xfe333800)
//Bit      31:0,     ro_cmdc_status4              unsigned, RO, default = 0,
#define EARC_RX_CMDC_STATUS5                       ((0x002c  << 2) + 0xfe333800)
//Bit      31:0,     ro_cmdc_status5              unsigned, RO, default = 0,
#define EARC_RX_CMDC_STATUS6                       ((0x002d  << 2) + 0xfe333800)
//Bit      31,         ro_idle2_int                unsigned, RO, default =0
//Bit      30,         ro_idle1_int                unsigned, RO, default =0
//Bit      29,         ro_disc2_int                unsigned, RO, default =0
//Bit      28,         ro_disc1_int                unsigned, RO, default =0
//Bit      27,         ro_earc_int                 unsigned, RO, default =0
//Bit      26,         ro_hb_status_int            unsigned, RO, default =0
//Bit      25,         ro_losthb_int               unsigned, RO, default =0
//Bit      24,         ro_timeout_int              unsigned, RO, default =0
//Bit      23,         ro_status_ch_int            unsigned, RO, default =0
//Bit      22,         ro_int_rec_invalid_id       unsigned, RO, default =0
//Bit      21,         ro_int_rec_invalid_offset   unsigned, RO, default =0
//Bit      20,         ro_int_rec_unexp            unsigned, RO, default =0
//Bit      19,         ro_int_rec_ecc_err          unsigned, RO, default =0
//Bit      18,         ro_int_rec_parity_err       unsigned, RO, default =0
//Bit      17,         ro_int_recv_packet          unsigned, RO, default =0
//Bit      16,         ro_int_rec_time_out         unsigned, RO, default =0
//Bit      15:0,       reserved
//
// Closing file:  ./earc_rx_cmdc.h
//
//========================================================================
//  AUDIO EARCRX_DMAC - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe333c00
// -----------------------------------------------
//
// Reading file:  ./earcrx_dmac.h
//
#define EARCRX_DMAC_TOP_CTRL0                      ((0x0000  << 2) + 0xfe333c00)
//Bit   31,     reg_top_work_en               unsigned, default = 0, top work enable
//Bit   30,     reg_top_soft_rst              unsigned, default = 0, top soft reset
//Bit   29:23,  reserved
//Bit   22:20,  reg_dmac_debug_sel            unsigned, default = 0, dmac debug select
//Bit   19:18,  reserved
//Bit   17,     reg_dmac_valid_sel            unsigned, default = 0, dmac sync without clk
//Bit   16,     reg_dmac_without_clk          unsigned, default = 0, dmac sync without clk
//Bit   15,     reg_sf_sync_scan_reg          unsigned, default = 0, rst_n soft reset scan reg
//Bit   14,     reserved
//Bit   13,     reg_slow_sync_scan_reg        unsigned, default = 0, rst_n sync clk_slow scan reg
//Bit   12,     reg_a_sync_scan_reg           unsigned, default = 0, rst_n sync clk_analog scan reg
//Bit   11,     reg_slow_auto_gate            unsigned, default = 0, clk_slow auto gate
//Bit   10,     reg_a_auto_gate               unsigned, default = 0, clk_analog auto gate
//Bit   9:0,    reserved
#define EARCRX_DMAC_SYNC_CTRL0                     ((0x0001  << 2) + 0xfe333c00)
//Bit   31,     reg_work_enable               unsigned, default = 0, dmac sync module work enable
//Bit   30,     reg_rst_afifo_out_n           unsigned, default = 0, afifo out reset
//Bit   29,     reg_rst_afifo_in_n            unsigned, default = 0, afifo in reset
//Bit   28:17,  reserved
//Bit   16,     reg_ana_buf_data_sel_en       unsigned, default = 0, data from analog delay enable
//Bit   15,     reserved
//Bit   14:12,  reg_ana_buf_data_sel          unsigned, default = 0, delay cycles
//Bit   11,     reserved
//Bit   10:8,   reg_ana_clr_cnt               unsigned, default = 0, valid last how many 0 will clear
//Bit   7,      reserved
//Bit   6:4,    reg_ana_set_cnt               unsigned, default = 0, valid last how may 1 will set
//Bit   3:1,    reserved
//Bit   0,      reg_dmacin_phase              unsigned, default = 0, dmac data invert
#define EARCRX_DMAC_SYNC_STAT0                     ((0x0002  << 2) + 0xfe333c00)
//Bit   31:0,   reg_dmac_sync_stat0           unsigned, default = 0
#define EARCRX_SPDIFIN_SAMPLE_CTRL0                ((0x0003  << 2) + 0xfe333c00)
//Bit   31,     reg_work_enable               unsigned, default = 0, spdif in sample enable
//Bit   30,     reg_spdifin_phase             unsigned, default = 0, spdif in invert
//Bit   29,     reg_debug_en                  unsigned, default = 0, debug single enable
//Bit   28,     reg_width_sel                 unsigned, default = 0, 0 detect by max_width 1 detect by min_width
//Bit   27:23,  reserved
//Bit   22:20,  reg_sample_mode               unsigned, default = 0, value
//Bit   19:0,   reg_base_timer                unsigned, default = 0, base timer to detect sample mode change
#define EARCRX_SPDIFIN_SAMPLE_CTRL1                ((0x0004  << 2) + 0xfe333c00)
//Bit   31,     reg_force_sample_mode         unsigned, default = 0, 0 auto detect sample mode 1 force a fixed sample mode with reg_sample_mode
//Bit   30,     reserved
//Bit   29:20,  reg_sample_mode0_timer_th     unsigned, default = 0, mode0 threathold time
//Bit   19:10,  reg_sample_mode1_timer_th     unsigned, default = 0, mode1 threathold time
//Bit   9:0,    reg_sample_mode2_timer_th     unsigned, default = 0, mode2 threathold time
#define EARCRX_SPDIFIN_SAMPLE_CTRL2                ((0x0005  << 2) + 0xfe333c00)
//Bit   31:30,  reserved
//Bit   29:20,  reg_sample_mode3_timer_th     unsigned, default = 0, mode3 threathold time
//Bit   19:10,  reg_sample_mode4_timer_th     unsigned, default = 0, mode4 threathold time
//Bit   9:0,    reg_sample_mode5_timer_th     unsigned, default = 0, mode5 threathold time
#define EARCRX_SPDIFIN_SAMPLE_CTRL3                ((0x0006  << 2) + 0xfe333c00)
//Bit   31:24,  reg_sample_mode0_timer        unsigned, default = 0, mode0 sample time
//Bit   23:16,  reg_sample_mode1_timer        unsigned, default = 0, mode1 sample time
//Bit   15:8,   reg_sample_mode2_timer        unsigned, default = 0, mode2 sample time
//Bit   7:0,    reg_sample_mode3_timer        unsigned, default = 0, mode3 sample time
#define EARCRX_SPDIFIN_SAMPLE_CTRL4                ((0x0007  << 2) + 0xfe333c00)
//Bit   31:24,  reg_sample_mode4_timer        unsigned, default = 0, mode4 sample time
//Bit   23:16,  reg_sample_mode5_timer        unsigned, default = 0, mode5 sample time
//Bit   15:8,   reg_sample_mode6_timer        unsigned, default = 0, mode6 sample time
//Bit   7:0,    reserved
#define EARCRX_SPDIFIN_SAMPLE_CTRL5                ((0x0008  << 2) + 0xfe333c00)
//Bit   31,     reg_sq_filt_en                unsigned, default = 0, dmac_sqout filter enable
//Bit   30,     reg_spdif_sqout_phase         unsigned, default = 0, dmac_sqout invert
//Bit   29:27,  reg_filter_tick_sel           unsigned, default = 0, dmac_sqout filter tick select
//Bit   26:24,  reg_filter_sel                unsigned, default = 0, dmac_sqout filter select
//Bit   23:20,  reserved
//Bit   19:0,   reg_sq_filt_timer             unsigned, default = 0, dmac_sqout filter tick
#define EARCRX_SPDIFIN_SAMPLE_STAT0                ((0x0009  << 2) + 0xfe333c00)
//Bit   31:0,   reg_spdifin_sample_stat0      unsigned, default = 0
#define EARCRX_SPDIFIN_SAMPLE_STAT1                ((0x000a  << 2) + 0xfe333c00)
//Bit   31:0,   reg_spdifin_sample_stat1      unsigned, default = 0
#define EARCRX_SPDIFIN_MUTE_VAL                    ((0x000b  << 2) + 0xfe333c00)
//Bit   31:0,   reg_spdifin_mute_val          unsigned, default = 0, spdif in mute value
#define EARCRX_SPDIFIN_CTRL0                       ((0x000c  << 2) + 0xfe333c00)
//Bit   31,     reg_work_enable               unsigned, default = 0, spdifin wore enable
//Bit   30,     reg_chnum_sel                 unsigned, default = 0, 0 ch_num = 0~383  1 ch_num = 0~1
//Bit   29:28,  reserved
//Bit   27,     reg_debug_en                  unsigned, default = 0, debug enable
//Bit   26,     reg_chnum_en                  unsigned, default = 0, star add ch_cnt to ch_num
//Bit   25,     reg_findpapb_en               unsigned, default = 0, papb check enalbe
//Bit   24,     reg_nonpcm2pcm_en             unsigned, default = 0, nonpcm2pcm_th enable
//Bit   23:12,  reg_nonpcm2pcm_th             unsigned, default = 0, if long time didn't detect PaPb again,will generate irq
//Bit   11:8,   reg_ch_status_sel             unsigned, default = 0, for stat1/stat2
//Bit   7,      reg_mute_l                    unsigned, default = 0, mute channel l
//Bit   6,      reg_mute_r                    unsigned, default = 0, mute channel r
//Bit   5:4,    reserved
//Bit   3,      reg_check_valid               unsigned, default = 0, valid check enable
//Bit   2,      reg_check_parity              unsigned, default = 0, parity check enable
//Bit   1,      reg_invert_data               unsigned, default = 0, spdif data invert
//Bit   0,      reserved
#define EARCRX_SPDIFIN_CTRL1                       ((0x000d  << 2) + 0xfe333c00)
//Bit   31:24,  reserved
//Bit   31:24,  reg_clr_internal_sts          unsigned, default = 0, internal irq status clear
//Bit   23:12,  reg_mute_block_check_thd      unsigned, default = 0, mute block check time thd
//Bit   11:9,   reg_mute_block_check_tick_sel unsigned, default = 0, mute block check tick sel
//Bit   8,      reg_papb_ext_sync             unsigned, default = 0, ext 0 sync check for papb
//Bit   7:0,    reg_papb_ext_mask             unsigned, default = 0, sync 0 mask
#define EARCRX_SPDIFIN_CTRL2                       ((0x000e  << 2) + 0xfe333c00)
//Bit   31:24,  reg_mute_bit                   unsigned, default = 0, mute bit in channel st
//Bit   23:19,  reg_mute_block_num             unsigned, default = 0, mute min block number to declare
//Bit   18,     reg_mute_lr_ch_sel             unsigned, default = 0, mute bit in channel st L or R
//Bit   17,     reg_mute_block_check_en        unsigned, default = 0, mute block number check enable
//Bit   16,     reg_earc_cps_chst_clr_en       unsigned, default = 0, auto clear compress mode when channel status not compress
//Bit   15,     reg_earc_cps_nonpcm2pcm_clr_en unsigned, default = 0, auto clear compress mode when nonpcm2pcm
//Bit   14,     reg_earc_auto                  unsigned, default = 0, auto change earc/arc
//Bit   13,     reg_earcin_papb_lr             unsigned, default = 0, user l or r channle status to check papb
//Bit   12,     reg_earcin_check_papb          unsigned, default = 0, 0:data valid after 1 block;1: in 1st block if exit papb ,data valid after papb
//Bit   11,     reg_earcin_start_papb          unsigned, default = 0, start write toddr 1:from papb check,0 from preamble Z,valid when reg_earcin_check_papb set
//Bit   10,     reg_formatchange_auto_rst      unsigned, default = 0, auto reset will detect format change
//Bit   9,      reg_earcin_cpsb_pcpd_sel      unsigned, default = 0, compress B pcpd select : 1:next 4th subframe data 0:next sub frame data
//Bit   8:4,    reg_earc_papb_msb             unsigned, default = 0, papb msb position in data
//Bit   3,      reg_earcin_spdif_force        unsigned, default = 0, when in arc mode,spdif on force enable
//Bit   2,      reg_earcin_spdif_force_set    unsigned, default = 0, force value
//Bit   1,      reg_earcin_mode_force         unsigned, default = 0, earc mode force enable
//Bit   0,      reg_earcin_mode_force_set     unsigned, default = 0, force value
#define EARCRX_SPDIFIN_CTRL3                       ((0x000f  << 2) + 0xfe333c00)
//Bit   31:16,  reg_earc_pa_value             unsigned, default = 0, earc mode pa value
//Bit   15:0,   reg_earc_pb_value             unsigned, default = 0, earc mode pb value
#define EARCRX_SPDIFIN_STAT0                       ((0x0010  << 2) + 0xfe333c00)
//Bit   31:0,   reg_spdifin_stat0             unsigned, default = 0
#define EARCRX_SPDIFIN_STAT1                       ((0x0011  << 2) + 0xfe333c00)
//Bit   31:0,   reg_spdifin_stat1             unsigned, default = 0
#define EARCRX_SPDIFIN_STAT2                       ((0x0012  << 2) + 0xfe333c00)
//Bit   31:0,   reg_spdifin_stat2             unsigned, default = 0
#define EARCRX_DMAC_UBIT_CTRL0                     ((0x0013  << 2) + 0xfe333c00)
//Bit   31,     reg_work_enable               unsigned, default = 0, dmac user bit decode enable
//Bit   30:24,  reg_iu_sync                   unsigned, default = 0, iu sync value
//Bit   23:16,  reg_fifo_thd                  unsigned, default = 0, generate irq when fifo level pass some threshold
//Bit   15,     reg_max_dist_en               unsigned, default = 0, max distance between IUs to set lost
//Bit   14,     reg_iu_sync_en                unsigned, default = 0, iu sync code enable 0 : all iu to fifo 1 only sync iu packet to fifo
//Bit   13:12,  reg_user_lr                   unsigned, default = 0, 00 off 01 use l channel userbit 10 use r channel userbit 11 user lr channel userbit
//Bit   11:8,   reg_max_dist                  unsigned, default = 0, max distance between IUs value
//Bit   7,      reg_fifo_thd_en               unsigned, default = 0, fifo_thd irq enable
//Bit   6,      reg_fifo_lost_init_en         unsigned, default = 0, when lost,initial fifo
//Bit   5,      reg_fifo_init                 unsigned, default = 0, fifo initial
//Bit   4:0,    reg_data_bit                  unsigned, default = 0, user bit position in data
#define EARCRX_IU_RDATA                            ((0x0014  << 2) + 0xfe333c00)
//Bit   31:8,   reserved
//Bit   7:0,    i_iu_rdata                    unsigned, default = 0, iu data,read only
#define EARCRX_DMAC_UBIT_STAT0                     ((0x0015  << 2) + 0xfe333c00)
//Bit   31:0,   reg_dmac_ubit_stat0           unsigned, default = 0
#define EARCRX_ERR_CORRECT_CTRL0                   ((0x0016  << 2) + 0xfe333c00)
//Bit   31,     reg_work_enable               unsigned, default = 0, err correct work enable
//Bit   30,     reserved
//Bit   29,     reg_rst_afifo_out_n           unsigned, default = 0, reset afifo out side
//Bit   28,     reg_rst_afifo_in_n            unsigned, default = 0, reset afifo in side
//Bit   27,     reg_lr_check                  unsigned, default = 0, enable lr_check
//Bit   26:7,   reserved
//Bit   6,      reg_bchout_data_ml            unsigned, default = 0, bch output 16bit data msb is 27 or 19
//Bit   5,      reg_bchout_data_rsv           unsigned, default = 0, bch output data revers
//Bit   4,      reg_bchin_ecc_ml              unsigned, default = 0, bch input ecc msb/lsb
//Bit   3,      reg_bchin_ecc_rsv             unsigned, default = 0, bch input ecc revers
//Bit   2,      reg_bchin_data_rsv            unsigned, default = 0, bch input data revers
//Bit   1,      reg_force_set                 unsigned, default = 0, 0 off 1 compress audio mode
//Bit   0,      reg_force_en                  unsigned, default = 0, force work mode enable
#define EARCRX_ERR_CORRECT_STAT0                   ((0x0017  << 2) + 0xfe333c00)
//Bit   31:0,   reg_err_correct_stat0         unsigned, default = 0
#define EARCRX_ANA_RST_CTRL0                       ((0x0018  << 2) + 0xfe333c00)
//Bit   31,     reg_work_enable               unsigned, default = 0, analog reset check work enable
//Bit   30,     reg_ana_rst_sf_en             unsigned, default = 0, analog reset from register enable
//Bit   29,     reg_ana_rst_sf                unsigned, default = 0, soft reset value
//Bit   28,     reserved
//Bit   27:23,  reg_new_format_pos_num        unsigned, default = 0, when new format data in, hold reset after N posedge
//Bit   22:20,  reg_dmacrx_div2_thd_tick_sel  unsigned, default = 0, earcrx_div2 hold threshold tick select
//Bit   19:0,   reg_earcrx_div2_thd           unsigned, default = 0, earcrx_div2 hold threshold
#define EARCRX_ANA_RST_CTRL1                       ((0x0019  << 2) + 0xfe333c00)
//Bit   31,     reg_dmacrx_data_filt_en       unsigned, default = 0, filter enable
//Bit   30:28,  reg_dmacrx_data_filter_sel    unsigned, default = 0, filter select
//Bit   27:25,  reg_dmacrx_data_tick_sel      unsigned, default = 0, filter tick sel
//Bit   24:16,  reg_dmacrx_data_time          unsigned, default = 0, filter tick time
//Bit   15,     reg_dmacrx_sqout_filt_en      unsigned, default = 0, filter enable
//Bit   14:12,  reg_dmacrx_sqout_filter_sel   unsigned, default = 0, filter select
//Bit   11:9,   reg_dmacrx_sqout_tick_sel     unsigned, default = 0, filter tick sel
//Bit   8:0,    reg_dmacrx_sqout_time         unsigned, default = 0, filter tick time
#define EARCRX_SPDIFIN_CTRL4                       ((0x0020  << 2) + 0xfe333c00)
//Bit   31,     reserved
//Bit   30,     reg_add_ch_r                        unsigned, default = 0, reg_add_ch_r
//Bit   29,     reg_bc_val0_en                      unsigned, default = 0, reg_bc_val0_en
//Bit   28:20,  reg_stable_mask                     unsigned, default = 0, reg_stable_mask
//Bit   19:16,  reg_stable_zcnt                     unsigned, default = 0, reg_stable_zcnt
//Bit   15:0 ,  reserved
#define EARCRX_SPDIFIN_CTRL5                       ((0x0021  << 2) + 0xfe333c00)
//Bit   31,     reg_st_timeout_sts_clr              unsigned, default = 0, reg_st_timeout_sts_clr
//Bit   30:28,  reserved
//Bit   27:16,  reg_st_timeout_check_thd            unsigned, default = 0, reg_st_timeout_check_thd
//Bit   15,     reserved
//Bit   14:12,  reg_st_timeout_check_tick_sel       unsigned, default = 0, reg_st_timeout_check_tick_sel
//Bit   11,     reg_st_timeout_check_en             unsigned, default = 0, reg_st_timeout_check_en
//Bit   10:9,   reserved
//Bit   8:0,    reg_stable_int_mask                 unsigned, default = 0, reg_stable_int_mask
#define EARCRX_SPDIFIN_CTRL6                       ((0x0022  << 2) + 0xfe333c00)
//Bit   31:17,  reserved
//Bit   16,     reg_check_time_en                   unsigned, default = 0, reg_check_time_en
//Bit   15:0,   reg_check_time_thd                  unsigned, default = 0, reg_check_time_thd
#define EARCRX_DMAC_SYNC_CTRL1                     ((0x0023  << 2) + 0xfe333c00)
//Bit   31:19,  reserved
//Bit   18,     reg_auto_neg_int_en                 unsigned, default = 0, reg_auto_neg_int_en
//Bit   17,     reg_auto_stable_clr                 unsigned, default = 0, reg_auto_stable_clr
//Bit   16,     reg_auto_stable_en                  unsigned, default = 0, reg_auto_stable_en
//Bit   15:0,   reg_auto_stable_thd                 unsigned, default = 0, reg_auto_stable_thd
#define EARCRX_SPDIFIN_SAMPLE_CTRL6                ((0x0024  << 2) + 0xfe333c00)
//Bit   31:18,  reserved
//Bit   17,     reg_hold_tri_sample                 unsigned, default = 0, reg_hold_tri_sample
//Bit   16,     reg_sample_mode_filter_en           unsigned, default = 0, reg_sample_mode_filter_en
//Bit   15:8,   reg_stable_cyc_min                  unsigned, default = 0, reg_stable_cyc_min
//Bit   7:0,    reg_stable_cyc_max                  unsigned, default = 0, reg_stable_cyc_max
#define EARCRX_DMAC_SYNC_CTRL2                     ((0x0025  << 2) + 0xfe333c00)
//Bit   31,     reg_unstable_t0_err_clr             unsigned, default = 0, reg_unstable_t0_err_clr
//Bit   30:20,  reserved
//Bit   19,     reg_unstable_t0_check_en            unsigned, default = 0, reg_unstable_t0_check_en
//Bit   18:16,  reg_unstable_t0_tick_sel            unsigned, default = 0, reg_unstable_t0_tick_sel
//Bit   15:0,   reg_unstable_t0_thd                 unsigned, default = 0, reg_unstable_t0_thd
#define EARCRX_DMAC_SYNC_CTRL3                     ((0x0026  << 2) + 0xfe333c00)
//Bit   31,     reg_unstable_t1_err_clr             unsigned, default = 0, reg_unstable_t1_err_clr
//Bit   30:20,  reserved
//Bit   19,     reg_unstable_t1_check_en            unsigned, default = 0, reg_unstable_t1_check_en
//Bit   18:16,  reg_unstable_t1_tick_sel            unsigned, default = 0, reg_unstable_t1_tick_sel
//Bit   15:0,   reg_unstable_t1_thd                 unsigned, default = 0, reg_unstable_t1_thd
#define EARCRX_DMAC_SYNC_CTRL4                     ((0x0027  << 2) + 0xfe333c00)
//Bit   31,     reg_unstable_t2_err_clr             unsigned, default = 0, reg_unstable_t2_err_clr
//Bit   30:20,  reserved
//Bit   19,     reg_unstable_t2_check_en            unsigned, default = 0, reg_unstable_t2_check_en
//Bit   18:16,  reg_unstable_t2_tick_sel            unsigned, default = 0, reg_unstable_t2_tick_sel
//Bit   15:0,   reg_unstable_t2_thd                 unsigned, default = 0, reg_unstable_t2_thd
#define EARCRX_DMAC_SYNC_STAT1                     ((0x0028  << 2) + 0xfe333c00)
//Bit   31:0,   reg_dmac_sync_stat1           unsigned, default = 0
#define EARCRX_DMAC_SYNC_STAT2                     ((0x0029  << 2) + 0xfe333c00)
//Bit   31:0,   reg_dmac_sync_stat2           unsigned, default = 0
#define EARCRX_DMAC_SYNC_STAT3                     ((0x002a  << 2) + 0xfe333c00)
//Bit   31:0,   reg_dmac_sync_stat3           unsigned, default = 0
//
// Closing file:  ./earcrx_dmac.h
//
//========================================================================
//  AUDIO EARCRX_TOP  - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe333e00
// -----------------------------------------------
//
// Reading file:  ./earcrx_top.h
//
#define EARCRX_TOP_CTRL0                           ((0x0000  << 2) + 0xfe333e00)
//Bit   31:10,  reserved
//Bit   9:8,    reg_top_debug_sel             unsigned, default = 0, top debug select
//Bit   7,      reg_spdif_rx_en_force         unsigned, default = 0, force spdif_rx_en to reg_spdif_rx_en_force_value
//Bit   6,      reg_spdif_rx_en_force_value   unsigned, default = 0, value
//Bit   5,      reg_spdif_rx_sqen_force       unsigned, default = 0, force spdif_rx_sqen to reg_spdif_rx_sqe
//Bit   4,      reg_spdif_rx_sqen_force_value unsigned, default = 0, value
//Bit   3,      reg_dmacrx_en_force           unsigned, default = 0, force dmacrx_en to reg_dmacrx_en_force_value
//Bit   2,      reg_dmacrx_en_force_value     unsigned, default = 0, value
//Bit   1,      reg_dmacrx_sqen_force         unsigned, default = 0, force dmacrx_sqen to reg_dmacrx_sqen_force_value
//Bit   0,      reg_dmacrx_sqen_force_value   unsigned, default = 0, value
#define EARCRX_DMAC_INT_MASK                       ((0x0001  << 2) + 0xfe333e00)
//Bit   31:30,  reserved
//Bit   29:0,   reg_dmac_int_mask             unsigned, default = 0, dmac int mask
#define EARCRX_DMAC_INT_PENDING                    ((0x0002  << 2) + 0xfe333e00)
//Bit   31:30,  reserved
//Bit   29:0,   reg_dmac_int_mask             unsigned, default = 0, dmac int pending,read only
#define EARCRX_CMDC_INT_MASK                       ((0x0003  << 2) + 0xfe333e00)
//Bit   31:16,  reserved
//Bit   15:0,   reg_cmdc_int_mask             unsigned, default = 0, cmdc int mask
#define EARCRX_CMDC_INT_PENDING                    ((0x0004  << 2) + 0xfe333e00)
//Bit   31:18,  reserved
//Bit   17:0,   reg_cmdc_int_mask             unsigned, default = 0, cmdc int pending,read only
#define EARCRX_ANA_CTRL0                           ((0x0005  << 2) + 0xfe333e00)
//Bit   31:0,   reg_earcrx_ana_ctrl0          unsigned, default = 0
#define EARCRX_ANA_CTRL1                           ((0x0006  << 2) + 0xfe333e00)
//Bit   31:0,   reg_earcrx_ana_ctrl0          unsigned, default = 0
#define EARCRX_ANA_STAT0                           ((0x0007  << 2) + 0xfe333e00)
//Bit   31:0,   reg_earcrx_ana_ctrl0          unsigned, default = 0
#define EARCRX_PLL_CTRL0                           ((0x0008  << 2) + 0xfe333e00)
//Bit   31:0,   reg_earcrx_ana_ctrl0          unsigned, default = 0
#define EARCRX_PLL_CTRL1                           ((0x0009  << 2) + 0xfe333e00)
//Bit   31:0,   reg_earcrx_ana_ctrl0          unsigned, default = 0
#define EARCRX_PLL_CTRL2                           ((0x000a  << 2) + 0xfe333e00)
//Bit   31:0,   reg_earcrx_ana_ctrl0          unsigned, default = 0
#define EARCRX_PLL_CTRL3                           ((0x000b  << 2) + 0xfe333e00)
//Bit   31:0,   reg_earcrx_ana_ctrl0          unsigned, default = 0
#define EARCRX_PLL_STAT0                           ((0x000c  << 2) + 0xfe333e00)
//Bit   31:0,   reg_earcrx_ana_ctrl0          unsigned, default = 0
//
// Closing file:  ./earcrx_top.h
//
//========================================================================
//  AUDIO RESAMPLEB - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe334000
// -----------------------------------------------
//
// Reading file:  ./RESAMPLEB.h
//
#define AUDIO_RSAMPB_CTRL0                         ((0x0000  << 2) + 0xfe334000)
//Bit   31:3      reserved
//Bit   2         reg_lock_rst      //unsigned  , default =0;
//Bit   1         reg_rsamp_rst     //unsigned  , default =0;
//Bit   0         reg_sw_rst        //unsigned  , default =0;
#define AUDIO_RSAMPB_CTRL1                         ((0x0001  << 2) + 0xfe334000)
//Bit   31:27      reserved          //unsigned  , default =0;
//Bit   26         reg_watchdog_en   //unsigned  , default =0;
//Bit   25         reg_rsamp_rst_sel //unsigned  , default =0;
//Bit   24         reg_module_bypas  //unsigned  , default =0;
//Bit   23:18      reg_gclk_ctrl     //unsigned  , default =0;
//Bit   17:13      reg_in_msb        //unsigned  , default =23;
//Bit   12         reg_output_en     //unsigned  , default =0;
//Bit   11         reg_rsamp_en      //unsigned  , default =0;
//Bit   10         reg_filt_en       //unsigned  , default =0;
//Bit   9          reg_post_en       //unsigned  , default =0;
//Bit   8          reg_inp_mux_mode  //unsigned  , default =0;
//Bit   7:4        reserved          //unsigned  , default =2;
//Bit   3:0        reg_inp_mux       //unsigned  , default =0;
#define AUDIO_RSAMPB_CTRL2                         ((0x0002  << 2) + 0xfe334000)
//Bit 31:30    reserved              //unsigned  , default =0;
//Bit 29:24    reg_chx_size          //unsigned  , default =2;
//Bit 23:18    reserved              //unsigned  , default =0;
//Bit 17:16    reg_scl_step          //unsigned  , default =0; 0: 1/1  1: 1/2  2: 1/4
//Bit 15:8     reg_filt_tap          //unsigned  , default =63;
//Bit 7:0      reg_intp_tap          //unsigned  , default =63;
#define AUDIO_RSAMPB_PHSINIT                       ((0x0003  << 2) + 0xfe334000)
//Bit   31:28      reserved          //unsigned  , default = 0;
//Bit   27:0       reg_init_phs      //unsigned  , default = 0;
#define AUDIO_RSAMPB_PHSSTEP                       ((0x0004  << 2) + 0xfe334000)
//Bit   31         reserved          //unsigned  , default = 0;
//Bit   30:0       reg_rsamp_step    //unsigned  , default = 134217728;//'h800_0000
#define AUDIO_RSAMPB_SHIFT                         ((0x0005  << 2) + 0xfe334000)
//Bit   31:24       reg_rsft_iir    //unsigned  , default = 23;
//Bit   23:16       reg_rsft_blnd   //unsigned  , default = 21;
//Bit   15:8        reg_rsft_sinc   //unsigned  , default = 31;
//Bit   7:0         reg_rsft_aa     //unsigned  , default = 31;
#define AUDIO_RSAMPB_ADJ_CTRL0                     ((0x0006  << 2) + 0xfe334000)
//Bit   31:3        reserved                //unsigned
//Bit   2           reg_rsamp_adj_out_inv   //unsigned , default = 0;
//Bit   1           reg_rsamp_adj_force_en  //unsigned , default = 0;
//Bit   0           reg_rsamp_adj_en        //unsigned , default = 0;
#define AUDIO_RSAMPB_ADJ_CTRL1                     ((0x0007  << 2) + 0xfe334000)
//Bit   31:16       reg_rsamp_adj_odet_step     //unsigned , default = 8;
//Bit   15:0        reg_rsamp_adj_kmax          //unsigned , default = 32768;
#define AUDIO_RSAMPB_ADJ_SFT                       ((0x0008  << 2) + 0xfe334000)
//Bit   31:30       reserved                //unsigned , default = 0;
//Bit   29          reg_rsamp_adj_dif_sel   //unsigned , default = 0;
//Bit   28:24       reg_rsamp_adj_ki        //unsigned , default = 9;
//Bit   23:21       reserved                //unsigned , default = 0;
//Bit   20:16       reg_rsamp_adj_kp        //unsigned , default = 1;
//Bit   15:13       reserved                //unsigned , default = 0;
//Bit   12:8        reg_rsamp_adj_ki_sft    //unsigned , default = 6;
//Bit   7:6         reserved                //unsigned , default = 0;
//Bit   5:0         reg_rsamp_adj_out_sft   //unsigned , default = 12;
#define AUDIO_RSAMPB_ADJ_IDET_LEN                  ((0x0009  << 2) + 0xfe334000)
//Bit   31:0       reg_rsamp_adj_idet_len       //unsigned , default = 10000;
#define AUDIO_RSAMPB_ADJ_FORCE                     ((0x000a  << 2) + 0xfe334000)
//Bit   31:0       reg_rsamp_adj_force_err      //signed , default = 8;
#define AUDIO_RSAMPB_ADJ_KI_FORCE                  ((0x000b  << 2) + 0xfe334000)
//Bit   31:0       reg_rsamp_adj_ki_force //signed , default = 0;
#define AUDIO_RSAMPB_WATCHDOG_THRD                 ((0x000c  << 2) + 0xfe334000)
//Bit   31:0       reg_watchdog_thrd      //signed , default = 32'h1000;
#define AUDIO_RSAMPB_RO_STATUS                     ((0x0010  << 2) + 0xfe334000)
//Bit   31:0       ro_rsamp_stat  //{din_chx_chk_err,is_idle_st,rsamp_fifo_over_cnt[7:0]}
#define AUDIO_RSAMPB_RO_ADJ_FREQ                   ((0x0011  << 2) + 0xfe334000)
//Bit   31:0       ro_rsamp_adj_freq
#define AUDIO_RSAMPB_RO_ADJ_DIFF_BAK               ((0x0012  << 2) + 0xfe334000)
//Bit   31:0       ro_det_diff_bak
#define AUDIO_RSAMPB_RO_ADJ_DIFF_DLT               ((0x0013  << 2) + 0xfe334000)
//Bit   31:0       ro_det_diff_dlt
#define AUDIO_RSAMPB_RO_ADJ_PHS_ERR                ((0x0014  << 2) + 0xfe334000)
//Bit   31:0       ro_det_phase_err
#define AUDIO_RSAMPB_RO_ADJ_KI_OUT                 ((0x0015  << 2) + 0xfe334000)
//Bit   31:0       ro_rsamp_ki_out
#define AUDIO_RSAMPB_RO_IN_CNT                     ((0x0016  << 2) + 0xfe334000)
//Bit   31:0       ro_rsamp_in_cnt
#define AUDIO_RSAMPB_RO_OUT_CNT                    ((0x0017  << 2) + 0xfe334000)
//Bit   31:0       ro_rsamp_out_cnt
#define AUDIO_RSAMPB_RO_ADJ_PHS_ERR_VAR            ((0x0018  << 2) + 0xfe334000)
//Bit   31:0       ro_det_phase_err_var
#define AUDIO_RSAMPB_POST_COEF0                    ((0x0020  << 2) + 0xfe334000)
//Bit   31:0       reg_post_coef0 //signed  , default = 0;
#define AUDIO_RSAMPB_POST_COEF1                    ((0x0021  << 2) + 0xfe334000)
//Bit   31:0       reg_post_coef1 //signed  , default = 0;
#define AUDIO_RSAMPB_POST_COEF2                    ((0x0022  << 2) + 0xfe334000)
//Bit   31:0       reg_post_coef2 //signed  , default = 0;
#define AUDIO_RSAMPB_POST_COEF3                    ((0x0023  << 2) + 0xfe334000)
//Bit   31:0       reg_post_coef3 //signed  , default = 0;
#define AUDIO_RSAMPB_POST_COEF4                    ((0x0024  << 2) + 0xfe334000)
//Bit   31:0       reg_post_coef4 //signed  , default = 0;
#define AUDIO_RSAMPB_AA_COEF_ADDR                  ((0x0030  << 2) + 0xfe334000)
//Bit   31:0       reg_aa_coef_addr     //unsigned, default = 0;
#define AUDIO_RSAMPB_AA_COEF_DATA                  ((0x0031  << 2) + 0xfe334000)
//Bit   31:0       reg_aa_coef_data     //signed  , default = 0;
#define AUDIO_RSAMPB_SINC_COEF_ADDR                ((0x0040  << 2) + 0xfe334000)
//Bit   31:0       reg_sinc_coef_addr   //unsigned, default = 0;
#define AUDIO_RSAMPB_SINC_COEF_DATA                ((0x0041  << 2) + 0xfe334000)
//Bit   31:0       reg_sinc_coef_data   //signed  , default = 0;
//
// Closing file:  ./RESAMPLEB.h
//
//========================================================================
//  AUDIO ACC TOP - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe336c00
// -----------------------------------------------
//
// Reading file:  ./audio_acc_reg.h
//
#define AUDIO_ACC_CLK_GATE_EN                      ((0x0000  << 2) + 0xfe336c00)
//Bit 31:0   reg_aud_acc_clk_gate_en    //unsigned,   RW,   default = 0;
#define AUDIO_ACC_SW_RESERT                        ((0x0001  << 2) + 0xfe336c00)
//Bit 31:0   reg_aud_acc_sw_reset       //unsigned,   RW,   default = 0;
#define AUDIO_ACC_SECURITY_CTRL_0                  ((0x000a  << 2) + 0xfe336c00)
//Bit 31:0   reg_security_ctrl0        //unsigned,   RW,   default = 0;
#define AUDIO_ACC_SECURITY_CTRL_1                  ((0x000b  << 2) + 0xfe336c00)
//Bit 31:0   reg_security_ctrl1        //unsigned,   RW,   default = 0;
#define AUDIO_ACC_SECURITY_CTRL_2                  ((0x000c  << 2) + 0xfe336c00)
//Bit 31:0   reg_security_ctrl2        //unsigned,   RW,   default = 0;
#define AUDIO_ACC_DBG_0                            ((0x0010  << 2) + 0xfe336c00)
//Bit 31:0   reg_dbg_0                  //unsigned,   RW,   default = 0;
#define AUDIO_ACC_DBG_1                            ((0x0011  << 2) + 0xfe336c00)
//Bit 31:0   reg_dbg_1                  //unsigned,   RW,   default = 0;
#define AUDIO_ACC_FRDDR_0_CTRL0                    ((0x0020  << 2) + 0xfe336c00)
//Bit 31:0   reg_frddr_0_ctrl0          //unsigned,   RW,   default = 0;
#define AUDIO_ACC_FRDDR_0_CTRL1                    ((0x0021  << 2) + 0xfe336c00)
//Bit 31:0   reg_frddr_0_ctrl1          //unsigned,   RW,   default = 0;
#define AUDIO_ACC_FRDDR_0_CTRL2                    ((0x0022  << 2) + 0xfe336c00)
//Bit 31:0   reg_frddr_0_ctrl2          //unsigned,   RW,   default = 0;
#define AUDIO_ACC_FRDDR_0_START_ADDR               ((0x0023  << 2) + 0xfe336c00)
//Bit 31:0   reg_frddr_0_start_addr     //unsigned,   RW,   default = 0;
#define AUDIO_ACC_FRDDR_0_INIT_ADDR                ((0x0024  << 2) + 0xfe336c00)
//Bit 31:0   reg_frddr_0_init_addr      //unsigned,   RW,   default = 0;
#define AUDIO_ACC_FRDDR_0_FINISH_ADDR              ((0x0025  << 2) + 0xfe336c00)
//Bit 31:0   reg_frddr_0_finish_addr    //unsigned,   RW,   default = 0;
#define AUDIO_ACC_FRDDR_0_START_ADDRB              ((0x0026  << 2) + 0xfe336c00)
//Bit 31:0   reg_frddr_0_start_addrb    //unsigned,   RW,   default = 0;
#define AUDIO_ACC_FRDDR_0_FINISH_ADDRB             ((0x0027  << 2) + 0xfe336c00)
//Bit 31:0   reg_frddr_0_finish_addrb   //unsigned,   RW,   default = 0;
#define AUDIO_ACC_FRDDR_0_INT_ADDR                 ((0x0028  << 2) + 0xfe336c00)
//Bit 31:0   reg_frddr_0_int_addr       //unsigned,   RW,   default = 0;
#define AUDIO_ACC_FRDDR_0_RO_STATUS1               ((0x0029  << 2) + 0xfe336c00)
//Bit 31:0   ro_frddr_0_status1         //unsigned,   RO,   default = 0;
#define AUDIO_ACC_FRDDR_0_RO_STATUS2               ((0x002a  << 2) + 0xfe336c00)
//Bit 31:0   ro_frddr_0_status2         //unsigned,   RO,   default = 0;
#define AUDIO_ACC_FRDDR_0_CTRL3                    ((0x002b  << 2) + 0xfe336c00)
//Bit 31:8  reserved
//Bit 7:4   reg_frddr_0_ctrl3           //unsigned,   RW,   default = 0;
//Bit 3:2   reserved
//Bit 1:1   pls_frddr_0_trigger         //unsigned,   RW,   default = 0;
//Bit 0:0   reg_frddr_0_trigger_mode    //unsigned,   RW,   default = 0;
#define AUDIO_ACC_FRDDR_1_CTRL0                    ((0x0030  << 2) + 0xfe336c00)
//Bit 31:0   reg_frddr_1_ctrl0          //unsigned,   RW,   default = 0;
#define AUDIO_ACC_FRDDR_1_CTRL1                    ((0x0031  << 2) + 0xfe336c00)
//Bit 31:0   reg_frddr_1_ctrl1          //unsigned,   RW,   default = 0;
#define AUDIO_ACC_FRDDR_1_CTRL2                    ((0x0032  << 2) + 0xfe336c00)
//Bit 31:0   reg_frddr_1_ctrl2          //unsigned,   RW,   default = 0;
#define AUDIO_ACC_FRDDR_1_START_ADDR               ((0x0033  << 2) + 0xfe336c00)
//Bit 31:0   reg_frddr_1_start_addr     //unsigned,   RW,   default = 0;
#define AUDIO_ACC_FRDDR_1_INIT_ADDR                ((0x0034  << 2) + 0xfe336c00)
//Bit 31:0   reg_frddr_1_init_addr      //unsigned,   RW,   default = 0;
#define AUDIO_ACC_FRDDR_1_FINISH_ADDR              ((0x0035  << 2) + 0xfe336c00)
//Bit 31:0   reg_frddr_1_finish_addr    //unsigned,   RW,   default = 0;
#define AUDIO_ACC_FRDDR_1_START_ADDRB              ((0x0036  << 2) + 0xfe336c00)
//Bit 31:0   reg_frddr_1_start_addrb    //unsigned,   RW,   default = 0;
#define AUDIO_ACC_FRDDR_1_FINISH_ADDRB             ((0x0037  << 2) + 0xfe336c00)
//Bit 31:0   reg_frddr_1_finish_addrb   //unsigned,   RW,   default = 0;
#define AUDIO_ACC_FRDDR_1_INT_ADDR                 ((0x0038  << 2) + 0xfe336c00)
//Bit 31:0   reg_frddr_1_int_addr       //unsigned,   RW,   default = 0;
#define AUDIO_ACC_FRDDR_1_RO_STATUS1               ((0x0039  << 2) + 0xfe336c00)
//Bit 31:0   ro_frddr_1_status1         //unsigned,   RO,   default = 0;
#define AUDIO_ACC_FRDDR_1_RO_STATUS2               ((0x003a  << 2) + 0xfe336c00)
//Bit 31:0   ro_frddr_1_status2         //unsigned,   RO,   default = 0;
#define AUDIO_ACC_FRDDR_1_CTRL3                    ((0x003b  << 2) + 0xfe336c00)
//Bit 31:8  reserved
//Bit 7:4   reg_frddr_1_ctrl3           //unsigned,   RW,   default = 0;
//Bit 3:2   reserved
//Bit 1:1   pls_frddr_1_trigger         //unsigned,   RW,   default = 0;
//Bit 0:0   reg_frddr_1_trigger_mode    //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_0_CTRL0                    ((0x0040  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_0_ctrl0          //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_0_CTRL1                    ((0x0041  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_0_ctrl1          //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_0_CTRL2                    ((0x0042  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_0_ctrl2          //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_0_START_ADDR               ((0x0043  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_0_start_addr     //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_0_INIT_ADDR                ((0x0044  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_0_init_addr      //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_0_FINISH_ADDR              ((0x0045  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_0_finish_addr    //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_0_START_ADDRB              ((0x0046  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_0_start_addrb    //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_0_FINISH_ADDRB             ((0x0047  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_0_finish_addrb   //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_0_INT_ADDR                 ((0x0048  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_0_int_addr       //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_0_RO_STATUS1               ((0x0049  << 2) + 0xfe336c00)
//Bit 31:0   ro_toddr_0_status1         //unsigned,   RO,   default = 0;
#define AUDIO_ACC_TODDR_0_RO_STATUS2               ((0x004a  << 2) + 0xfe336c00)
//Bit 31:0   ro_toddr_0_status2         //unsigned,   RO,   default = 0;
#define AUDIO_ACC_TODDR_0_CHSYNC_CTRL              ((0x004b  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_0_chsync_ctrl    //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_0_CHNUM_ID_0               ((0x004c  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_0_chnum_id_0     //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_0_CHNUM_ID_1               ((0x004d  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_0_chnum_id_1     //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_0_CHNUM_ID_2               ((0x004e  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_0_chnum_id_2     //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_0_CHNUM_ID_3               ((0x004f  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_0_chnum_id_3     //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_0_CHNUM_ID_4               ((0x0050  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_0_chnum_id_4     //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_0_CHNUM_ID_5               ((0x0051  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_0_chnum_id_5     //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_0_CHNUM_ID_6               ((0x0052  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_0_chnum_id_6     //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_0_CHNUM_ID_7               ((0x0053  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_0_chnum_id_7     //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_0_CTRL3                    ((0x0054  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_0_ctrl3          //unsigned,   RW,   default = 56;
#define AUDIO_ACC_TODDR_1_CTRL0                    ((0x0060  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_1_ctrl0          //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_1_CTRL1                    ((0x0061  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_1_ctrl1          //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_1_CTRL2                    ((0x0062  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_1_ctrl2          //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_1_START_ADDR               ((0x0063  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_1_start_addr     //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_1_INIT_ADDR                ((0x0064  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_1_init_addr      //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_1_FINISH_ADDR              ((0x0065  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_1_finish_addr    //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_1_START_ADDRB              ((0x0066  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_1_start_addrb    //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_1_FINISH_ADDRB             ((0x0067  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_1_finish_addrb   //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_1_INT_ADDR                 ((0x0068  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_1_int_addr       //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_1_RO_STATUS1               ((0x0069  << 2) + 0xfe336c00)
//Bit 31:0   ro_toddr_1_status1         //unsigned,   RO,   default = 0;
#define AUDIO_ACC_TODDR_1_RO_STATUS2               ((0x006a  << 2) + 0xfe336c00)
//Bit 31:0   ro_toddr_1_status2         //unsigned,   RO,   default = 0;
#define AUDIO_ACC_TODDR_1_CHSYNC_CTRL              ((0x006b  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_1_chsync_ctrl    //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_1_CHNUM_ID_0               ((0x006c  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_1_chnum_id_0     //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_1_CHNUM_ID_1               ((0x006d  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_1_chnum_id_1     //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_1_CHNUM_ID_2               ((0x006e  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_1_chnum_id_2     //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_1_CHNUM_ID_3               ((0x006f  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_1_chnum_id_3     //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_1_CHNUM_ID_4               ((0x0070  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_1_chnum_id_4     //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_1_CHNUM_ID_5               ((0x0071  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_1_chnum_id_5     //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_1_CHNUM_ID_6               ((0x0072  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_1_chnum_id_6     //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_1_CHNUM_ID_7               ((0x0073  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_1_chnum_id_7     //unsigned,   RW,   default = 0;
#define AUDIO_ACC_TODDR_1_CTRL3                    ((0x0074  << 2) + 0xfe336c00)
//Bit 31:0   reg_toddr_1_ctrl3          //unsigned,   RW,   default = 56;
#define AUDIO_ACC_A2P_CONV_0                       ((0x0080  << 2) + 0xfe336c00)
//Bit 31:0   reg_act_conv_0             //unsigned,   RW,   default = 32'h0000_6038;
#define AUDIO_ACC_A2P_CONV_1                       ((0x0081  << 2) + 0xfe336c00)
//Bit 31:0   reg_act_conv_1             //unsigned,   RW,   default = 32'h0000_6038;
#define AUDIO_ACC_PATH_CTRL                        ((0x0082  << 2) + 0xfe336c00)
//Bit 31:8   reserved
//Bit 7:0    reg_act_path_ctrl          //unsigned,   RW,   default = 0;
//
// Closing file:  ./audio_acc_reg.h
//
//========================================================================
//  AUDIO EQ CORE - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe335000
// -----------------------------------------------
//
// Reading file:  ./audio_eqdrc_reg_16ch.h
//
#define AEQ_COEF_CNTL_A                            ((0x0000  << 2) + 0xfe335000)
#define AEQ_COEF_DATA_A                            ((0x0001  << 2) + 0xfe335000)
#define AEQ_COEF_CNTL_B                            ((0x0002  << 2) + 0xfe335000)
#define AEQ_COEF_DATA_B                            ((0x0003  << 2) + 0xfe335000)
#define AEQ_SOFT_RSET                              ((0x0009  << 2) + 0xfe335000)
//Bit 31:2  reserved
//Bit  1:1  reg_ctl_rst                       //unsigned,   RW,   default = 0;
//Bit  0:0  reg_sw_rst                        //unsigned,   RW,   default = 0;
#define AEQ_TOP_CTRL                               ((0x0010  << 2) + 0xfe335000)
//Bit 31:1  reserved
//Bit  0:0  reg_dsp_en                       //unsigned,   RW,   default = 0;
#define AEQ_STATUS0_CTRL                           ((0x0011  << 2) + 0xfe335000)
//Bit 31:7  reserved
//Bit  6:2   reg_eq_tap0                       //unsigned,   RW,   default = 5'h14;
//Bit  1:1   reg_status0_en                    //unsigned,   RW,   default = 0;
//Bit  0:0   reg_ed_signed0                    //unsigned,   RW,   default = 0;
#define AEQ_STATUS1_CTRL                           ((0x0012  << 2) + 0xfe335000)
//Bit 31:7  reserved
//Bit  6:2   reg_eq_tap1                       //unsigned,   RW,   default = 5'h14;
//Bit  1:1   reg_status1_en                    //unsigned,   RW,   default = 0;
//Bit  0:0   reg_ed_signed1                    //unsigned,   RW,   default = 0;
#define AEQ_STATUS2_CTRL                           ((0x0013  << 2) + 0xfe335000)
//Bit 31:7  reserved
//Bit  6:2   reg_eq_tap2                       //unsigned,   RW,   default = 5'h14;
//Bit  1:1   reg_status2_en                    //unsigned,   RW,   default = 0;
//Bit  0:0   reg_ed_signed2                    //unsigned,   RW,   default = 0;
#define AEQ_STATUS3_CTRL                           ((0x0014  << 2) + 0xfe335000)
//Bit 31:7  reserved
//Bit  6:2   reg_eq_tap3                       //unsigned,   RW,   default = 5'h14;
//Bit  1:1   reg_status3_en                    //unsigned,   RW,   default = 0;
//Bit  0:0   reg_ed_signed3                    //unsigned,   RW,   default = 0;
#define AEQ_STATUS4_CTRL                           ((0x0015  << 2) + 0xfe335000)
//Bit 31:7  reserved
//Bit  6:2   reg_eq_tap4                       //unsigned,   RW,   default = 5'h14;
//Bit  1:1   reg_status4_en                    //unsigned,   RW,   default = 0;
//Bit  0:0   reg_ed_signed4                    //unsigned,   RW,   default = 0;
#define AEQ_STATUS5_CTRL                           ((0x0016  << 2) + 0xfe335000)
//Bit 31:7  reserved
//Bit  6:2   reg_eq_tap5                       //unsigned,   RW,   default = 5'h14;
//Bit  1:1   reg_status5_en                    //unsigned,   RW,   default = 0;
//Bit  0:0   reg_ed_signed5                    //unsigned,   RW,   default = 0;
#define AEQ_STATUS6_CTRL                           ((0x0017  << 2) + 0xfe335000)
//Bit 31:7  reserved
//Bit  6:2   reg_eq_tap6                       //unsigned,   RW,   default = 5'h14;
//Bit  1:1   reg_status6_en                    //unsigned,   RW,   default = 0;
//Bit  0:0   reg_ed_signed6                    //unsigned,   RW,   default = 0;
#define AEQ_STATUS7_CTRL                           ((0x0018  << 2) + 0xfe335000)
//Bit 31:7  reserved
//Bit  6:2   reg_eq_tap7                       //unsigned,   RW,   default = 5'h14;
//Bit  1:1   reg_status7_en                    //unsigned,   RW,   default = 0;
//Bit  0:0   reg_ed_signed7                    //unsigned,   RW,   default = 0;
//
// Closing file:  ./audio_eqdrc_reg_16ch.h
//
//========================================================================
//  AUDIO RESAMPLE_ACC - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe336000
// -----------------------------------------------
//
// Reading file:  ./RESAMPLE_ACC.h
//
#define AUDIO_RSAMP_ACC_CTRL0                      ((0x0000  << 2) + 0xfe336000)
//Bit   31:3      reserved
//Bit   2         reg_lock_rst      //unsigned  , default =0;
//Bit   1         reg_rsamp_rst     //unsigned  , default =0;
//Bit   0         reg_sw_rst        //unsigned  , default =0;
#define AUDIO_RSAMP_ACC_CTRL1                      ((0x0001  << 2) + 0xfe336000)
//Bit   31:27      reg_in_lsb        //unsigned  , default =0;
//Bit   26         reg_watchdog_en   //unsigned  , default =0;
//Bit   25         reg_rsamp_rst_sel //unsigned  , default =0;
//Bit   24         reg_module_bypas  //unsigned  , default =0;
//Bit   23:18      reg_gclk_ctrl     //unsigned  , default =0;
//Bit   17:13      reg_in_msb        //unsigned  , default =23;
//Bit   12         reg_output_en     //unsigned  , default =0;
//Bit   11         reg_rsamp_en      //unsigned  , default =0;
//Bit   10         reg_filt_en       //unsigned  , default =0;
//Bit   9          reg_post_en       //unsigned  , default =0;
//Bit   8          reg_inp_mux_mode  //unsigned  , default =0;
//Bit   7:5        reserved          //unsigned  , default =2;
//Bit   4:0        reg_inp_mux       //unsigned  , default =0;
#define AUDIO_RSAMP_ACC_CTRL2                      ((0x0002  << 2) + 0xfe336000)
//Bit 31:30    reserved              //unsigned  , default =0;
//Bit 29:24    reg_chx_size          //unsigned  , default =2;
//Bit 23:18    reserved              //unsigned  , default =0;
//Bit 17:16    reg_scl_step          //unsigned  , default =0; 0: 1/1  1: 1/2  2: 1/4
//Bit 15:8     reg_filt_tap          //unsigned  , default =63;
//Bit 7:0      reg_intp_tap          //unsigned  , default =63;
#define AUDIO_RSAMP_ACC_PHSINIT                    ((0x0003  << 2) + 0xfe336000)
//Bit   31:28      reserved          //unsigned  , default = 0;
//Bit   27:0       reg_init_phs      //unsigned  , default = 0;
#define AUDIO_RSAMP_ACC_PHSSTEP                    ((0x0004  << 2) + 0xfe336000)
//Bit   31         reserved          //unsigned  , default = 0;
//Bit   30:0       reg_rsamp_step    //unsigned  , default = 134217728;//'h800_0000
#define AUDIO_RSAMP_ACC_SHIFT                      ((0x0005  << 2) + 0xfe336000)
//Bit   31:24       reg_rsft_iir    //unsigned  , default = 23;
//Bit   23:16       reg_rsft_blnd   //unsigned  , default = 21;
//Bit   15:8        reg_rsft_sinc   //unsigned  , default = 31;
//Bit   7:0         reg_rsft_aa     //unsigned  , default = 31;
#define AUDIO_RSAMP_ACC_ADJ_CTRL0                  ((0x0006  << 2) + 0xfe336000)
//Bit   31:7        reserved                //unsigned
//Bit   6           reg_lock_vld_sel        //unsigned , default = 0;
//Bit   5           reg_loop_dif_clr_en     //unsigned , default = 0;
//Bit   4           reg_aout_force_en       //unsigned , default = 0;
//Bit   3           reserved                //unsigned
//Bit   2           reg_rsamp_adj_out_inv   //unsigned , default = 0;
//Bit   1           reg_rsamp_adj_force_en  //unsigned , default = 0;
//Bit   0           reg_rsamp_adj_en        //unsigned , default = 0;
#define AUDIO_RSAMP_ACC_ADJ_CTRL1                  ((0x0007  << 2) + 0xfe336000)
//Bit   31:16       reg_rsamp_adj_odet_step     //unsigned , default = 8;
//Bit   15:0        reg_rsamp_adj_kmax          //unsigned , default = 32768;
#define AUDIO_RSAMP_ACC_ADJ_SFT                    ((0x0008  << 2) + 0xfe336000)
//Bit   31:30       reserved                //unsigned , default = 0;
//Bit   29          reg_rsamp_adj_dif_sel   //unsigned , default = 0;
//Bit   28:24       reg_rsamp_adj_ki        //unsigned , default = 9;
//Bit   23:21       reserved                //unsigned , default = 0;
//Bit   20:16       reg_rsamp_adj_kp        //unsigned , default = 1;
//Bit   15:13       reserved                //unsigned , default = 0;
//Bit   12:8        reg_rsamp_adj_ki_sft    //unsigned , default = 6;
//Bit   7:6         reserved                //unsigned , default = 0;
//Bit   5:0         reg_rsamp_adj_out_sft   //unsigned , default = 12;
#define AUDIO_RSAMP_ACC_ADJ_IDET_LEN               ((0x0009  << 2) + 0xfe336000)
//Bit   31:0       reg_rsamp_adj_idet_len       //unsigned , default = 10000;
#define AUDIO_RSAMP_ACC_ADJ_FORCE                  ((0x000a  << 2) + 0xfe336000)
//Bit   31:0       reg_rsamp_adj_force_err      //signed , default = 8;
#define AUDIO_RSAMP_ACC_ADJ_KI_FORCE               ((0x000b  << 2) + 0xfe336000)
//Bit   31:0       reg_rsamp_adj_ki_force //signed , default = 0;
#define AUDIO_RSAMP_ACC_WATCHDOG_THRD              ((0x000c  << 2) + 0xfe336000)
//Bit   31:0       reg_watchdog_thrd      //signed , default = 32'h1000;
#define AUDIO_RSAMP_ACC_DBG_INFO                   ((0x000d  << 2) + 0xfe336000)
//Bit   31:16      reg_aout_force_hi        //unsigned , default = 0;
//Bit   15         reserved                 //unsigned , default = 0;
//Bit   14         reg_rsamp_incnt_clr      //unsigned , default = 0;
//Bit   13         reg_rsamp_incnt_vldsel   //unsigned , default = 0;
//Bit   12         reg_rsamp_incnt_en       //unsigned , default = 0;
//Bit   11         reserved                 //unsigned , default = 0;
//Bit   10         reg_rsamp_outcnt_clr     //unsigned , default = 0;
//Bit   9          reg_rsamp_outcnt_vldsel  //unsigned , default = 0;
//Bit   8          reg_rsamp_outcnt_en      //unsigned , default = 0;
//Bit   7:6        reserved                 //unsigned , default = 0;
//Bit   5          reg_rsamp_dbgcnt_clr     //unsigned , default = 0;
//Bit   4          reg_rsamp_dbgcnt_en      //unsigned , default = 0;
//Bit   3          reg_rsamp_iocnt_sel      //unsigned , default = 0;
//Bit   2:0        reg_watchdog_rstsel      //unsigned , default = 4;
#define AUDIO_RSAMP_ACC_AOUT_FORCE                 ((0x000e  << 2) + 0xfe336000)
//Bit   31:0       reg_aout_force_lo        //unsigned , default = 0;
#define AUDIO_RSAMP_ACC_IRQ_CTRL                   ((0x000f  << 2) + 0xfe336000)
//Bit   31:16      reg_irq_thrd             //unsigned , default = 0;
//Bit   15:12      reserved                 //unsigned , default = 0;
//Bit   11:8       reg_irq_sel              //unsigned , default = 0;
//Bit   7:4        reg_irq_clr              //unsigned , default = 0;
//Bit   3:0        reg_irq_en               //unsigned , default = 0;
#define AUDIO_RSAMP_ACC_PKG_NUM                    ((0x0018  << 2) + 0xfe336000)
//Bit   31:0       reg_pkg_num              //unsigned , default = 5000;
#define AUDIO_RSAMP_ACC_PKG_CTRL                   ((0x0019  << 2) + 0xfe336000)
//Bit   31:16   reg_tim_out_num             //unsigned , default = 2000;
//Bit   15:2    reserved                    //unsigned , default = 0;
//Bit   1       reg_tim_out_en              //unsigned , default = 1;
//Bit   0       reg_pkg_end_sel             //unsigned , default = 0;
#define AUDIO_RSAMP_ACC_POST_COEF0                 ((0x0020  << 2) + 0xfe336000)
//Bit   31:0       reg_post_coef0 //signed  , default = 0;
#define AUDIO_RSAMP_ACC_POST_COEF1                 ((0x0021  << 2) + 0xfe336000)
//Bit   31:0       reg_post_coef1 //signed  , default = 0;
#define AUDIO_RSAMP_ACC_POST_COEF2                 ((0x0022  << 2) + 0xfe336000)
//Bit   31:0       reg_post_coef2 //signed  , default = 0;
#define AUDIO_RSAMP_ACC_POST_COEF3                 ((0x0023  << 2) + 0xfe336000)
//Bit   31:0       reg_post_coef3 //signed  , default = 0;
#define AUDIO_RSAMP_ACC_POST_COEF4                 ((0x0024  << 2) + 0xfe336000)
//Bit   31:0       reg_post_coef4 //signed  , default = 0;
#define AUDIO_RSAMP_ACC_AA_COEF_ADDR               ((0x0030  << 2) + 0xfe336000)
//Bit   31:0       reg_aa_coef_addr     //unsigned, default = 0;
#define AUDIO_RSAMP_ACC_AA_COEF_DATA               ((0x0031  << 2) + 0xfe336000)
//Bit   31:0       reg_aa_coef_data     //signed  , default = 0;
#define AUDIO_RSAMP_ACC_SINC_COEF_ADDR             ((0x0040  << 2) + 0xfe336000)
//Bit   31:0       reg_sinc_coef_addr   //unsigned, default = 0;
#define AUDIO_RSAMP_ACC_SINC_COEF_DATA             ((0x0041  << 2) + 0xfe336000)
//Bit   31:0       reg_sinc_coef_data   //signed  , default = 0;
#define AUDIO_RSAMP_ACC_RO_STATUS                  ((0x0050  << 2) + 0xfe336000)
//Bit   31:0       ro_rsamp_stat  //{din_chx_chk_err,is_idle_st,rsamp_fifo_over_cnt[7:0]}
#define AUDIO_RSAMP_ACC_RO_ADJ_FREQ                ((0x0051  << 2) + 0xfe336000)
//Bit   31:0       ro_rsamp_adj_freq
#define AUDIO_RSAMP_ACC_RO_ADJ_DIFF_BAK            ((0x0052  << 2) + 0xfe336000)
//Bit   31:0       ro_det_diff_bak
#define AUDIO_RSAMP_ACC_RO_ADJ_DIFF_DLT            ((0x0053  << 2) + 0xfe336000)
//Bit   31:0       ro_det_diff_dlt
#define AUDIO_RSAMP_ACC_RO_ADJ_PHS_ERR             ((0x0054  << 2) + 0xfe336000)
//Bit   31:0       ro_det_phase_err
#define AUDIO_RSAMP_ACC_RO_ADJ_KI_OUT              ((0x0055  << 2) + 0xfe336000)
//Bit   31:0       ro_rsamp_ki_out
#define AUDIO_RSAMP_ACC_RO_IN_CNT                  ((0x0056  << 2) + 0xfe336000)
//Bit   31:0       ro_rsamp_in_cnt
#define AUDIO_RSAMP_ACC_RO_OUT_CNT                 ((0x0057  << 2) + 0xfe336000)
//Bit   31:0       ro_rsamp_out_cnt
#define AUDIO_RSAMP_ACC_RO_ADJ_PHS_ERR_VAR         ((0x0058  << 2) + 0xfe336000)
//Bit   31:0       ro_det_phase_err_var
//
// Closing file:  ./RESAMPLE_ACC.h
//
//
// Closing file:  ./REG_LIST_AUDIO_RTL.h
//
//
// Reading file:  ./REG_LIST_DSP_RTL.h
//
// synopsys translate_off
// synopsys translate_on
//========================================================================
//  DSPA - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xff000000
// -----------------------------------------------
#define DSP_CFG0                                   ((0x0000  << 2) + 0xff000000)
#define DSP_CFG1                                   ((0x0001  << 2) + 0xff000000)
#define DSP_CFG2                                   ((0x0002  << 2) + 0xff000000)
#define DSP_IMPWIRE                                ((0x0003  << 2) + 0xff000000)
#define DSP_RESET_VEC                              ((0x0004  << 2) + 0xff000000)
#define DSP_SEC_CFG0                               ((0x0006  << 2) + 0xff000000)
#define DSP_SEC_CFG1                               ((0x0007  << 2) + 0xff000000)
#define DSP_IRQ_CTRL0                              ((0x0010  << 2) + 0xff000000)
#define DSP_IRQ_CTRL1                              ((0x0011  << 2) + 0xff000000)
#define DSP_IRQ_CTRL2                              ((0x0012  << 2) + 0xff000000)
#define DSP_IRQ_CTRL3                              ((0x0013  << 2) + 0xff000000)
#define DSP_IRQ_CTRL4                              ((0x0014  << 2) + 0xff000000)
#define DSP_IRQ_CTRL5                              ((0x0015  << 2) + 0xff000000)
#define DSP_IRQ_CTRL6                              ((0x0016  << 2) + 0xff000000)
#define DSP_IRQ_CTRL7                              ((0x0017  << 2) + 0xff000000)
#define DSP_IRQ_CTRL8                              ((0x0018  << 2) + 0xff000000)
#define DSP_IRQ_CTRL9                              ((0x0019  << 2) + 0xff000000)
#define DSP_IRQ_STS                                ((0x001f  << 2) + 0xff000000)
#define DSP_REMAP0                                 ((0x0020  << 2) + 0xff000000)
#define DSP_REMAP1                                 ((0x0021  << 2) + 0xff000000)
#define DSP_REMAP2                                 ((0x0022  << 2) + 0xff000000)
#define DSP_STS0                                   ((0x0040  << 2) + 0xff000000)
#define DSP_STS1                                   ((0x0041  << 2) + 0xff000000)
#define DSP_STS2                                   ((0x0042  << 2) + 0xff000000)
#define DSP_STS3                                   ((0x0043  << 2) + 0xff000000)
#define DSP_STS4                                   ((0x0044  << 2) + 0xff000000)
#define DSP_STS5                                   ((0x0045  << 2) + 0xff000000)
#define DSP_QIF_CTRL                               ((0x0080  << 2) + 0xff000000)
#define DSP_QIF_STS                                ((0x0081  << 2) + 0xff000000)
#define DSP_WRFIFO_TOCPUA                          ((0x0082  << 2) + 0xff000000)
#define DSP_WRFIFO_TOCPUB                          ((0x0083  << 2) + 0xff000000)
#define DSP_WRFIFO_TODSP                           ((0x0084  << 2) + 0xff000000)
#define DSP_RDFIFO_FRCPUA                          ((0x0088  << 2) + 0xff000000)
#define DSP_RDFIFO_FRCPUB                          ((0x0089  << 2) + 0xff000000)
#define DSP_RDFIFO_FRDSP                           ((0x008a  << 2) + 0xff000000)
#define DSP_PM_CTRL                                ((0x0090  << 2) + 0xff000000)
#define DSP_PDEBUGDATA_STS                         ((0x0091  << 2) + 0xff000000)
#define DSP_PDEBUGINST_STS                         ((0x0092  << 2) + 0xff000000)
#define DSP_PDEBUGLS0STAT_STS                      ((0x0093  << 2) + 0xff000000)
#define DSP_PDEBUGLS1STAT_STS                      ((0x0094  << 2) + 0xff000000)
#define DSP_PDEBUGOUTPIF_STS                       ((0x0095  << 2) + 0xff000000)
#define DSP_PDEBUGPC_STS                           ((0x0096  << 2) + 0xff000000)
#define DSP_PDEBUGPREFETCHL1FILL_STS               ((0x0097  << 2) + 0xff000000)
#define DSP_PDEBUGPREFETCHLOOKUP_STS               ((0x0098  << 2) + 0xff000000)
#define DSP_PDEBUGSTATUS_STS                       ((0x0099  << 2) + 0xff000000)
//========================================================================
//  DSPB - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe350000
// -----------------------------------------------
#define DSPB_CFG0                                  ((0x0000  << 2) + 0xfe350000)
#define DSPB_CFG1                                  ((0x0001  << 2) + 0xfe350000)
#define DSPB_CFG2                                  ((0x0002  << 2) + 0xfe350000)
#define DSPB_IMPWIRE                               ((0x0003  << 2) + 0xfe350000)
#define DSPB_RESET_VEC                             ((0x0004  << 2) + 0xfe350000)
#define DSPB_SEC_CFG0                              ((0x0006  << 2) + 0xfe350000)
#define DSPB_SEC_CFG1                              ((0x0007  << 2) + 0xfe350000)
#define DSPB_IRQ_CTRL0                             ((0x0010  << 2) + 0xfe350000)
#define DSPB_IRQ_CTRL1                             ((0x0011  << 2) + 0xfe350000)
#define DSPB_IRQ_CTRL2                             ((0x0012  << 2) + 0xfe350000)
#define DSPB_IRQ_CTRL3                             ((0x0013  << 2) + 0xfe350000)
#define DSPB_IRQ_CTRL4                             ((0x0014  << 2) + 0xfe350000)
#define DSPB_IRQ_CTRL5                             ((0x0015  << 2) + 0xfe350000)
#define DSPB_IRQ_CTRL6                             ((0x0016  << 2) + 0xfe350000)
#define DSPB_IRQ_CTRL7                             ((0x0017  << 2) + 0xfe350000)
#define DSPB_IRQ_CTRL8                             ((0x0018  << 2) + 0xfe350000)
#define DSPB_IRQ_CTRL9                             ((0x0019  << 2) + 0xfe350000)
#define DSPB_IRQ_STS                               ((0x001f  << 2) + 0xfe350000)
#define DSPB_REMAP0                                ((0x0020  << 2) + 0xfe350000)
#define DSPB_REMAP1                                ((0x0021  << 2) + 0xfe350000)
#define DSPB_REMAP2                                ((0x0022  << 2) + 0xfe350000)
#define DSPB_STS0                                  ((0x0040  << 2) + 0xfe350000)
#define DSPB_STS1                                  ((0x0041  << 2) + 0xfe350000)
#define DSPB_STS2                                  ((0x0042  << 2) + 0xfe350000)
#define DSPB_STS3                                  ((0x0043  << 2) + 0xfe350000)
#define DSPB_STS4                                  ((0x0044  << 2) + 0xfe350000)
#define DSPB_STS5                                  ((0x0045  << 2) + 0xfe350000)
#define DSPB_QIF_CTRL                              ((0x0080  << 2) + 0xfe350000)
#define DSPB_QIF_STS                               ((0x0081  << 2) + 0xfe350000)
#define DSPB_WRFIFO_TOCPUA                         ((0x0082  << 2) + 0xfe350000)
#define DSPB_WRFIFO_TOCPUB                         ((0x0083  << 2) + 0xfe350000)
#define DSPB_WRFIFO_TODSP                          ((0x0084  << 2) + 0xfe350000)
#define DSPB_RDFIFO_FRCPUA                         ((0x0088  << 2) + 0xfe350000)
#define DSPB_RDFIFO_FRCPUB                         ((0x0089  << 2) + 0xfe350000)
#define DSPB_RDFIFO_FRDSP                          ((0x008a  << 2) + 0xfe350000)
#define DSPB_PM_CTRL                               ((0x0090  << 2) + 0xfe350000)
#define DSPB_PDEBUGDATA_STS                        ((0x0091  << 2) + 0xfe350000)
#define DSPB_PDEBUGINST_STS                        ((0x0092  << 2) + 0xfe350000)
#define DSPB_PDEBUGLS0STAT_STS                     ((0x0093  << 2) + 0xfe350000)
#define DSPB_PDEBUGLS1STAT_STS                     ((0x0094  << 2) + 0xfe350000)
#define DSPB_PDEBUGOUTPIF_STS                      ((0x0095  << 2) + 0xfe350000)
#define DSPB_PDEBUGPC_STS                          ((0x0096  << 2) + 0xfe350000)
#define DSPB_PDEBUGPREFETCHL1FILL_STS              ((0x0097  << 2) + 0xfe350000)
#define DSPB_PDEBUGPREFETCHLOOKUP_STS              ((0x0098  << 2) + 0xfe350000)
#define DSPB_PDEBUGSTATUS_STS                      ((0x0099  << 2) + 0xfe350000)
// synopsys translate_off
// synopsys translate_on
//
// Closing file:  ./REG_LIST_DSP_RTL.h
//
//
// Reading file:  ./REG_LIST_SECURITY_RTL.h
//
//
//***************************************************************************
// Title:      REG_LIST_SECURITY_RTL.h
//
// Author:     shan.luan
//
// Created:    23:09:44 28/02/2020
//
// Description:
//
// Note:
//
// History:
//
//***************************************************************************
//========================================================================
//  TS_DEMUX_REG - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe444000
// -----------------------------------------------
#define RCH_READY_CHANNEL_0                        ((0x0000  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_1                        ((0x0008  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_2                        ((0x0010  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_3                        ((0x0018  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_4                        ((0x0020  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_5                        ((0x0028  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_6                        ((0x0030  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_7                        ((0x0038  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_8                        ((0x0040  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_9                        ((0x0048  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_10                       ((0x0050  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_11                       ((0x0058  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_12                       ((0x0060  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_13                       ((0x0068  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_14                       ((0x0070  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_15                       ((0x0078  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_16                       ((0x0080  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_17                       ((0x0088  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_18                       ((0x0090  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_19                       ((0x0098  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_20                       ((0x00a0  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_21                       ((0x00a8  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_22                       ((0x00b0  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_23                       ((0x00b8  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_24                       ((0x00c0  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_25                       ((0x00c8  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_26                       ((0x00d0  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_27                       ((0x00d8  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_28                       ((0x00e0  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_29                       ((0x00e8  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_30                       ((0x00f0  << 2) + 0xfe444000)
#define RCH_READY_CHANNEL_31                       ((0x00f8  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_0                       ((0x0001  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_1                       ((0x0009  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_2                       ((0x0011  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_3                       ((0x0019  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_4                       ((0x0021  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_5                       ((0x0029  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_6                       ((0x0031  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_7                       ((0x0039  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_8                       ((0x0041  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_9                       ((0x0049  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_10                      ((0x0051  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_11                      ((0x0059  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_12                      ((0x0061  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_13                      ((0x0069  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_14                      ((0x0071  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_15                      ((0x0079  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_16                      ((0x0081  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_17                      ((0x0089  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_18                      ((0x0091  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_19                      ((0x0099  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_20                      ((0x00a1  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_21                      ((0x00a9  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_22                      ((0x00b1  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_23                      ((0x00b9  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_24                      ((0x00c1  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_25                      ((0x00c9  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_26                      ((0x00d1  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_27                      ((0x00d9  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_28                      ((0x00e1  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_29                      ((0x00e9  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_30                      ((0x00f1  << 2) + 0xfe444000)
#define RCH_STATUS_CHANNEL_31                      ((0x00f9  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_0                          ((0x0002  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_1                          ((0x000a  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_2                          ((0x0012  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_3                          ((0x001a  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_4                          ((0x0022  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_5                          ((0x002a  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_6                          ((0x0032  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_7                          ((0x003a  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_8                          ((0x0042  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_9                          ((0x004a  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_10                         ((0x0052  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_11                         ((0x005a  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_12                         ((0x0062  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_13                         ((0x006a  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_14                         ((0x0072  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_15                         ((0x007a  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_16                         ((0x0082  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_17                         ((0x008a  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_18                         ((0x0092  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_19                         ((0x009a  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_20                         ((0x00a2  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_21                         ((0x00aa  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_22                         ((0x00b2  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_23                         ((0x00ba  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_24                         ((0x00c2  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_25                         ((0x00ca  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_26                         ((0x00d2  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_27                         ((0x00da  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_28                         ((0x00e2  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_29                         ((0x00ea  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_30                         ((0x00f2  << 2) + 0xfe444000)
#define RCH_CFG_CHANNEL_31                         ((0x00fa  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_0                         ((0x0003  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_1                         ((0x000b  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_2                         ((0x0013  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_3                         ((0x001b  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_4                         ((0x0023  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_5                         ((0x002b  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_6                         ((0x0033  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_7                         ((0x003b  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_8                         ((0x0043  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_9                         ((0x004b  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_10                        ((0x0053  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_11                        ((0x005b  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_12                        ((0x0063  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_13                        ((0x006b  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_14                        ((0x0073  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_15                        ((0x007b  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_16                        ((0x0083  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_17                        ((0x008b  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_18                        ((0x0093  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_19                        ((0x009b  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_20                        ((0x00a3  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_21                        ((0x00ab  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_22                        ((0x00b3  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_23                        ((0x00bb  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_24                        ((0x00c3  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_25                        ((0x00cb  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_26                        ((0x00d3  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_27                        ((0x00db  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_28                        ((0x00e3  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_29                        ((0x00eb  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_30                        ((0x00f3  << 2) + 0xfe444000)
#define RCH_ADDR_CHANNEL_31                        ((0x00fb  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_0                          ((0x0004  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_1                          ((0x000c  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_2                          ((0x0014  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_3                          ((0x001c  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_4                          ((0x0024  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_5                          ((0x002c  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_6                          ((0x0034  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_7                          ((0x003c  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_8                          ((0x0044  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_9                          ((0x004c  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_10                         ((0x0054  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_11                         ((0x005c  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_12                         ((0x0064  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_13                         ((0x006c  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_14                         ((0x0074  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_15                         ((0x007c  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_16                         ((0x0084  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_17                         ((0x008c  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_18                         ((0x0094  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_19                         ((0x009c  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_20                         ((0x00a4  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_21                         ((0x00ac  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_22                         ((0x00b4  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_23                         ((0x00bc  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_24                         ((0x00c4  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_25                         ((0x00cc  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_26                         ((0x00d4  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_27                         ((0x00dc  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_28                         ((0x00e4  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_29                         ((0x00ec  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_30                         ((0x00f4  << 2) + 0xfe444000)
#define RCH_LEN_CHANNEL_31                         ((0x00fc  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_0                       ((0x0005  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_1                       ((0x000d  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_2                       ((0x0015  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_3                       ((0x001d  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_4                       ((0x0025  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_5                       ((0x002d  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_6                       ((0x0035  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_7                       ((0x003d  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_8                       ((0x0045  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_9                       ((0x004d  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_10                      ((0x0055  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_11                      ((0x005d  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_12                      ((0x0065  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_13                      ((0x006d  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_14                      ((0x0075  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_15                      ((0x007d  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_16                      ((0x0085  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_17                      ((0x008d  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_18                      ((0x0095  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_19                      ((0x009d  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_20                      ((0x00a5  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_21                      ((0x00ad  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_22                      ((0x00b5  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_23                      ((0x00bd  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_24                      ((0x00c5  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_25                      ((0x00cd  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_26                      ((0x00d5  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_27                      ((0x00dd  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_28                      ((0x00e5  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_29                      ((0x00ed  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_30                      ((0x00f5  << 2) + 0xfe444000)
#define RCH_RD_LEN_CHANNEL_31                      ((0x00fd  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_0                          ((0x0006  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_1                          ((0x000e  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_2                          ((0x0016  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_3                          ((0x001e  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_4                          ((0x0026  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_5                          ((0x002e  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_6                          ((0x0036  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_7                          ((0x003e  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_8                          ((0x0046  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_9                          ((0x004e  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_10                         ((0x0056  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_11                         ((0x005e  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_12                         ((0x0066  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_13                         ((0x006e  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_14                         ((0x0076  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_15                         ((0x007e  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_16                         ((0x0086  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_17                         ((0x008e  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_18                         ((0x0096  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_19                         ((0x009e  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_20                         ((0x00a6  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_21                         ((0x00ae  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_22                         ((0x00b6  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_23                         ((0x00be  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_24                         ((0x00c6  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_25                         ((0x00ce  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_26                         ((0x00d6  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_27                         ((0x00de  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_28                         ((0x00e6  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_29                         ((0x00ee  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_30                         ((0x00f6  << 2) + 0xfe444000)
#define RCH_PTR_CHANNEL_31                         ((0x00fe  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_0              ((0x0007  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_1              ((0x000f  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_2              ((0x0017  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_3              ((0x001f  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_4              ((0x0027  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_5              ((0x002f  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_6              ((0x0037  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_7              ((0x003f  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_8              ((0x0047  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_9              ((0x004f  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_10             ((0x0057  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_11             ((0x005f  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_12             ((0x0067  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_13             ((0x006f  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_14             ((0x0077  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_15             ((0x007f  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_16             ((0x0087  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_17             ((0x008f  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_18             ((0x0097  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_19             ((0x009f  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_20             ((0x00a7  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_21             ((0x00af  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_22             ((0x00b7  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_23             ((0x00bf  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_24             ((0x00c7  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_25             ((0x00cf  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_26             ((0x00d7  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_27             ((0x00df  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_28             ((0x00e7  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_29             ((0x00ef  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_30             ((0x00f7  << 2) + 0xfe444000)
#define RCH_PKT_SYNC_STATUS_CHANNEL_31             ((0x00ff  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_0                        ((0x0400  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_1                        ((0x0408  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_2                        ((0x0410  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_3                        ((0x0418  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_4                        ((0x0420  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_5                        ((0x0428  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_6                        ((0x0430  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_7                        ((0x0438  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_8                        ((0x0440  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_9                        ((0x0448  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_10                       ((0x0450  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_11                       ((0x0458  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_12                       ((0x0460  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_13                       ((0x0468  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_14                       ((0x0470  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_15                       ((0x0478  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_16                       ((0x0480  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_17                       ((0x0488  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_18                       ((0x0490  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_19                       ((0x0498  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_20                       ((0x04a0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_21                       ((0x04a8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_22                       ((0x04b0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_23                       ((0x04b8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_24                       ((0x04c0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_25                       ((0x04c8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_26                       ((0x04d0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_27                       ((0x04d8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_28                       ((0x04e0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_29                       ((0x04e8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_30                       ((0x04f0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_31                       ((0x04f8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_32                       ((0x0500  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_33                       ((0x0508  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_34                       ((0x0510  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_35                       ((0x0518  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_36                       ((0x0520  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_37                       ((0x0528  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_38                       ((0x0530  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_39                       ((0x0538  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_40                       ((0x0540  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_41                       ((0x0548  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_42                       ((0x0550  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_43                       ((0x0558  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_44                       ((0x0560  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_45                       ((0x0568  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_46                       ((0x0570  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_47                       ((0x0578  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_48                       ((0x0580  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_49                       ((0x0588  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_50                       ((0x0590  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_51                       ((0x0598  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_52                       ((0x05a0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_53                       ((0x05a8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_54                       ((0x05b0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_55                       ((0x05b8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_56                       ((0x05c0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_57                       ((0x05c8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_58                       ((0x05d0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_59                       ((0x05d8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_60                       ((0x05e0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_61                       ((0x05e8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_62                       ((0x05f0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_63                       ((0x05f8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_64                       ((0x0600  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_65                       ((0x0608  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_66                       ((0x0610  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_67                       ((0x0618  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_68                       ((0x0620  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_69                       ((0x0628  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_70                       ((0x0630  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_71                       ((0x0638  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_72                       ((0x0640  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_73                       ((0x0648  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_74                       ((0x0650  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_75                       ((0x0658  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_76                       ((0x0660  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_77                       ((0x0668  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_78                       ((0x0670  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_79                       ((0x0678  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_80                       ((0x0680  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_81                       ((0x0688  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_82                       ((0x0690  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_83                       ((0x0698  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_84                       ((0x06a0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_85                       ((0x06a8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_86                       ((0x06b0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_87                       ((0x06b8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_88                       ((0x06c0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_89                       ((0x06c8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_90                       ((0x06d0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_91                       ((0x06d8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_92                       ((0x06e0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_93                       ((0x06e8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_94                       ((0x06f0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_95                       ((0x06f8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_96                       ((0x0700  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_97                       ((0x0708  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_98                       ((0x0710  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_99                       ((0x0718  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_100                      ((0x0720  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_101                      ((0x0728  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_102                      ((0x0730  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_103                      ((0x0738  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_104                      ((0x0740  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_105                      ((0x0748  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_106                      ((0x0750  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_107                      ((0x0758  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_108                      ((0x0760  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_109                      ((0x0768  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_110                      ((0x0770  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_111                      ((0x0778  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_112                      ((0x0780  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_113                      ((0x0788  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_114                      ((0x0790  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_115                      ((0x0798  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_116                      ((0x07a0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_117                      ((0x07a8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_118                      ((0x07b0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_119                      ((0x07b8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_120                      ((0x07c0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_121                      ((0x07c8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_122                      ((0x07d0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_123                      ((0x07d8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_124                      ((0x07e0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_125                      ((0x07e8  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_126                      ((0x07f0  << 2) + 0xfe444000)
#define WCH_READY_CHANNEL_127                      ((0x07f8  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_0                        ((0x0401  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_1                        ((0x0409  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_2                        ((0x0411  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_3                        ((0x0419  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_4                        ((0x0421  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_5                        ((0x0429  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_6                        ((0x0431  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_7                        ((0x0439  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_8                        ((0x0441  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_9                        ((0x0449  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_10                       ((0x0451  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_11                       ((0x0459  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_12                       ((0x0461  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_13                       ((0x0469  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_14                       ((0x0471  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_15                       ((0x0479  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_16                       ((0x0481  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_17                       ((0x0489  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_18                       ((0x0491  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_19                       ((0x0499  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_20                       ((0x04a1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_21                       ((0x04a9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_22                       ((0x04b1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_23                       ((0x04b9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_24                       ((0x04c1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_25                       ((0x04c9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_26                       ((0x04d1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_27                       ((0x04d9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_28                       ((0x04e1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_29                       ((0x04e9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_30                       ((0x04f1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_31                       ((0x04f9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_32                       ((0x0501  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_33                       ((0x0509  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_34                       ((0x0511  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_35                       ((0x0519  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_36                       ((0x0521  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_37                       ((0x0529  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_38                       ((0x0531  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_39                       ((0x0539  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_40                       ((0x0541  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_41                       ((0x0549  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_42                       ((0x0551  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_43                       ((0x0559  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_44                       ((0x0561  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_45                       ((0x0569  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_46                       ((0x0571  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_47                       ((0x0579  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_48                       ((0x0581  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_49                       ((0x0589  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_50                       ((0x0591  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_51                       ((0x0599  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_52                       ((0x05a1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_53                       ((0x05a9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_54                       ((0x05b1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_55                       ((0x05b9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_56                       ((0x05c1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_57                       ((0x05c9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_58                       ((0x05d1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_59                       ((0x05d9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_60                       ((0x05e1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_61                       ((0x05e9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_62                       ((0x05f1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_63                       ((0x05f9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_64                       ((0x0601  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_65                       ((0x0609  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_66                       ((0x0611  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_67                       ((0x0619  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_68                       ((0x0621  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_69                       ((0x0629  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_70                       ((0x0631  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_71                       ((0x0639  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_72                       ((0x0641  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_73                       ((0x0649  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_74                       ((0x0651  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_75                       ((0x0659  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_76                       ((0x0661  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_77                       ((0x0669  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_78                       ((0x0671  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_79                       ((0x0679  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_80                       ((0x0681  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_81                       ((0x0689  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_82                       ((0x0691  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_83                       ((0x0699  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_84                       ((0x06a1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_85                       ((0x06a9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_86                       ((0x06b1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_87                       ((0x06b9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_88                       ((0x06c1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_89                       ((0x06c9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_90                       ((0x06d1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_91                       ((0x06d9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_92                       ((0x06e1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_93                       ((0x06e9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_94                       ((0x06f1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_95                       ((0x06f9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_96                       ((0x0701  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_97                       ((0x0709  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_98                       ((0x0711  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_99                       ((0x0719  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_100                      ((0x0721  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_101                      ((0x0729  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_102                      ((0x0731  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_103                      ((0x0739  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_104                      ((0x0741  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_105                      ((0x0749  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_106                      ((0x0751  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_107                      ((0x0759  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_108                      ((0x0761  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_109                      ((0x0769  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_110                      ((0x0771  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_111                      ((0x0779  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_112                      ((0x0781  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_113                      ((0x0789  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_114                      ((0x0791  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_115                      ((0x0799  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_116                      ((0x07a1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_117                      ((0x07a9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_118                      ((0x07b1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_119                      ((0x07b9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_120                      ((0x07c1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_121                      ((0x07c9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_122                      ((0x07d1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_123                      ((0x07d9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_124                      ((0x07e1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_125                      ((0x07e9  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_126                      ((0x07f1  << 2) + 0xfe444000)
#define WCH_DEBUG_CHANNEL_127                      ((0x07f9  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_0                          ((0x0402  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_1                          ((0x040a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_2                          ((0x0412  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_3                          ((0x041a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_4                          ((0x0422  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_5                          ((0x042a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_6                          ((0x0432  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_7                          ((0x043a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_8                          ((0x0442  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_9                          ((0x044a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_10                         ((0x0452  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_11                         ((0x045a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_12                         ((0x0462  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_13                         ((0x046a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_14                         ((0x0472  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_15                         ((0x047a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_16                         ((0x0482  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_17                         ((0x048a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_18                         ((0x0492  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_19                         ((0x049a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_20                         ((0x04a2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_21                         ((0x04aa  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_22                         ((0x04b2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_23                         ((0x04ba  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_24                         ((0x04c2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_25                         ((0x04ca  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_26                         ((0x04d2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_27                         ((0x04da  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_28                         ((0x04e2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_29                         ((0x04ea  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_30                         ((0x04f2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_31                         ((0x04fa  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_32                         ((0x0502  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_33                         ((0x050a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_34                         ((0x0512  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_35                         ((0x051a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_36                         ((0x0522  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_37                         ((0x052a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_38                         ((0x0532  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_39                         ((0x053a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_40                         ((0x0542  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_41                         ((0x054a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_42                         ((0x0552  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_43                         ((0x055a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_44                         ((0x0562  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_45                         ((0x056a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_46                         ((0x0572  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_47                         ((0x057a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_48                         ((0x0582  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_49                         ((0x058a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_50                         ((0x0592  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_51                         ((0x059a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_52                         ((0x05a2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_53                         ((0x05aa  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_54                         ((0x05b2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_55                         ((0x05ba  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_56                         ((0x05c2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_57                         ((0x05ca  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_58                         ((0x05d2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_59                         ((0x05da  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_60                         ((0x05e2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_61                         ((0x05ea  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_62                         ((0x05f2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_63                         ((0x05fa  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_64                         ((0x0602  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_65                         ((0x060a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_66                         ((0x0612  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_67                         ((0x061a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_68                         ((0x0622  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_69                         ((0x062a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_70                         ((0x0632  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_71                         ((0x063a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_72                         ((0x0642  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_73                         ((0x064a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_74                         ((0x0652  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_75                         ((0x065a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_76                         ((0x0662  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_77                         ((0x066a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_78                         ((0x0672  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_79                         ((0x067a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_80                         ((0x0682  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_81                         ((0x068a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_82                         ((0x0692  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_83                         ((0x069a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_84                         ((0x06a2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_85                         ((0x06aa  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_86                         ((0x06b2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_87                         ((0x06ba  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_88                         ((0x06c2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_89                         ((0x06ca  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_90                         ((0x06d2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_91                         ((0x06da  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_92                         ((0x06e2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_93                         ((0x06ea  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_94                         ((0x06f2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_95                         ((0x06fa  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_96                         ((0x0702  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_97                         ((0x070a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_98                         ((0x0712  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_99                         ((0x071a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_100                        ((0x0722  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_101                        ((0x072a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_102                        ((0x0732  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_103                        ((0x073a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_104                        ((0x0742  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_105                        ((0x074a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_106                        ((0x0752  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_107                        ((0x075a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_108                        ((0x0762  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_109                        ((0x076a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_110                        ((0x0772  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_111                        ((0x077a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_112                        ((0x0782  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_113                        ((0x078a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_114                        ((0x0792  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_115                        ((0x079a  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_116                        ((0x07a2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_117                        ((0x07aa  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_118                        ((0x07b2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_119                        ((0x07ba  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_120                        ((0x07c2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_121                        ((0x07ca  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_122                        ((0x07d2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_123                        ((0x07da  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_124                        ((0x07e2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_125                        ((0x07ea  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_126                        ((0x07f2  << 2) + 0xfe444000)
#define WCH_CFG_CHANNEL_127                        ((0x07fa  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_0                         ((0x0403  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_1                         ((0x040b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_2                         ((0x0413  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_3                         ((0x041b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_4                         ((0x0423  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_5                         ((0x042b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_6                         ((0x0433  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_7                         ((0x043b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_8                         ((0x0443  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_9                         ((0x044b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_10                        ((0x0453  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_11                        ((0x045b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_12                        ((0x0463  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_13                        ((0x046b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_14                        ((0x0473  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_15                        ((0x047b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_16                        ((0x0483  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_17                        ((0x048b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_18                        ((0x0493  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_19                        ((0x049b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_20                        ((0x04a3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_21                        ((0x04ab  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_22                        ((0x04b3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_23                        ((0x04bb  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_24                        ((0x04c3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_25                        ((0x04cb  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_26                        ((0x04d3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_27                        ((0x04db  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_28                        ((0x04e3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_29                        ((0x04eb  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_30                        ((0x04f3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_31                        ((0x04fb  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_32                        ((0x0503  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_33                        ((0x050b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_34                        ((0x0513  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_35                        ((0x051b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_36                        ((0x0523  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_37                        ((0x052b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_38                        ((0x0533  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_39                        ((0x053b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_40                        ((0x0543  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_41                        ((0x054b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_42                        ((0x0553  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_43                        ((0x055b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_44                        ((0x0563  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_45                        ((0x056b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_46                        ((0x0573  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_47                        ((0x057b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_48                        ((0x0583  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_49                        ((0x058b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_50                        ((0x0593  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_51                        ((0x059b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_52                        ((0x05a3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_53                        ((0x05ab  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_54                        ((0x05b3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_55                        ((0x05bb  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_56                        ((0x05c3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_57                        ((0x05cb  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_58                        ((0x05d3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_59                        ((0x05db  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_60                        ((0x05e3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_61                        ((0x05eb  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_62                        ((0x05f3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_63                        ((0x05fb  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_64                        ((0x0603  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_65                        ((0x060b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_66                        ((0x0613  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_67                        ((0x061b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_68                        ((0x0623  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_69                        ((0x062b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_70                        ((0x0633  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_71                        ((0x063b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_72                        ((0x0643  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_73                        ((0x064b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_74                        ((0x0653  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_75                        ((0x065b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_76                        ((0x0663  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_77                        ((0x066b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_78                        ((0x0673  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_79                        ((0x067b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_80                        ((0x0683  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_81                        ((0x068b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_82                        ((0x0693  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_83                        ((0x069b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_84                        ((0x06a3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_85                        ((0x06ab  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_86                        ((0x06b3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_87                        ((0x06bb  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_88                        ((0x06c3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_89                        ((0x06cb  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_90                        ((0x06d3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_91                        ((0x06db  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_92                        ((0x06e3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_93                        ((0x06eb  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_94                        ((0x06f3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_95                        ((0x06fb  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_96                        ((0x0703  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_97                        ((0x070b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_98                        ((0x0713  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_99                        ((0x071b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_100                       ((0x0723  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_101                       ((0x072b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_102                       ((0x0733  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_103                       ((0x073b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_104                       ((0x0743  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_105                       ((0x074b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_106                       ((0x0753  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_107                       ((0x075b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_108                       ((0x0763  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_109                       ((0x076b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_110                       ((0x0773  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_111                       ((0x077b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_112                       ((0x0783  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_113                       ((0x078b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_114                       ((0x0793  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_115                       ((0x079b  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_116                       ((0x07a3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_117                       ((0x07ab  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_118                       ((0x07b3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_119                       ((0x07bb  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_120                       ((0x07c3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_121                       ((0x07cb  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_122                       ((0x07d3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_123                       ((0x07db  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_124                       ((0x07e3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_125                       ((0x07eb  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_126                       ((0x07f3  << 2) + 0xfe444000)
#define WCH_ADDR_CHANNEL_127                       ((0x07fb  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_0                          ((0x0404  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_1                          ((0x040c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_2                          ((0x0414  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_3                          ((0x041c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_4                          ((0x0424  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_5                          ((0x042c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_6                          ((0x0434  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_7                          ((0x043c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_8                          ((0x0444  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_9                          ((0x044c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_10                         ((0x0454  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_11                         ((0x045c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_12                         ((0x0464  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_13                         ((0x046c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_14                         ((0x0474  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_15                         ((0x047c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_16                         ((0x0484  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_17                         ((0x048c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_18                         ((0x0494  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_19                         ((0x049c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_20                         ((0x04a4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_21                         ((0x04ac  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_22                         ((0x04b4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_23                         ((0x04bc  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_24                         ((0x04c4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_25                         ((0x04cc  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_26                         ((0x04d4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_27                         ((0x04dc  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_28                         ((0x04e4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_29                         ((0x04ec  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_30                         ((0x04f4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_31                         ((0x04fc  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_32                         ((0x0504  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_33                         ((0x050c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_34                         ((0x0514  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_35                         ((0x051c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_36                         ((0x0524  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_37                         ((0x052c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_38                         ((0x0534  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_39                         ((0x053c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_40                         ((0x0544  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_41                         ((0x054c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_42                         ((0x0554  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_43                         ((0x055c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_44                         ((0x0564  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_45                         ((0x056c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_46                         ((0x0574  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_47                         ((0x057c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_48                         ((0x0584  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_49                         ((0x058c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_50                         ((0x0594  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_51                         ((0x059c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_52                         ((0x05a4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_53                         ((0x05ac  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_54                         ((0x05b4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_55                         ((0x05bc  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_56                         ((0x05c4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_57                         ((0x05cc  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_58                         ((0x05d4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_59                         ((0x05dc  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_60                         ((0x05e4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_61                         ((0x05ec  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_62                         ((0x05f4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_63                         ((0x05fc  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_64                         ((0x0604  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_65                         ((0x060c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_66                         ((0x0614  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_67                         ((0x061c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_68                         ((0x0624  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_69                         ((0x062c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_70                         ((0x0634  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_71                         ((0x063c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_72                         ((0x0644  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_73                         ((0x064c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_74                         ((0x0654  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_75                         ((0x065c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_76                         ((0x0664  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_77                         ((0x066c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_78                         ((0x0674  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_79                         ((0x067c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_80                         ((0x0684  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_81                         ((0x068c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_82                         ((0x0694  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_83                         ((0x069c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_84                         ((0x06a4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_85                         ((0x06ac  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_86                         ((0x06b4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_87                         ((0x06bc  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_88                         ((0x06c4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_89                         ((0x06cc  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_90                         ((0x06d4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_91                         ((0x06dc  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_92                         ((0x06e4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_93                         ((0x06ec  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_94                         ((0x06f4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_95                         ((0x06fc  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_96                         ((0x0704  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_97                         ((0x070c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_98                         ((0x0714  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_99                         ((0x071c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_100                        ((0x0724  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_101                        ((0x072c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_102                        ((0x0734  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_103                        ((0x073c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_104                        ((0x0744  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_105                        ((0x074c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_106                        ((0x0754  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_107                        ((0x075c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_108                        ((0x0764  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_109                        ((0x076c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_110                        ((0x0774  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_111                        ((0x077c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_112                        ((0x0784  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_113                        ((0x078c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_114                        ((0x0794  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_115                        ((0x079c  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_116                        ((0x07a4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_117                        ((0x07ac  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_118                        ((0x07b4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_119                        ((0x07bc  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_120                        ((0x07c4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_121                        ((0x07cc  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_122                        ((0x07d4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_123                        ((0x07dc  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_124                        ((0x07e4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_125                        ((0x07ec  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_126                        ((0x07f4  << 2) + 0xfe444000)
#define WCH_LEN_CHANNEL_127                        ((0x07fc  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_0                       ((0x0405  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_1                       ((0x040d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_2                       ((0x0415  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_3                       ((0x041d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_4                       ((0x0425  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_5                       ((0x042d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_6                       ((0x0435  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_7                       ((0x043d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_8                       ((0x0445  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_9                       ((0x044d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_10                      ((0x0455  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_11                      ((0x045d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_12                      ((0x0465  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_13                      ((0x046d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_14                      ((0x0475  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_15                      ((0x047d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_16                      ((0x0485  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_17                      ((0x048d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_18                      ((0x0495  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_19                      ((0x049d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_20                      ((0x04a5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_21                      ((0x04ad  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_22                      ((0x04b5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_23                      ((0x04bd  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_24                      ((0x04c5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_25                      ((0x04cd  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_26                      ((0x04d5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_27                      ((0x04dd  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_28                      ((0x04e5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_29                      ((0x04ed  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_30                      ((0x04f5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_31                      ((0x04fd  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_32                      ((0x0505  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_33                      ((0x050d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_34                      ((0x0515  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_35                      ((0x051d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_36                      ((0x0525  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_37                      ((0x052d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_38                      ((0x0535  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_39                      ((0x053d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_40                      ((0x0545  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_41                      ((0x054d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_42                      ((0x0555  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_43                      ((0x055d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_44                      ((0x0565  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_45                      ((0x056d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_46                      ((0x0575  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_47                      ((0x057d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_48                      ((0x0585  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_49                      ((0x058d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_50                      ((0x0595  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_51                      ((0x059d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_52                      ((0x05a5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_53                      ((0x05ad  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_54                      ((0x05b5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_55                      ((0x05bd  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_56                      ((0x05c5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_57                      ((0x05cd  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_58                      ((0x05d5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_59                      ((0x05dd  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_60                      ((0x05e5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_61                      ((0x05ed  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_62                      ((0x05f5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_63                      ((0x05fd  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_64                      ((0x0605  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_65                      ((0x060d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_66                      ((0x0615  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_67                      ((0x061d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_68                      ((0x0625  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_69                      ((0x062d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_70                      ((0x0635  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_71                      ((0x063d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_72                      ((0x0645  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_73                      ((0x064d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_74                      ((0x0655  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_75                      ((0x065d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_76                      ((0x0665  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_77                      ((0x066d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_78                      ((0x0675  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_79                      ((0x067d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_80                      ((0x0685  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_81                      ((0x068d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_82                      ((0x0695  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_83                      ((0x069d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_84                      ((0x06a5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_85                      ((0x06ad  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_86                      ((0x06b5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_87                      ((0x06bd  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_88                      ((0x06c5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_89                      ((0x06cd  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_90                      ((0x06d5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_91                      ((0x06dd  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_92                      ((0x06e5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_93                      ((0x06ed  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_94                      ((0x06f5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_95                      ((0x06fd  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_96                      ((0x0705  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_97                      ((0x070d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_98                      ((0x0715  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_99                      ((0x071d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_100                     ((0x0725  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_101                     ((0x072d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_102                     ((0x0735  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_103                     ((0x073d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_104                     ((0x0745  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_105                     ((0x074d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_106                     ((0x0755  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_107                     ((0x075d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_108                     ((0x0765  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_109                     ((0x076d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_110                     ((0x0775  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_111                     ((0x077d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_112                     ((0x0785  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_113                     ((0x078d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_114                     ((0x0795  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_115                     ((0x079d  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_116                     ((0x07a5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_117                     ((0x07ad  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_118                     ((0x07b5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_119                     ((0x07bd  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_120                     ((0x07c5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_121                     ((0x07cd  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_122                     ((0x07d5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_123                     ((0x07dd  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_124                     ((0x07e5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_125                     ((0x07ed  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_126                     ((0x07f5  << 2) + 0xfe444000)
#define WCH_WR_LEN_CHANNEL_127                     ((0x07fd  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_0                          ((0x0406  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_1                          ((0x040e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_2                          ((0x0416  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_3                          ((0x041e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_4                          ((0x0426  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_5                          ((0x042e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_6                          ((0x0436  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_7                          ((0x043e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_8                          ((0x0446  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_9                          ((0x044e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_10                         ((0x0456  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_11                         ((0x045e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_12                         ((0x0466  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_13                         ((0x046e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_14                         ((0x0476  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_15                         ((0x047e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_16                         ((0x0486  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_17                         ((0x048e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_18                         ((0x0496  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_19                         ((0x049e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_20                         ((0x04a6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_21                         ((0x04ae  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_22                         ((0x04b6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_23                         ((0x04be  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_24                         ((0x04c6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_25                         ((0x04ce  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_26                         ((0x04d6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_27                         ((0x04de  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_28                         ((0x04e6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_29                         ((0x04ee  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_30                         ((0x04f6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_31                         ((0x04fe  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_32                         ((0x0506  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_33                         ((0x050e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_34                         ((0x0516  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_35                         ((0x051e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_36                         ((0x0526  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_37                         ((0x052e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_38                         ((0x0536  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_39                         ((0x053e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_40                         ((0x0546  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_41                         ((0x054e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_42                         ((0x0556  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_43                         ((0x055e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_44                         ((0x0566  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_45                         ((0x056e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_46                         ((0x0576  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_47                         ((0x057e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_48                         ((0x0586  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_49                         ((0x058e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_50                         ((0x0596  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_51                         ((0x059e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_52                         ((0x05a6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_53                         ((0x05ae  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_54                         ((0x05b6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_55                         ((0x05be  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_56                         ((0x05c6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_57                         ((0x05ce  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_58                         ((0x05d6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_59                         ((0x05de  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_60                         ((0x05e6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_61                         ((0x05ee  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_62                         ((0x05f6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_63                         ((0x05fe  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_64                         ((0x0606  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_65                         ((0x060e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_66                         ((0x0616  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_67                         ((0x061e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_68                         ((0x0626  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_69                         ((0x062e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_70                         ((0x0636  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_71                         ((0x063e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_72                         ((0x0646  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_73                         ((0x064e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_74                         ((0x0656  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_75                         ((0x065e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_76                         ((0x0666  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_77                         ((0x066e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_78                         ((0x0676  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_79                         ((0x067e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_80                         ((0x0686  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_81                         ((0x068e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_82                         ((0x0696  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_83                         ((0x069e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_84                         ((0x06a6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_85                         ((0x06ae  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_86                         ((0x06b6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_87                         ((0x06be  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_88                         ((0x06c6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_89                         ((0x06ce  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_90                         ((0x06d6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_91                         ((0x06de  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_92                         ((0x06e6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_93                         ((0x06ee  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_94                         ((0x06f6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_95                         ((0x06fe  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_96                         ((0x0706  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_97                         ((0x070e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_98                         ((0x0716  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_99                         ((0x071e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_100                        ((0x0726  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_101                        ((0x072e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_102                        ((0x0736  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_103                        ((0x073e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_104                        ((0x0746  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_105                        ((0x074e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_106                        ((0x0756  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_107                        ((0x075e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_108                        ((0x0766  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_109                        ((0x076e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_110                        ((0x0776  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_111                        ((0x077e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_112                        ((0x0786  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_113                        ((0x078e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_114                        ((0x0796  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_115                        ((0x079e  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_116                        ((0x07a6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_117                        ((0x07ae  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_118                        ((0x07b6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_119                        ((0x07be  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_120                        ((0x07c6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_121                        ((0x07ce  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_122                        ((0x07d6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_123                        ((0x07de  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_124                        ((0x07e6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_125                        ((0x07ee  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_126                        ((0x07f6  << 2) + 0xfe444000)
#define WCH_PTR_CHANNEL_127                        ((0x07fe  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_0                         ((0x0407  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_1                         ((0x040f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_2                         ((0x0417  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_3                         ((0x041f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_4                         ((0x0427  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_5                         ((0x042f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_6                         ((0x0437  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_7                         ((0x043f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_8                         ((0x0447  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_9                         ((0x044f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_10                        ((0x0457  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_11                        ((0x045f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_12                        ((0x0467  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_13                        ((0x046f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_14                        ((0x0477  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_15                        ((0x047f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_16                        ((0x0487  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_17                        ((0x048f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_18                        ((0x0497  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_19                        ((0x049f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_20                        ((0x04a7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_21                        ((0x04af  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_22                        ((0x04b7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_23                        ((0x04bf  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_24                        ((0x04c7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_25                        ((0x04cf  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_26                        ((0x04d7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_27                        ((0x04df  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_28                        ((0x04e7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_29                        ((0x04ef  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_30                        ((0x04f7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_31                        ((0x04ff  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_32                        ((0x0507  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_33                        ((0x050f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_34                        ((0x0517  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_35                        ((0x051f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_36                        ((0x0527  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_37                        ((0x052f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_38                        ((0x0537  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_39                        ((0x053f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_40                        ((0x0547  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_41                        ((0x054f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_42                        ((0x0557  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_43                        ((0x055f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_44                        ((0x0567  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_45                        ((0x056f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_46                        ((0x0577  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_47                        ((0x057f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_48                        ((0x0587  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_49                        ((0x058f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_50                        ((0x0597  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_51                        ((0x059f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_52                        ((0x05a7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_53                        ((0x05af  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_54                        ((0x05b7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_55                        ((0x05bf  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_56                        ((0x05c7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_57                        ((0x05cf  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_58                        ((0x05d7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_59                        ((0x05df  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_60                        ((0x05e7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_61                        ((0x05ef  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_62                        ((0x05f7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_63                        ((0x05ff  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_64                        ((0x0607  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_65                        ((0x060f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_66                        ((0x0617  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_67                        ((0x061f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_68                        ((0x0627  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_69                        ((0x062f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_70                        ((0x0637  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_71                        ((0x063f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_72                        ((0x0647  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_73                        ((0x064f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_74                        ((0x0657  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_75                        ((0x065f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_76                        ((0x0667  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_77                        ((0x066f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_78                        ((0x0677  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_79                        ((0x067f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_80                        ((0x0687  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_81                        ((0x068f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_82                        ((0x0697  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_83                        ((0x069f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_84                        ((0x06a7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_85                        ((0x06af  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_86                        ((0x06b7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_87                        ((0x06bf  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_88                        ((0x06c7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_89                        ((0x06cf  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_90                        ((0x06d7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_91                        ((0x06df  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_92                        ((0x06e7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_93                        ((0x06ef  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_94                        ((0x06f7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_95                        ((0x06ff  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_96                        ((0x0707  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_97                        ((0x070f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_98                        ((0x0717  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_99                        ((0x071f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_100                       ((0x0727  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_101                       ((0x072f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_102                       ((0x0737  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_103                       ((0x073f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_104                       ((0x0747  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_105                       ((0x074f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_106                       ((0x0757  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_107                       ((0x075f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_108                       ((0x0767  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_109                       ((0x076f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_110                       ((0x0777  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_111                       ((0x077f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_112                       ((0x0787  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_113                       ((0x078f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_114                       ((0x0797  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_115                       ((0x079f  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_116                       ((0x07a7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_117                       ((0x07af  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_118                       ((0x07b7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_119                       ((0x07bf  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_120                       ((0x07c7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_121                       ((0x07cf  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_122                       ((0x07d7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_123                       ((0x07df  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_124                       ((0x07e7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_125                       ((0x07ef  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_126                       ((0x07f7  << 2) + 0xfe444000)
#define WCMD_CNT_CHANNEL_127                       ((0x07ff  << 2) + 0xfe444000)
#define DMX_RDMA_INT_MASK                          ((0x0800  << 2) + 0xfe444000)
#define DMX_WDMA_INT_MASK_0                        ((0x0801  << 2) + 0xfe444000)
#define DMX_WDMA_INT_MASK_1                        ((0x0802  << 2) + 0xfe444000)
#define DMX_WDMA_INT_MASK_2                        ((0x0803  << 2) + 0xfe444000)
#define DMX_WDMA_INT_MASK_3                        ((0x0804  << 2) + 0xfe444000)
#define DMX_CLEAN_W_BATCH_0                        ((0x0805  << 2) + 0xfe444000)
#define DMX_CLEAN_W_BATCH_1                        ((0x0806  << 2) + 0xfe444000)
#define DMX_CLEAN_W_BATCH_2                        ((0x0807  << 2) + 0xfe444000)
#define DMX_CLEAN_W_BATCH_3                        ((0x0808  << 2) + 0xfe444000)
#define DMX_CLEAN_RDMA                             ((0x0809  << 2) + 0xfe444000)
#define DMX_CLEAN_WDMA_0                           ((0x080a  << 2) + 0xfe444000)
#define DMX_CLEAN_WDMA_1                           ((0x080b  << 2) + 0xfe444000)
#define DMX_CLEAN_WDMA_2                           ((0x080c  << 2) + 0xfe444000)
#define DMX_CLEAN_WDMA_3                           ((0x080d  << 2) + 0xfe444000)
#define DMX_RDMA_ACTIVE                            ((0x080e  << 2) + 0xfe444000)
#define DMX_WDMA_ACTIVE_0                          ((0x080f  << 2) + 0xfe444000)
#define DMX_WDMA_ACTIVE_1                          ((0x0810  << 2) + 0xfe444000)
#define DMX_WDMA_ACTIVE_2                          ((0x0811  << 2) + 0xfe444000)
#define DMX_WDMA_ACTIVE_3                          ((0x0812  << 2) + 0xfe444000)
#define DMX_DMA_RDONE                              ((0x0813  << 2) + 0xfe444000)
#define DMX_DMA_WDONE_0                            ((0x0814  << 2) + 0xfe444000)
#define DMX_DMA_WDONE_1                            ((0x0815  << 2) + 0xfe444000)
#define DMX_DMA_WDONE_2                            ((0x0816  << 2) + 0xfe444000)
#define DMX_DMA_WDONE_3                            ((0x0817  << 2) + 0xfe444000)
#define DMX_RDES_ERR                               ((0x0818  << 2) + 0xfe444000)
#define DMX_RDES_LEN_ERR                           ((0x0819  << 2) + 0xfe444000)
#define DMX_WDES_ERR_0                             ((0x081a  << 2) + 0xfe444000)
#define DMX_WDES_ERR_1                             ((0x081b  << 2) + 0xfe444000)
#define DMX_WDES_ERR_2                             ((0x081c  << 2) + 0xfe444000)
#define DMX_WDES_ERR_3                             ((0x081d  << 2) + 0xfe444000)
#define DMX_DMA_BATCH_END_0                        ((0x081e  << 2) + 0xfe444000)
#define DMX_DMA_BATCH_END_1                        ((0x081f  << 2) + 0xfe444000)
#define DMX_DMA_BATCH_END_2                        ((0x0820  << 2) + 0xfe444000)
#define DMX_DMA_BATCH_END_3                        ((0x0821  << 2) + 0xfe444000)
#define DMX_WDES_EOC_DONE_0                        ((0x0822  << 2) + 0xfe444000)
#define DMX_WDES_EOC_DONE_1                        ((0x0823  << 2) + 0xfe444000)
#define DMX_WDES_EOC_DONE_2                        ((0x0824  << 2) + 0xfe444000)
#define DMX_WDES_EOC_DONE_3                        ((0x0825  << 2) + 0xfe444000)
#define DMX_WCH_RESP_ERR0                          ((0x0826  << 2) + 0xfe444000)
#define DMX_WCH_RESP_ERR1                          ((0x0827  << 2) + 0xfe444000)
#define DMX_WCH_RESP_ERR2                          ((0x0828  << 2) + 0xfe444000)
#define DMX_WCH_RESP_ERR3                          ((0x0829  << 2) + 0xfe444000)
#define DMX_UPDT_PKT_SYNC                          ((0x0830  << 2) + 0xfe444000)
#define DMX_RCHN_CFG                               ((0x0831  << 2) + 0xfe444000)
#define DMX_WCHN_CFG                               ((0x0832  << 2) + 0xfe444000)
#define DMX_MEM_PD_CRTL                            ((0x0833  << 2) + 0xfe444000)
#define DMX_DMA_BUS_CFG                            ((0x0834  << 2) + 0xfe444000)
#define DMX_DMA_GMW_CFG                            ((0x0835  << 2) + 0xfe444000)
#define DMX_DMA_GMR_CFG                            ((0x0836  << 2) + 0xfe444000)
//========================================================================
//  TS OUTPUT REG - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe442c00
// -----------------------------------------------
#define TS_OUTPUT_PID_RDY                          ((0x0000  << 2) + 0xfe442c00)
#define TS_OUTPUT_TEE_LOCK                         ((0x0001  << 2) + 0xfe442c00)
#define TS_OUTPUT_PID_CFG                          ((0x0002  << 2) + 0xfe442c00)
#define TS_OUTPUT_PID_DAT                          ((0x0003  << 2) + 0xfe442c00)
#define TS_OUTPUT_OUT_CFG                          ((0x0004  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_TAB_ENTRY_0                  ((0x0010  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_TAB_ENTRY_1                  ((0x0011  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_TAB_ENTRY_2                  ((0x0012  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_TAB_ENTRY_3                  ((0x0013  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_TAB_ENTRY_4                  ((0x0014  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_TAB_ENTRY_5                  ((0x0015  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_TAB_ENTRY_6                  ((0x0016  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_TAB_ENTRY_7                  ((0x0017  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_TAB_ENTRY_8                  ((0x0018  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_TAB_ENTRY_9                  ((0x0019  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_TAB_ENTRY_10                 ((0x001a  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_TAB_ENTRY_11                 ((0x001b  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_TAB_ENTRY_12                 ((0x001c  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_TAB_ENTRY_13                 ((0x001d  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_TAB_ENTRY_14                 ((0x001e  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_TAB_ENTRY_15                 ((0x001f  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_0_1                      ((0x0020  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_2_3                      ((0x0021  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_4_5                      ((0x0022  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_6_7                      ((0x0023  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_8_9                      ((0x0024  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_10_11                    ((0x0025  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_12_13                    ((0x0026  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_14_15                    ((0x0027  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_16_17                    ((0x0028  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_18_19                    ((0x0029  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_20_21                    ((0x002a  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_22_23                    ((0x002b  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_24_25                    ((0x002c  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_26_27                    ((0x002d  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_28_29                    ((0x002e  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_30_31                    ((0x002f  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_32_33                    ((0x0030  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_34_35                    ((0x0031  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_36_37                    ((0x0032  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_38_39                    ((0x0033  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_40_41                    ((0x0034  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_42_43                    ((0x0035  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_44_45                    ((0x0036  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_46_47                    ((0x0037  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_48_49                    ((0x0038  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_50_51                    ((0x0039  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_52_53                    ((0x003a  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_54_55                    ((0x003b  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_56_57                    ((0x003c  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_58_59                    ((0x003d  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_60_61                    ((0x003e  << 2) + 0xfe442c00)
#define TS_OUTPUT_SID_TAB_62_63                    ((0x003f  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_0                         ((0x0040  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_1                         ((0x0041  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_2                         ((0x0042  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_3                         ((0x0043  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_4                         ((0x0044  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_5                         ((0x0045  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_6                         ((0x0046  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_7                         ((0x0047  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_8                         ((0x0048  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_9                         ((0x0049  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_10                        ((0x004a  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_11                        ((0x004b  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_12                        ((0x004c  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_13                        ((0x004d  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_14                        ((0x004e  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_15                        ((0x004f  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_16                        ((0x0050  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_17                        ((0x0051  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_18                        ((0x0052  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_19                        ((0x0053  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_20                        ((0x0054  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_21                        ((0x0055  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_22                        ((0x0056  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_23                        ((0x0057  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_24                        ((0x0058  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_25                        ((0x0059  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_26                        ((0x005a  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_27                        ((0x005b  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_28                        ((0x005c  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_29                        ((0x005d  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_30                        ((0x005e  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_31                        ((0x005f  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_32                        ((0x0060  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_33                        ((0x0061  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_34                        ((0x0062  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_35                        ((0x0063  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_36                        ((0x0064  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_37                        ((0x0065  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_38                        ((0x0066  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_39                        ((0x0067  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_40                        ((0x0068  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_41                        ((0x0069  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_42                        ((0x006a  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_43                        ((0x006b  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_44                        ((0x006c  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_45                        ((0x006d  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_46                        ((0x006e  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_47                        ((0x006f  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_48                        ((0x0070  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_49                        ((0x0071  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_50                        ((0x0072  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_51                        ((0x0073  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_52                        ((0x0074  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_53                        ((0x0075  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_54                        ((0x0076  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_55                        ((0x0077  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_56                        ((0x0078  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_57                        ((0x0079  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_58                        ((0x007a  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_59                        ((0x007b  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_60                        ((0x007c  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_61                        ((0x007d  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_62                        ((0x007e  << 2) + 0xfe442c00)
#define TS_OUTPUT_ES_TAB_63                        ((0x007f  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_LSB_0                    ((0x0080  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_MSB_0                    ((0x0081  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_LSB_1                    ((0x0082  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_MSB_1                    ((0x0083  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_LSB_2                    ((0x0084  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_MSB_2                    ((0x0085  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_LSB_3                    ((0x0086  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_MSB_3                    ((0x0087  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_LSB_4                    ((0x0088  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_MSB_4                    ((0x0089  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_LSB_5                    ((0x008a  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_MSB_5                    ((0x008b  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_LSB_6                    ((0x008c  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_MSB_6                    ((0x008d  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_LSB_7                    ((0x008e  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_MSB_7                    ((0x008f  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_LSB_8                    ((0x0090  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_MSB_8                    ((0x0091  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_LSB_9                    ((0x0092  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_MSB_9                    ((0x0093  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_LSB_10                   ((0x0094  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_MSB_10                   ((0x0095  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_LSB_11                   ((0x0096  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_MSB_11                   ((0x0097  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_LSB_12                   ((0x0098  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_MSB_12                   ((0x0099  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_LSB_13                   ((0x009a  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_MSB_13                   ((0x009b  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_LSB_14                   ((0x009c  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_MSB_14                   ((0x009d  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_LSB_15                   ((0x009e  << 2) + 0xfe442c00)
#define TS_OUTPUT_PCR_REG_MSB_15                   ((0x009f  << 2) + 0xfe442c00)
//========================================================================
//  TSD DESC AES REG - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe442000
// -----------------------------------------------
#define TSD_PID_RDY                                ((0x0000  << 2) + 0xfe442000)
#define TSD_TEE_LOCK                               ((0x0001  << 2) + 0xfe442000)
#define TSD_PID_STS                                ((0x0003  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_0                        ((0x0004  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_0                        ((0x0005  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_1                        ((0x0006  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_1                        ((0x0007  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_2                        ((0x0008  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_2                        ((0x0009  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_3                        ((0x000a  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_3                        ((0x000b  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_4                        ((0x000c  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_4                        ((0x000d  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_5                        ((0x000e  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_5                        ((0x000f  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_6                        ((0x0010  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_6                        ((0x0011  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_7                        ((0x0012  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_7                        ((0x0013  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_8                        ((0x0014  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_8                        ((0x0015  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_9                        ((0x0016  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_9                        ((0x0017  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_10                       ((0x0018  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_10                       ((0x0019  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_11                       ((0x001a  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_11                       ((0x001b  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_12                       ((0x001c  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_12                       ((0x001d  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_13                       ((0x001e  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_13                       ((0x001f  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_14                       ((0x0020  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_14                       ((0x0021  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_15                       ((0x0022  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_15                       ((0x0023  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_16                       ((0x0024  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_16                       ((0x0025  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_17                       ((0x0026  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_17                       ((0x0027  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_18                       ((0x0028  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_18                       ((0x0029  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_19                       ((0x002a  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_19                       ((0x002b  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_20                       ((0x002c  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_20                       ((0x002d  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_21                       ((0x002e  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_21                       ((0x002f  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_22                       ((0x0030  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_22                       ((0x0031  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_23                       ((0x0032  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_23                       ((0x0033  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_24                       ((0x0034  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_24                       ((0x0035  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_25                       ((0x0036  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_25                       ((0x0037  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_26                       ((0x0038  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_26                       ((0x0039  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_27                       ((0x003a  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_27                       ((0x003b  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_28                       ((0x003c  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_28                       ((0x003d  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_29                       ((0x003e  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_29                       ((0x003f  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_30                       ((0x0040  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_30                       ((0x0041  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_31                       ((0x0042  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_31                       ((0x0043  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_32                       ((0x0044  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_32                       ((0x0045  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_33                       ((0x0046  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_33                       ((0x0047  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_34                       ((0x0048  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_34                       ((0x0049  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_35                       ((0x004a  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_35                       ((0x004b  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_36                       ((0x004c  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_36                       ((0x004d  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_37                       ((0x004e  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_37                       ((0x004f  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_38                       ((0x0050  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_38                       ((0x0051  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_39                       ((0x0052  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_39                       ((0x0053  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_40                       ((0x0054  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_40                       ((0x0055  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_41                       ((0x0056  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_41                       ((0x0057  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_42                       ((0x0058  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_42                       ((0x0059  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_43                       ((0x005a  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_43                       ((0x005b  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_44                       ((0x005c  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_44                       ((0x005d  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_45                       ((0x005e  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_45                       ((0x005f  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_46                       ((0x0060  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_46                       ((0x0061  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_47                       ((0x0062  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_47                       ((0x0063  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_48                       ((0x0064  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_48                       ((0x0065  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_49                       ((0x0066  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_49                       ((0x0067  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_50                       ((0x0068  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_50                       ((0x0069  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_51                       ((0x006a  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_51                       ((0x006b  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_52                       ((0x006c  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_52                       ((0x006d  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_53                       ((0x006e  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_53                       ((0x006f  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_54                       ((0x0070  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_54                       ((0x0071  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_55                       ((0x0072  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_55                       ((0x0073  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_56                       ((0x0074  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_56                       ((0x0075  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_57                       ((0x0076  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_57                       ((0x0077  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_58                       ((0x0078  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_58                       ((0x0079  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_59                       ((0x007a  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_59                       ((0x007b  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_60                       ((0x007c  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_60                       ((0x007d  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_61                       ((0x007e  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_61                       ((0x007f  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_62                       ((0x0080  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_62                       ((0x0081  << 2) + 0xfe442000)
#define TSD_PID_TABLE_LSB_63                       ((0x0082  << 2) + 0xfe442000)
#define TSD_PID_TABLE_MSB_63                       ((0x0083  << 2) + 0xfe442000)
//========================================================================
// SECURE TOP REG - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe440300
// -----------------------------------------------
#define SEC_TOP_CFG_LOCKABLE                       ((0x0000  << 2) + 0xfe440300)
#define SEC_TOP_CFG_LOCK                           ((0x0001  << 2) + 0xfe440300)
#define SEC_TOP_CFG_WTO                            ((0x0002  << 2) + 0xfe440300)
#define SEC_TOP_N2_GENOUT                          ((0x0003  << 2) + 0xfe440300)
#define SEC_TOP_CFG_REG                            ((0x0004  << 2) + 0xfe440300)
#define SEC_TOP_NSK_CTRL                           ((0x0005  << 2) + 0xfe440300)
#define SEC_TOP_AKL_STS                            ((0x0006  << 2) + 0xfe440300)
#define SEC_TOP_ND_STATUS                          ((0x0007  << 2) + 0xfe440300)
#define SEC_TOP_CFG_DEMUX                          ((0x0008  << 2) + 0xfe440300)
#define SEC_TOP_CFG_DIF                            ((0x000c  << 2) + 0xfe440300)
#define SEC_TOP_NSK_HASH0                          ((0x0010  << 2) + 0xfe440300)
#define SEC_TOP_NSK_HASH1                          ((0x0011  << 2) + 0xfe440300)
#define SEC_TOP_NSK_HASH2                          ((0x0012  << 2) + 0xfe440300)
#define SEC_TOP_NSK_HASH3                          ((0x0013  << 2) + 0xfe440300)
#define SEC_TOP_PATH0_CTRL                         ((0x0028  << 2) + 0xfe440300)
#define SEC_TOP_PATH1_CTRL                         ((0x0029  << 2) + 0xfe440300)
#define SEC_TOP_PATH2_CTRL                         ((0x002a  << 2) + 0xfe440300)
#define SEC_TOP_PATH3_CTRL                         ((0x002b  << 2) + 0xfe440300)
#define SEC_TOP_DEMOD_PKT_CFG0                     ((0x002c  << 2) + 0xfe440300)
#define SEC_TOP_DEMOD_PKT_CFG1                     ((0x002d  << 2) + 0xfe440300)
#define SEC_TOP_DEMOD_PKT_CFG2                     ((0x002e  << 2) + 0xfe440300)
#define SEC_TOP_DEMOD_PKT_CFG3                     ((0x002f  << 2) + 0xfe440300)
#define SEC_TOP_DEMOD_FIFO_CFG0                    ((0x0030  << 2) + 0xfe440300)
#define SEC_TOP_DEMOD_FIFO_CFG1                    ((0x0031  << 2) + 0xfe440300)
#define SEC_TOP_TS_O_PATH_CTRL                     ((0x0032  << 2) + 0xfe440300)
#define SEC_TOP_CLEAN_DEMOD_INT                    ((0x0033  << 2) + 0xfe440300)
#define SEC_TOP_DEMOD_INT_MASK                     ((0x0034  << 2) + 0xfe440300)
#define SEC_TOP_DEMOD_INT_STATUS                   ((0x0035  << 2) + 0xfe440300)
#define SEC_TOP_TS_CHN0_ERR_STATUS                 ((0x0036  << 2) + 0xfe440300)
#define SEC_TOP_TS_CHN1_ERR_STATUS                 ((0x0037  << 2) + 0xfe440300)
#define SEC_TOP_TS_CHN2_ERR_STATUS                 ((0x0038  << 2) + 0xfe440300)
#define SEC_TOP_TS_CHN3_ERR_STATUS                 ((0x0039  << 2) + 0xfe440300)
//========================================================================
// TSE DESC AES REG - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe442800
// -----------------------------------------------
#define TSE_PID_RDY                                ((0x0000  << 2) + 0xfe442800)
#define TSE_TEE_LOCK                               ((0x0001  << 2) + 0xfe442800)
#define TSE_PID_STS                                ((0x0003  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_0                        ((0x0004  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_0                        ((0x0005  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_1                        ((0x0006  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_1                        ((0x0007  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_2                        ((0x0008  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_2                        ((0x0009  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_3                        ((0x000a  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_3                        ((0x000b  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_4                        ((0x000c  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_4                        ((0x000d  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_5                        ((0x000e  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_5                        ((0x000f  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_6                        ((0x0010  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_6                        ((0x0011  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_7                        ((0x0012  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_7                        ((0x0013  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_8                        ((0x0014  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_8                        ((0x0015  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_9                        ((0x0016  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_9                        ((0x0017  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_10                       ((0x0018  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_10                       ((0x0019  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_11                       ((0x001a  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_11                       ((0x001b  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_12                       ((0x001c  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_12                       ((0x001d  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_13                       ((0x001e  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_13                       ((0x001f  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_14                       ((0x0020  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_14                       ((0x0021  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_15                       ((0x0022  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_15                       ((0x0023  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_16                       ((0x0024  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_16                       ((0x0025  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_17                       ((0x0026  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_17                       ((0x0027  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_18                       ((0x0028  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_18                       ((0x0029  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_19                       ((0x002a  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_19                       ((0x002b  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_20                       ((0x002c  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_20                       ((0x002d  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_21                       ((0x002e  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_21                       ((0x002f  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_22                       ((0x0030  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_22                       ((0x0031  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_23                       ((0x0032  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_23                       ((0x0033  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_24                       ((0x0034  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_24                       ((0x0035  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_25                       ((0x0036  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_25                       ((0x0037  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_26                       ((0x0038  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_26                       ((0x0039  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_27                       ((0x003a  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_27                       ((0x003b  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_28                       ((0x003c  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_28                       ((0x003d  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_29                       ((0x003e  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_29                       ((0x003f  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_30                       ((0x0040  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_30                       ((0x0041  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_31                       ((0x0042  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_31                       ((0x0043  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_32                       ((0x0044  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_32                       ((0x0045  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_33                       ((0x0046  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_33                       ((0x0047  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_34                       ((0x0048  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_34                       ((0x0049  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_35                       ((0x004a  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_35                       ((0x004b  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_36                       ((0x004c  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_36                       ((0x004d  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_37                       ((0x004e  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_37                       ((0x004f  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_38                       ((0x0050  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_38                       ((0x0051  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_39                       ((0x0052  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_39                       ((0x0053  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_40                       ((0x0054  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_40                       ((0x0055  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_41                       ((0x0056  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_41                       ((0x0057  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_42                       ((0x0058  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_42                       ((0x0059  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_43                       ((0x005a  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_43                       ((0x005b  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_44                       ((0x005c  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_44                       ((0x005d  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_45                       ((0x005e  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_45                       ((0x005f  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_46                       ((0x0060  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_46                       ((0x0061  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_47                       ((0x0062  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_47                       ((0x0063  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_48                       ((0x0064  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_48                       ((0x0065  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_49                       ((0x0066  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_49                       ((0x0067  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_50                       ((0x0068  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_50                       ((0x0069  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_51                       ((0x006a  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_51                       ((0x006b  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_52                       ((0x006c  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_52                       ((0x006d  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_53                       ((0x006e  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_53                       ((0x006f  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_54                       ((0x0070  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_54                       ((0x0071  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_55                       ((0x0072  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_55                       ((0x0073  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_56                       ((0x0074  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_56                       ((0x0075  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_57                       ((0x0076  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_57                       ((0x0077  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_58                       ((0x0078  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_58                       ((0x0079  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_59                       ((0x007a  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_59                       ((0x007b  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_60                       ((0x007c  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_60                       ((0x007d  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_61                       ((0x007e  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_61                       ((0x007f  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_62                       ((0x0080  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_62                       ((0x0081  << 2) + 0xfe442800)
#define TSE_PID_TABLE_LSB_63                       ((0x0082  << 2) + 0xfe442800)
#define TSE_PID_TABLE_MSB_63                       ((0x0083  << 2) + 0xfe442800)
//========================================================================
// TSN DESC REG - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe442400
// -----------------------------------------------
#define TSN_PID_RDY                                ((0x0000  << 2) + 0xfe442400)
#define TSN_TEE_LOCK                               ((0x0001  << 2) + 0xfe442400)
#define TSN_PID_STS                                ((0x0003  << 2) + 0xfe442400)
#define TSN_PID_TABLE_0                            ((0x0004  << 2) + 0xfe442400)
#define TSN_PID_TABLE_1                            ((0x0005  << 2) + 0xfe442400)
#define TSN_PID_TABLE_2                            ((0x0006  << 2) + 0xfe442400)
#define TSN_PID_TABLE_3                            ((0x0007  << 2) + 0xfe442400)
#define TSN_PID_TABLE_4                            ((0x0008  << 2) + 0xfe442400)
#define TSN_PID_TABLE_5                            ((0x0009  << 2) + 0xfe442400)
#define TSN_PID_TABLE_6                            ((0x000a  << 2) + 0xfe442400)
#define TSN_PID_TABLE_7                            ((0x000b  << 2) + 0xfe442400)
#define TSN_PID_TABLE_8                            ((0x000c  << 2) + 0xfe442400)
#define TSN_PID_TABLE_9                            ((0x000d  << 2) + 0xfe442400)
#define TSN_PID_TABLE_10                           ((0x000e  << 2) + 0xfe442400)
#define TSN_PID_TABLE_11                           ((0x000f  << 2) + 0xfe442400)
#define TSN_PID_TABLE_12                           ((0x0010  << 2) + 0xfe442400)
#define TSN_PID_TABLE_13                           ((0x0011  << 2) + 0xfe442400)
#define TSN_PID_TABLE_14                           ((0x0012  << 2) + 0xfe442400)
#define TSN_PID_TABLE_15                           ((0x0013  << 2) + 0xfe442400)
#define TSN_PID_TABLE_16                           ((0x0014  << 2) + 0xfe442400)
#define TSN_PID_TABLE_17                           ((0x0015  << 2) + 0xfe442400)
#define TSN_PID_TABLE_18                           ((0x0016  << 2) + 0xfe442400)
#define TSN_PID_TABLE_19                           ((0x0017  << 2) + 0xfe442400)
#define TSN_PID_TABLE_20                           ((0x0018  << 2) + 0xfe442400)
#define TSN_PID_TABLE_21                           ((0x0019  << 2) + 0xfe442400)
#define TSN_PID_TABLE_22                           ((0x001a  << 2) + 0xfe442400)
#define TSN_PID_TABLE_23                           ((0x001b  << 2) + 0xfe442400)
#define TSN_PID_TABLE_24                           ((0x001c  << 2) + 0xfe442400)
#define TSN_PID_TABLE_25                           ((0x001d  << 2) + 0xfe442400)
#define TSN_PID_TABLE_26                           ((0x001e  << 2) + 0xfe442400)
#define TSN_PID_TABLE_27                           ((0x001f  << 2) + 0xfe442400)
#define TSN_PID_TABLE_28                           ((0x0020  << 2) + 0xfe442400)
#define TSN_PID_TABLE_29                           ((0x0021  << 2) + 0xfe442400)
#define TSN_PID_TABLE_30                           ((0x0022  << 2) + 0xfe442400)
#define TSN_PID_TABLE_31                           ((0x0023  << 2) + 0xfe442400)
#define TSN_PID_TABLE_32                           ((0x0024  << 2) + 0xfe442400)
#define TSN_PID_TABLE_33                           ((0x0025  << 2) + 0xfe442400)
#define TSN_PID_TABLE_34                           ((0x0026  << 2) + 0xfe442400)
#define TSN_PID_TABLE_35                           ((0x0027  << 2) + 0xfe442400)
#define TSN_PID_TABLE_36                           ((0x0028  << 2) + 0xfe442400)
#define TSN_PID_TABLE_37                           ((0x0029  << 2) + 0xfe442400)
#define TSN_PID_TABLE_38                           ((0x002a  << 2) + 0xfe442400)
#define TSN_PID_TABLE_39                           ((0x002b  << 2) + 0xfe442400)
#define TSN_PID_TABLE_40                           ((0x002c  << 2) + 0xfe442400)
#define TSN_PID_TABLE_41                           ((0x002d  << 2) + 0xfe442400)
#define TSN_PID_TABLE_42                           ((0x002e  << 2) + 0xfe442400)
#define TSN_PID_TABLE_43                           ((0x002f  << 2) + 0xfe442400)
#define TSN_PID_TABLE_44                           ((0x0030  << 2) + 0xfe442400)
#define TSN_PID_TABLE_45                           ((0x0031  << 2) + 0xfe442400)
#define TSN_PID_TABLE_46                           ((0x0032  << 2) + 0xfe442400)
#define TSN_PID_TABLE_47                           ((0x0033  << 2) + 0xfe442400)
#define TSN_PID_TABLE_48                           ((0x0034  << 2) + 0xfe442400)
#define TSN_PID_TABLE_49                           ((0x0035  << 2) + 0xfe442400)
#define TSN_PID_TABLE_50                           ((0x0036  << 2) + 0xfe442400)
#define TSN_PID_TABLE_51                           ((0x0037  << 2) + 0xfe442400)
#define TSN_PID_TABLE_52                           ((0x0038  << 2) + 0xfe442400)
#define TSN_PID_TABLE_53                           ((0x0039  << 2) + 0xfe442400)
#define TSN_PID_TABLE_54                           ((0x003a  << 2) + 0xfe442400)
#define TSN_PID_TABLE_55                           ((0x003b  << 2) + 0xfe442400)
#define TSN_PID_TABLE_56                           ((0x003c  << 2) + 0xfe442400)
#define TSN_PID_TABLE_57                           ((0x003d  << 2) + 0xfe442400)
#define TSN_PID_TABLE_58                           ((0x003e  << 2) + 0xfe442400)
#define TSN_PID_TABLE_59                           ((0x003f  << 2) + 0xfe442400)
#define TSN_PID_TABLE_60                           ((0x0040  << 2) + 0xfe442400)
#define TSN_PID_TABLE_61                           ((0x0041  << 2) + 0xfe442400)
#define TSN_PID_TABLE_62                           ((0x0042  << 2) + 0xfe442400)
#define TSN_PID_TABLE_63                           ((0x0043  << 2) + 0xfe442400)
#define TSN_PID_TABLE_64                           ((0x0044  << 2) + 0xfe442400)
#define TSN_PID_TABLE_65                           ((0x0045  << 2) + 0xfe442400)
#define TSN_PID_TABLE_66                           ((0x0046  << 2) + 0xfe442400)
#define TSN_PID_TABLE_67                           ((0x0047  << 2) + 0xfe442400)
#define TSN_PID_TABLE_68                           ((0x0048  << 2) + 0xfe442400)
#define TSN_PID_TABLE_69                           ((0x0049  << 2) + 0xfe442400)
#define TSN_PID_TABLE_70                           ((0x004a  << 2) + 0xfe442400)
#define TSN_PID_TABLE_71                           ((0x004b  << 2) + 0xfe442400)
#define TSN_PID_TABLE_72                           ((0x004c  << 2) + 0xfe442400)
#define TSN_PID_TABLE_73                           ((0x004d  << 2) + 0xfe442400)
#define TSN_PID_TABLE_74                           ((0x004e  << 2) + 0xfe442400)
#define TSN_PID_TABLE_75                           ((0x004f  << 2) + 0xfe442400)
#define TSN_PID_TABLE_76                           ((0x0050  << 2) + 0xfe442400)
#define TSN_PID_TABLE_77                           ((0x0051  << 2) + 0xfe442400)
#define TSN_PID_TABLE_78                           ((0x0052  << 2) + 0xfe442400)
#define TSN_PID_TABLE_79                           ((0x0053  << 2) + 0xfe442400)
#define TSN_PID_TABLE_80                           ((0x0054  << 2) + 0xfe442400)
#define TSN_PID_TABLE_81                           ((0x0055  << 2) + 0xfe442400)
#define TSN_PID_TABLE_82                           ((0x0056  << 2) + 0xfe442400)
#define TSN_PID_TABLE_83                           ((0x0057  << 2) + 0xfe442400)
#define TSN_PID_TABLE_84                           ((0x0058  << 2) + 0xfe442400)
#define TSN_PID_TABLE_85                           ((0x0059  << 2) + 0xfe442400)
#define TSN_PID_TABLE_86                           ((0x005a  << 2) + 0xfe442400)
#define TSN_PID_TABLE_87                           ((0x005b  << 2) + 0xfe442400)
#define TSN_PID_TABLE_88                           ((0x005c  << 2) + 0xfe442400)
#define TSN_PID_TABLE_89                           ((0x005d  << 2) + 0xfe442400)
#define TSN_PID_TABLE_90                           ((0x005e  << 2) + 0xfe442400)
#define TSN_PID_TABLE_91                           ((0x005f  << 2) + 0xfe442400)
#define TSN_PID_TABLE_92                           ((0x0060  << 2) + 0xfe442400)
#define TSN_PID_TABLE_93                           ((0x0061  << 2) + 0xfe442400)
#define TSN_PID_TABLE_94                           ((0x0062  << 2) + 0xfe442400)
#define TSN_PID_TABLE_95                           ((0x0063  << 2) + 0xfe442400)
#define TSN_PID_TABLE_96                           ((0x0064  << 2) + 0xfe442400)
#define TSN_PID_TABLE_97                           ((0x0065  << 2) + 0xfe442400)
#define TSN_PID_TABLE_98                           ((0x0066  << 2) + 0xfe442400)
#define TSN_PID_TABLE_99                           ((0x0067  << 2) + 0xfe442400)
#define TSN_PID_TABLE_100                          ((0x0068  << 2) + 0xfe442400)
#define TSN_PID_TABLE_101                          ((0x0069  << 2) + 0xfe442400)
#define TSN_PID_TABLE_102                          ((0x006a  << 2) + 0xfe442400)
#define TSN_PID_TABLE_103                          ((0x006b  << 2) + 0xfe442400)
#define TSN_PID_TABLE_104                          ((0x006c  << 2) + 0xfe442400)
#define TSN_PID_TABLE_105                          ((0x006d  << 2) + 0xfe442400)
#define TSN_PID_TABLE_106                          ((0x006e  << 2) + 0xfe442400)
#define TSN_PID_TABLE_107                          ((0x006f  << 2) + 0xfe442400)
#define TSN_PID_TABLE_108                          ((0x0070  << 2) + 0xfe442400)
#define TSN_PID_TABLE_109                          ((0x0071  << 2) + 0xfe442400)
#define TSN_PID_TABLE_110                          ((0x0072  << 2) + 0xfe442400)
#define TSN_PID_TABLE_111                          ((0x0073  << 2) + 0xfe442400)
#define TSN_PID_TABLE_112                          ((0x0074  << 2) + 0xfe442400)
#define TSN_PID_TABLE_113                          ((0x0075  << 2) + 0xfe442400)
#define TSN_PID_TABLE_114                          ((0x0076  << 2) + 0xfe442400)
#define TSN_PID_TABLE_115                          ((0x0077  << 2) + 0xfe442400)
#define TSN_PID_TABLE_116                          ((0x0078  << 2) + 0xfe442400)
#define TSN_PID_TABLE_117                          ((0x0079  << 2) + 0xfe442400)
#define TSN_PID_TABLE_118                          ((0x007a  << 2) + 0xfe442400)
#define TSN_PID_TABLE_119                          ((0x007b  << 2) + 0xfe442400)
#define TSN_PID_TABLE_120                          ((0x007c  << 2) + 0xfe442400)
#define TSN_PID_TABLE_121                          ((0x007d  << 2) + 0xfe442400)
#define TSN_PID_TABLE_122                          ((0x007e  << 2) + 0xfe442400)
#define TSN_PID_TABLE_123                          ((0x007f  << 2) + 0xfe442400)
#define TSN_PID_TABLE_124                          ((0x0080  << 2) + 0xfe442400)
#define TSN_PID_TABLE_125                          ((0x0081  << 2) + 0xfe442400)
#define TSN_PID_TABLE_126                          ((0x0082  << 2) + 0xfe442400)
#define TSN_PID_TABLE_127                          ((0x0083  << 2) + 0xfe442400)
//========================================================================
// RNG REG - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe440700
// -----------------------------------------------
#define RNG_TEE_READY                              ((0x0000  << 2) + 0xfe440700)
#define RNG_TEE_LOCK                               ((0x0001  << 2) + 0xfe440700)
#define RNG_TEE_CFG                                ((0x0002  << 2) + 0xfe440700)
#define RNG_TEE_NIST_OUT                           ((0x0003  << 2) + 0xfe440700)
#define RNG_TEE_OUT0                               ((0x0004  << 2) + 0xfe440700)
#define RNG_TEE_OUT1                               ((0x0005  << 2) + 0xfe440700)
#define RNG_TEE_OUT2                               ((0x0006  << 2) + 0xfe440700)
#define RNG_TEE_OUT3                               ((0x0007  << 2) + 0xfe440700)
#define RNG_CFG_RING                               ((0x0010  << 2) + 0xfe440700)
#define RNG_CFG_RESEED                             ((0x0011  << 2) + 0xfe440700)
#define RNG_CFG_HEALTH                             ((0x0012  << 2) + 0xfe440700)
#define RNG_CFG_MISC                               ((0x0013  << 2) + 0xfe440700)
#define RNG_REE_READY                              ((0x0020  << 2) + 0xfe440700)
#define RNG_REE_DEBUG                              ((0x0021  << 2) + 0xfe440700)
#define RNG_REE_CFG                                ((0x0022  << 2) + 0xfe440700)
#define RNG_REE_OUT0                               ((0x0024  << 2) + 0xfe440700)
#define RNG_REE_OUT1                               ((0x0025  << 2) + 0xfe440700)
#define RNG_REE_OUT2                               ((0x0026  << 2) + 0xfe440700)
#define RNG_REE_OUT3                               ((0x0027  << 2) + 0xfe440700)
//========================================================================
// OTP REG - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe440000
// -----------------------------------------------
#define OTP_TEE_RDY                                ((0x0000  << 2) + 0xfe440000)
#define OTP_TEE_DEBUG                              ((0x0001  << 2) + 0xfe440000)
#define OTP_TEE_CFG                                ((0x0002  << 2) + 0xfe440000)
#define OTP_TEE_WR_DAT                             ((0x0004  << 2) + 0xfe440000)
#define OTP_TEE_RD_DAT                             ((0x0008  << 2) + 0xfe440000)
#define OTP_LIC_A                                  ((0x0010  << 2) + 0xfe440000)
#define OTP_AML_ID_L                               ((0x0020  << 2) + 0xfe440000)
#define OTP_AML_ID_H                               ((0x0021  << 2) + 0xfe440000)
#define OTP_ACGK_ID_L                              ((0x0022  << 2) + 0xfe440000)
#define OTP_ACGK_ID_H                              ((0x0023  << 2) + 0xfe440000)
#define OTP_DVGK_ID_L                              ((0x0024  << 2) + 0xfe440000)
#define OTP_DVGK_ID_H                              ((0x0025  << 2) + 0xfe440000)
#define OTP_DVUK_ID_L                              ((0x0026  << 2) + 0xfe440000)
#define OTP_DVUK_ID_H                              ((0x0027  << 2) + 0xfe440000)
#define OTP_DGPK_ID_L                              ((0x0028  << 2) + 0xfe440000)
#define OTP_DGPK_ID_H                              ((0x0029  << 2) + 0xfe440000)
#define OTP_SECPU_ID_L                             ((0x002a  << 2) + 0xfe440000)
#define OTP_SECPU_ID_H                             ((0x002b  << 2) + 0xfe440000)
#define OTP_ETSI012_ID_L                           ((0x002c  << 2) + 0xfe440000)
#define OTP_ETSI012_ID_H                           ((0x002d  << 2) + 0xfe440000)
#define OTP_ETSI3_ID_L                             ((0x002e  << 2) + 0xfe440000)
#define OTP_ETSI3_ID_H                             ((0x002f  << 2) + 0xfe440000)
#define OTP_MSR_ID_L                               ((0x0030  << 2) + 0xfe440000)
#define OTP_MSR_ID_H                               ((0x0031  << 2) + 0xfe440000)
#define OTP_VO_ID_L                                ((0x0032  << 2) + 0xfe440000)
#define OTP_VO_ID_H                                ((0x0033  << 2) + 0xfe440000)
#define OTP_NUID_ID_L                              ((0x0034  << 2) + 0xfe440000)
#define OTP_NUID_ID_H                              ((0x0035  << 2) + 0xfe440000)
#define OTP_CONAX_ID_L                             ((0x0036  << 2) + 0xfe440000)
#define OTP_CONAX_ID_H                             ((0x0037  << 2) + 0xfe440000)
#define OTP_NSK_ID_L                               ((0x0038  << 2) + 0xfe440000)
#define OTP_NSK_ID_H                               ((0x0039  << 2) + 0xfe440000)
#define OTP_REE_RDY                                ((0x0040  << 2) + 0xfe440000)
#define OTP_REE_DEBUG                              ((0x0041  << 2) + 0xfe440000)
#define OTP_REE_CFG                                ((0x0042  << 2) + 0xfe440000)
#define OTP_MRK_CHKNUM                             ((0x0043  << 2) + 0xfe440000)
#define OTP_REE_RD_DAT                             ((0x0048  << 2) + 0xfe440000)
//========================================================================
// KL REG - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe440200
// -----------------------------------------------
#define MKL_TEE_RDY                                ((0x0000  << 2) + 0xfe440200)
#define MKL_TEE_DEBUG                              ((0x0001  << 2) + 0xfe440200)
#define MKL_TEE_CFG                                ((0x0002  << 2) + 0xfe440200)
#define MKL_TEE_CMD                                ((0x0003  << 2) + 0xfe440200)
#define MKL_TEE_EK                                 ((0x0004  << 2) + 0xfe440200)
#define MKL_TEE_CR_0                               ((0x001c  << 2) + 0xfe440200)
#define MKL_TEE_CR_1                               ((0x001d  << 2) + 0xfe440200)
#define MKL_TEE_CR_2                               ((0x001e  << 2) + 0xfe440200)
#define MKL_TEE_CR_3                               ((0x001f  << 2) + 0xfe440200)
#define MKL_REE_RDY                                ((0x0020  << 2) + 0xfe440200)
#define MKL_REE_DEBUG                              ((0x0021  << 2) + 0xfe440200)
#define MKL_REE_CFG                                ((0x0022  << 2) + 0xfe440200)
#define MKL_REE_CMD                                ((0x0023  << 2) + 0xfe440200)
#define MKL_REE_EK                                 ((0x0024  << 2) + 0xfe440200)
//========================================================================
// DMA REG - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe440400
// -----------------------------------------------
#define DMA_CORE_DSC_0                             ((0x0000  << 2) + 0xfe440400)
#define DMA_CORE_DSC_1                             ((0x0001  << 2) + 0xfe440400)
#define DMA_CORE_DSC_2                             ((0x0002  << 2) + 0xfe440400)
#define DMA_CORE_DSC_3                             ((0x0003  << 2) + 0xfe440400)
#define DMA_CORE_DSC_4                             ((0x0004  << 2) + 0xfe440400)
#define DMA_CORE_DSC_5                             ((0x0005  << 2) + 0xfe440400)
#define DMA_CORE_IRQ_STS_0                         ((0x0008  << 2) + 0xfe440400)
#define DMA_CORE_IRQ_STS_1                         ((0x0009  << 2) + 0xfe440400)
#define DMA_CORE_IRQ_STS_2                         ((0x000a  << 2) + 0xfe440400)
#define DMA_CORE_IRQ_STS_3                         ((0x000b  << 2) + 0xfe440400)
#define DMA_CORE_IRQ_STS_4                         ((0x000c  << 2) + 0xfe440400)
#define DMA_CORE_IRQ_STS_5                         ((0x000d  << 2) + 0xfe440400)
#define DMA_CORE_CFG_REG                           ((0x0010  << 2) + 0xfe440400)
#define DMA_CORE_CFG_SEC_LSB                       ((0x0011  << 2) + 0xfe440400)
#define DMA_CORE_CFG_SEC_MSB                       ((0x0012  << 2) + 0xfe440400)
//========================================================================
// KT REG - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe440500
// -----------------------------------------------
#define KT_TEE_RDY                                 ((0x0000  << 2) + 0xfe440500)
#define KT_TEE_RDY2                                ((0x0001  << 2) + 0xfe440500)
#define KT_TEE_CFG                                 ((0x0002  << 2) + 0xfe440500)
#define KT_TEE_STS                                 ((0x0003  << 2) + 0xfe440500)
#define KT_TEE_KEY0                                ((0x0004  << 2) + 0xfe440500)
#define KT_TEE_KEY1                                ((0x0005  << 2) + 0xfe440500)
#define KT_TEE_KEY2                                ((0x0006  << 2) + 0xfe440500)
#define KT_TEE_KEY3                                ((0x0007  << 2) + 0xfe440500)
#define KT_REE_RDY                                 ((0x0020  << 2) + 0xfe440500)
#define KT_REE_RDY2                                ((0x0021  << 2) + 0xfe440500)
#define KT_REE_CFG                                 ((0x0022  << 2) + 0xfe440500)
#define KT_REE_STS                                 ((0x0023  << 2) + 0xfe440500)
#define KT_REE_KEY0                                ((0x0024  << 2) + 0xfe440500)
#define KT_REE_KEY1                                ((0x0025  << 2) + 0xfe440500)
#define KT_REE_KEY2                                ((0x0026  << 2) + 0xfe440500)
#define KT_REE_KEY3                                ((0x0027  << 2) + 0xfe440500)
//========================================================================
// CERT REG - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe440600
// -----------------------------------------------
//========================================================================
// SP REG - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe441000
// -----------------------------------------------
//ree domain
#define REE_SCPU2REE_CSR_ADDR                      ((0x0300  << 2) + 0xfe441000)
#define REE_SCPU2REE_DATA_ST_ADDR                  ((0x0380  << 2) + 0xfe441000)
#define REE_SCPU2REE_DATA_ED_ADDR                  ((0x039f  << 2) + 0xfe441000)
#define REE_REE2SCPU_CSR_ADDR                      ((0x0200  << 2) + 0xfe441000)
#define REE_REE2SCPU_DATA_ST_ADDR                  ((0x0280  << 2) + 0xfe441000)
#define REE_REE2SCPU_DATA_ED_ADDR                  ((0x029f  << 2) + 0xfe441000)
//tee domain
#define TEE_SCPU2TEE_CSR_ADDR                      ((0x0100  << 2) + 0xfe441000)
#define TEE_SCPU2TEE_DATA_ST_ADDR                  ((0x0180  << 2) + 0xfe441000)
#define TEE_SCPU2TEE_DATA_ED_ADDR                  ((0x019f  << 2) + 0xfe441000)
#define TEE_TEE2SCPU_CSR_ADDR                      ((0x0000  << 2) + 0xfe441000)
#define TEE_TEE2SCPU_DATA_ST_ADDR                  ((0x0080  << 2) + 0xfe441000)
#define TEE_TEE2SCPU_DATA_ED_ADDR                  ((0x009f  << 2) + 0xfe441000)
//========================================================================
// NSK REG - Registers
//========================================================================
// -----------------------------------------------
// REG_BASE:  REGISTER_BASE_ADDR = 0xfe450000
// -----------------------------------------------
//
// Closing file:  ./REG_LIST_SECURITY_RTL.h
//
//`include "REG_LIST_DEMUX_RTL.h"
// synopsys translate_off
// synopsys translate_on
//
// Closing file:  ./REG_LIST_RTL.h
//
//
// Reading file:  ./vpu_inc/vout_regs_base.h
//
// -----------------------------------------------
// REG_BASE:  VOUT_TOP_VCBUS_BASE = 0x00
// -----------------------------------------------
//
// Reading file:  ./vpu_inc/vpu_vout_top_reg.h
//
#define VPU_VOUT_TOP_CTRL                          ((0x0000  << 2) + 0xfe340000)
//Bit 31:16  reserved
//Bit 15: 0  reg_sw_resets              //unsigned,   RW,   default = 16'h0;
#define VPU_VOUT_SECURE_BIT_NOR                    ((0x0001  << 2) + 0xfe340000)
//Bit 31: 0  reg_secure_bits_nor        //unsigned,   RW,   default = 32'h0;
#define VPU_VOUT_SECURE_DATA                       ((0x0002  << 2) + 0xfe340000)
//Bit 31:30  reserved
//Bit 29: 0  reg_secure_data             //unsigned,   RW,   default = 30'h0;
#define VPU_VOUT_FRM_CTRL                          ((0x0003  << 2) + 0xfe340000)
//Bit 31:17  reserved
//Bit    16  reg_dsi_suspend_en          //unsigned,   RW,   default = 0;
//Bit    15  reg_scan_en                 //unsigned,   RW,   default = 0;
//Bit 14: 2  reg_hold_line_num           //unsigned,   RW,   default = 4;
//Bit     1  pls_frm_start
//Bit     0  reg_frm_start_sel           //unsigned,   RW,   default = 0;
#define VPU_VOUT_AXI_ARBIT                         ((0x0004  << 2) + 0xfe340000)
//Bit 31:15  reserved
//Bit 14:13  reg_arb_urg_sel             //unsigned,   RW,   default = 2;
//Bit    12  reg_am_prot                 //unsigned,   RW,   default = 1;
//Bit 11: 4  reg_arb_arqos               //unsigned,   RW,   default = 8'h73;
//Bit  3: 0  reg_arb_arcache             //unsigned,   RW,   default = 0;
#define VPU_VOUT_RDARB_IDMAP0                      ((0x0005  << 2) + 0xfe340000)
//Bit  31:0  reg_rdarb_id_map0           //unsigned,   RW,   default = 32'h10101010 ;
#define VPU_VOUT_RDARB_IDMAP1                      ((0x0006  << 2) + 0xfe340000)
//Bit  31:0  reg_rdarb_id_map1           //unsigned,   RW,   default = 32'h10101010 ;
#define VPU_VOUT_IRQ_CTRL                          ((0x0007  << 2) + 0xfe340000)
//Bit  31:16  reg_irq_en                 //unsigned,   RW,   default = 1;
//Bit  15: 0  pls_irq_clr                //unsigned,   RW,   default = 0;
#define VPU_VOUT_IRQ_LINENUM                       ((0x0008  << 2) + 0xfe340000)
//Bit  31:17  reserved
//Bit  16     reg_lineirq_sel            //unsigned,   RW,   default = 0;
//Bit  15:0   reg_irq_line_num           //unsigned,   RW,   default = 200;
#define VPU_VOUT_VLK_CTRL                          ((0x0009  << 2) + 0xfe340000)
//Bit 31: 12 reserved
//Bit 11: 8  reg_vlock_vsrc_sel          //unsigned,   RW,   default = 0;
//Bit  7: 4  reg_vlock_lath_sel          //unsigned,   RW,   default = 1;
//Bit  3: 1  reserved
//Bit     0  reg_vlock_en                //unsigned,   RW,   default = 0;
#define VPU_VOUT_TOP_GCLK                          ((0x000a  << 2) + 0xfe340000)
//Bit 31:0  reg_gclk_ctrl                //unsigned,   RW,   default = 0;
#define VPU_VOUT_VDSC_DUMMYDAT                     ((0x0010  << 2) + 0xfe340000)
//Bit 31: 24    reserved
//Bit 23:0      reg_vdsc_dummy_data         //unsigned, RW, default = 0
#define VPU_VOUT_VDSC_SIZE                         ((0x0011  << 2) + 0xfe340000)
//Bit 31:30     reserved
//Bit 29:16     reg_vdsc_hsize_in           //unsigned, RW, default = 0
//Bit 15:13     reserved
//Bit 12:0      reg_vdsc_vsize_in           //unsigned, RW, default = 0
//blend module
#define VPU_VOUT_BLEND_CTRL                        ((0x0040  << 2) + 0xfe340000)
//Bit 31:28  reserved
//Bit 27:26  reg_blend_use_latch        //unsigned,   RW,   default = 2'h0;
//Bit    25  reg_blend_bg_en            //unsigned,   RW,   default = 1'h0;//0:vd1 is  background   1:osd is background
//Bit 24:16  reg_blend0_dummy_alpha     //unsigned,   RW,   default = 9'h0;
//Bit 15:13  reserved
//Bit 12: 4  reg_vd1_alpha              //unsigned,   RW,   default = 9'h0;
//Bit  3: 2  reg_blend0_premult_en      //unsigned,   RW,   default = 2'h1;
//Bit  1: 0  reg_blend_din_en           //unsigned,   RW,   default = 2'h3;
#define VPU_VOUT_BLEND_DUMDATA                     ((0x0041  << 2) + 0xfe340000)
//Bit 31:30  reserved
//Bit 29: 0  reg_blend0_dummy_data      //unsigned,   RW,   default = 30'h0;
#define VPU_VOUT_BLEND_SIZE                        ((0x0042  << 2) + 0xfe340000)
//Bit 31:29  reserved
//Bit 28:16  reg_blend_hsize            //unsigned,   RW,   default = 720;
//Bit 15:13  reserved
//Bit 12:0   reg_blend_vsize            //unsigned,   RW,   default = 480;
#define VPU_VOUT_BLD_SRC0_HPOS                     ((0x0043  << 2) + 0xfe340000)
//Bit 31:29  reserved
//Bit 28:16  reg_bld_src0_h_end          //unsigned,   RW,   default = 719;
//Bit 15:13  reserved
//Bit 12: 0  reg_bld_src0_h_start        //unsigned,   RW,   default = b0;
#define VPU_VOUT_BLD_SRC0_VPOS                     ((0x0044  << 2) + 0xfe340000)
//Bit 31:29  reserved
//Bit 28:16  reg_bld_src0_v_end          //unsigned,   RW,   default = 479;
//Bit 15:13  reserved
//Bit 12: 0  reg_bld_src0_v_start        //unsigned,   RW,   default = 0;
#define VPU_VOUT_BLD_SRC1_HPOS                     ((0x0045  << 2) + 0xfe340000)
//Bit 31:29  reserved
//Bit 28:16  reg_bld_src1_h_end          //unsigned,   RW,   default = 719;
//Bit 15:13  reserved
//Bit 12: 0  reg_bld_src1_h_start        //unsigned,   RW,   default = 0;
#define VPU_VOUT_BLD_SRC1_VPOS                     ((0x0046  << 2) + 0xfe340000)
//Bit 31:29  reserved
//Bit 28:16  reg_bld_src1_v_end          //unsigned,   RW,   default = 479;
//Bit 15:13  reserved
//Bit 12: 0  reg_bld_src1_v_start        //unsigned,   RW,   default = 0;
//ofifo
#define VPU_VOUT_OFIFO_SIZE                        ((0x0047  << 2) + 0xfe340000)
//Bit 31:29  reserved
//Bit 28:16  reg_ofifo_line_lenm1        //unsigned,   RW,   default = 480;
//Bit 15:14  reserved
//Bit 13: 0  reg_ofifo_size              //unsigned,   RW,   default = 1280;
#define VPU_VOUT_OFIFO_URG_CTRL                    ((0x0048  << 2) + 0xfe340000)
//Bit  31:30  reserved
//Bit     29  reg_ofifo_urg_hold_en      //unsigned,   RW,   default = 1'h0;
//Bit  28:16  reg_ofifo_urg_hold_line_th //unsigned,   RW,   default = 13'h0;
//Bit  15: 0  reg_ofifo_urg_ctrl         //unsigned,   RW,   default = 16'h0;
#define VPU_VOUT_OFIFO_OSIZE                       ((0x0049  << 2) + 0xfe340000)
//Bit 31:29  reserved
//Bit 28:16  reg_ofifo_ohsize           //unsigned,   RW,   default = 1280;
//Bit 15:13  reserved
//Bit 12 :0  reg_ofifo_ovsize           //unsigned,   RW,   default = 720 ;
#define VPU_VOUT_DDR_SLEEP                         ((0x004a  << 2) + 0xfe340000)
//Bit 31 :0  reg_ddr_sleep_ctrl         //unsigned,   RW,   default = 32'h8000_0000;
//for ro
#define VPU_VOUT_RO_STATUS                         ((0x0050  << 2) + 0xfe340000)
//Bit 31:16  ro_irq_status               //unsigned ro
//Bit 15     reserved                    //unsigned ro
//Bit 14: 2  ro_ofifo_buf_count          //unsigned ro
//Bit     1  ro_osd_sc_blki_done         //unsigned ro
//Bit     0  ro_osd1_nearfull            //unsigned ro
#define VPU_VOUT_RO_BLD_CURXY                      ((0x0051  << 2) + 0xfe340000)
//Bit 31:0  ro_blend0_current_xy         //unsigned  ro
#define VPU_VOUT_RO_VLK_ISP_TCNT                   ((0x0052  << 2) + 0xfe340000)
//Bit 31:0  ro_vlock_isp_tim_cnt         //unsigned  ro
#define VPU_VOUT_RO_VLK_VOUT_TCNT                  ((0x0053  << 2) + 0xfe340000)
//Bit 31:0  ro_vlock_vout_tim_cnt        //unsigned  ro
#define VPU_VOUT_RO_VLK_HIG_TCNT                   ((0x0054  << 2) + 0xfe340000)
//Bit 31:0  ro_vlock_tim_cnt_h           //unsigned  ro
#define VPU_VOUT_RO_VLK_FRM_CNT                    ((0x0055  << 2) + 0xfe340000)
//Bit 31:16  ro_vlock_isp_frm_cnt       //unsigned  ro
//Bit 15 :0  ro_vlock_vout_frm_cnt      //unsigned  ro
#define VPU_VOUT_RO_VLK_LATCH_TCNT                 ((0x0056  << 2) + 0xfe340000)
//Bit 31:0  ro_vlock_lth_tim_cnt_l      //unsigned  ro
#define VPU_VOUT_RO_VLK_LATCH_FCNT                 ((0x0057  << 2) + 0xfe340000)
//Bit 31:16  ro_vlock_lth_tim_cnt_h     //unsigned  ro
//Bit 15 :0  ro_vlock_lth_frm_cnt       //unsigned  ro
#define VPU_VOUT_RO_VDSC                           ((0x0059  << 2) + 0xfe340000)
//Bit 31:11  reserved
//Bit 10 :0  ro_vdsc_ff_count           //unsigned  ro
#define VPU_VOUT_RO_PROB                           ((0x005a  << 2) + 0xfe340000)
//Bit 31:0   ro_prob_dat                 //unsigned  ro
#define VPU_VOUT_PROB_CTRL                         ((0x0060  << 2) + 0xfe340000)
//Bit 31:6   reserved
//Bit 5      reg_prob_clr               //unsigned,   RW,   default = 'd100;
//Bit 4      reg_prob_en                //unsigned,   RW,   default = 'd100;
//Bit 3 : 0  reg_prob_src               //unsigned,   RW,   default = 'd100;
#define VPU_VOUT_PROB_POS                          ((0x0061  << 2) + 0xfe340000)
//Bit 31:29  reserved
//Bit 28:16  reg_prob_pos_x             //unsigned,   RW,   default = 'd100;
//Bit 15:13  reserved
//Bit 12 :0  reg_prob_pos_y             //unsigned,   RW,   default = 'd100;
#define VPU_VOUT_PROB_SIZE                         ((0x0062  << 2) + 0xfe340000)
//Bit 31:29  reserved
//Bit 28:16  reg_prob_hsize             //unsigned,   RW,   default = 'd100;
//Bit 15:13  reserved
//Bit 12 :0  reg_prob_vsize             //unsigned,   RW,   default = 'd100;
//for hw secure only
#define VPU_VOUT_TOP_SEC_KP                        ((0x0070  << 2) + 0xfe340000)
#define VPU_VOUT_TOP_SEC_BIT                       ((0x0071  << 2) + 0xfe340000)
#define VPU_VOUT_TOP_SEC_RO                        ((0x0072  << 2) + 0xfe340000)
//
// Closing file:  ./vpu_inc/vpu_vout_top_reg.h
//
// -----------------------------------------------
// REG_BASE:  VOUT_MISC0_VCBUS_BASE = 0x01
// -----------------------------------------------
//
// Reading file:  ./vpu_inc/vpu_vout_misc0_reg.h
//
//VD1_RDMIF
#define VOUT_VD1_GEN_REG                           ((0x0100  << 2) + 0xfe340000)
#define VOUT_VD1_GEN_REG2                          ((0x0101  << 2) + 0xfe340000)
#define VOUT_VD1_CANVAS0                           ((0x0102  << 2) + 0xfe340000)
#define VOUT_VD1_LUMA_X0                           ((0x0103  << 2) + 0xfe340000)
#define VOUT_VD1_LUMA_Y0                           ((0x0104  << 2) + 0xfe340000)
#define VOUT_VD1_CHROMA_X0                         ((0x0105  << 2) + 0xfe340000)
#define VOUT_VD1_CHROMA_Y0                         ((0x0106  << 2) + 0xfe340000)
#define VOUT_VD1_RPT_LOOP                          ((0x0107  << 2) + 0xfe340000)
#define VOUT_VD1_LUMA0_RPT_PAT                     ((0x0108  << 2) + 0xfe340000)
#define VOUT_VD1_CHROMA0_RPT_PAT                   ((0x0109  << 2) + 0xfe340000)
#define VOUT_VD1_DUMMY_PIXEL                       ((0x010a  << 2) + 0xfe340000)
#define VOUT_VD1_LUMA_FIFO_SIZE                    ((0x010b  << 2) + 0xfe340000)
#define VOUT_VD1_RANGE_MAP_Y                       ((0x010c  << 2) + 0xfe340000)
#define VOUT_VD1_RANGE_MAP_CB                      ((0x010d  << 2) + 0xfe340000)
#define VOUT_VD1_RANGE_MAP_CR                      ((0x010e  << 2) + 0xfe340000)
#define VOUT_VD1_URGENT_CTRL                       ((0x010f  << 2) + 0xfe340000)
#define VOUT_VD1_GEN_REG3                          ((0x0110  << 2) + 0xfe340000)
#define VOUT_VD1_AXI_CMD_CNT                       ((0x0111  << 2) + 0xfe340000)
#define VOUT_VD1_AXI_RDAT_CNT                      ((0x0112  << 2) + 0xfe340000)
#define VOUT_VD1_CFMT_CTRL                         ((0x0113  << 2) + 0xfe340000)
#define VOUT_VD1_CFMT_W                            ((0x0114  << 2) + 0xfe340000)
#define VOUT_VD1_BADDR_Y                           ((0x0115  << 2) + 0xfe340000)
#define VOUT_VD1_BADDR_CB                          ((0x0116  << 2) + 0xfe340000)
#define VOUT_VD1_BADDR_CR                          ((0x0117  << 2) + 0xfe340000)
#define VOUT_VD1_STRIDE_0                          ((0x0118  << 2) + 0xfe340000)
#define VOUT_VD1_STRIDE_1                          ((0x0119  << 2) + 0xfe340000)
#define VOUT_VD1_BADDR_Y_F1                        ((0x011a  << 2) + 0xfe340000)
#define VOUT_VD1_BADDR_CB_F1                       ((0x011b  << 2) + 0xfe340000)
#define VOUT_VD1_BADDR_CR_F1                       ((0x011c  << 2) + 0xfe340000)
#define VOUT_VD1_STRIDE_0_F1                       ((0x011d  << 2) + 0xfe340000)
#define VOUT_VD1_STRIDE_1_F1                       ((0x011e  << 2) + 0xfe340000)
#define VOUT_OSD1_CTRL_STAT                        ((0x0140  << 2) + 0xfe340000)
#define VOUT_OSD1_CTRL_STAT2                       ((0x0141  << 2) + 0xfe340000)
#define VOUT_OSD1_COLOR_ADDR                       ((0x0142  << 2) + 0xfe340000)
#define VOUT_OSD1_COLOR                            ((0x0143  << 2) + 0xfe340000)
#define VOUT_OSD1_TCOLOR_AG0                       ((0x0144  << 2) + 0xfe340000)
#define VOUT_OSD1_TCOLOR_AG1                       ((0x0145  << 2) + 0xfe340000)
#define VOUT_OSD1_TCOLOR_AG2                       ((0x0146  << 2) + 0xfe340000)
#define VOUT_OSD1_TCOLOR_AG3                       ((0x0147  << 2) + 0xfe340000)
#define VOUT_OSD1_BLK0_CFG_W0                      ((0x0148  << 2) + 0xfe340000)
#define VOUT_OSD1_BLK1_CFG_W0                      ((0x0149  << 2) + 0xfe340000)
#define VOUT_OSD1_BLK2_CFG_W0                      ((0x014a  << 2) + 0xfe340000)
#define VOUT_OSD1_BLK3_CFG_W0                      ((0x014b  << 2) + 0xfe340000)
#define VOUT_OSD1_BLK0_CFG_W1                      ((0x014c  << 2) + 0xfe340000)
#define VOUT_OSD1_BLK1_CFG_W1                      ((0x014d  << 2) + 0xfe340000)
#define VOUT_OSD1_BLK2_CFG_W1                      ((0x014e  << 2) + 0xfe340000)
#define VOUT_OSD1_BLK3_CFG_W1                      ((0x014f  << 2) + 0xfe340000)
#define VOUT_OSD1_BLK0_CFG_W2                      ((0x0150  << 2) + 0xfe340000)
#define VOUT_OSD1_BLK1_CFG_W2                      ((0x0151  << 2) + 0xfe340000)
#define VOUT_OSD1_BLK2_CFG_W2                      ((0x0152  << 2) + 0xfe340000)
#define VOUT_OSD1_BLK3_CFG_W2                      ((0x0153  << 2) + 0xfe340000)
#define VOUT_OSD1_BLK0_CFG_W3                      ((0x0154  << 2) + 0xfe340000)
#define VOUT_OSD1_BLK1_CFG_W3                      ((0x0155  << 2) + 0xfe340000)
#define VOUT_OSD1_BLK2_CFG_W3                      ((0x0156  << 2) + 0xfe340000)
#define VOUT_OSD1_BLK3_CFG_W3                      ((0x0157  << 2) + 0xfe340000)
#define VOUT_OSD1_BLK0_CFG_W4                      ((0x0158  << 2) + 0xfe340000)
#define VOUT_OSD1_BLK1_CFG_W4                      ((0x0159  << 2) + 0xfe340000)
#define VOUT_OSD1_BLK2_CFG_W4                      ((0x015a  << 2) + 0xfe340000)
#define VOUT_OSD1_BLK3_CFG_W4                      ((0x015b  << 2) + 0xfe340000)
#define VOUT_OSD1_FIFO_CTRL_STAT                   ((0x0160  << 2) + 0xfe340000)
#define VOUT_OSD1_TEST_RDDATA                      ((0x0161  << 2) + 0xfe340000)
#define VOUT_OSD1_PROT_CTRL                        ((0x0162  << 2) + 0xfe340000)
#define VOUT_OSD1_MALI_UNPACK_CTRL                 ((0x0163  << 2) + 0xfe340000)
#define VOUT_OSD1_DIMM_CTRL                        ((0x0164  << 2) + 0xfe340000)
//VD1_RDMIF_CSC
#define VOUT_VD1_CSC_COEF00_01                     ((0x0170  << 2) + 0xfe340000)
#define VOUT_VD1_CSC_COEF02_10                     ((0x0171  << 2) + 0xfe340000)
#define VOUT_VD1_CSC_COEF11_12                     ((0x0172  << 2) + 0xfe340000)
#define VOUT_VD1_CSC_COEF20_21                     ((0x0173  << 2) + 0xfe340000)
#define VOUT_VD1_CSC_COEF22                        ((0x0174  << 2) + 0xfe340000)
#define VOUT_VD1_CSC_COEF13_14                     ((0x0175  << 2) + 0xfe340000)
#define VOUT_VD1_CSC_COEF23_24                     ((0x0176  << 2) + 0xfe340000)
#define VOUT_VD1_CSC_COEF15_25                     ((0x0177  << 2) + 0xfe340000)
#define VOUT_VD1_CSC_CLIP                          ((0x0178  << 2) + 0xfe340000)
#define VOUT_VD1_CSC_OFFSET0_1                     ((0x0179  << 2) + 0xfe340000)
#define VOUT_VD1_CSC_OFFSET2                       ((0x017a  << 2) + 0xfe340000)
#define VOUT_VD1_CSC_PRE_OFFSET0_1                 ((0x017b  << 2) + 0xfe340000)
#define VOUT_VD1_CSC_PRE_OFFSET2                   ((0x017c  << 2) + 0xfe340000)
#define VOUT_VD1_CSC_EN_CTRL                       ((0x017d  << 2) + 0xfe340000)
//OSD_CSC
#define VOUT_OSD1_CSC_COEF00_01                    ((0x0180  << 2) + 0xfe340000)
#define VOUT_OSD1_CSC_COEF02_10                    ((0x0181  << 2) + 0xfe340000)
#define VOUT_OSD1_CSC_COEF11_12                    ((0x0182  << 2) + 0xfe340000)
#define VOUT_OSD1_CSC_COEF20_21                    ((0x0183  << 2) + 0xfe340000)
#define VOUT_OSD1_CSC_COEF22                       ((0x0184  << 2) + 0xfe340000)
#define VOUT_OSD1_CSC_COEF30_31                    ((0x0185  << 2) + 0xfe340000)
#define VOUT_OSD1_CSC_COEF32_40                    ((0x0186  << 2) + 0xfe340000)
#define VOUT_OSD1_CSC_COEF41_42                    ((0x0187  << 2) + 0xfe340000)
#define VOUT_OSD1_CSC_CLIP                         ((0x0188  << 2) + 0xfe340000)
#define VOUT_OSD1_CSC_OFFSET0_1                    ((0x0189  << 2) + 0xfe340000)
#define VOUT_OSD1_CSC_OFFSET2                      ((0x018a  << 2) + 0xfe340000)
#define VOUT_OSD1_CSC_PRE_OFFSET0_1                ((0x018b  << 2) + 0xfe340000)
#define VOUT_OSD1_CSC_PRE_OFFSET2                  ((0x018c  << 2) + 0xfe340000)
#define VOUT_OSD1_CSC_EN_CTRL                      ((0x018d  << 2) + 0xfe340000)
//OSD_SCALER
#define VOUT_OSD1_VSC_PHASE_STEP                   ((0x01a0  << 2) + 0xfe340000)
#define VOUT_OSD1_VSC_INI_PHASE                    ((0x01a1  << 2) + 0xfe340000)
#define VOUT_OSD1_VSC_CTRL0                        ((0x01a2  << 2) + 0xfe340000)
#define VOUT_OSD1_HSC_PHASE_STEP                   ((0x01a3  << 2) + 0xfe340000)
#define VOUT_OSD1_HSC_INI_PHASE                    ((0x01a4  << 2) + 0xfe340000)
#define VOUT_OSD1_HSC_CTRL0                        ((0x01a5  << 2) + 0xfe340000)
#define VOUT_OSD1_HSC_INI_PAT_CTRL                 ((0x01a6  << 2) + 0xfe340000)
#define VOUT_OSD1_SC_DUMMY_DATA                    ((0x01a7  << 2) + 0xfe340000)
#define VOUT_OSD1_SC_CTRL0                         ((0x01a8  << 2) + 0xfe340000)
#define VOUT_OSD1_SCI_WH_M1                        ((0x01a9  << 2) + 0xfe340000)
#define VOUT_OSD1_SCO_H_START_END                  ((0x01aa  << 2) + 0xfe340000)
#define VOUT_OSD1_SCO_V_START_END                  ((0x01ab  << 2) + 0xfe340000)
#define VOUT_OSD1_SCALE_COEF_IDX                   ((0x01ac  << 2) + 0xfe340000)
#define VOUT_OSD1_SCALE_COEF                       ((0x01ad  << 2) + 0xfe340000)
#define VOUT_OSD1_DB_FLT_CTRL                      ((0x01ae  << 2) + 0xfe340000)
#define VOUT_OSD1_DB_FLT_CTRL1                     ((0x01af  << 2) + 0xfe340000)
#define VOUT_OSD1_DB_FLT_LUMA_THRD                 ((0x01b0  << 2) + 0xfe340000)
#define VOUT_OSD1_DB_FLT_CHRM_THRD                 ((0x01b1  << 2) + 0xfe340000)
#define VOUT_OSD1_DB_FLT_RANDLUT                   ((0x01b2  << 2) + 0xfe340000)
#define VOUT_OSD1_DB_FLT_PXI_THRD                  ((0x01b3  << 2) + 0xfe340000)
#define VOUT_OSD1_DB_FLT_SEED_Y                    ((0x01b4  << 2) + 0xfe340000)
#define VOUT_OSD1_DB_FLT_SEED_U                    ((0x01b5  << 2) + 0xfe340000)
#define VOUT_OSD1_DB_FLT_SEED_V                    ((0x01b6  << 2) + 0xfe340000)
#define VOUT_OSD1_DB_FLT_SEED3                     ((0x01b7  << 2) + 0xfe340000)
#define VOUT_OSD1_DB_FLT_SEED4                     ((0x01b8  << 2) + 0xfe340000)
#define VOUT_OSD1_DB_FLT_SEED5                     ((0x01b9  << 2) + 0xfe340000)
//
// Closing file:  ./vpu_inc/vpu_vout_misc0_reg.h
//
// -----------------------------------------------
// REG_BASE:  VOUT_MISC1_VCBUS_BASE = 0x02
// -----------------------------------------------
//
// Reading file:  ./vpu_inc/vpu_vout_misc1_reg.h
//
#define VOUT_VD1_SCALE_COEF_IDX                    ((0x0200  << 2) + 0xfe340000)
#define VOUT_VD1_SCALE_COEF                        ((0x0201  << 2) + 0xfe340000)
#define VOUT_VD1_VSC_REGION12_STARTP               ((0x0202  << 2) + 0xfe340000)
#define VOUT_VD1_VSC_REGION34_STARTP               ((0x0203  << 2) + 0xfe340000)
#define VOUT_VD1_VSC_REGION4_ENDP                  ((0x0204  << 2) + 0xfe340000)
#define VOUT_VD1_VSC_START_PHASE_STEP              ((0x0205  << 2) + 0xfe340000)
#define VOUT_VD1_VSC_REGION0_PHASE_SLOPE           ((0x0206  << 2) + 0xfe340000)
#define VOUT_VD1_VSC_REGION1_PHASE_SLOPE           ((0x0207  << 2) + 0xfe340000)
#define VOUT_VD1_VSC_REGION3_PHASE_SLOPE           ((0x0208  << 2) + 0xfe340000)
#define VOUT_VD1_VSC_REGION4_PHASE_SLOPE           ((0x0209  << 2) + 0xfe340000)
#define VOUT_VD1_VSC_PHASE_CTRL                    ((0x020a  << 2) + 0xfe340000)
#define VOUT_VD1_VSC_INI_PHASE                     ((0x020b  << 2) + 0xfe340000)
#define VOUT_VD1_HSC_REGION12_STARTP               ((0x020c  << 2) + 0xfe340000)
#define VOUT_VD1_HSC_REGION34_STARTP               ((0x020d  << 2) + 0xfe340000)
#define VOUT_VD1_HSC_REGION4_ENDP                  ((0x020e  << 2) + 0xfe340000)
#define VOUT_VD1_HSC_START_PHASE_STEP              ((0x020f  << 2) + 0xfe340000)
#define VOUT_VD1_HSC_REGION0_PHASE_SLOPE           ((0x0210  << 2) + 0xfe340000)
#define VOUT_VD1_HSC_REGION1_PHASE_SLOPE           ((0x0211  << 2) + 0xfe340000)
#define VOUT_VD1_HSC_REGION3_PHASE_SLOPE           ((0x0212  << 2) + 0xfe340000)
#define VOUT_VD1_HSC_REGION4_PHASE_SLOPE           ((0x0213  << 2) + 0xfe340000)
#define VOUT_VD1_HSC_PHASE_CTRL                    ((0x0214  << 2) + 0xfe340000)
#define VOUT_VD1_SC_MISC                           ((0x0215  << 2) + 0xfe340000)
#define VOUT_VD1_SCO_FIFO_CTRL                     ((0x0216  << 2) + 0xfe340000)
#define VOUT_VD1_HSC_PHASE_CTRL1                   ((0x0217  << 2) + 0xfe340000)
#define VOUT_VD1_HSC_INI_PAT_CTRL                  ((0x0218  << 2) + 0xfe340000)
#define VOUT_VD1_SC_GCLK_CTRL                      ((0x0219  << 2) + 0xfe340000)
#define VOUT_VD1_PREHSC_COEF                       ((0x021a  << 2) + 0xfe340000)
#define VOUT_VD1_PRE_SCALE_CTRL                    ((0x021b  << 2) + 0xfe340000)
#define VOUT_VD1_PREVSC_COEF                       ((0x021c  << 2) + 0xfe340000)
#define VOUT_VD1_PREHSC_COEF1                      ((0x021d  << 2) + 0xfe340000)
//VADJ
#define VOUT_VADJ_MISC                             ((0x0250  << 2) + 0xfe340000)
#define VOUT_VADJ_BLACK_VAL                        ((0x0251  << 2) + 0xfe340000)
#define VOUT_VADJ_Y                                ((0x0252  << 2) + 0xfe340000)
#define VOUT_VADJ_MA_MB                            ((0x0253  << 2) + 0xfe340000)
#define VOUT_VADJ_MC_MD                            ((0x0254  << 2) + 0xfe340000)
#define VOUT_VADJ_CURV_0                           ((0x0255  << 2) + 0xfe340000)
#define VOUT_VADJ_CURV_1                           ((0x0256  << 2) + 0xfe340000)
#define VOUT_VADJ_CURV_2                           ((0x0257  << 2) + 0xfe340000)
#define VOUT_VADJ_CURV_3                           ((0x0258  << 2) + 0xfe340000)
#define VOUT_MATRIX_COEF00_01                      ((0x0259  << 2) + 0xfe340000)
#define VOUT_MATRIX_COEF02_10                      ((0x025a  << 2) + 0xfe340000)
#define VOUT_MATRIX_COEF11_12                      ((0x025b  << 2) + 0xfe340000)
#define VOUT_MATRIX_COEF20_21                      ((0x025c  << 2) + 0xfe340000)
#define VOUT_MATRIX_COEF22                         ((0x025d  << 2) + 0xfe340000)
#define VOUT_MATRIX_COEF13_14                      ((0x025e  << 2) + 0xfe340000)
#define VOUT_MATRIX_COEF23_24                      ((0x025f  << 2) + 0xfe340000)
#define VOUT_MATRIX_COEF15_25                      ((0x0260  << 2) + 0xfe340000)
#define VOUT_MATRIX_CLIP                           ((0x0261  << 2) + 0xfe340000)
#define VOUT_MATRIX_OFFSET0_1                      ((0x0262  << 2) + 0xfe340000)
#define VOUT_MATRIX_OFFSET2                        ((0x0263  << 2) + 0xfe340000)
#define VOUT_MATRIX_PRE_OFFSET0_1                  ((0x0264  << 2) + 0xfe340000)
#define VOUT_MATRIX_PRE_OFFSET2                    ((0x0265  << 2) + 0xfe340000)
#define VOUT_MATRIX_EN_CTRL                        ((0x0266  << 2) + 0xfe340000)
#define VOUT_RGB_CTRST                             ((0x0267  << 2) + 0xfe340000)
#define VOUT_RGB_BRGHT                             ((0x0268  << 2) + 0xfe340000)
#define VOUT_RGB_DLUT_0_3                          ((0x0269  << 2) + 0xfe340000)
#define VOUT_RGB_DLUT_4_7                          ((0x026a  << 2) + 0xfe340000)
#define VOUT_RGB_DLUT_8_11                         ((0x026b  << 2) + 0xfe340000)
#define VOUT_MATRIX_SAT                            ((0x026c  << 2) + 0xfe340000)
//GAINOFF
#define VOUT_GAINOFF_GCLK_CTRL                     ((0x0270  << 2) + 0xfe340000)
#define VOUT_GAINOFF_CTRL0                         ((0x0271  << 2) + 0xfe340000)
#define VOUT_GAINOFF_CTRL1                         ((0x0272  << 2) + 0xfe340000)
#define VOUT_GAINOFF_CTRL2                         ((0x0273  << 2) + 0xfe340000)
#define VOUT_GAINOFF_CTRL3                         ((0x0274  << 2) + 0xfe340000)
#define VOUT_GAINOFF_CTRL4                         ((0x0275  << 2) + 0xfe340000)
//
// Closing file:  ./vpu_inc/vpu_vout_misc1_reg.h
//
// -----------------------------------------------
// REG_BASE:  VOUT_TIMGEN0_VCBUS_BASE = 0x04
// -----------------------------------------------
//
// Reading file:  ./vpu_inc/vpu_vout_disp_if_reg.h
//
#define VPU_VOUT_CORE_CTRL                         ((0x0400  << 2) + 0xfe340000)
//Bit    31 reg_lath_size               // unsigned,  RW,  default = 0,
//Bit 30:29 reg_dth_glk_ctrl            // unsigned,  RW,  default = 0,
//Bit    28 reg_out_ctrl                // unsigned,  RW,  default = 0,
//Bit    27 reg_pos_switch              // unsigned,  RW,  default = 0,    //0:lcd_vout[23:0]=lcd_out[23:0]   1:lcd_out[15:8] exchange with lcd_out[7:0]
//Bit    26 reg_bt1120_simp_tim         // unsigned,  RW,  default = 0,    // 0:BT1120 with crc/ln0/ln1   1:BT1120 without crc/ln0/ln1
//Bit 25:16 reg_out_mode                // unsigned,  RW,  default = 0,
//Bit 15:11 reserved
//Bit    10 reg_blank_de_en             // unsigned,  RW,  default = 0,    //0:blank-data when de==0  1:fifo_data when de==0
//Bit  9: 4 reg_dat_reo_sel             // unsigned,  RW,  default = 6'h24 //output data reorder
//Bit  3: 2 reg_serial_rate             // unsigned,  RW,  default = 0,    //0:pix/1cylce    1:pix/2cycle  2:pix/3cycle
//Bit 1     reg_field_mode              // unsigned,  RW,  default = 0;    //0:progressive   1:interlaced
//Bit 0     reg_venc_en                 // unsigned,  RW,  default = 0;    //0:venc disable  1:venc enable
#define VPU_VOUT_INT_CTRL                          ((0x0401  << 2) + 0xfe340000)
//Bit 31:20 reg_gclk_mode_ctrl          // unsigned,  RW,  default = 0,    //[3:2] clk_1120_ctrl [1:0]clk_656_ctrl,
//Bit 19:16 reg_gclk_regs_ctrl          // unsigned,  RW,  default = 0,    //[1:0] clk_reg
//Bit    15 reg_venc_bist_en            // unsigned,  RW,  default = 0
//Bit    14 reg_dth_en                  // unsigned,  RW,  default = 0
//Bit 13:12 reg_sw_rst_sel              // unsigned,  RW,  default = 0
//Bit 11:8  reg_tim_rev                 // unsigned,  RW,  default = 0
//Bit 7     reg_int_error_ctrl          // unsigned,  RW,  default = 0
//Bit 6     reg_int_disable_rst_afifo   // unsigned,  RW,  default = 0
//Bit 5     pls_int_force_go_field      // unsigned,  RW,  default = 0
//Bit 4     pls_int_force_go_line       // unsigned,  RW,  default = 0
//Bit 3:2   reg_int_force_field_ctrl    // unsigned,  RW,  default = 0
//Bit 1:0   reg_int_vs_hs_ctrl          // unsigned,  RW,  default = 0
//
#define VPU_VOUT_DETH_CTRL                         ((0x0402  << 2) + 0xfe340000)
//Bit 31:19  reg_dth_vsize               // unsigned,  RW,  default = 0
//Bit 18:6   reg_dth_hsize               // unsigned,  RW,  default = 0
//Bit    5   reg_dth_bw                  // unsigned,  RW,  default = 0
//Bit  4:2   reg_dth_force_cnt_val       // unsigned,  RW,  default = 0
//Bit    1   reg_dth_force_cnt_en        // unsigned,  RW,  default = 0
//Bit    0   reg_sw_rst                  // unsigned,  RW,  default = 0
#define VPU_VOUT_DTH_DATA                          ((0x0403  << 2) + 0xfe340000)
//reserved for lut
#define VPU_VOUT_DTH_ADDR                          ((0x0404  << 2) + 0xfe340000)
//reserved for lut
#define VPU_VOUT_HS_POS                            ((0x0412  << 2) + 0xfe340000)
//Bit 31:29 reserved
//Bit 28:16 reg_hs_px_bgn    // unsigned,  RW,  default = 0;  pixel begin
//Bit 15:13 reserved
//Bit 12: 0 reg_hs_px_end    // unsigned,  RW,  default = 1;  pixel end
#define VPU_VOUT_VSLN_E_POS                        ((0x0413  << 2) + 0xfe340000)
//Bit 31:29 reserved
//Bit 28:16 reg_vs_ln_bgn_e  // unsigned,  RW,  default = 0;  (even field) line begin
//Bit 15:13 reserved
//Bit 12: 0 reg_vs_ln_end_e  // unsigned,  RW,  default = 0;  (even field) line end
#define VPU_VOUT_VSPX_E_POS                        ((0x0414  << 2) + 0xfe340000)
//Bit 31:29 reserved
//Bit 28:16 reg_vs_px_bgn_e  // unsigned,  RW,  default = 0;  (even field) pixel begin
//Bit 15:13 reserved
//Bit 12: 0 reg_vs_px_end_e  // unsigned,  RW,  default = 0;  (even field) pixel end
#define VPU_VOUT_VSLN_O_POS                        ((0x0415  << 2) + 0xfe340000)
//Bit 31:29 reserved
//Bit 28:16 reg_vs_ln_bgn_o  // unsigned,  RW,  default = 0;  (odd  field) line begin
//Bit 15:13 reserved
//Bit 12: 0 reg_vs_ln_end_o  // unsigned,  RW,  default = 0;  (odd  field) line end
#define VPU_VOUT_VSPX_O_POS                        ((0x0416  << 2) + 0xfe340000)
//Bit 31:29 reserved
//Bit 28:16 reg_vs_px_bgn_o  // unsigned,  RW,  default = 0;  (odd  field) pixel begin
//Bit 15:13 reserved
//Bit 12: 0 reg_vs_px_end_o  // unsigned,  RW,  default = 0;  (odd  field) pixel end
#define VPU_VOUT_DE_PX_EN                          ((0x0417  << 2) + 0xfe340000)
//Bit 31:29 reserved
//Bit 28:16 reg_de_px_bgn    // unsigned,  RW,  default = 100;  (even field) pixel begin
//Bit 15:13 reserved
//Bit 12: 0 reg_de_px_end    // unsigned,  RW,  default = 2019;  (even field) pixel end
#define VPU_VOUT_DELN_E_POS                        ((0x0418  << 2) + 0xfe340000)
//Bit 31:29 reserved
//Bit 28:16 reg_de_ln_bgn_e  // unsigned,  RW,  default = 41;  (even field) line begin
//Bit 15:13 reserved
//Bit 12: 0 reg_de_ln_end_e  // unsigned,  RW,  default = 1120;  (even field) line end
#define VPU_VOUT_DELN_O_POS                        ((0x0419  << 2) + 0xfe340000)
//Bit 31:29 reserved
//Bit 28:16 reg_de_ln_bgn_o  // unsigned,  RW,  default = 0;  (odd  field) line begin
//Bit 15:13 reserved
//Bit 12: 0 reg_de_ln_end_o  // unsigned,  RW,  default = 0;  (odd  field) line end
#define VPU_VOUT_MAX_SIZE                          ((0x041a  << 2) + 0xfe340000)
//Bit 31:29 reserved
//Bit 28:16 reg_total_hsize     // unsigned,  RW,  default = 2200;  maximum pixel count
//Bit 15:13 reserved
//Bit 12: 0 reg_total_vsize     // unsigned,  RW,  default = 1125;  maximum line  count
#define VPU_VOUT_FLD_BGN_LINE                      ((0x041b  << 2) + 0xfe340000)
//Bit 31:29 reserved
//Bit 28:16 reg_field_ln_bgn_o     // unsigned,  RW,  default = 564;  BT1120 60I:1;   BT656_525:4    ;  odd field begin line
//Bit 15:13 reserved
//Bit 12: 0 reg_field_ln_bgn_e     // unsigned,  RW,  default = 1;    BT1120 60I:564; BT656_525:268  ;  even field begin line
//////////////////////////////////////////
//for independent timgen crtl_signal out
#define VPU_VOUTO_HS_POS                           ((0x0420  << 2) + 0xfe340000)
//Bit 31:29 reserved
//Bit 28:16 reg_venco_hs_px_bgn    // unsigned,  RW,  default = 0;  pixel begin
//Bit 15:13 reserved
//Bit 12: 0 reg_venco_hs_px_end    // unsigned,  RW,  default = 1;  pixel end
#define VPU_VOUTO_VSLN_E_POS                       ((0x0421  << 2) + 0xfe340000)
//Bit 31:29 reserved
//Bit 28:16 reg_venco_vs_ln_bgn_e  // unsigned,  RW,  default = 0;  (even field) line begin
//Bit 15:13 reserved
//Bit 12: 0 reg_venco_vs_ln_end_e  // unsigned,  RW,  default = 0;  (even field) line end
#define VPU_VOUTO_VSPX_E_POS                       ((0x0422  << 2) + 0xfe340000)
//Bit 31:29 reserved
//Bit 28:16 reg_venco_vs_px_bgn_e  // unsigned,  RW,  default = 0;  (even field) pixel begin
//Bit 15:13 reserved
//Bit 12: 0 reg_venco_vs_px_end_e  // unsigned,  RW,  default = 0;  (even field) pixel end
#define VPU_VOUTO_VSLN_O_POS                       ((0x0423  << 2) + 0xfe340000)
//Bit 31:29 reserved
//Bit 28:16 reg_venco_vs_ln_bgn_o  // unsigned,  RW,  default = 0;  (odd  field) line begin
//Bit 15:13 reserved
//Bit 12: 0 reg_venco_vs_ln_end_o  // unsigned,  RW,  default = 0;  (odd  field) line end
#define VPU_VOUTO_VSPX_O_POS                       ((0x0424  << 2) + 0xfe340000)
//Bit 31:29 reserved
//Bit 28:16 reg_venco_vs_px_bgn_o  // unsigned,  RW,  default = 0;  (odd  field) pixel begin
//Bit 15:13 reserved
//Bit 12: 0 reg_venco_vs_px_end_o  // unsigned,  RW,  default = 0;  (odd  field) pixel end
#define VPU_VOUTO_DE_PX_EN                         ((0x0425  << 2) + 0xfe340000)
//Bit 31:29 reserved
//Bit 28:16 reg_venco_de_px_bgn    // unsigned,  RW,  default = 100;  (even field) pixel begin
//Bit 15:13 reserved
//Bit 12: 0 reg_venco_de_px_end    // unsigned,  RW,  default = 2019;  (even field) pixel end
#define VPU_VOUTO_DELN_E_POS                       ((0x0426  << 2) + 0xfe340000)
//Bit 31:29 reserved
//Bit 28:16 reg_venco_de_ln_bgn_e  // unsigned,  RW,  default = 41;  (even field) line begin
//Bit 15:13 reserved
//Bit 12: 0 reg_venco_de_ln_end_e  // unsigned,  RW,  default = 1120;  (even field) line end
#define VPU_VOUTO_DELN_O_POS                       ((0x0427  << 2) + 0xfe340000)
//Bit 31:29 reserved
//Bit 28:16 reg_venco_de_ln_bgn_o  // unsigned,  RW,  default = 0;  (odd  field) line begin
//Bit 15:13 reserved
//Bit 12: 0 reg_venco_de_ln_end_o  // unsigned,  RW,  default = 0;  (odd  field) line end
#define VPU_VOUTO_MAX_SIZE                         ((0x0428  << 2) + 0xfe340000)
//Bit 31:29 reserved
//Bit 28:16 reg_venco_total_hsize     // unsigned,  RW,  default = 2200;  maximum pixel count
//Bit 15:13 reserved
//Bit 12: 0 reg_venco_total_vsize     // unsigned,  RW,  default = 1125;  maximum line  count
#define VPU_VOUTO_FLD_BGN_LINE                     ((0x0429  << 2) + 0xfe340000)
//Bit 31:29 reserved
//Bit 28:16 reg_venco_field_ln_bgn_o     // unsigned,  RW,  default = 564;  BT1120 60I:1;   BT656_525:4    ;  odd field begin line
//Bit 15:13 reserved
//Bit 12: 0 reg_venco_field_ln_bgn_e     // unsigned,  RW,  default = 1;    BT1120 60I:564; BT656_525:268  ;  even field begin line
// bt1120
#define VPU_VOUT_BT_CTRL                           ((0x0430  << 2) + 0xfe340000)
//Bit 31:13  reserved
//Bit 12     reg_field_en       // unsigned,  RW,  default = 0;   //for interlace output
//Bit 11:4   reserved
//Bit 3: 2   reg_422_mode       // unsigned,  RW,  default = 0;   //0:left, 1:right, 2:average
//Bit 1      reg_cr_fst         // unsigned,  RW,  default = 0;   //0:cb first   1:cr first
//Bit 0: 0   reg_yc_switch      // unsigned,  RW,  default = 0;
#define VPU_VOUT_BT_PLD_LINE                       ((0x0431  << 2) + 0xfe340000)
//Bit 31:29  reserved
//Bit 28:16  reg_payload_line_e // unsigned,  RW,  default = 10;
//Bit 15:13  reserved
//Bit 12: 0  reg_payload_line_o // unsigned,  RW,  default = 572;
#define VPU_VOUT_BT_PLDIDT0                        ((0x0432  << 2) + 0xfe340000)
//Bit 31:26  reserved
//Bit 25:16  reg_payload_idt1   // unsigned,  RW,  default = 10'h32c;  // payload identifier byte1
//Bit 15:10  reserved
//Bit 9:0    reg_payload_idt0   // unsigned,  RW,  default = 10'h224; // payload identifier byte0
#define VPU_VOUT_BT_PLDIDT1                        ((0x0433  << 2) + 0xfe340000)
//Bit 31:26  reserved
//Bit 25:16  reg_payload_idt3   // unsigned,  RW,  default = 10'h4;  // payload identifier byte3
//Bit 15:10  reserved
//Bit 9:0    reg_payload_idt2   // unsigned,  RW,  default = 10'h80; // payload identifier byte2
#define VPU_VOUT_BT_BLK_DATA                       ((0x0434  << 2) + 0xfe340000)
//Bit 31:26  reserved
//Bit 25:16  reg_blank_data0    // unsigned,  RW,  default = 64;   //for Y,R,G,B
//Bit 15:10  reserved
//Bit  9: 0  reg_blank_data1    // unsigned,  RW,  default = 512;  //for Cb,Cr
#define VPU_VOUT_BT_DAT_CLPY                       ((0x0435  << 2) + 0xfe340000)
//Bit 31:26  reserved
//Bit 25:16  reg_dat_clp_max_y    // unsigned,  RW,  default = 940;   //for y max clip
//Bit 15:10  reserved
//Bit  9: 0  reg_dat_clp_min_y    // unsigned,  RW,  default = 0;      //for y min clip
#define VPU_VOUT_BT_DAT_CLPC                       ((0x0436  << 2) + 0xfe340000)
//Bit 31:26  reserved
//Bit 25:16  reg_dat_clp_max_c    // unsigned,  RW,  default = 960;   //for C max clip
//Bit 15:10  reserved
//Bit  9: 0  reg_dat_clp_min_c    // unsigned,  RW,  default = 64;      //for C min clip
#define VPU_VOUT_LVDS_BIST_CTRL                    ((0x0440  << 2) + 0xfe340000)
//Bit 31:30 reserved
//Bit    29 reg_lvds_bist_en      // unsigned,  RW,  default = 0;
//Bit 28:24 reg_lvds_bist_tap_sel // unsigned,  RW,  default = 0;
//Bit 23:0  reg_lvds_bist_mux_sel // unsigned,  RW,  default = 0;
#define VPU_VOUT_LVDS_FIXED_VALE                   ((0x0441  << 2) + 0xfe340000)
//Bit 31:0 reg_lvds_bist_fixed_val // unsigned,  RW,  default = 0;
#define VPU_VOUT_LVDS_CNT1                         ((0x0442  << 2) + 0xfe340000)
//Bit 31:16 reg_lvds_pack_cntl // unsigned,  RW,  default = 0;
//Bit 15:0  reg_lvds_gen_cntl  // unsigned,  RW,  default = 0;
#define VPU_VOUT_LVDS_CLK_CFG                      ((0x0443  << 2) + 0xfe340000)
//Bit 31:16 reg_lvds_clkb_clka_val  // unsigned,  RW,  default = 0;
//Bit 15:0  reg_lvds_phy_clk_cntl   // unsigned,  RW,  default = 0;
#define VPU_VOUT_LVDS_CH_SWAP                      ((0x0444  << 2) + 0xfe340000)
//Bit 31:0 reg_lvds_ch_wrap_32bit // unsigned,  RW,  default = 0;
#define VPU_VOUT_LVDS_CH_SWAP_H16BIT               ((0x0445  << 2) + 0xfe340000)
//Bit 31:28 reserved
//Bit 27:20 reg_lvds_tcon_double      // unsigned,  RW,  default = 0;
//Bit 19:18 reserved
//Bit 17    reg_lvds_port_swap        // unsigned,  RW,  default = 0;
//Bit 16    reg_lvds_bist_dual_pixel  // unsigned,  RW,  default = 0;
//Bit 15:0  reg_lvds_ch_wrap_h16bit   // unsigned,  RW,  default = 0;
#define VPU_VOUT_LVDS_BLANK_DATA                   ((0x0446  << 2) + 0xfe340000)
//Bit 31:0 reg_lvds_blank_data // unsigned,  RW,  default = 0;
#define VPU_VOUT_LVDS_CH_SWAP0                     ((0x0447  << 2) + 0xfe340000)
//Bit 31:0 reg_lvds_p2p_ch_swap0      // unsigned,  RW,  default = 'h76543210;
#define VPU_VOUT_LVDS_CH_SWAP1                     ((0x0448  << 2) + 0xfe340000)
//Bit 31:16 reserved
//Bit 15:0  reg_lvds_p2p_ch_swap1      // unsigned,  RW,  default = 'hba98
#define VPU_VOUT_BIST_CFG_YUV                      ((0x0450  << 2) + 0xfe340000)
//Bit 31:30 reg_cfg_bist_vdcnt_strtset // unsigned,  RW,  default = 0;
//Bit 29:20 reg_cfg_bist_Y             // unsigned,  RW,  default = 0;
//Bit 19:10 reg_cfg_bist_Cb            // unsigned,  RW,  default = 0;
//Bit  9: 0 reg_cfg_bist_Cr            // unsigned,  RW,  default = 0;
#define VPU_VOUT_CLRBAR_CFG                        ((0x0451  << 2) + 0xfe340000)
//Bit  31:29  reserved
//Bit  28:16  reg_cfg_bist_clrbar_strt  // unsigned,  RW,  default = 0;
//Bit  15:13  reserved
//Bit  12: 0  reg_cfg_bist_clrbar_width // unsigned,  RW,  default = 0;
#define VPU_VOUT_BIST_SEL                          ((0x0452  << 2) + 0xfe340000)
//Bit  31: 8  reserved
//Bit   7: 0  reg_cfg_bist_mode_sel     //unsigned , RW ,default = 0;
#define VPU_VOUT_BIST_HIGH                         ((0x0453  << 2) + 0xfe340000)
//Bit  31:29  reserved
//Bit  28:16  reg_cfg_bist_clrbar_vstrt  // unsigned,  RW,  default = 0;
//Bit  15:13  reserved
//Bit  12: 0  reg_cfg_bist_clrbar_high   // unsigned,  RW,  default = 0;
#define VPU_VOUT_GAMMA_CTRL                        ((0x0458  << 2) + 0xfe340000)
//Bit  31: 2  reserved
//Bit   1     reg_gamma_vcom            //unsigned , RW ,default = 0;
//Bit   0     reg_gamma_disable_10b     //unsigned , RW ,default = 0;
#define VPU_VOUT_GAMMA_PROB0                       ((0x0459  << 2) + 0xfe340000)
//Bit  31:18  reserved
//Bit  17:16  reg_gamma_probe_ctrl      //unsigned , RW ,default = 0;
//Bit  15:0   reg_gamma_probe_hl_color  //unsigned , RW ,default = 0;
#define VPU_VOUT_GAMMA_PROB1                       ((0x045a  << 2) + 0xfe340000)
//Bit   31:29 reserved
//Bit   28:16 reg_gamma_probe_pos_x     //unsigned , RW ,default = 0;
//Bit  15:13  reserved
//Bit   12:0  reg_gamma_probe_pos_y     //unsigned , RW ,default = 0;
#define VPU_VOUT_RO_GAMMA_PROB                     ((0x045b  << 2) + 0xfe340000)
//Bit  31:16  ro_gamma_probe_color_l    //unsigned , RO
//Bit  15:0   ro_gamma_probe_color_h    //unsigned , RO
#define VPU_VOUT_RO_INT                            ((0x0460  << 2) + 0xfe340000)
//Bit  31:0  ro_vout_timgen_status      //unsigned, RO  {afifo_count[4:0],ro_int_error_cnt[7:0]}
#define VPU_VOUT_LVDS_RO_COVGE                     ((0x0461  << 2) + 0xfe340000)
//Bit 31:16  reserved
//Bit 15:0   ro_lvds_fault_coverage     //unsigned,RO
//
// Closing file:  ./vpu_inc/vpu_vout_disp_if_reg.h
//
// -----------------------------------------------
// REG_BASE:  VOUT_TIMGEN1_VCBUS_BASE = 0x05
// -----------------------------------------------
//
// Reading file:  ./vpu_inc/lcd_regs.h
//
// 0x00 - 0x9f
//`include "ldc_cbus.h"
#define LCD_GAMMA_CNTL_PORT                        ((0x05a0  << 2) + 0xfe340000)
#define LCD_GAMMA_DATA_PORT                        ((0x05a1  << 2) + 0xfe340000)
#define LCD_GAMMA_ADDR_PORT                        ((0x05a2  << 2) + 0xfe340000)
#define LCD_GAMMA_VCOM_HSWITCH_ADDR                ((0x05a3  << 2) + 0xfe340000)
#define LCD_RGB_BASE_ADDR                          ((0x05a5  << 2) + 0xfe340000)
#define LCD_RGB_COEFF_ADDR                         ((0x05a6  << 2) + 0xfe340000)
#define LCD_POL_CNTL_ADDR                          ((0x05a7  << 2) + 0xfe340000)
#define LCD_DITH_CNTL_ADDR                         ((0x05a8  << 2) + 0xfe340000)
#define LCD_GAMMA_PROBE_CTRL                       ((0x05a9  << 2) + 0xfe340000)
//read only
#define LCD_GAMMA_PROBE_COLOR_L                    ((0x05aa  << 2) + 0xfe340000)
#define LCD_GAMMA_PROBE_COLOR_H                    ((0x05ab  << 2) + 0xfe340000)
#define LCD_GAMMA_PROBE_HL_COLOR                   ((0x05ac  << 2) + 0xfe340000)
#define LCD_GAMMA_PROBE_POS_X                      ((0x05ad  << 2) + 0xfe340000)
#define LCD_GAMMA_PROBE_POS_Y                      ((0x05ae  << 2) + 0xfe340000)
#define LCD_LCD_MCU_CTL                            ((0x05b0  << 2) + 0xfe340000)
#define LCD_LCD_MCU_DATA_0                         ((0x05b1  << 2) + 0xfe340000)
#define LCD_LCD_MCU_DATA_1                         ((0x05b2  << 2) + 0xfe340000)
#define LCD_LCD_PORT_SWAP                          ((0x05b3  << 2) + 0xfe340000)
#define LCD_GAMMA_CNTL_PORT0                       ((0x05b4  << 2) + 0xfe340000)
#define LCD_GAMMA_DATA_PORT0                       ((0x05b5  << 2) + 0xfe340000)
#define LCD_GAMMA_ADDR_PORT0                       ((0x05b6  << 2) + 0xfe340000)
#define LCD_LDC_AXI_UGT                            ((0x05b7  << 2) + 0xfe340000)
//
// Closing file:  ./vpu_inc/lcd_regs.h
//
// -----------------------------------------------
// REG_BASE:  VOUT_RDARB_VCBUS_BASE = 0x08
// -----------------------------------------------
//`include "viu_rdarb_regs.h"
//
// Closing file:  ./vpu_inc/vout_regs_base.h
//
//
// Reading file:  ./ge2d_regs.h
//
// synopsys translate_off
// synopsys translate_on
//===========================================================================
////// GE2D Registers    0x8a0 - 0x8ff
//address is 0xd016_0000 - 0xd0160000 - 0xd01603ff
//===========================================================================
// -----------------------------------------------
// REG_BASE:  GE2D_GCBUS_BASE = 0x00
// -----------------------------------------------
//Bit 31, destination bytemask only if destination bitmask is enable
//Bit 30, destination bitmask enable
//Bit 29, source2 key  enable
//Bit 28, source2 key  mode, 0: mask data when match, 1: mask data when unmatch
//Bit 27, source1 key  enable
//Bit 26, source1 key  mode, 0: mask data when match, 1: mask data when unmatch
//Bit 25:24, dst1 8bit mode component selection,
//            00: select Y(R), 01: Cb(G), 10: Cr(B), 11: Alpha
//Bit 23  dst clip mode, 0: write inside clip window, 1: write outside clip window
//Bit 22:17,  reserved
//Bit 16:15, src2 8bit mode component selection,
//            00: select Y(R), 01: Cb(G), 10: Cr(B), 11: Alpha
//Bit 14     src2 fill mode, 0: repeat data, 1: fill default color
//Bit 13:12  src2 picture struct, 00: frame, 10: even, 11: odd
//Bit 11     src1 x direction yc ration, 0: 1:1, 1: 2:1
//Bit 10     src1 y direction yc ration, 0: 1:1, 1: 2:1
//Bit 9:7    reserved
//Bit 6:5,   src1  8bit mode component selection,
//            00: select Y(R), 01: Cb(G), 10: Cr(B), 11: Alpha
//Bit 4      src1 fill mode, 0: repeat data, 1: fill default color
//Bit 3      src1 lookup table enable
//Bit 2:1    src1 picture struct, 00: frame, 10: even, 11: odd
//Bit 0      src1 separate buffer enable
#define GE2D_GEN_CTRL0                             ((0x00a0  << 2) + 0xfe04c000)
//Bit 31, soft rst
//Bit 30, dst write response counter reset
//Bit 29, disable adding dst write response count to busy bit
//Bit 28:26, reserved
//bit 25:24, interrupt control, if bit[0] true, generate interrupt when one command done,
//                              if bit[1] true, generate interrupt when ge2d change from busy to not busy
//Bit 23:22 src2 burst size control
//Bit 21:16 src1 burst size control, 5:4, yfifo, 3:2, cbfifo, 1:0, crfifo
//          each 2bit, 00: 24 64bitword, 01: 32 64bitword, 10: 48 64bitwords, 11: 64 64bitwords
//Bit 15:14, dst1 picture struct, 00: frame, 10:top, 11: bottom
//Bit 13:12, bit 13 if true, force read src1, bit 12 if true, force read src2
//Bit 11, dst2 request urgent enable
//Bit 10, src1 request urgent enable
//Bit 9,  src2 request urgent enable
//Bit 8,  dst1 request urgent enable
//Bit 7:0 src1 global alpha
#define GE2D_GEN_CTRL1                             ((0x00a1  << 2) + 0xfe04c000)
//Bit31      alpha conversion mode in alu, 0: alpha_out = (alpha !=0) ? alpha +1 : 0;
//                 otherwise, alpha_out = (alpha < 128) ? alpha: alpha + 1;
//Bit30      color conversion mode in alu, 0: color_out = (color != 0) ? color +1: 0;
//                 otherwise, color_out = (color < 128) ? color: color + 1;
//Bit29      src1_gb_alpha_en, As = src1_gb_alpha_en ? Asr * Ag: Asr
//Bit28      dst1_color_round_mode, 0: truncate, 1: + 0.5 rounding
//Bit27      src2_color_expand_mode, 0: add 0, 1: add MSBs
//Bit26      src2_alpha_expand_mode, 0: add 0, 1: add MSBs
//Bit25      src1_color_expand_mode, 0: add 0, 1: add MSBs
//Bit24      src1_alpha_expand_mode, 0: add 0, 1: add MSBs
//Bit 23     if true, dst little endian, otherwise big endian
//Bit 22:19 dst1 color_map
//        dst1_format=0                  : output 8-bit;
//        dst1_format=1, dst1_color_map=1: output 16-bit YCbCr  655;
//        dst1_format=1, dst1_color_map=2: output 16-bit YCbCr  844;
//        dst1_format=1, dst1_color_map=3: output 16-bit YCbCrA 6442;
//        dst1_format=1, dst1_color_map=4: output 16-bit YCbCrA 4444;
//        dst1_format=1, dst1_color_map=5: output 16-bit YCbCr  565;
//        dst1_format=1, dst1_color_map=6: output 16-bit AYCbCr 4444;
//        dst1_format=1, dst1_color_map=7: output 16-bit AYCbCr 1555;
//        dst1_format=1, dst1_color_map=8: output 16-bit YCbCrA 4642;
//        dst1_format=1, dst1_color_map=9: output 16-bit CbCr   88;
//        dst1_format=1, dst1_color_map=10:output 16-bit CrCb   88;
//        dst1_format=2, dst1_color_map=0: output 24-bit YCbCr  888;
//        dst1_format=2, dst1_color_map=1: output 24-bit YCbCrA 5658;
//        dst1_format=2, dst1_color_map=2: output 24-bit AYCbCr 8565;
//        dst1_format=2, dst1_color_map=3: output 24-bit YCbCrA 6666;
//        dst1_format=2, dst1_color_map=4: output 24-bit AYCbCr 6666;
//        dst1_format=2, dst1_color_map=5: output 24-bit CrCbY  888;
//        dst1_format=3, dst1_color_map=0: output 32-bit YCbCrA 8888;
//        dst1_format=3, dst1_color_map=1: output 32-bit AYCbCr 8888;
//        dst1_format=3, dst1_color_map=2: output 32-bit ACrCbY 8888;
//        dst1_format=3, dst1_color_map=3: output 32-bit CrCbYA 8888.
//Bit 17:16 dst1_format,  00: 8bit, 01:16bit, 10:24bit, 11: 32bit
//Bit 15    if true, src2 little endian, otherwise big endian
//Bit 14:11  src2 color_map
//        src2_format=0                 : output 8-bit;
//        src2_format=1, src2_color_map=1: output 16-bit YCbCr  655;
//        src2_format=1, src2_color_map=2: output 16-bit YCbCr  844;
//        src2_format=1, src2_color_map=3: output 16-bit YCbCrA 6442;
//        src2_format=1, src2_color_map=4: output 16-bit YCbCrA 4444;
//        src2_format=1, src2_color_map=5: output 16-bit YCbCr  565;
//        src2_format=1, src2_color_map=6: output 16-bit AYCbCr 4444;
//        src2_format=1, src2_color_map=7: output 16-bit AYCbCr 1555;
//        src2_format=1, src2_color_map=8: output 16-bit YCbCrA 4642;
//        src2_format=2, src2_color_map=0: output 24-bit YCbCr  888;
//        src2_format=2, src2_color_map=1: output 24-bit YCbCrA 5658;
//        src2_format=2, src2_color_map=2: output 24-bit AYCbCr 8565;
//        src2_format=2, src2_color_map=3: output 24-bit YCbCrA 6666;
//        src2_format=2, src2_color_map=4: output 24-bit AYCbCr 6666;
//        src2_format=2, src2_color_map=5: output 24-bit CrCbY  888;
//        src2_format=3, src2_color_map=0: output 32-bit YCbCrA 8888;
//        src2_format=3, src2_color_map=1: output 32-bit AYCbCr 8888;
//        src2_format=3, src2_color_map=2: output 32-bit ACrCbY 8888;
//        src2_format=3, src2_color_map=3: output 32-bit CrCbYA 8888.
//Bit 9:8 src2 format, 00: 8bit, 01:16bit, 10:24bit 11: 32bit
//Bit 7     if true, src1 little endian, otherwise big endian
//Bit 6:3   src1 color_map
//        src1_format=0                 : output 8-bit;
//        src1_format=1, src1_color_map=0: output 4:2:2  (Y0Cb0Y1Cr0);
//        src1_format=1, src1_color_map=1: output 16-bit YCbCr  655;
//        src1_format=1, src1_color_map=2: output 16-bit YCbCr  844;
//        src1_format=1, src1_color_map=3: output 16-bit YCbCrA 6442;
//        src1_format=1, src1_color_map=4: output 16-bit YCbCrA 4444;
//        src1_format=1, src1_color_map=5: output 16-bit YCbCr  565;
//        src1_format=1, src1_color_map=6: output 16-bit AYCbCr 4444;
//        src1_format=1, src1_color_map=7: output 16-bit AYCbCr 1555;
//        src1_format=1, src2_color_map=8: output 16-bit YCbCrA 4642;
//        src1_format=2, src1_color_map=0: output 24-bit YCbCr  888;
//        src1_format=2, src1_color_map=1: output 24-bit YCbCrA 5658;
//        src1_format=2, src1_color_map=2: output 24-bit AYCbCr 8565;
//        src1_format=2, src1_color_map=3: output 24-bit YCbCrA 6666;
//        src1_format=2, src1_color_map=4: output 24-bit AYCbCr 6666;
//        src1_format=2, src1_color_map=5: output 24-bit CrCbY  888;
//        src1_format=2, src1_color_map=14:output 8-bit Y and 16-bit CbCr;
//        src1_format=2, src1_color_map=15:output 8-bit Y and 16-bit CrCb;
//        src1_format=3, src1_color_map=0: output 32-bit YCbCrA 8888;
//        src1_format=3, src1_color_map=1: output 32-bit AYCbCr 8888;
//        src1_format=3, src1_color_map=2: output 32-bit ACrCbY 8888;
//        src1_format=3, src1_color_map=3: output 32-bit CrCbYA 8888.
//Bit 1:0 src1 format, 00: 8bit, 01:16bit/4:2:2, 10:24bit 11: 32bit
#define GE2D_GEN_CTRL2                             ((0x00a2  << 2) + 0xfe04c000)
//Bit 9     if true, all src2 data use default color
//Bit 8     if true, all src1 data use default color
//Bit 7     if true, dst x/y swap
//Bit 6     if true, dst x direction reversely read
//Bit 5     if true, dst y direction reversely read
//Bit 4     if true, src2 x direction reversely read
//Bit 3     if true, src2 y direction reversely read
//Bit 2     if true, src1 x direction reversely read
//Bit 1     if true, src1 y direction reversely read
//Bit 0     cmd write
#define GE2D_CMD_CTRL                              ((0x00a3  << 2) + 0xfe04c000)
//Read only
//Bit 28:17 dst write response counter, for debug only
//Bit 16:7  ge2d_dp status, for debug only
//Bit 6     read src1 cmd ready
//Bit 5     read src2 cmd ready
//Bit 4     pre dpcmd ready
//Bit 3     ge2d dpcmd ready
//Bit 2     ge2d buffer command valid
//Bit 1     ge2d current command valid
//Bit 0     ge2d busy
#define GE2D_STATUS0                               ((0x00a4  << 2) + 0xfe04c000)
//
//Read only
// Bit 29:16 ge2d_dst1_status, for debug only
// Bit    15 ge2d_rd_src2 core.fifo_empty
// Bit    14 ge2d_rd_src2 core.fifo_overflow
// Bit 13:12 ge2d_rd_src2 core.req_st
// Bit    11 ge2d_rd_src2 cmd_if.cmd_err, true if cmd_format=1
// Bit    10 ge2d_rd_src2 cmd_if.cmd_st, 0=IDLE state, 1=BUSY state
// Bit     9 ge2d_rd_src1 luma_core(chroma_core).fifo_empty
// Bit     8 ge2d_rd_src1 luma_core(chroma_core).fifo_overflow
// Bit  7: 6 ge2d_rd_src1 chroma_core.req_st_cr
// Bit  5: 4 ge2d_rd_src1 chroma_core.req_st_cb
// Bit  3: 2 ge2d_rd_src1 luma_core.req_st_y
// Bit     1 ge2d_rd_src1 cmd_if.stat_read_window_err, 1=reading/clipping window setting exceed limit
// Bit     0 ge2d_rd_src1 cmd_if.cmd_st, 0=IDLE state, 1=BUSY state
#define GE2D_STATUS1                               ((0x00a5  << 2) + 0xfe04c000)
//SRC1 default clolor
//{Y,Cb,Cr,A}/{R,G,B,A}
#define GE2D_SRC1_DEF_COLOR                        ((0x00a6  << 2) + 0xfe04c000)
//Bit 31, SRC1 clip x start extra, if true, one more data is read for chroma
//Bit 28:16, SRC1 clip x start
//Bit 15, SRC1 clip x end extra, if true, one more data is read for chroma
//Bit 12:0, SRC1 clip x end
#define GE2D_SRC1_CLIPX_START_END                  ((0x00a7  << 2) + 0xfe04c000)
//Bit 31, SRC1 clip y start extra, if true, one more data is read for chroma
//Bit 28:16, SRC1 clip y start
//Bit 15, SRC1 clip y end extra, if true, one more data is read for chroma
//Bit 12:0, SRC1 clip y end
#define GE2D_SRC1_CLIPY_START_END                  ((0x00a8  << 2) + 0xfe04c000)
//Bit 31:24, SRC1 canvas address0
//Bit 23:16, SRC1 canvas address1
//Bit 15:8, SRC1 canvas address2
#define GE2D_SRC1_CANVAS                           ((0x00a9  << 2) + 0xfe04c000)
//Bit 31, SRC1 x start extra bit1, if true, one more chroma data is read for x even start chroma data when y/c ratio = 2
//             or x even/odd start chroma extra data when y/c ratio = 1
//Bit 30, SRC1 x start extra bit0, if true, one more chroma data is read for x odd start chroma data when y/c ratio = 2
//Bit 29:16, SRC1 x start, signed data
//Bit 15, SRC1 x end extra bit1, if true, one more chroma data is read for x odd end chroma data when y/c ratio = 2
//             or x even/odd end chroma extra data when y/c ratio = 1
//Bit 14, SRC1 x end extra bit0, if true, one more chroma data is read for x even end chroma data when y/c ratio = 2
//Bit 13:0, SRC1 x end, signed data
#define GE2D_SRC1_X_START_END                      ((0x00aa  << 2) + 0xfe04c000)
//Bit 31, SRC1 y start extra, if true, one more chroma data is read for y even start chroma data when y/c ratio = 2
//             or y even/odd start chroma extra data when y/c ratio = 1
//Bit 30, SRC1 y start extra, if true, one more chroma data is read for x odd start chroma data when y/c ratio = 2
//Bit 28:16, SRC1 y start
//Bit 15, SRC1 y end extra bit1, if true, one more chroma data is read for y odd end chroma data when y/c ratio = 2
//             or y even/odd end chroma extra data when y/c ratio = 1
//Bit 14, SRC1 y end extra bit0, if true, one more chroma data is read for y even end chroma data when y/c ratio = 2
//Bit 12:0, SRC1 y end
#define GE2D_SRC1_Y_START_END                      ((0x00ab  << 2) + 0xfe04c000)
// Bit 31: 9 Reserved
// Bit     8 RW, 0 = Write LUT, 1 = Read LUT
// Bit  7: 0 RW, lut_addr
#define GE2D_SRC1_LUT_ADDR                         ((0x00ac  << 2) + 0xfe04c000)
// Bit 31:24 RW, Y or R
// Bit 23:16 RW, Cb or G
// Bit 15: 8 RW, Cr or B
// Bit  7: 0 RW, Alpha
#define GE2D_SRC1_LUT_DAT                          ((0x00ad  << 2) + 0xfe04c000)
//Bit 19, if true, horizontal formatter using repeat to get the pixel, otherwise using interpolation
//Bit 18, horizontal formatter en
//Bit 17, if true, vertical formatter using repeat to get the pixel, otherwise using interpolation
//Bit 16, vertical formatter en
//Bit 15:8 X direction chroma phase,
//          [7:4] for x direction even start/end chroma phase when y/c ratio = 2
//                or start/end even/odd chroma phase  when y/c ratio = 1
//          [3:0] for x direction odd start/end chroma phase only when y/c ration = 2
//Bit 7:0  Y direction chroma phase,
//          [7:4] for y direction even start/end chroma phase when y/c ratio = 2
//          or start/end even/odd chroma phase  when y/c ratio = 1
//          [3:0] for y direction odd start/end chroma phase only when y/c ration = 2
#define GE2D_SRC1_FMT_CTRL                         ((0x00ae  << 2) + 0xfe04c000)
//SRC2 default clolor
//{Y,Cb,Cr,A}/{R,G,B,A}
#define GE2D_SRC2_DEF_COLOR                        ((0x00af  << 2) + 0xfe04c000)
//Bit 28:16, SRC2 clip x start
//Bit 12:0, SRC2 clip x end
#define GE2D_SRC2_CLIPX_START_END                  ((0x00b0  << 2) + 0xfe04c000)
//Bit 28:16, SRC2 clip y start
//Bit 12:0, SRC2 clip y end
#define GE2D_SRC2_CLIPY_START_END                  ((0x00b1  << 2) + 0xfe04c000)
//Bit 28:16, SRC2 x start
//Bit 12:0, SRC2 x end
#define GE2D_SRC2_X_START_END                      ((0x00b2  << 2) + 0xfe04c000)
//Bit 28:16, SRC2 y start
//Bit 12:0, SRC2 y end
#define GE2D_SRC2_Y_START_END                      ((0x00b3  << 2) + 0xfe04c000)
//Bit 28:16, DST clip x start
//Bit 12:0, DST clip x end
#define GE2D_DST_CLIPX_START_END                   ((0x00b4  << 2) + 0xfe04c000)
//
//Bit 28:16, DST clip y start
//Bit 12:0, DST clip y end
#define GE2D_DST_CLIPY_START_END                   ((0x00b5  << 2) + 0xfe04c000)
//Bit 28:16, DST x start
//Bit 12:0, DST x end
#define GE2D_DST_X_START_END                       ((0x00b6  << 2) + 0xfe04c000)
//
//Bit 28:16, DST x start
//Bit 12:0, DST x end
#define GE2D_DST_Y_START_END                       ((0x00b7  << 2) + 0xfe04c000)
//Bit 23:16 DST2 canvas address
//Bit 15:8 SRC2 canvas address
//Bit 7:0 DST1 canvas address
#define GE2D_SRC2_DST_CANVAS                       ((0x00b8  << 2) + 0xfe04c000)
//vertical scaler phase step
//Bit 28:0,  5.24 format
#define GE2D_VSC_START_PHASE_STEP                  ((0x00b9  << 2) + 0xfe04c000)
//phase slope
//Bit 24:0, bit 24 signed bit
#define GE2D_VSC_PHASE_SLOPE                       ((0x00ba  << 2) + 0xfe04c000)
//Bit 30:29, vertical repeat line0 number
//Bit 23:0, vertical scaler initial phase
#define GE2D_VSC_INI_CTRL                          ((0x00bb  << 2) + 0xfe04c000)
//horizontal scaler phase step
//Bit 28:0,  5.24 format
#define GE2D_HSC_START_PHASE_STEP                  ((0x00bc  << 2) + 0xfe04c000)
//phase slope
//Bit 24:0, bit 24 signed bit
#define GE2D_HSC_PHASE_SLOPE                       ((0x00bd  << 2) + 0xfe04c000)
//Bit 30:29, horizontal repeat line0 number
//Bit 23:0, horizontal scaler initial phase
#define GE2D_HSC_INI_CTRL                          ((0x00be  << 2) + 0xfe04c000)
//Bit 31:24, advance number in this round, if horizontal scaler is working on dividing mode
//Bit 23:0, horizontal scaler advance phase in this round, if horizontal scaler is working on dividing mode
#define GE2D_HSC_ADV_CTRL                          ((0x00bf  << 2) + 0xfe04c000)
//Bit 30, vertical nearest mode enable, must set vt_bank_length = 4
//Bit 29, horizontal nearest mode enable, must set hz_bank_length = 4
//Bit 28, horizontal scaler dividing mode enable
//Bit 27:15, horizontal dividing length, if bit 28 is enable
//Bit 14, pre horizontal scaler enable
//Bit 13, pre vertical scale enable
//Bit 12, vertical scale enable
//Bit 11, horizontal scaler enable
//Bit 9, if true, treat horizontal repeat line number(GE2D_HSC_INI_CTRL bit 30:29) as repeating line,
//        otherwise using treat horizontal repeat line number as minus line number.
//Bit 8, if true, treat vertical repeat line number(GE2D_VSC_INI_CTRL bit 30:29) as repeating line,
//        otherwise using treat vertical repeat line number as minus line number.
//Bit 7, if true, always use phase0 in vertical scaler
//Bit 6:4, vertical scaler bank length
//Bit 3, if true, always use phase0 in horizontal scaler
//Bit 2:0, horizontal scaler bank length
#define GE2D_SC_MISC_CTRL                          ((0x00c0  << 2) + 0xfe04c000)
//Read only
//vertical scaler next round integer pixel pointer, signed data
//Bit 13:0
#define GE2D_VSC_NRND_POINT                        ((0x00c1  << 2) + 0xfe04c000)
//Read only
//vertical scaler next round phase
//bit 23:0
#define GE2D_VSC_NRND_PHASE                        ((0x00c2  << 2) + 0xfe04c000)
//Read only
//horizontal scaler next round integer pixel pointer, signed data
//Bit 13:0
#define GE2D_HSC_NRND_POINT                        ((0x00c3  << 2) + 0xfe04c000)
//Read only
//horizontal scaler next round phase
//bit 23:0
#define GE2D_HSC_NRND_PHASE                        ((0x00c4  << 2) + 0xfe04c000)
//
//Bit 28:20, pre_offset0
//Bit 18:10, pre_offset1
//Bit 8:0,   pre_offset2
#define GE2D_MATRIX_PRE_OFFSET                     ((0x00c5  << 2) + 0xfe04c000)
//Bit 28:16 coef00
//Bit 12:0  coef01
#define GE2D_MATRIX_COEF00_01                      ((0x00c6  << 2) + 0xfe04c000)
//Bit 28:16 coef02
//Bit 12:0  coef10
#define GE2D_MATRIX_COEF02_10                      ((0x00c7  << 2) + 0xfe04c000)
//Bit 28:16 coef11
//Bit 12:0  coef12
#define GE2D_MATRIX_COEF11_12                      ((0x00c8  << 2) + 0xfe04c000)
//Bit 28:16 coef20
//Bit 12:0  coef21
#define GE2D_MATRIX_COEF20_21                      ((0x00c9  << 2) + 0xfe04c000)
//Bit 28:16 coef22
//Bit 7    input y/cb/cr saturation enable
//Bit 0    conversion matrix enable
#define GE2D_MATRIX_COEF22_CTRL                    ((0x00ca  << 2) + 0xfe04c000)
//Bit 28:20, offset0
//Bit 18:10, offset1
//Bit 8:0,   offset2
#define GE2D_MATRIX_OFFSET                         ((0x00cb  << 2) + 0xfe04c000)
//Bit 26:25, SRC1 color multiplier alpha selection
//           if 00, Cs = Csr
//           if 01, Cs = Csr * Asr * Ag (if source is not premultiplied)
//           if 10, Cs = Csr * Ag (if source is premultipied)
//Bit 24    SRC2 color multiplier alpha selection
//          if 0, no multiplier, Cd = Cdr,  otherwise, Cd = Cdr * Ad.
//Bit 22:12 ALU color operation
//          bit10:8 Blending Mode Parameter
//            3'b000: ADD               Cs*Fs + Cd*Fd
//            3'b001: SUBTRACT          Cs*Fs - Cd*Fd
//            3'b010: REVERSE SUBTRACT  Cd*Fd - Cs*Fs
//            3'b011: MIN               min(Cs*Fs, Cd*Fd)
//            3'b100: MAX               max(Cs*Fs, Cd*Fd)
//            3'b101: LOGIC OP          Cs op Cd
//          bit7:4 Source Color Blending Factor CFs
//            4'b0000: ZERO                        0
//            4'b0001: ONE                         1
//            4'b0010: SRC_COLOR                   Cs(RGBs)
//            4'b0011: ONE_MINUS_SRC_COLOR         1 - Cs(RGBs)
//            4'b0100: DST_COLOR                   Cd(RGBd)
//            4'b0101: ONE_MINUS_DST_COLOR         1 - Cd(RGBd)
//            4'b0110: SRC_ALPHA                   As
//            4'b0111: ONE_MINUS_SRC_ALPHA         1 - As
//            4'b1000: DST_ALPHA                   Ad
//            4'b1001: ONE_MINUS_DST_ALPHA         1 - Ad
//            4'b1010: CONST_COLOR                 Cc(RGBc)
//            4'b1011: ONE_MINUS_CONST_COLOR       1 - Cc(RGBc)
//            4'b1100: CONST_ALPHA                 Ac
//            4'b1101: ONE_MINUS_CONST_ALPHA       1 - Ac
//            4'b1110: SRC_ALPHA_SATURATE          min(As,1-Ad)
//          bit3:0 dest Color Blending Factor CFd, when bit10:8 != LOGIC OP
//            4'b0000: ZERO                        0
//            4'b0001: ONE                         1
//            4'b0010: SRC_COLOR                   Cs(RGBs)
//            4'b0011: ONE_MINUS_SRC_COLOR         1 - Cs(RGBs)
//            4'b0100: DST_COLOR                   Cd(RGBd)
//            4'b0101: ONE_MINUS_DST_COLOR         1 - Cd(RGBd)
//            4'b0110: SRC_ALPHA                   As
//            4'b0111: ONE_MINUS_SRC_ALPHA         1 - As
//            4'b1000: DST_ALPHA                   Ad
//            4'b1001: ONE_MINUS_DST_ALPHA         1 - Ad
//            4'b1010: CONST_COLOR                 Cc(RGBc)
//            4'b1011: ONE_MINUS_CONST_COLOR       1 - Cc(RGBc)
//            4'b1100: CONST_ALPHA                 Ac
//            4'b1101: ONE_MINUS_CONST_ALPHA       1 - Ac
//            4'b1110: SRC_ALPHA_SATURATE          min(As,1-Ad)
//          bit3:0 logic operations, when bit10:8 == LOGIC OP
//            4'b0000: CLEAR                       0
//            4'b0001: COPY                        s
//            4'b0010: NOOP                        d
//            4'b0011: SET                         1
//            4'b0100: COPY_INVERT                 ~s
//            4'b0101: INVERT                      ~d
//            4'b0110: AND_REVERSE                 s & ~d
//            4'b0111: OR_REVERSE                  s | ~d
//            4'b1000: AND                         s & d
//            4'b1001: OR                          s | d
//            4'b1010: NAND                        ~(s & d)
//            4'b1011: NOR                         ~(s | d)
//            4'b1100: XOR                         s ^ d
//            4'b1101: EQUIV                       ~(s ^ d)
//            4'b1110: AND_INVERTED                ~s & d
//            4'b1111: OR_INVERTED                 ~s | d
//Bit 10:0  ALU alpha operation
//            bit10:8 Blending Equation Math Operation
//              3'b000: ADD               As*Fs + Ad*Fd
//              3'b001: SUBTRACT          As*Fs - Ad*Fd
//              3'b010: REVERSE SUBTRACT  Ad*Fd - As*Fs
//              3'b011: MIN               min(As*Fs, Ad*Fd)
//              3'b100: MAX               max(As*Fs, Ad*Fd)
//              3'b101: LOGIC OP          As op Ad
//            bit7:4 Source alpha Blending Factor AFs
//              4'b0000                       0
//              4'b0001                       1
//              4'b0010                       As
//              4'b0011                       1 - As
//              4'b0100                       Ad
//              4'b0101                       1 - Ad
//              4'b0110                       Ac
//              4'b0111                       1 - Ac
//               ....                         reserved
//            bit3:0 Destination alpha Blending Factor AFd, when bit10:8 != LOGIC OP
//              4'b0000                       0
//              4'b0001                       1
//              4'b0010                       As
//              4'b0011                       1 - As
//              4'b0100                       Ad
//              4'b0101                       1 - Ad
//              4'b0110                       Ac
//              4'b0111                       1 - Ac
//               ....                         reserved
//            bit3:0 logic operations, when bit10:8 == LOGIC OP
//              4'b0000: CLEAR                       0
//              4'b0001: COPY                        s
//              4'b0010: NOOP                        d
//              4'b0011: SET                         1
//              4'b0100: COPY_INVERT                 ~s
//              4'b0101: INVERT                      ~d
//              4'b0110: AND_REVERSE                 s & ~d
//              4'b0111: OR_REVERSE                  s | ~d
//              4'b1000: AND                         s & d
//              4'b1001: OR                          s | d
//              4'b1010: NAND                        ~(s & d)
//              4'b1011: NOR                         ~(s | d)
//              4'b1100: XOR                         s ^ d
//              4'b1101: EQUIV                       ~(s ^ d)
//              4'b1110: AND_INVERTED                ~s & d
//              4'b1111: OR_INVERTED                 ~s | d
#define GE2D_ALU_OP_CTRL                           ((0x00cc  << 2) + 0xfe04c000)
//bit 31:0 (RGBA,YCBCRA)
#define GE2D_ALU_CONST_COLOR                       ((0x00cd  << 2) + 0xfe04c000)
//SRC1 Key
//31:0
#define GE2D_SRC1_KEY                              ((0x00ce  << 2) + 0xfe04c000)
//SRC1 Key Mask
//31:0
#define GE2D_SRC1_KEY_MASK                         ((0x00cf  << 2) + 0xfe04c000)
//SRC2 Key
//31:0
#define GE2D_SRC2_KEY                              ((0x00d0  << 2) + 0xfe04c000)
//SRC2 Key Mask
//31:0
#define GE2D_SRC2_KEY_MASK                         ((0x00d1  << 2) + 0xfe04c000)
//Destination Bit Mask
//31:0
#define GE2D_DST_BITMASK                           ((0x00d2  << 2) + 0xfe04c000)
//Bit 31    DP onoff mode, 0: on_counter means how many pixels will output before ge2d turns off
//                         1: on_counter means how many clocks will ge2d turn on before ge2d turns off
//Bit 30:16     DP on counter
//Bit 15        0: vd_format doesnt have onoff mode, 1: vd format has onoff mode
//Bit 14:0      DP off counter
#define GE2D_DP_ONOFF_CTRL                         ((0x00d3  << 2) + 0xfe04c000)
//Because there are many coefficients used in the vertical filter and horizontal filters,
//indirect access the coefficients of vertical filter and horizontal filter is used.
//For vertical filter, there are 33x4 coefficients
//For horizontal filter, there are 33x4 coefficients
//Bit 15	index increment, if bit9 == 1  then (0: index increase 1, 1: index increase 2) else (index increase 2)
//Bit 14	1: read coef through cbus enable, just for debug purpose in case when we wanna check the coef in ram in correct or not
//Bit 9     if true, use 9bit resolution coef, other use 8bit resolution coef
//Bit 8	    type of index, 0: vertical coef
//						   1: horizontal coef
//Bit 6:0 	coef index
#define GE2D_SCALE_COEF_IDX                        ((0x00d4  << 2) + 0xfe04c000)
//coefficients for vertical filter and horizontal filter
#define GE2D_SCALE_COEF                            ((0x00d5  << 2) + 0xfe04c000)
//Bit 24    src2 alpha fill mode: together with GE2D_GEN_CTRL0[4](fill_mode), define what alpha values are used
//                                for the area outside the clipping window. As below:
//                                fill_mode=0, alpha_fill_mode=0 : use inner alpha, (or default_alpha if src data have no alpha values);
//                                fill_mode=0, alpha_fill_mode=1 : use outside_alpha;
//                                fill_mode=1, alpha_fill_mode=0 : use default_alpha;
//                                fill_mode=1, alpha_fill_mode=1 : use outside_alpha.
//Bit 23:16 src2 outside alpha
//Bit 8     src1 alpha fill mode, refer to src2 alpha fill mode above.
//Bit 7:0   src1 outside alpha
#define GE2D_SRC_OUTSIDE_ALPHA                     ((0x00d6  << 2) + 0xfe04c000)
//Bit 31       antiflick enable
//Bit 24       1: alpha value for the first line use repeated alpha, 0: use bit 23:16 as the first line alpha
//Bit 23:16     register value for the first line alpha when bit 24 is 1
//Bit 8        1: alpha value for the last line use repeated alpha, 0: use bit 7:0 as the last line alpha
//Bit 7:0      register value for the last line alpha when bit 8 is 1
#define GE2D_ANTIFLICK_CTRL0                       ((0x00d8  << 2) + 0xfe04c000)
//Bit 25,    rgb_sel, 1: antiflick RGBA, 0: antiflick YCbCrA
//Bit 24,    cbcr_en, 1: also filter cbcr in case of antiflicking YCbCrA, 0: no filter on cbcr in case of antiflicking YCbCrA
//Bit 23:16, R mult coef for converting RGB to Y
//Bit 15:8,  G mult coef for converting RGB to Y
//Bit 7:0,   B mult coef for converting RGB to Y
//Y = (R * y_r + G * y_g + B * y_b) / 256
#define GE2D_ANTIFLICK_CTRL1                       ((0x00d9  << 2) + 0xfe04c000)
//Bit 31:24, Y threshold1, when   0<Y<=th1, use filter0;
//Bit 23:16, color antiflick filter0 n3
//Bit 15:8,  color antiflick filter0 n2
//Bit 7:0,   color antiflick filter0 n1
//Y = (line_up * n1 + line_center * n2 + line_dn * n3) / 128
#define GE2D_ANTIFLICK_COLOR_FILT0                 ((0x00da  << 2) + 0xfe04c000)
//Bit 31:24, Y threshold2, when th1<Y<=th2, use filter1;
//Bit 23:16, color antiflick filter1 n3
//Bit 15:8,  color antiflick filter1 n2
//Bit 7:0,   color antiflick filter1 n1
#define GE2D_ANTIFLICK_COLOR_FILT1                 ((0x00db  << 2) + 0xfe04c000)
//Bit 31:24, Y threshold3, when th2<Y<=th3, use filter2; Y>th3, use filter3
//Bit 23:16, color antiflick filter2 n3
//Bit 15:8,  color antiflick filter2 n2
//Bit 7:0,   color antiflick filter2 n1
#define GE2D_ANTIFLICK_COLOR_FILT2                 ((0x00dc  << 2) + 0xfe04c000)
//Bit 23:16, color antiflick filter3 n3
//Bit 15:8,  color antiflick filter3 n2
//Bit 7:0,   color antiflick filter3 n1
#define GE2D_ANTIFLICK_COLOR_FILT3                 ((0x00dd  << 2) + 0xfe04c000)
//Bit 31:24, Alpha threshold1, when   0<Alpha<=th1, use filter0;
//Bit 23:16, Alpha antiflick filter0 n3
//Bit 15:8,  Alpha antiflick filter0 n2
//Bit 7:0,   Alpha antiflick filter0 n1
//Alpha = (line_up * n1 + line_center * n2 + line_dn * n3) / 128
#define GE2D_ANTIFLICK_ALPHA_FILT0                 ((0x00de  << 2) + 0xfe04c000)
//Bit 31:24, Alpha threshold2, when th1<Alpha<=th2, use filter1;
//Bit 23:16, Alpha antiflick filter1 n3
//Bit 15:8,  Alpha antiflick filter1 n2
//Bit 7:0,   Alpha antiflick filter1 n1
#define GE2D_ANTIFLICK_ALPHA_FILT1                 ((0x00df  << 2) + 0xfe04c000)
//Bit 31:24, Alpha threshold3, when th2<Alpha<=th3, use filter2; Alpha>th3, use filter3
//Bit 23:16, Alpha antiflick filter2 n3
//Bit 15:8,  Alpha antiflick filter2 n2
//Bit 7:0,   Alpha antiflick filter2 n1
#define GE2D_ANTIFLICK_ALPHA_FILT2                 ((0x00e0  << 2) + 0xfe04c000)
//Bit 23:16, Alpha antiflick filter3 n3
//Bit 15:8,  Alpha antiflick filter3 n2
//Bit 7:0,   Alpha antiflick filter3 n1
#define GE2D_ANTIFLICK_ALPHA_FILT3                 ((0x00e1  << 2) + 0xfe04c000)
//dout = clipto_0_255(((din + din_offset) * map_coef + ((1 << (map_sr - 1))) >> map_sr + dout_offset)
//Bit 30:22 din_offset (signed data)
//Bit 21:14 map_coef (unsigned data)
//Bit 13:10 map_sr (unsigned data)
//Bit 9:1   dout_offset (signed data)
//Bit 0     enable
#define GE2D_SRC1_RANGE_MAP_Y_CTRL                 ((0x00e3  << 2) + 0xfe04c000)
//dout = clipto_0_255(((din + din_offset) * map_coef + ((1 << (map_sr - 1))) >> map_sr + dout_offset)
//Bit 30:22 din_offset (signed data)
//Bit 21:14 map_coef (unsigned data)
//Bit 13:10 map_sr (unsigned data)
//Bit 9:1   dout_offset (signed data)
//Bit 0     enable
#define GE2D_SRC1_RANGE_MAP_CB_CTRL                ((0x00e4  << 2) + 0xfe04c000)
//dout = clipto_0_255(((din + din_offset) * map_coef + ((1 << (map_sr - 1))) >> map_sr + dout_offset)
//Bit 30:22 din_offset (signed data)
//Bit 21:14 map_coef (unsigned data)
//Bit 13:10 map_sr (unsigned data)
//Bit 9:1   dout_offset (signed data)
//Bit 0     enable
#define GE2D_SRC1_RANGE_MAP_CR_CTRL                ((0x00e5  << 2) + 0xfe04c000)
//Bit 21:16     src1 prearbitor burst number
//Bit 13:8      src2 prearbitor burst number
//Bit 5:0       dst prearbitor burst number
#define GE2D_ARB_BURST_NUM                         ((0x00e6  << 2) + 0xfe04c000)
//each 6bit ID, high 4bit are thread ID, low 2bits are the token
//Bit 21:16 src1 ID
//Bit 13:8 src2 ID
//Bit 5:0  dst ID
#define GE2D_TID_TOKEN                             ((0x00e7  << 2) + 0xfe04c000)
//Bit 31:28 dst2_bytemask_val. 1-bit mask for each byte (8-bit). Applicable only if both dst_bitmask_en=1 and dst_bytemask_only=1.
//Bit 27:26, dst2 picture struct, 00: frame, 10:top, 11: bottom
//Bit 25:24, dst2 8bit mode component selection,
//            00: select Y(R), 01: Cb(G), 10: Cr(B), 11: Alpha
//Bit 22:19 dst2 color_map
//        dst2_format=0                  : output 8-bit;
//        dst2_format=1, dst2_color_map=1: output 16-bit YCbCr  655;
//        dst2_format=1, dst2_color_map=2: output 16-bit YCbCr  844;
//        dst2_format=1, dst2_color_map=3: output 16-bit YCbCrA 6442;
//        dst2_format=1, dst2_color_map=4: output 16-bit YCbCrA 4444;
//        dst2_format=1, dst2_color_map=5: output 16-bit YCbCr  565;
//        dst2_format=1, dst2_color_map=6: output 16-bit AYCbCr 4444;
//        dst2_format=1, dst2_color_map=7: output 16-bit AYCbCr 1555;
//        dst2_format=1, dst2_color_map=8: output 16-bit YCbCrA 4642;
//        dst2_format=1, dst2_color_map=9: output 16-bit CbCr   88;
//        dst2_format=1, dst2_color_map=10:output 16-bit CrCb   88;
//        dst2_format=2, dst2_color_map=0: output 24-bit YCbCr  888;
//        dst2_format=2, dst2_color_map=1: output 24-bit YCbCrA 5658;
//        dst2_format=2, dst2_color_map=2: output 24-bit AYCbCr 8565;
//        dst2_format=2, dst2_color_map=3: output 24-bit YCbCrA 6666;
//        dst2_format=2, dst2_color_map=4: output 24-bit AYCbCr 6666;
//        dst2_format=2, dst2_color_map=5: output 24-bit CrCbY  888;
//        dst2_format=3, dst2_color_map=0: output 32-bit YCbCrA 8888;
//        dst2_format=3, dst2_color_map=1: output 32-bit AYCbCr 8888;
//        dst2_format=3, dst2_color_map=2: output 32-bit ACrCbY 8888;
//        dst2_format=3, dst2_color_map=3: output 32-bit CrCbYA 8888.
//Bit 17:16 dst2_format,  00: 8bit, 01:16bit, 10:24bit, 11: 32bit
//Bit 15     reserved
//Bit 14     dst2_color_round_mode, 0: truncate, 1: + 0.5 rounding
//Bit 13:12, dst2_x_discard_mode. 00: no discard; 10=discard even x; 11=discard odd x. Note: x is post reverse/rotation.
//Bit 11:10, dst2_y_discard_mode. 00: no discard; 10=discard even y; 11=discard odd y. Note: y is post reverse/rotation.
//Bit     9 reserved
//Bit     8, dst2_enable. 0: disable dst2 (default); 1=enable dst2.
//Bit  7: 6 reserved
//Bit  5: 4, dst1_x_discard_mode. 00: no discard; 10=discard even x; 11=discard odd x. Note: x is post reverse/rotation.
//Bit  3: 2, dst1_y_discard_mode. 00: no discard; 10=discard even y; 11=discard odd y. Note: y is post reverse/rotation.
//Bit     1 reserved
//Bit     0, dst1_enable. 0: disable dst1; 1=enable dst1 (default).
#define GE2D_GEN_CTRL3                             ((0x00e8  << 2) + 0xfe04c000)
//Read only
// Bit 13:0 ge2d_dst2_status, for debug only
#define GE2D_STATUS2                               ((0x00e9  << 2) + 0xfe04c000)
//Bit 27:26  src1 Y fifo size control, 00: 512, 01: 256, 10: 128 11: 96
//Bit 25:24  src2 fifo size control, 00: 512, 01: 256, 10: 128 11: 96
//Bit 23:22  dst1 fifo size control, 00: 512, 01: 256, 10: 128 11: 64
//Bit 21:20  dst2 fifo size control, 00: 512, 01: 256, 10: 128 11: 64
//Bit 19:18, dst1 fifo burst control, 00: 24x64, 01: 32x64, 10: 48x64, 11:64x64
//Bit 17:16, dst2 fifo burst control, 00: 24x64, 01: 32x64, 10: 48x64, 11:64x64
//Bit 15:1, top_wrap_ctrl
//bit 0, if true, disable bug fix about the dp_out_done/scale_out_done(test1823) hang issue when scaling down ratio is high.
#define GE2D_GEN_CTRL4                             ((0x00ea  << 2) + 0xfe04c000)
#define GE2D_GCLK_CTRL0                            ((0x00ef  << 2) + 0xfe04c000)
#define GE2D_GCLK_CTRL1                            ((0x00f0  << 2) + 0xfe04c000)
#define GE2D_GEN_CTRL5                             ((0x00f1  << 2) + 0xfe04c000)
//Bit 28:20, pre_offset0
//Bit 18:10, pre_offset1
//Bit 8:0,   pre_offset2
#define GE2D_MATRIX2_PRE_OFFSET                    ((0x0090  << 2) + 0xfe04c000)
//Bit 28:16 coef00
//Bit 12:0  coef01
#define GE2D_MATRIX2_COEF00_01                     ((0x0091  << 2) + 0xfe04c000)
//Bit 28:16 coef02
//Bit 12:0  coef10
#define GE2D_MATRIX2_COEF02_10                     ((0x0092  << 2) + 0xfe04c000)
//Bit 28:16 coef11
//Bit 12:0  coef12
#define GE2D_MATRIX2_COEF11_12                     ((0x0093  << 2) + 0xfe04c000)
//Bit 28:16 coef20
//Bit 12:0  coef21
#define GE2D_MATRIX2_COEF20_21                     ((0x0094  << 2) + 0xfe04c000)
//Bit 28:16 coef22
//Bit 7    input y/cb/cr saturation enable
//Bit 0    conversion matrix enable
#define GE2D_MATRIX2_COEF22_CTRL                   ((0x0095  << 2) + 0xfe04c000)
//Bit 28:20, offset0
//Bit 18:10, offset1
//Bit 8:0,   offset2
#define GE2D_MATRIX2_OFFSET                        ((0x0096  << 2) + 0xfe04c000)
//Bit 19:0, src2 stride size in 64bits
//
//
//Bit 28:20, pre_offset0
//Bit 18:10, pre_offset1
//Bit 8:0,   pre_offset2
#define GE2D_MATRIX3_PRE_OFFSET                    ((0x0097  << 2) + 0xfe04c000)
//Bit 28:16 coef00
//Bit 12:0  coef01
#define GE2D_MATRIX3_COEF00_01                     ((0x0098  << 2) + 0xfe04c000)
//Bit 28:16 coef02
//Bit 12:0  coef10
#define GE2D_MATRIX3_COEF02_10                     ((0x0099  << 2) + 0xfe04c000)
//Bit 28:16 coef11
//Bit 12:0  coef12
#define GE2D_MATRIX3_COEF11_12                     ((0x009a  << 2) + 0xfe04c000)
//Bit 28:16 coef20
//Bit 12:0  coef21
#define GE2D_MATRIX3_COEF20_21                     ((0x009b  << 2) + 0xfe04c000)
//Bit 28:16 coef22
//Bit 7    input y/cb/cr saturation enable
//Bit 0    conversion matrix enable
#define GE2D_MATRIX3_COEF22_CTRL                   ((0x009c  << 2) + 0xfe04c000)
//Bit 28:20, offset0
//Bit 18:10, offset1
//Bit 8:0,   offset2
#define GE2D_MATRIX3_OFFSET                        ((0x009d  << 2) + 0xfe04c000)
// synopsys translate_off
// synopsys translate_on
//
// Closing file:  ./ge2d_regs.h
//
#include "fixme.h"
#endif // REGISTER_H

